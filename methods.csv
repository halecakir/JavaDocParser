,url,api,class,method,description
0,Bolts-Android/bolts,bolts,Class AggregateException,"public AggregateException(java.lang.String detailMessage, java.lang.Throwable[] innerThrowables)","Constructs a new AggregateException with the current stack trace, the specified detail message and with references to the inner throwables that are the cause of this exception."
1,Bolts-Android/bolts,bolts,Class AggregateException,"public AggregateException(java.lang.String detailMessage, java.util.List<? extends java.lang.Throwable> innerThrowables)","Constructs a new AggregateException with the current stack trace, the specified detail message and with references to the inner throwables that are the cause of this exception."
2,Bolts-Android/bolts,bolts,Class AggregateException,public java.util.List<java.lang.Throwable> getInnerThrowables(),Returns a read-only List of the Throwable instances that caused the current exception.
3,Bolts-Android/bolts,bolts,Class AggregateException,public void printStackTrace(java.io.PrintStream err),
4,Bolts-Android/bolts,bolts,Class AggregateException,public void printStackTrace(java.io.PrintWriter err),
5,Bolts-Android/bolts,bolts,Class AggregateException,@Deprecatedpublic java.util.List<java.lang.Exception> getErrors(),Deprecated. Please use getInnerThrowables() instead.
6,Bolts-Android/bolts,bolts,Class AppLink,public android.net.Uri getSourceUrl(),
7,Bolts-Android/bolts,bolts,Class AppLink,public java.util.List<AppLink.Target> getTargets(),
8,Bolts-Android/bolts,bolts,Class AppLink.Target,public android.net.Uri getUrl(),
9,Bolts-Android/bolts,bolts,Class AppLink.Target,public java.lang.String getAppName(),
10,Bolts-Android/bolts,bolts,Class AppLink.Target,public java.lang.String getClassName(),
11,Bolts-Android/bolts,bolts,Class AppLinkNavigation,public AppLink getAppLink(),
12,Bolts-Android/bolts,bolts,Class AppLinkNavigation,public android.os.Bundle getAppLinkData(),"Gets the al_applink_data for the AppLinkNavigation. This will generally contain data common to navigation attempts such as back-links, user agents, and other information that may be used in routing and handling an App Link request."
13,Bolts-Android/bolts,bolts,Class AppLinkNavigation,public android.os.Bundle getExtras(),"The extras for the AppLinkNavigation. This will generally contain application-specific data that should be passed along with the request, such as advertiser or affiliate IDs or other such metadata relevant on this device."
14,Bolts-Android/bolts,bolts,Class AppLinkNavigation,public AppLinkNavigation.NavigationResult navigate(android.content.Context context),Performs the navigation.
15,Bolts-Android/bolts,bolts,Class AppLinkNavigation,public static void setDefaultResolver(AppLinkResolver resolver),"Sets the default resolver to be used for App Link resolution. Setting this to null will cause the navigateInBackground(Context, Uri) methods to use the basic, built-in resolver provided by Bolts."
16,Bolts-Android/bolts,bolts,Class AppLinkNavigation,public static AppLinkResolver getDefaultResolver(),"Gets the default resolver to be used for App Link resolution. If the developer has not set a default resolver, this will return null, but the basic, built-in resolver provided by Bolts will be used."
17,Bolts-Android/bolts,bolts,Class AppLinkNavigation,"public static AppLinkNavigation.NavigationResult navigate(android.content.Context context, AppLink appLink)",Navigates to an AppLink.
18,Bolts-Android/bolts,bolts,Class AppLinkNavigation,"public static Task<AppLinkNavigation.NavigationResult> navigateInBackground(android.content.Context context, android.net.Uri destination, AppLinkResolver resolver)",Navigates to an AppLink for the given destination using the App Link resolution strategy specified.
19,Bolts-Android/bolts,bolts,Class AppLinkNavigation,"public static Task<AppLinkNavigation.NavigationResult> navigateInBackground(android.content.Context context, java.net.URL destination, AppLinkResolver resolver)",Navigates to an AppLink for the given destination using the App Link resolution strategy specified.
20,Bolts-Android/bolts,bolts,Class AppLinkNavigation,"public static Task<AppLinkNavigation.NavigationResult> navigateInBackground(android.content.Context context, java.lang.String destinationUrl, AppLinkResolver resolver)",Navigates to an AppLink for the given destination using the App Link resolution strategy specified.
21,Bolts-Android/bolts,bolts,Class AppLinkNavigation,"public static Task<AppLinkNavigation.NavigationResult> navigateInBackground(android.content.Context context, android.net.Uri destination)",Navigates to an AppLink for the given destination using the default App Link resolution strategy.
22,Bolts-Android/bolts,bolts,Class AppLinkNavigation,"public static Task<AppLinkNavigation.NavigationResult> navigateInBackground(android.content.Context context, java.net.URL destination)",Navigates to an AppLink for the given destination using the default App Link resolution strategy.
23,Bolts-Android/bolts,bolts,Enum AppLinkNavigation.NavigationResult,public static final AppLinkNavigation.NavigationResult FAILED,Indicates that the navigation failed and no app was opened.
24,Bolts-Android/bolts,bolts,Enum AppLinkNavigation.NavigationResult,public static final AppLinkNavigation.NavigationResult WEB,Indicates that the navigation succeeded by opening the URL in the browser.
25,Bolts-Android/bolts,bolts,Enum AppLinkNavigation.NavigationResult,public static AppLinkNavigation.NavigationResult[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (AppLinkNavigation.NavigationResult c : AppLinkNavigation.NavigationResult.values())  System.out.println(c);"
26,Bolts-Android/bolts,bolts,Enum AppLinkNavigation.NavigationResult,public static AppLinkNavigation.NavigationResult valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.The string must match exactly an identifier used to declare anenum constant in this type. (Extraneous whitespace characters are not permitted.)
27,Bolts-Android/bolts,bolts,Enum AppLinkNavigation.NavigationResult,public java.lang.String getCode(),
28,Bolts-Android/bolts,bolts,Class AppLinks,public static android.os.Bundle getAppLinkData(android.content.Intent intent),"Gets the App Link data for an intent, if there is any. This is the authorized function to check if an intent is AppLink. If null is returned it is not."
29,Bolts-Android/bolts,bolts,Class AppLinks,public static android.os.Bundle getAppLinkExtras(android.content.Intent intent),"Gets the App Link extras for an intent, if there is any."
30,Bolts-Android/bolts,bolts,Class AppLinks,public static android.net.Uri getTargetUrl(android.content.Intent intent),"Gets the target URL for an intent, regardless of whether the intent is from an App Link. If the intent is from an App Link, this will be the App Link target. Otherwise, it will be the data Uri from the intent itself."
31,Bolts-Android/bolts,bolts,Class CancellationToken,public boolean isCancellationRequested(),
32,Bolts-Android/bolts,bolts,Class CancellationToken,public CancellationTokenRegistration register(java.lang.Runnable action),"Registers a runnable that will be called when this CancellationToken is canceled. If this token is already in the canceled state, the runnable will be run immediately and synchronously."
33,Bolts-Android/bolts,bolts,Class CancellationToken,public void throwIfCancellationRequested() throws java.util.concurrent.CancellationException,
34,Bolts-Android/bolts,bolts,Class CancellationTokenSource,public boolean isCancellationRequested(),
35,Bolts-Android/bolts,bolts,Class CancellationTokenSource,public CancellationToken getToken(),
36,Bolts-Android/bolts,bolts,Class CancellationTokenSource,public void cancel(),Cancels the token if it has not already been cancelled.
37,Bolts-Android/bolts,bolts,Class CancellationTokenSource,public void cancelAfter(long delay),Schedules a cancel operation on this CancellationTokenSource after the specified number of milliseconds.
38,Bolts-Android/bolts,bolts,Class CancellationTokenSource,public void close(),
39,Bolts-Android/bolts,bolts,Class Capture<T>,public Capture(),
40,Bolts-Android/bolts,bolts,Class Capture<T>,public T get(),
41,Bolts-Android/bolts,bolts,Class MeasurementEvent,public static final java.lang.String MEASUREMENT_EVENT_NOTIFICATION_NAME,The action of the broadcast intent that represents Bolts measurement event.
42,Bolts-Android/bolts,bolts,Class MeasurementEvent,public static final java.lang.String MEASUREMENT_EVENT_NAME_KEY,The field name in the broadcast intent extra bundle that represents Bolts measurement event name.
43,Bolts-Android/bolts,bolts,Class MeasurementEvent,public static final java.lang.String MEASUREMENT_EVENT_ARGS_KEY,The field name in the broadcast intent extra bundle that represents Bolts measurement event arguments.
44,Bolts-Android/bolts,bolts,Class MeasurementEvent,public static final java.lang.String APP_LINK_NAVIGATE_OUT_EVENT_NAME,"The name for event of navigating out to other apps. Event raised in navigation methods, e.g. AppLinkNavigation.navigateInBackground(Context, String)"
45,Bolts-Android/bolts,bolts,Class Task<TResult>,public static final java.util.concurrent.ExecutorService BACKGROUND_EXECUTOR,An Executor that executes tasks in parallel.
46,Bolts-Android/bolts,bolts,Class Task<TResult>,public static Task.UnobservedExceptionHandler getUnobservedExceptionHandler(),Returns the handler invoked when a task has an unobserved exception or null.
47,Bolts-Android/bolts,bolts,Class Task<TResult>,public static void setUnobservedExceptionHandler(Task.UnobservedExceptionHandler eh),Set the handler invoked when a task has an unobserved exception.
48,Bolts-Android/bolts,bolts,Class Task<TResult>,public static <TResult> Task.TaskCompletionSource create(),Deprecated. Please use bolts.TaskCompletionSource() instead.
49,Bolts-Android/bolts,bolts,Class Task<TResult>,public boolean isCompleted(),
50,Bolts-Android/bolts,bolts,Class Task<TResult>,public boolean isCancelled(),
51,Bolts-Android/bolts,bolts,Class Task<TResult>,public boolean isFaulted(),
52,Bolts-Android/bolts,bolts,Class Task<TResult>,public TResult getResult(),
53,Bolts-Android/bolts,bolts,Class Task<TResult>,public java.lang.Exception getError(),
54,Bolts-Android/bolts,bolts,Class Task<TResult>,public void waitForCompletion() throws java.lang.InterruptedException,Blocks until the task is complete.
55,Bolts-Android/bolts,bolts,Class Task<TResult>,"public boolean waitForCompletion(long duration, java.util.concurrent.TimeUnit timeUnit) throws java.lang.InterruptedException",Blocks until the task is complete or times out.
56,Bolts-Android/bolts,bolts,Class Task<TResult>,public static <TResult> Task<TResult> forResult(TResult value),Creates a completed task with the given value.
57,Bolts-Android/bolts,bolts,Class Task<TResult>,public static <TResult> Task<TResult> forError(java.lang.Exception error),Creates a faulted task with the given error.
58,Bolts-Android/bolts,bolts,Class Task<TResult>,public static <TResult> Task<TResult> cancelled(),Creates a cancelled task.
59,Bolts-Android/bolts,bolts,Class Task<TResult>,public static Task<java.lang.Void> delay(long delay),Creates a task that completes after a time delay.
60,Bolts-Android/bolts,bolts,Class Task<TResult>,"public static Task<java.lang.Void> delay(long delay, CancellationToken cancellationToken)",Creates a task that completes after a time delay.
61,Bolts-Android/bolts,bolts,Class Task<TResult>,public <TOut> Task<TOut> cast(),"Makes a fluent cast of a Task's result possible, avoiding an extra continuation just to cast the type of the result."
62,Bolts-Android/bolts,bolts,Class Task<TResult>,public Task<java.lang.Void> makeVoid(),"Turns a Task into a Task, dropping any result."
63,Bolts-Android/bolts,bolts,Class Task<TResult>,public static <TResult> Task<TResult> callInBackground(java.util.concurrent.Callable<TResult> callable),"Invokes the callable on a background thread, returning a Task to represent the operation. If you want to cancel the resulting Task throw a CancellationException from the callable."
64,Bolts-Android/bolts,bolts,Class Task<TResult>,"public static <TResult> Task<TResult> callInBackground(java.util.concurrent.Callable<TResult> callable, CancellationToken ct)","Invokes the callable on a background thread, returning a Task to represent the operation."
65,Bolts-Android/bolts,bolts,Class Task<TResult>,"public static <TResult> Task<TResult> call(java.util.concurrent.Callable<TResult> callable, java.util.concurrent.Executor executor)","Invokes the callable using the given executor, returning a Task to represent the operation. If you want to cancel the resulting Task throw a CancellationException from the callable."
66,Bolts-Android/bolts,bolts,Class Task<TResult>,"public static <TResult> Task<TResult> call(java.util.concurrent.Callable<TResult> callable, java.util.concurrent.Executor executor, CancellationToken ct)","Invokes the callable using the given executor, returning a Task to represent the operation."
67,Bolts-Android/bolts,bolts,Class Task<TResult>,public static <TResult> Task<TResult> call(java.util.concurrent.Callable<TResult> callable),"Invokes the callable on the current thread, producing a Task. If you want to cancel the resulting Task throw a CancellationException from the callable."
68,Bolts-Android/bolts,bolts,Class Task<TResult>,"public static <TResult> Task<TResult> call(java.util.concurrent.Callable<TResult> callable, CancellationToken ct)","Invokes the callable on the current thread, producing a Task."
69,Bolts-Android/bolts,bolts,Class Task<TResult>,public static <TResult> Task<Task<TResult>> whenAnyResult(java.util.Collection<? extends Task<TResult>> tasks),Creates a task that will complete when any of the supplied tasks have completed. The returned task will complete when any of the supplied tasks has completed. The returned task will always end in the completed state with its result set to the first task to complete. This is true even if the first task to complete ended in the canceled or faulted state.
70,Bolts-Android/bolts,bolts,Class Task<TResult>,public static Task<Task<?>> whenAny(java.util.Collection<? extends Task<?>> tasks),Creates a task that will complete when any of the supplied tasks have completed. The returned task will complete when any of the supplied tasks has completed. The returned task will always end in the completed state with its result set to the first task to complete. This is true even if the first task to complete ended in the canceled or faulted state.
71,Bolts-Android/bolts,bolts,Class Task<TResult>,public static <TResult> Task<java.util.List<TResult>> whenAllResult(java.util.Collection<? extends Task<TResult>> tasks),"Creates a task that completes when all of the provided tasks are complete. If any of the supplied tasks completes in a faulted state, the returned task will also complete in a faulted state, where its exception will resolve to that Exception if a single task fails or an AggregateException of all the Exceptions if multiple tasks fail. If none of the supplied tasks faulted but at least one of them was cancelled, the returned task will end as cancelled. If none of the tasks faulted and none of the tasks were cancelled, the resulting task will end completed. The result of the returned task will be set to a list containing all of the results of the supplied tasks in the same order as they were provided (e.g. if the input tasks collection contained t1, t2, t3, the output task's result will return an List&lt;TResult&gt; where list.get(0) == t1.getResult(), list.get(1) == t2.getResult(), and list.get(2) == t3.getResult()). If the supplied collection contains no tasks, the returned task will immediately transition to a completed state before it's returned to the caller. The returned List&lt;TResult&gt; will contain 0 elements."
72,Bolts-Android/bolts,bolts,Class Task<TResult>,public static Task<java.lang.Void> whenAll(java.util.Collection<? extends Task<?>> tasks),"Creates a task that completes when all of the provided tasks are complete. If any of the supplied tasks completes in a faulted state, the returned task will also complete in a faulted state, where its exception will resolve to that Exception if a single task fails or an AggregateException of all the Exceptions if multiple tasks fail. If none of the supplied tasks faulted but at least one of them was cancelled, the returned task will end as cancelled. If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the completed state. If the supplied collection contains no tasks, the returned task will immediately transition to a completed state before it's returned to the caller."
73,Bolts-Android/bolts,bolts,Class Task<TResult>,"public Task<java.lang.Void> continueWhile(java.util.concurrent.Callable<java.lang.Boolean> predicate, Continuation<java.lang.Void,Task<java.lang.Void>> continuation)","Continues a task with the equivalent of a Task-based while loop, where the body of the loop is a task continuation."
74,Bolts-Android/bolts,bolts,Class Task<TResult>,"public Task<java.lang.Void> continueWhile(java.util.concurrent.Callable<java.lang.Boolean> predicate, Continuation<java.lang.Void,Task<java.lang.Void>> continuation, CancellationToken ct)","Continues a task with the equivalent of a Task-based while loop, where the body of the loop is a task continuation."
75,Bolts-Android/bolts,bolts,Class Task<TResult>,"public Task<java.lang.Void> continueWhile(java.util.concurrent.Callable<java.lang.Boolean> predicate, Continuation<java.lang.Void,Task<java.lang.Void>> continuation, java.util.concurrent.Executor executor)","Continues a task with the equivalent of a Task-based while loop, where the body of the loop is a task continuation."
76,Bolts-Android/bolts,bolts,Class Task<TResult>,"public Task<java.lang.Void> continueWhile(java.util.concurrent.Callable<java.lang.Boolean> predicate, Continuation<java.lang.Void,Task<java.lang.Void>> continuation, java.util.concurrent.Executor executor, CancellationToken ct)","Continues a task with the equivalent of a Task-based while loop, where the body of the loop is a task continuation."
77,Bolts-Android/bolts,bolts,Class Task<TResult>,"public <TContinuationResult> Task<TContinuationResult> continueWith(Continuation<TResult,TContinuationResult> continuation, java.util.concurrent.Executor executor)","Adds a continuation that will be scheduled using the executor, returning a new task that completes after the continuation has finished running. This allows the continuation to be scheduled on different thread."
78,Bolts-Android/bolts,bolts,Class Task<TResult>,"public <TContinuationResult> Task<TContinuationResult> continueWith(Continuation<TResult,TContinuationResult> continuation, java.util.concurrent.Executor executor, CancellationToken ct)","Adds a continuation that will be scheduled using the executor, returning a new task that completes after the continuation has finished running. This allows the continuation to be scheduled on different thread."
79,Bolts-Android/bolts,bolts,Class Task<TResult>,"public <TContinuationResult> Task<TContinuationResult> continueWith(Continuation<TResult,TContinuationResult> continuation)","Adds a synchronous continuation to this task, returning a new task that completes after the continuation has finished running."
80,Bolts-Android/bolts,bolts,Class Task<TResult>,"public <TContinuationResult> Task<TContinuationResult> continueWith(Continuation<TResult,TContinuationResult> continuation, CancellationToken ct)","Adds a synchronous continuation to this task, returning a new task that completes after the continuation has finished running."
81,Bolts-Android/bolts,bolts,Class Task<TResult>,"public <TContinuationResult> Task<TContinuationResult> continueWithTask(Continuation<TResult,Task<TContinuationResult>> continuation, java.util.concurrent.Executor executor)","Adds an Task-based continuation to this task that will be scheduled using the executor, returning a new task that completes after the task returned by the continuation has completed."
82,Bolts-Android/bolts,bolts,Class Task<TResult>,"public <TContinuationResult> Task<TContinuationResult> continueWithTask(Continuation<TResult,Task<TContinuationResult>> continuation, java.util.concurrent.Executor executor, CancellationToken ct)","Adds an Task-based continuation to this task that will be scheduled using the executor, returning a new task that completes after the task returned by the continuation has completed."
83,Bolts-Android/bolts,bolts,Class Task<TResult>,"public <TContinuationResult> Task<TContinuationResult> continueWithTask(Continuation<TResult,Task<TContinuationResult>> continuation)","Adds an asynchronous continuation to this task, returning a new task that completes after the task returned by the continuation has completed."
84,Bolts-Android/bolts,bolts,Class Task<TResult>,"public <TContinuationResult> Task<TContinuationResult> continueWithTask(Continuation<TResult,Task<TContinuationResult>> continuation, CancellationToken ct)","Adds an asynchronous continuation to this task, returning a new task that completes after the task returned by the continuation has completed."
85,Bolts-Android/bolts,bolts,Class Task<TResult>,"public <TContinuationResult> Task<TContinuationResult> onSuccess(Continuation<TResult,TContinuationResult> continuation, java.util.concurrent.Executor executor)","Runs a continuation when a task completes successfully, forwarding along Exception or cancellation."
86,Bolts-Android/bolts,bolts,Class Task<TResult>,"public <TContinuationResult> Task<TContinuationResult> onSuccess(Continuation<TResult,TContinuationResult> continuation, java.util.concurrent.Executor executor, CancellationToken ct)","Runs a continuation when a task completes successfully, forwarding along Exception or cancellation."
87,Bolts-Android/bolts,bolts,Class Task<TResult>,"public <TContinuationResult> Task<TContinuationResult> onSuccess(Continuation<TResult,TContinuationResult> continuation)","Runs a continuation when a task completes successfully, forwarding along Exceptions or cancellation."
88,Bolts-Android/bolts,bolts,Class Task<TResult>,"public <TContinuationResult> Task<TContinuationResult> onSuccess(Continuation<TResult,TContinuationResult> continuation, CancellationToken ct)","Runs a continuation when a task completes successfully, forwarding along Exceptions or cancellation."
89,Bolts-Android/bolts,bolts,Class Task<TResult>,"public <TContinuationResult> Task<TContinuationResult> onSuccessTask(Continuation<TResult,Task<TContinuationResult>> continuation, java.util.concurrent.Executor executor)","Runs a continuation when a task completes successfully, forwarding along Exceptions or cancellation."
90,Bolts-Android/bolts,bolts,Class Task<TResult>,"public <TContinuationResult> Task<TContinuationResult> onSuccessTask(Continuation<TResult,Task<TContinuationResult>> continuation, java.util.concurrent.Executor executor, CancellationToken ct)","Runs a continuation when a task completes successfully, forwarding along Exceptions or cancellation."
91,Bolts-Android/bolts,bolts,Class Task<TResult>,"public <TContinuationResult> Task<TContinuationResult> onSuccessTask(Continuation<TResult,Task<TContinuationResult>> continuation)","Runs a continuation when a task completes successfully, forwarding along Exceptions or cancellation."
92,Bolts-Android/bolts,bolts,Class TaskCompletionSource<TResult>,public Task<TResult> getTask(),
93,Bolts-Android/bolts,bolts,Class TaskCompletionSource<TResult>,public boolean trySetCancelled(),Sets the cancelled flag on the Task if the Task hasn't already been completed.
94,Bolts-Android/bolts,bolts,Class TaskCompletionSource<TResult>,public boolean trySetResult(TResult result),Sets the result on the Task if the Task hasn't already been completed.
95,Bolts-Android/bolts,bolts,Class TaskCompletionSource<TResult>,public boolean trySetError(java.lang.Exception error),Sets the error on the Task if the Task hasn't already been completed.
96,Bolts-Android/bolts,bolts,Class TaskCompletionSource<TResult>,public void setCancelled(),"Sets the cancelled flag on the task, throwing if the Task has already been completed."
97,Bolts-Android/bolts,bolts,Class TaskCompletionSource<TResult>,public void setResult(TResult result),"Sets the result of the Task, throwing if the Task has already been completed."
98,glide/signature,com.bumptech.glide.signature,Class AndroidResourceSignature,@NonNullpublic static Key obtain(@NonNull android.content.Context context),
99,glide/signature,com.bumptech.glide.signature,Class AndroidResourceSignature,public boolean equals(java.lang.Object o),Description copied from interface: Key
100,glide/signature,com.bumptech.glide.signature,Class AndroidResourceSignature,public int hashCode(),Description copied from interface: Key
101,glide/gifencoder,com.bumptech.glide.gifencoder,Class AnimatedGifEncoder,public void setDelay(int ms),"Sets the delay time between each frame, or changes it for subsequent frames (applies to last frame added)."
102,glide/gifencoder,com.bumptech.glide.gifencoder,Class AnimatedGifEncoder,public void setDispose(int code),"Sets the GIF frame disposal code for the last added frame and any subsequent frames. Default is 0 if no transparent color has been set, otherwise 2."
103,glide/gifencoder,com.bumptech.glide.gifencoder,Class AnimatedGifEncoder,public void setRepeat(int iter),Sets the number of times the set of GIF frames should be played. Default is 1; 0 means play indefinitely. Must be invoked before the first image is added.
104,glide/gifencoder,com.bumptech.glide.gifencoder,Class AnimatedGifEncoder,public void setTransparent(int color),"Sets the transparent color for the last added frame and any subsequent frames. Since all colors are subject to modification in the quantization process, the color in the final palette for each frame closest to the given color becomes the transparent color for that frame. May be set to null to indicate no transparent color."
105,glide/gifencoder,com.bumptech.glide.gifencoder,Class AnimatedGifEncoder,public boolean addFrame(@Nullable android.graphics.Bitmap im),"Adds next GIF frame. The frame is not written immediately, but is actually deferred until the next frame is received so that timing data can be inserted. Invoking finish() flushes all frames. If setSize was invoked, the size is used for all subsequent frames. Otherwise, the actual size of the image is used for each frames."
106,glide/gifencoder,com.bumptech.glide.gifencoder,Class AnimatedGifEncoder,"public boolean addFrame(@Nullable android.graphics.Bitmap im, int x, int y)","Adds next GIF frame to the specified position. The frame is not written immediately, but is actually deferred until the next frame is received so that timing data can be inserted. Invoking finish() flushes all frames. If setSize was invoked, the size is used for all subsequent frames. Otherwise, the actual size of the image is used for each frame. See page 11 of http://giflib.sourceforge.net/gif89.txt for the position of the frame"
107,glide/gifencoder,com.bumptech.glide.gifencoder,Class AnimatedGifEncoder,public boolean finish(),"Flushes any pending data and closes output file. If writing to an OutputStream, the stream is not closed."
108,glide/gifencoder,com.bumptech.glide.gifencoder,Class AnimatedGifEncoder,public void setFrameRate(float fps),Sets frame rate in frames per second. Equivalent to setDelay(1000/fps).
109,glide/gifencoder,com.bumptech.glide.gifencoder,Class AnimatedGifEncoder,public void setQuality(int quality),"Sets quality of color quantization (conversion of images to the maximum 256 colors allowed by the GIF specification). Lower values (minimum = 1) produce better colors, but slow processing significantly. 10 is the default, and produces good color mapping at reasonable speeds. Values greater than 20 do not yield significant improvements in speed."
110,glide/gifencoder,com.bumptech.glide.gifencoder,Class AnimatedGifEncoder,"public void setSize(int w, int h)",Sets the fixed GIF frame size for all the frames. This should be called before start.
111,glide/gifencoder,com.bumptech.glide.gifencoder,Class AnimatedGifEncoder,public boolean start(@Nullable java.io.OutputStream os),Initiates GIF file creation on the given stream. The stream is not closed automatically.
112,glide/module,com.bumptech.glide.module,Class AppGlideModule,public boolean isManifestParsingEnabled(),Returns true if Glide should check the AndroidManifest for GlideModules. Implementations should return false after they and their dependencies have migrated to Glide's annotation processor. Returns true by default.
113,request/target,com.bumptech.glide.request.target,Class AppWidgetTarget,"public AppWidgetTarget(android.content.Context context, int width, int height, int viewId, android.widget.RemoteViews remoteViews, int... widgetIds)",Constructor using an int array of widgetIds to get a handle on the Widget in order to update it.
114,request/target,com.bumptech.glide.request.target,Class AppWidgetTarget,"public AppWidgetTarget(android.content.Context context, int viewId, android.widget.RemoteViews remoteViews, int... widgetIds)",Constructor using an int array of widgetIds to get a handle on the Widget in order to update it that uses Target.SIZE_ORIGINAL as the target width and height.
115,request/target,com.bumptech.glide.request.target,Class AppWidgetTarget,"public AppWidgetTarget(android.content.Context context, int width, int height, int viewId, android.widget.RemoteViews remoteViews, android.content.ComponentName componentName)",Constructor using a ComponentName to get a handle on the Widget in order to update it.
116,request/target,com.bumptech.glide.request.target,Class AppWidgetTarget,"public void onResourceReady(@NonNull android.graphics.Bitmap resource, @Nullable Transition<? super android.graphics.Bitmap> transition)",Description copied from interface: Target
117,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Interface ArrayPool,"@Deprecated<T> void put(T array, java.lang.Class<T> arrayClass)",Deprecated. Use put(Object)
118,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Interface ArrayPool,<T> void put(T array),"Optionally adds the given array of the given type to the pool. Arrays may be ignored, for example if the array is larger than the maximum size of the pool."
119,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Interface ArrayPool,"<T> T get(int size, java.lang.Class<T> arrayClass)","Returns a non-null array of the given type with a length >= to the given size. If an array of the given size isn't in the pool, a new one will be allocated. This class makes no guarantees about the contents of the returned array."
120,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Interface ArrayPool,"<T> T getExact(int size, java.lang.Class<T> arrayClass)","Returns a non-null array of the given type with a length exactly equal to the given size. If an array of the given size isn't in the pool, a new one will be allocated. This class makes no guarantees about the contents of the returned array."
121,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Interface ArrayPool,void clearMemory(),Clears all arrays from the pool.
122,load/data,com.bumptech.glide.load.data,Class AssetFileDescriptorLocalUriFetcher,"protected android.content.res.AssetFileDescriptor loadResource(android.net.Uri uri, android.content.ContentResolver contentResolver) throws java.io.FileNotFoundException",Description copied from class: LocalUriFetcher
123,load/data,com.bumptech.glide.load.data,Class AssetFileDescriptorLocalUriFetcher,protected void close(android.content.res.AssetFileDescriptor data) throws java.io.IOException,Description copied from class: LocalUriFetcher
124,load/data,com.bumptech.glide.load.data,Class AssetPathFetcher<T>,"public void loadData(@NonNull Priority priority, @NonNull DataFetcher.DataCallback<? super T> callback)",Description copied from interface: DataFetcher
125,load/data,com.bumptech.glide.load.data,Class AssetPathFetcher<T>,public void cleanup(),Description copied from interface: DataFetcher
126,load/data,com.bumptech.glide.load.data,Class AssetPathFetcher<T>,public void cancel(),Description copied from interface: DataFetcher
127,load/data,com.bumptech.glide.load.data,Class AssetPathFetcher<T>,@NonNullpublic DataSource getDataSource(),Description copied from interface: DataFetcher
128,load/data,com.bumptech.glide.load.data,Class AssetPathFetcher<T>,"protected abstract T loadResource(android.content.res.AssetManager assetManager, java.lang.String path) throws java.io.IOException",Opens the given asset path with the given AssetManager and returns the concrete data type returned by the AssetManager.
129,load/model,com.bumptech.glide.load.model,Class AssetUriLoader<Data>,"public ModelLoader.LoadData<Data> buildLoadData(@NonNull android.net.Uri model, int width, int height, @NonNull Options options)",Description copied from interface: ModelLoader
130,load/model,com.bumptech.glide.load.model,Class AssetUriLoader.FileDescriptorFactory,"@NonNullpublic ModelLoader<android.net.Uri,android.os.ParcelFileDescriptor> build(MultiModelLoaderFactory multiFactory)",Description copied from interface: ModelLoaderFactory
131,load/model,com.bumptech.glide.load.model,Class AssetUriLoader.FileDescriptorFactory,public void teardown(),Description copied from interface: ModelLoaderFactory
132,load/model,com.bumptech.glide.load.model,Class AssetUriLoader.StreamFactory,"@NonNullpublic ModelLoader<android.net.Uri,java.io.InputStream> build(MultiModelLoaderFactory multiFactory)",Description copied from interface: ModelLoaderFactory
133,load/model,com.bumptech.glide.load.model,Class AssetUriLoader.StreamFactory,public void teardown(),Description copied from interface: ModelLoaderFactory
134,model/stream,com.bumptech.glide.load.model.stream,Class BaseGlideUrlLoader<Model>,"protected BaseGlideUrlLoader(ModelLoader<GlideUrl,java.io.InputStream> concreteLoader)",
135,model/stream,com.bumptech.glide.load.model.stream,Class BaseGlideUrlLoader<Model>,"@Nullablepublic ModelLoader.LoadData<java.io.InputStream> buildLoadData(@NonNull Model model, int width, int height, @NonNull Options options)",Description copied from interface: ModelLoader
136,model/stream,com.bumptech.glide.load.model.stream,Class BaseGlideUrlLoader<Model>,"protected abstract java.lang.String getUrl(Model model, int width, int height, Options options)",Returns a valid url http:// or https:// for the given model and dimensions as a string.
137,model/stream,com.bumptech.glide.load.model.stream,Class BaseGlideUrlLoader<Model>,"protected java.util.List<java.lang.String> getAlternateUrls(Model model, int width, int height, Options options)","Returns a list of alternate urls for the given model, width, and height from which equivalent data can be obtained (usually the same image with the same aspect ratio, but in a larger size) as the primary url. Implementing this method allows Glide to fulfill requests for bucketed images in smaller bucket sizes using already cached data for larger bucket sizes."
138,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T sizeMultiplier(float sizeMultiplier),Applies a multiplier to the Target's size before loading the resource. Useful for loading thumbnails or trying to avoid loading huge resources (particularly Bitmaps on devices with overly dense screens.
139,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T useUnlimitedSourceGeneratorsPool(boolean flag),"If set to true, uses a cached unlimited Executor to run the request. This method should ONLY be used when a Glide load is started recursively on one of Glide's threads as part of another request. Using this method in other scenarios can lead to excessive memory usage and OOMs and/or a significant decrease in performance across an application. If both this method and useAnimationPool(boolean) are set, this method will be preferred and useAnimationPool(boolean) will be ignored."
140,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T useAnimationPool(boolean flag),"If set to true, uses a special Executor that is used exclusively for decoding frames of animated resources, like GIFs. The animation executor disallows network operations and must not be used for loads that may load remote data. The animation executor has fewer threads available to it than Glide's normal executors and is only useful as a way of avoiding blocking on longer and more expensive reads for critical requests like those in an animating GIF. If both useUnlimitedSourceGeneratorsPool(boolean) and this method are set, useUnlimitedSourceGeneratorsPool(boolean) will be preferred and this method will be ignored."
141,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T onlyRetrieveFromCache(boolean flag),"If set to true, will only load an item if found in the cache, and will not fetch from source."
142,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T diskCacheStrategy(@NonNull DiskCacheStrategy strategy),Sets the DiskCacheStrategy to use for this load. Defaults to DiskCacheStrategy.AUTOMATIC. For most applications DiskCacheStrategy.RESOURCE is ideal. Applications that use the same resource multiple times in multiple sizes and are willing to trade off some speed and disk space in return for lower bandwidth usage may want to consider using DiskCacheStrategy.DATA or DiskCacheStrategy.ALL.
143,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T priority(@NonNull Priority priority),Sets the priority for this load.
144,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T placeholder(@Nullable android.graphics.drawable.Drawable drawable),Sets an Drawable to display while a resource is loading. Replaces any previous calls to this method or placeholder(int).
145,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T placeholder(@DrawableRes int resourceId),Sets an Android resource id for a Drawable resource to display while a resource is loading. Replaces any previous calls to this method or placeholder(Drawable)
146,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T fallback(@Nullable android.graphics.drawable.Drawable drawable),"Sets an Drawable to display if the model provided to RequestBuilder.load(Object) is null. If a fallback is not set, null models will cause the error drawable to be displayed. If the error drawable is not set, the placeholder will be displayed. Replaces any previous calls to this method or fallback(int)."
147,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T fallback(@DrawableRes int resourceId),"Sets a resource to display if the model provided to RequestBuilder.load(Object) is null. If a fallback is not set, null models will cause the error drawable to be displayed. If the error drawable is not set, the placeholder will be displayed. Replaces any previous calls to this method or fallback(Drawable)."
148,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T error(@Nullable android.graphics.drawable.Drawable drawable),Sets a Drawable to display if a load fails. Replaces any previous calls to this method or error(int)
149,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T error(@DrawableRes int resourceId),Sets a resource to display if a load fails. Replaces any previous calls to this method or error(Drawable)
150,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T theme(@Nullable android.content.res.Resources.Theme theme),"Sets the Resources.Theme to apply when loading Drawables for resource ids provided via error(int), placeholder(int), and fallback(Drawable). The theme is NOT applied in the decoder that will attempt to decode a given resource id model on Glide's background threads. The theme is used exclusively on the main thread to obtain placeholder/error/fallback drawables to avoid leaking Activities. If the Context of the Fragment or Activity used to start this load has a different Resources.Theme, the Resources.Theme provided here will override the Resources.Theme of the Context."
151,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T skipMemoryCache(boolean skip),"Allows the loaded resource to skip the memory cache. Note - this is not a guarantee. If a request is already pending for this resource and that request is not also skipping the memory cache, the resource will be cached in memory."
152,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,"@NonNull @CheckResultpublic T override(int width, int height)","Overrides the Target's width and height with the given values. This is useful for thumbnails, and should only be used for other cases when you need a very specific image size."
153,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T override(int size),Overrides the Target's width and height with the given size.
154,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T signature(@NonNull Key signature),"Sets some additional data to be mixed in to the memory and disk cache keys allowing the caller more control over when cached data is invalidated. Note - The signature does not replace the cache key, it is purely additive."
155,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@CheckResultpublic T clone(),"Returns a copy of this request builder with all of the options put so far on this builder. This method returns a deep copy in that all non-immutable arguments are copied such that changes to one builder will not affect the other builder. However, in addition to immutable arguments, the current model is not copied copied so changes to the model will affect both builders. Even if this object was locked, the cloned object returned from this method will not be locked."
156,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,"@NonNull @CheckResultpublic <Y> T set(@NonNull Option<Y> option, @NonNull Y value)",
157,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T decode(@NonNull java.lang.Class<?> resourceClass),
158,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,public final boolean isTransformationAllowed(),
159,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,public final boolean isTransformationSet(),
160,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,public final boolean isLocked(),
161,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T encodeFormat(@NonNull android.graphics.Bitmap.CompressFormat format),Sets the value for key BitmapEncoder.COMPRESSION_FORMAT.
162,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T encodeQuality(int quality),Sets the value for key BitmapEncoder.COMPRESSION_QUALITY.
163,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T frame(long frameTimeMicros),"Sets the time position of the frame to extract from a video. This is a component option specific to VideoDecoder. If the default video decoder is replaced or skipped because of your configuration, this option may be ignored."
164,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T format(@NonNull DecodeFormat format),"Sets the DecodeFormat to use when decoding Bitmap objects using Downsampler and Glide's default GIF decoders. DecodeFormat is a request, not a requirement. It's possible the resource will be decoded using a decoder that cannot control the format (MediaMetadataRetriever for example), or that the decoder may choose to ignore the requested format if it can't display the image (i.e. RGB_565 is requested, but the image has alpha). This is a component option specific to Downsampler and Glide's GIF decoders. If the default Bitmap decoders are replaced or skipped because of your configuration, this option may be ignored. To set only the format used when decoding Bitmaps, use set(Option, Object)} and Downsampler.DECODE_FORMAT. To set only the format used when decoding GIF frames, use set(Option, Object) and GifOptions.DECODE_FORMAT."
165,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T disallowHardwareConfig(),"Disables the use of Bitmap.Config.HARDWARE in Downsampler to avoid errors caused by inspecting Bitmap pixels, drawing with hardware support disabled, drawing to Canvass backed by Bitmaps etc. It's almost never safe to set Downsampler.ALLOW_HARDWARE_CONFIG to true so we only provide a way to disable hardware configs entirely. If no option is set for Downsampler.ALLOW_HARDWARE_CONFIG, Glide will set the value per request based on whether or not a Transformation is applied and if one is, the type of Transformation applied. Built in transformations like FitCenter and DownsampleStrategy.CenterOutside can safely use Bitmap.Config.HARDWARE because they can be entirely replaced by scaling within Downsampler. Transformations like circleCrop() that can't be replicated by Downsampler cannot use Bitmap.Config#HARDWARE because Bitmap.Config.HARDWARE cannot be drawn to Canvass, which is required by most Transformations."
166,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T downsample(@NonNull DownsampleStrategy strategy),"Sets the DownsampleStrategy to use when decoding Bitmaps using Downsampler. This is a component option specific to Downsampler. If the defautlt Bitmap decoder is replaced or skipped because of your configuration, this option may be ignored."
167,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T timeout(int timeoutMs),"Sets the read and write timeout for the http requests used to load the image. This is a component option specific to Glide's default networking library and HttpGlideUrlLoader. If you use any other networking library including Glide's Volley or OkHttp integration libraries, this option will be ignored."
168,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T optionalCenterCrop(),"Applies CenterCrop to all default types, and ignores unknown types. This will override previous calls to dontTransform()."
169,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T centerCrop(),Applies CenterCrop to all default types and throws an exception if asked to transform an unknown type. this will override previous calls to dontTransform() ()}.
170,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T optionalFitCenter(),"Applies FitCenter and to all default types, DownsampleStrategy.FIT_CENTER to image types, and ignores unknown types. This will override previous calls to dontTransform() and previous calls to downsample(DownsampleStrategy)."
171,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T fitCenter(),"Applies FitCenter and to all default types, DownsampleStrategy.FIT_CENTER to image types, and throws an exception if asked to transform an unknown type. This will override previous calls to dontTransform() and previous calls to downsample(DownsampleStrategy)."
172,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T optionalCenterInside(),"Applies CenterInside to all default types, DownsampleStrategy.CENTER_INSIDE to image types, and ignores unknown types. This will override previous calls to dontTransform() and previous calls to downsample(DownsampleStrategy)."
173,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T centerInside(),"Applies CenterInside to all default types, DownsampleStrategy.CENTER_INSIDE to image types and throws an exception if asked to transform an unknown type. This will override previous calls to dontTransform() and previous calls to downsample(DownsampleStrategy)."
174,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T optionalCircleCrop(),"Applies CircleCrop to all default types, and ignores unknown types. This will override previous calls to dontTransform()."
175,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T circleCrop(),Applies CircleCrop to all default types and throws an exception if asked to transform an unknown type. This will override previous calls to dontTransform().
176,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T transform(@NonNull Transformation<android.graphics.Bitmap> transformation),"Applies the given Transformation for Bitmaps to the default types (Bitmap, BitmapDrawable, and GifDrawable) and throws an exception if asked to transform an unknown type. This will override previous calls to dontTransform()."
177,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T transform(@NonNull Transformation<android.graphics.Bitmap>... transformations),"Applies the given Transformations in the given order for Bitmaps to the default types (Bitmap, BitmapDrawable, and GifDrawable) and throws an exception if asked to transform an unknown type. This will override previous calls to dontTransform()."
178,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResult @Deprecatedpublic T transforms(@NonNull Transformation<android.graphics.Bitmap>... transformations),"Deprecated. Deprecated due to api update, use transform(Transformation[]) instead"
179,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T optionalTransform(@NonNull Transformation<android.graphics.Bitmap> transformation),"Applies the given Transformation for Bitmaps to the default types (Bitmap, BitmapDrawable, and GifDrawable) and ignores unknown types. This will override previous calls to dontTransform()."
180,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,"@NonNull @CheckResultpublic <Y> T optionalTransform(@NonNull java.lang.Class<Y> resourceClass, @NonNull Transformation<Y> transformation)","Applies the given Transformation for any decoded resource of the given type and allows unknown resource types to be ignored. Users can apply different transformations for each resource class. Applying a Transformation for a resource type that already has a Transformation will override the previous call. If any calls are made to the non-optional transform methods, then attempting to transform an unknown resource class will throw an exception. To allow unknown types, users must always call the optional version of each method. This will override previous calls to dontTransform()."
181,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,"@NonNull @CheckResultpublic <Y> T transform(@NonNull java.lang.Class<Y> resourceClass, @NonNull Transformation<Y> transformation)",Applies the given Transformation for any decoded resource of the given type and throws if asked to transform an unknown resource type. This will override previous calls to dontTransform().
182,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T dontTransform(),Removes all applied Transformations for all resource classes and allows unknown resource types to be transformed without throwing an exception.
183,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T dontAnimate(),Disables resource decoders that return animated resources so any resource returned will be static. To disable transitions (fades etc) use TransitionOptions.dontTransition()
184,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNull @CheckResultpublic T apply(@NonNull BaseRequestOptions<?> o),"Updates this options set with any options that are explicitly set in the given T object and returns this object if autoClone() is disabled or a new T object if autoClone() is enabled. #apply only replaces those values that are explicitly set in the given T. If you need to completely reset all previously set options, create a new T object instead of using this method. The options that will be set to values in the returned T object is the intersection of the set of options in this T object and the given T object that were explicitly set. If the values of any of the options conflict, the values in the returned T object will be set to those in the given T object."
185,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,public boolean equals(java.lang.Object o),
186,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,public int hashCode(),
187,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNullpublic T lock(),"Throws if any further mutations are attempted. Once locked, the only way to unlock is to use clone()"
188,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNullpublic T autoClone(),Similar to lock() except that mutations cause a clone() operation to happen before the mutation resulting in all methods returning a new Object and leaving the original locked object unmodified. Auto clone is not retained by cloned objects returned from mutations. The cloned objects are mutable and are not locked.
189,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,protected boolean isAutoCloneEnabled(),
190,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,public final boolean isDiskCacheStrategySet(),
191,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,public final boolean isSkipMemoryCacheSet(),
192,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,"@NonNullpublic final java.util.Map<java.lang.Class<?>,Transformation<?>> getTransformations()",
193,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,public final boolean isTransformationRequired(),
194,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNullpublic final Options getOptions(),
195,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNullpublic final java.lang.Class<?> getResourceClass(),
196,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNullpublic final DiskCacheStrategy getDiskCacheStrategy(),
197,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@Nullablepublic final android.graphics.drawable.Drawable getErrorPlaceholder(),
198,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,public final int getErrorId(),
199,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,public final int getPlaceholderId(),
200,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@Nullablepublic final android.graphics.drawable.Drawable getPlaceholderDrawable(),
201,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,public final int getFallbackId(),
202,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@Nullablepublic final android.graphics.drawable.Drawable getFallbackDrawable(),
203,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@Nullablepublic final android.content.res.Resources.Theme getTheme(),
204,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,public final boolean isMemoryCacheable(),
205,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNullpublic final Key getSignature(),
206,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,public final boolean isPrioritySet(),
207,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,@NonNullpublic final Priority getPriority(),
208,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,public final int getOverrideWidth(),
209,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,public final boolean isValidOverride(),
210,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,public final int getOverrideHeight(),
211,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,public final float getSizeMultiplier(),
212,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,public final boolean getUseUnlimitedSourceGeneratorsPool(),
213,glide/request,com.bumptech.glide.request,Class BaseRequestOptions<T extends BaseRequestOptions<T>>,public final boolean getUseAnimationPool(),
214,request/target,com.bumptech.glide.request.target,Class BaseTarget<Z>,public void setRequest(@Nullable Request request),Deprecated. 
215,request/target,com.bumptech.glide.request.target,Class BaseTarget<Z>,@Nullablepublic Request getRequest(),Deprecated. 
216,request/target,com.bumptech.glide.request.target,Class BaseTarget<Z>,public void onLoadCleared(@Nullable android.graphics.drawable.Drawable placeholder),Deprecated. 
217,request/target,com.bumptech.glide.request.target,Class BaseTarget<Z>,public void onLoadStarted(@Nullable android.graphics.drawable.Drawable placeholder),Deprecated. 
218,request/target,com.bumptech.glide.request.target,Class BaseTarget<Z>,public void onLoadFailed(@Nullable android.graphics.drawable.Drawable errorDrawable),Deprecated. 
219,request/target,com.bumptech.glide.request.target,Class BaseTarget<Z>,public void onStart(),Deprecated. 
220,request/target,com.bumptech.glide.request.target,Class BaseTarget<Z>,public void onStop(),Deprecated. 
221,resource/transcode,com.bumptech.glide.load.resource.transcode,Class BitmapBytesTranscoder,public BitmapBytesTranscoder(),
222,request/transition,com.bumptech.glide.request.transition,Class BitmapContainerTransitionFactory<R>,"public Transition<R> build(DataSource dataSource, boolean isFirstResource)",Description copied from interface: TransitionFactory
223,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class BitmapDrawableDecoder<DataType>,"public BitmapDrawableDecoder(android.content.Context context, ResourceDecoder<DataType,android.graphics.Bitmap> decoder)",
224,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class BitmapDrawableDecoder<DataType>,"@Deprecatedpublic BitmapDrawableDecoder(android.content.res.Resources resources, BitmapPool bitmapPool, ResourceDecoder<DataType,android.graphics.Bitmap> decoder)","Deprecated. Use BitmapDrawableDecoder(Context, ResourceDecoder), bitmapPool is ignored."
225,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class BitmapDrawableDecoder<DataType>,"public boolean handles(@NonNull DataType source, @NonNull Options options) throws java.io.IOException",Description copied from interface: ResourceDecoder
226,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class BitmapDrawableEncoder,"public boolean encode(@NonNull Resource<android.graphics.drawable.BitmapDrawable> data, @NonNull java.io.File file, @NonNull Options options)",Description copied from interface: Encoder
227,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class BitmapDrawableResource,@NonNullpublic java.lang.Class<android.graphics.drawable.BitmapDrawable> getResourceClass(),Description copied from interface: Resource
228,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class BitmapDrawableResource,public int getSize(),Description copied from interface: Resource
229,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class BitmapDrawableResource,public void recycle(),Description copied from interface: Resource
230,resource/transcode,com.bumptech.glide.load.resource.transcode,Class BitmapDrawableTranscoder,public BitmapDrawableTranscoder(@NonNull android.content.Context context),
231,resource/transcode,com.bumptech.glide.load.resource.transcode,Class BitmapDrawableTranscoder,"@Deprecatedpublic BitmapDrawableTranscoder(@NonNull android.content.res.Resources resources, BitmapPool bitmapPool)","Deprecated. Use BitmapDrawableTranscoder(Resources), bitmapPool is unused."
232,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class BitmapDrawableTransformation,"@NonNullpublic Resource<android.graphics.drawable.BitmapDrawable> transform(@NonNull android.content.Context context, @NonNull Resource<android.graphics.drawable.BitmapDrawable> drawableResourceToTransform, int outWidth, int outHeight)",Deprecated. 
233,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class BitmapDrawableTransformation,public boolean equals(java.lang.Object o),Deprecated. 
234,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class BitmapDrawableTransformation,public int hashCode(),Deprecated. 
235,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class BitmapEncoder,public static final Option<java.lang.Integer> COMPRESSION_QUALITY,An integer option between 0 and 100 that is used as the compression quality. Defaults to 90.
236,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class BitmapEncoder,public BitmapEncoder(@NonNull ArrayPool arrayPool),
237,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class BitmapEncoder,"public boolean encode(@NonNull Resource<android.graphics.Bitmap> resource, @NonNull java.io.File file, @NonNull Options options)",Description copied from interface: Encoder
238,request/target,com.bumptech.glide.request.target,Class BitmapImageViewTarget,public BitmapImageViewTarget(android.widget.ImageView view),
239,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Interface BitmapPool,long getMaxSize(),Returns the current maximum size of the pool in bytes.
240,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Interface BitmapPool,void setSizeMultiplier(float sizeMultiplier),"Multiplies the initial size of the pool by the given multiplier to dynamically and synchronously allow users to adjust the size of the pool. If the current total size of the pool is larger than the max size after the given multiplier is applied, Bitmaps should be evicted until the pool is smaller than the new max size."
241,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Interface BitmapPool,void put(android.graphics.Bitmap bitmap),"Adds the given Bitmap if it is eligible to be re-used and the pool can fit it, or calls Bitmap.recycle() on the Bitmap and discards it. Callers must not continue to use the Bitmap after calling this method."
242,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Interface BitmapPool,"@NonNullandroid.graphics.Bitmap get(int width, int height, android.graphics.Bitmap.Config config)","Returns a Bitmap of exactly the given width, height, and configuration, and containing only transparent pixels. If no Bitmap with the requested attributes is present in the pool, a new one will be allocated. Because this method erases all pixels in the Bitmap, this method is slightly slower than getDirty(int, int, android.graphics.Bitmap.Config). If the Bitmap is being obtained to be used in BitmapFactory or in any other case where every pixel in the Bitmap will always be overwritten or cleared, getDirty(int, int, android.graphics.Bitmap.Config) will be faster. When in doubt, use this method to ensure correctness. Implementations can should clear out every returned Bitmap using the following: bitmap.eraseColor(Color.TRANSPARENT); "
243,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Interface BitmapPool,"@NonNullandroid.graphics.Bitmap getDirty(int width, int height, android.graphics.Bitmap.Config config)","Identical to get(int, int, android.graphics.Bitmap.Config) except that any returned Bitmap may not have been erased and may contain random data. If no Bitmap with the requested attributes is present in the pool, a new one will be allocated. Although this method is slightly more efficient than get(int, int, android.graphics.Bitmap.Config) it should be used with caution and only when the caller is sure that they are going to erase the Bitmap entirely before writing new data to it."
244,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Interface BitmapPool,void clearMemory(),Removes all Bitmaps from the pool.
245,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class BitmapPoolAdapter,public long getMaxSize(),Description copied from interface: BitmapPool
246,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class BitmapPoolAdapter,public void setSizeMultiplier(float sizeMultiplier),Description copied from interface: BitmapPool
247,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class BitmapPoolAdapter,public void put(android.graphics.Bitmap bitmap),Description copied from interface: BitmapPool
248,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class BitmapPoolAdapter,"@NonNullpublic android.graphics.Bitmap get(int width, int height, android.graphics.Bitmap.Config config)",Description copied from interface: BitmapPool
249,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class BitmapPoolAdapter,"@NonNullpublic android.graphics.Bitmap getDirty(int width, int height, android.graphics.Bitmap.Config config)",Description copied from interface: BitmapPool
250,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class BitmapPoolAdapter,public void clearMemory(),Description copied from interface: BitmapPool
251,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class BitmapResource,"@Nullablepublic static BitmapResource obtain(@Nullable android.graphics.Bitmap bitmap, @NonNull BitmapPool bitmapPool)",Returns a new BitmapResource wrapping the given Bitmap if the Bitmap is non-null or null if the given Bitmap is null.
252,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class BitmapResource,@NonNullpublic java.lang.Class<android.graphics.Bitmap> getResourceClass(),Description copied from interface: Resource
253,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class BitmapResource,@NonNullpublic android.graphics.Bitmap get(),Description copied from interface: Resource
254,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class BitmapResource,public int getSize(),Description copied from interface: Resource
255,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class BitmapResource,public void recycle(),Description copied from interface: Resource
256,request/target,com.bumptech.glide.request.target,Class BitmapThumbnailImageViewTarget,public BitmapThumbnailImageViewTarget(android.widget.ImageView view),
257,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class BitmapTransformation,"@NonNullpublic final Resource<android.graphics.Bitmap> transform(@NonNull android.content.Context context, @NonNull Resource<android.graphics.Bitmap> resource, int outWidth, int outHeight)",Description copied from interface: Transformation
258,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class BitmapTransitionOptions,@NonNullpublic static BitmapTransitionOptions withCrossFade(),Returns a BitmapTransitionOptions object that enables a cross fade animation.
259,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class BitmapTransitionOptions,@NonNullpublic static BitmapTransitionOptions withCrossFade(int duration),Returns a BitmapTransitionOptions object that enables a cross fade animation.
260,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class BitmapTransitionOptions,@NonNullpublic static BitmapTransitionOptions withCrossFade(@NonNull DrawableCrossFadeFactory drawableCrossFadeFactory),Returns a BitmapTransitionOptions object that enables a cross fade animation.
261,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class BitmapTransitionOptions,@NonNullpublic static BitmapTransitionOptions withCrossFade(@NonNull DrawableCrossFadeFactory.Builder builder),Returns a BitmapTransitionOptions object that enables a cross fade animation.
262,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class BitmapTransitionOptions,@NonNullpublic static BitmapTransitionOptions withWrapped(@NonNull TransitionFactory<android.graphics.drawable.Drawable> drawableCrossFadeFactory),Returns a BitmapTransitionOptions object that enables a any animation that is possible on drawables.
263,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class BitmapTransitionOptions,@NonNullpublic static BitmapTransitionOptions with(@NonNull TransitionFactory<android.graphics.Bitmap> transitionFactory),Returns a BitmapTransitionOptions object that uses the given transition factory.
264,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class BitmapTransitionOptions,@NonNullpublic BitmapTransitionOptions crossFade(),Enables a cross fade animation between both the placeholder and the first resource and between subsequent resources (if thumbnails are used).
265,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class BitmapTransitionOptions,@NonNullpublic BitmapTransitionOptions crossFade(int duration),Enables a cross fade animation between both the placeholder and the first resource and between subsequent resources (if thumbnails are used).
266,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class BitmapTransitionOptions,@NonNullpublic BitmapTransitionOptions crossFade(@NonNull DrawableCrossFadeFactory drawableCrossFadeFactory),Enables a cross fade animation between both the placeholder and the first resource and between subsequent resources (if thumbnails are used).
267,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class BitmapTransitionOptions,@NonNullpublic BitmapTransitionOptions transitionUsing(@NonNull TransitionFactory<android.graphics.drawable.Drawable> drawableCrossFadeFactory),Enables a any Drawable based animation to run on Bitmaps as well.
268,load/data,com.bumptech.glide.load.data,Class BufferedOutputStream,public void write(int b) throws java.io.IOException,
269,load/data,com.bumptech.glide.load.data,Class BufferedOutputStream,public void write(@NonNull byte[] b) throws java.io.IOException,
270,load/data,com.bumptech.glide.load.data,Class BufferedOutputStream,"public void write(@NonNull byte[] b, int initialOffset, int length) throws java.io.IOException",
271,load/data,com.bumptech.glide.load.data,Class BufferedOutputStream,public void flush() throws java.io.IOException,
272,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class ByteArrayAdapter,public java.lang.String getTag(),TAG for logging.
273,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class ByteArrayAdapter,public int getArrayLength(byte[] array),Return the length of the given array.
274,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class ByteArrayAdapter,public byte[] newArray(int length),Allocate and return an array of the specified size.
275,load/model,com.bumptech.glide.load.model,Class ByteArrayLoader<Data>,"public ModelLoader.LoadData<Data> buildLoadData(@NonNull byte[] model, int width, int height, @NonNull Options options)",Description copied from interface: ModelLoader
276,load/model,com.bumptech.glide.load.model,Class ByteArrayLoader.ByteBufferFactory,"@NonNullpublic ModelLoader<byte[],java.nio.ByteBuffer> build(@NonNull MultiModelLoaderFactory multiFactory)",Description copied from interface: ModelLoaderFactory
277,load/model,com.bumptech.glide.load.model,Interface ByteArrayLoader.Converter<Data>,Data convert(byte[] model),
278,load/model,com.bumptech.glide.load.model,Class ByteArrayLoader.StreamFactory,"@NonNullpublic ModelLoader<byte[],java.io.InputStream> build(@NonNull MultiModelLoaderFactory multiFactory)",Description copied from interface: ModelLoaderFactory
279,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class ByteBufferBitmapDecoder,"public boolean handles(@NonNull java.nio.ByteBuffer source, @NonNull Options options)",Description copied from interface: ResourceDecoder
280,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class ByteBufferBitmapImageDecoderResourceDecoder,"public boolean handles(@NonNull java.nio.ByteBuffer source, @NonNull Options options) throws java.io.IOException",Description copied from interface: ResourceDecoder
281,load/model,com.bumptech.glide.load.model,Class ByteBufferFileLoader,"public ModelLoader.LoadData<java.nio.ByteBuffer> buildLoadData(@NonNull java.io.File file, int width, int height, @NonNull Options options)",Description copied from interface: ModelLoader
282,load/model,com.bumptech.glide.load.model,Class ByteBufferFileLoader.Factory,"@NonNullpublic ModelLoader<java.io.File,java.nio.ByteBuffer> build(@NonNull MultiModelLoaderFactory multiFactory)",Description copied from interface: ModelLoaderFactory
283,resource/gif,com.bumptech.glide.load.resource.gif,Class ByteBufferGifDecoder,public ByteBufferGifDecoder(android.content.Context context),
284,resource/gif,com.bumptech.glide.load.resource.gif,Class ByteBufferGifDecoder,"public boolean handles(@NonNull java.nio.ByteBuffer source, @NonNull Options options) throws java.io.IOException",Description copied from interface: ResourceDecoder
285,resource/bytes,com.bumptech.glide.load.resource.bytes,Class ByteBufferRewinder,@NonNullpublic java.nio.ByteBuffer rewindAndGet(),Description copied from interface: DataRewinder
286,resource/bytes,com.bumptech.glide.load.resource.bytes,Class ByteBufferRewinder.Factory,@NonNullpublic DataRewinder<java.nio.ByteBuffer> build(java.nio.ByteBuffer data),Description copied from interface: DataRewinder.Factory
287,glide/util,com.bumptech.glide.util,Class ByteBufferUtil,@NonNullpublic static java.nio.ByteBuffer fromFile(@NonNull java.io.File file) throws java.io.IOException,
288,glide/util,com.bumptech.glide.util,Class ByteBufferUtil,"public static void toFile(@NonNull java.nio.ByteBuffer buffer, @NonNull java.io.File file) throws java.io.IOException",
289,glide/util,com.bumptech.glide.util,Class ByteBufferUtil,"public static void toStream(@NonNull java.nio.ByteBuffer byteBuffer, @NonNull java.io.OutputStream os) throws java.io.IOException",
290,glide/util,com.bumptech.glide.util,Class ByteBufferUtil,@NonNullpublic static byte[] toBytes(@NonNull java.nio.ByteBuffer byteBuffer),
291,glide/util,com.bumptech.glide.util,Class ByteBufferUtil,@NonNullpublic static java.io.InputStream toStream(@NonNull java.nio.ByteBuffer buffer),
292,resource/bytes,com.bumptech.glide.load.resource.bytes,Class BytesResource,@NonNullpublic java.lang.Class<byte[]> getResourceClass(),Description copied from interface: Resource
293,resource/bytes,com.bumptech.glide.load.resource.bytes,Class BytesResource,@NonNullpublic byte[] get(),In most cases it will only be retrieved once (see linked methods).
294,resource/bytes,com.bumptech.glide.load.resource.bytes,Class BytesResource,public int getSize(),Description copied from interface: Resource
295,glide/util,com.bumptech.glide.util,"Class CachedHashCodeArrayMap<K,V>",public void clear(),
296,glide/util,com.bumptech.glide.util,"Class CachedHashCodeArrayMap<K,V>","public V setValueAt(int index, V value)",
297,glide/util,com.bumptech.glide.util,"Class CachedHashCodeArrayMap<K,V>","public V put(K key, V value)",
298,glide/util,com.bumptech.glide.util,"Class CachedHashCodeArrayMap<K,V>","public void putAll(androidx.collection.SimpleArrayMap<? extends K,? extends V> simpleArrayMap)",
299,glide/util,com.bumptech.glide.util,"Class CachedHashCodeArrayMap<K,V>",public V removeAt(int index),
300,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class CenterCrop,"protected android.graphics.Bitmap transform(@NonNull BitmapPool pool, @NonNull android.graphics.Bitmap toTransform, int outWidth, int outHeight)",Description copied from class: BitmapTransformation
301,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class CenterCrop,public boolean equals(java.lang.Object o),Description copied from interface: Key
302,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class CenterCrop,public int hashCode(),Description copied from interface: Key
303,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class CenterInside,"protected android.graphics.Bitmap transform(@NonNull BitmapPool pool, @NonNull android.graphics.Bitmap toTransform, int outWidth, int outHeight)",Description copied from class: BitmapTransformation
304,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class CenterInside,public boolean equals(java.lang.Object o),Description copied from interface: Key
305,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class CenterInside,public int hashCode(),Description copied from interface: Key
306,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class CircleCrop,"protected android.graphics.Bitmap transform(@NonNull BitmapPool pool, @NonNull android.graphics.Bitmap toTransform, int outWidth, int outHeight)",Description copied from class: BitmapTransformation
307,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class CircleCrop,public boolean equals(java.lang.Object o),Description copied from interface: Key
308,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class CircleCrop,public int hashCode(),Description copied from interface: Key
309,glide/util,com.bumptech.glide.util,Class ContentLengthInputStream,"@NonNullpublic static java.io.InputStream obtain(@NonNull java.io.InputStream other, @Nullable java.lang.String contentLengthHeader)",
310,glide/util,com.bumptech.glide.util,Class ContentLengthInputStream,"@NonNullpublic static java.io.InputStream obtain(@NonNull java.io.InputStream other, long contentLength)",
311,glide/util,com.bumptech.glide.util,Class ContentLengthInputStream,public int available() throws java.io.IOException,
312,glide/util,com.bumptech.glide.util,Class ContentLengthInputStream,public int read() throws java.io.IOException,
313,glide/util,com.bumptech.glide.util,Class ContentLengthInputStream,public int read(byte[] buffer) throws java.io.IOException,
314,request/target,com.bumptech.glide.request.target,Class CustomTarget<T>,public CustomTarget(),"Creates a new CustomTarget that will attempt to load the resource in its original size. This constructor can cause very memory inefficient loads if the resource is large and can cause OOMs. It's provided as a convenience for when you'd like to specify dimensions with BaseRequestOptions.override(int). In all other cases, prefer CustomTarget(int, int)."
315,request/target,com.bumptech.glide.request.target,Class CustomTarget<T>,public void onStart(),Description copied from interface: LifecycleListener
316,request/target,com.bumptech.glide.request.target,Class CustomTarget<T>,public void onStop(),Description copied from interface: LifecycleListener
317,request/target,com.bumptech.glide.request.target,Class CustomTarget<T>,public void onDestroy(),Description copied from interface: LifecycleListener
318,request/target,com.bumptech.glide.request.target,Class CustomTarget<T>,public void onLoadStarted(@Nullable android.graphics.drawable.Drawable placeholder),Description copied from interface: Target
319,request/target,com.bumptech.glide.request.target,Class CustomTarget<T>,public void onLoadFailed(@Nullable android.graphics.drawable.Drawable errorDrawable),Description copied from interface: Target
320,request/target,com.bumptech.glide.request.target,Class CustomTarget<T>,public final void getSize(@NonNull SizeReadyCallback cb),Description copied from interface: Target
321,request/target,com.bumptech.glide.request.target,Class CustomTarget<T>,public final void removeCallback(@NonNull SizeReadyCallback cb),Description copied from interface: Target
322,request/target,com.bumptech.glide.request.target,Class CustomTarget<T>,public final void setRequest(@Nullable Request request),Description copied from interface: Target
323,request/target,com.bumptech.glide.request.target,"Class CustomViewTarget<T extends android.view.View,Z>",protected abstract void onResourceCleared(@Nullable android.graphics.drawable.Drawable placeholder),"A required callback invoked when the resource is no longer valid and must be freed. You must ensure that any current Drawable received in Target.onResourceReady(Object, Transition) is no longer used before redrawing the container (usually a View) or changing its visibility. Not doing so will result in crashes in your app."
324,request/target,com.bumptech.glide.request.target,"Class CustomViewTarget<T extends android.view.View,Z>",protected void onResourceLoading(@Nullable android.graphics.drawable.Drawable placeholder),An optional callback invoked when a resource load is started.
325,request/target,com.bumptech.glide.request.target,"Class CustomViewTarget<T extends android.view.View,Z>",public void onStart(),Description copied from interface: LifecycleListener
326,request/target,com.bumptech.glide.request.target,"Class CustomViewTarget<T extends android.view.View,Z>",public void onStop(),Description copied from interface: LifecycleListener
327,request/target,com.bumptech.glide.request.target,"Class CustomViewTarget<T extends android.view.View,Z>",public void onDestroy(),Description copied from interface: LifecycleListener
328,request/target,com.bumptech.glide.request.target,"Class CustomViewTarget<T extends android.view.View,Z>","@NonNullpublic final CustomViewTarget<T,Z> waitForLayout()","Indicates that Glide should always wait for any pending layout pass before checking for the size an View. By default, Glide will only wait for a pending layout pass if it's unable to resolve the size from the ViewGroup.LayoutParams or valid non-zero values for View.getWidth() and View.getHeight(). Because calling this method forces Glide to wait for the layout pass to occur before starting loads, setting this parameter to true can cause Glide to asynchronous load an image even if it's in the memory cache. The load will happen asynchronously because Glide has to wait for a layout pass to occur, which won't necessarily happen in the same frame as when the image is requested. As a result, using this method can resulting in flashing in some cases and should be used sparingly. If the ViewGroup.LayoutParams of the wrapped View are set to fixed sizes, they will still be used instead of the View's dimensions even if this method is called. This parameter is a fallback only."
329,request/target,com.bumptech.glide.request.target,"Class CustomViewTarget<T extends android.view.View,Z>","@NonNullpublic final CustomViewTarget<T,Z> clearOnDetach()",Clears the View's Request when the View is detached from its Window and restarts the Request when the View is re-attached from its Window. This is an experimental API that may be removed in a future version. Using this method can save memory by allowing Glide to more eagerly clear resources when transitioning screens or swapping adapters in scrolling views. However it also substantially increases the odds that images will not be in memory if users subsequently return to a screen where images were previously loaded. Whether or not this happens will depend on the number of images loaded in the new screen and the size of the memory cache. Increasing the size of the memory cache can improve this behavior but it largely negates the memory benefits of using this method. Use this method with caution and measure your memory usage to ensure that it's actually improving your memory usage in the cases you care about.
330,request/target,com.bumptech.glide.request.target,"Class CustomViewTarget<T extends android.view.View,Z>","@Deprecatedpublic final CustomViewTarget<T,Z> useTagId(@IdRes int tagId)",Deprecated. Using this method prevents clearing the target from working properly. Glide uses its own internal tag id so this method should not be necessary. This method is currently a no-op.
331,request/target,com.bumptech.glide.request.target,"Class CustomViewTarget<T extends android.view.View,Z>",@NonNullpublic final T getView(),Returns the wrapped View.
332,request/target,com.bumptech.glide.request.target,"Class CustomViewTarget<T extends android.view.View,Z>",public final void getSize(@NonNull SizeReadyCallback cb),"Determines the size of the view by first checking View.getWidth() and View.getHeight(). If one or both are zero, it then checks the view's ViewGroup.LayoutParams. If one or both of the params width and height are less than or equal to zero, it then adds an ViewTreeObserver.OnPreDrawListener which waits until the view has been measured before calling the callback with the view's drawn width and height."
333,request/target,com.bumptech.glide.request.target,"Class CustomViewTarget<T extends android.view.View,Z>",public final void removeCallback(@NonNull SizeReadyCallback cb),Description copied from interface: Target
334,request/target,com.bumptech.glide.request.target,"Class CustomViewTarget<T extends android.view.View,Z>",public final void onLoadStarted(@Nullable android.graphics.drawable.Drawable placeholder),Description copied from interface: Target
335,request/target,com.bumptech.glide.request.target,"Class CustomViewTarget<T extends android.view.View,Z>",public final void onLoadCleared(@Nullable android.graphics.drawable.Drawable placeholder),Description copied from interface: Target
336,request/target,com.bumptech.glide.request.target,"Class CustomViewTarget<T extends android.view.View,Z>",public final void setRequest(@Nullable Request request),Stores the request using View.setTag(Object).
337,request/target,com.bumptech.glide.request.target,"Class CustomViewTarget<T extends android.view.View,Z>",@Nullablepublic final Request getRequest(),Returns any stored request using View.getTag().
338,load/data,com.bumptech.glide.load.data,Interface DataFetcher<T>,"void loadData(@NonNull Priority priority, @NonNull DataFetcher.DataCallback<? super T> callback)",Fetch data from which a resource can be decoded. This will always be called on background thread so it is safe to perform long running tasks here. Any third party libraries called must be thread safe (or move the work to another thread) since this method will be called from a thread in a ExecutorService that may have more than one background thread. You MUST use the DataFetcher.DataCallback once the request is complete. You are free to move the fetch work to another thread and call the callback from there. This method will only be called when the corresponding resource is not in the cache. Note - this method will be run on a background thread so blocking I/O is safe.
339,load/data,com.bumptech.glide.load.data,Interface DataFetcher<T>,void cleanup(),"Cleanup or recycle any resources used by this data fetcher. This method will be called in a finally block after the data provided by loadData(com.bumptech.glide.Priority, com.bumptech.glide.load.data.DataFetcher.DataCallback) has been decoded by the ResourceDecoder. Note - this method will be run on a background thread so blocking I/O is safe."
340,load/data,com.bumptech.glide.load.data,Interface DataFetcher<T>,void cancel(),"A method that will be called when a load is no longer relevant and has been cancelled. This method does not need to guarantee that any in process loads do not finish. It also may be called before a load starts or after it finishes. The best way to use this method is to cancel any loads that have not yet started, but allow those that are in process to finish since its we typically will want to display the same resource in a different view in the near future. Note - this method will be run on the main thread so it should not perform blocking operations and should finish quickly."
341,load/data,com.bumptech.glide.load.data,Interface DataFetcher<T>,@NonNulljava.lang.Class<T> getDataClass(),Returns the class of the data this fetcher will attempt to obtain.
342,load/data,com.bumptech.glide.load.data,Interface DataFetcher.DataCallback<T>,void onDataReady(@Nullable T data),"Called with the loaded data if the load succeeded, or with null if the load failed."
343,load/data,com.bumptech.glide.load.data,Interface DataRewinder<T>,@NonNullT rewindAndGet() throws java.io.IOException,Rewinds the wrapped data back to the beginning and returns the re-wound data (or a wrapper for the re-wound data).
344,load/data,com.bumptech.glide.load.data,Interface DataRewinder.Factory<T>,@NonNullDataRewinder<T> build(@NonNull T data),Returns a new DataRewinder wrapping the given data.
345,load/data,com.bumptech.glide.load.data,Class DataRewinderRegistry,public void register(@NonNull DataRewinder.Factory<?> factory),
346,glide/load,com.bumptech.glide.load,Enum DataSource,public static final DataSource LOCAL,"Indicates data was probably retrieved locally from the device, although it may have been obtained through a content provider that may have obtained the data from a remote source."
347,glide/load,com.bumptech.glide.load,Enum DataSource,public static final DataSource REMOTE,Indicates data was retrieved from a remote source other than the device.
348,glide/load,com.bumptech.glide.load,Enum DataSource,public static final DataSource DATA_DISK_CACHE,Indicates data was retrieved unmodified from the on device cache.
349,glide/load,com.bumptech.glide.load,Enum DataSource,public static final DataSource RESOURCE_DISK_CACHE,Indicates data was retrieved from modified content in the on device cache.
350,glide/load,com.bumptech.glide.load,Enum DataSource,public static DataSource[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (DataSource c : DataSource.values())  System.out.println(c);"
351,load/model,com.bumptech.glide.load.model,"Class DataUrlLoader<Model,Data>","public ModelLoader.LoadData<Data> buildLoadData(@NonNull Model model, int width, int height, @NonNull Options options)",Description copied from interface: ModelLoader
352,load/model,com.bumptech.glide.load.model,Interface DataUrlLoader.DataDecoder<Data>,Data decode(java.lang.String uri) throws java.lang.IllegalArgumentException,
353,load/model,com.bumptech.glide.load.model,Interface DataUrlLoader.DataDecoder<Data>,void close(Data data) throws java.io.IOException,
354,load/model,com.bumptech.glide.load.model,Class DataUrlLoader.StreamFactory<Model>,"@NonNullpublic ModelLoader<Model,java.io.InputStream> build(@NonNull MultiModelLoaderFactory multiFactory)",Description copied from interface: ModelLoaderFactory
355,glide/load,com.bumptech.glide.load,Enum DecodeFormat,public static final DecodeFormat PREFER_ARGB_8888,"Bitmaps returned by the ResourceDecoder. should return Bitmap.Config.ARGB_8888 for Bitmap.getConfig() when possible. On Android O+, this format will use ARGB_8888 only when it's not possible to use Bitmap.Config.HARDWARE. More information is available about hardware Bitmaps here: https://goo.gl/tn2A6k. If you need to disable hardware Bitmaps for a particular request, use BaseRequestOptions.disallowHardwareConfig(). GIF images decoded by BitmapFactory currently use an internal hidden format that is returned as null from Bitmap.getConfig(). Since we cannot force BitmapFactory to always return our desired config, this setting is a preference, not a promise."
356,glide/load,com.bumptech.glide.load,Enum DecodeFormat,public static DecodeFormat[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (DecodeFormat c : DecodeFormat.values())  System.out.println(c);"
357,load/engine,com.bumptech.glide.load.engine,"Class DecodePath<DataType,ResourceType,Transcode>","public Resource<Transcode> decode(DataRewinder<DataType> rewinder, int width, int height, @NonNull Options options, com.bumptech.glide.load.engine.DecodePath.DecodeCallback<ResourceType> callback) throws GlideException",
358,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class DefaultImageHeaderParser,@NonNullpublic ImageHeaderParser.ImageType getType(@NonNull java.io.InputStream is) throws java.io.IOException,
359,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class DefaultImageHeaderParser,@NonNullpublic ImageHeaderParser.ImageType getType(@NonNull java.nio.ByteBuffer byteBuffer) throws java.io.IOException,
360,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class DefaultImageHeaderParser,"public int getOrientation(@NonNull java.io.InputStream is, @NonNull ArrayPool byteArrayPool) throws java.io.IOException",Description copied from interface: ImageHeaderParser
361,engine/cache,com.bumptech.glide.load.engine.cache,Interface DiskCache,@Nullablejava.io.File get(Key key),"Get the cache for the value at the given key. Note - This is potentially dangerous, someone may write a new value to the file at any point in time and we won't know about it."
362,engine/cache,com.bumptech.glide.load.engine.cache,Interface DiskCache,"void put(Key key, DiskCache.Writer writer)","Write to a key in the cache. DiskCache.Writer is used so that the cache implementation can perform actions after the write finishes, like commit (via atomic file rename)."
363,engine/cache,com.bumptech.glide.load.engine.cache,Interface DiskCache,void delete(Key key),Remove the key and value from the cache.
364,engine/cache,com.bumptech.glide.load.engine.cache,Interface DiskCache.Factory,static final int DEFAULT_DISK_CACHE_SIZE,250 MB of cache.
365,engine/cache,com.bumptech.glide.load.engine.cache,Class DiskCacheAdapter,public java.io.File get(Key key),Description copied from interface: DiskCache
366,engine/cache,com.bumptech.glide.load.engine.cache,Class DiskCacheAdapter,"public void put(Key key, DiskCache.Writer writer)",Description copied from interface: DiskCache
367,engine/cache,com.bumptech.glide.load.engine.cache,Class DiskCacheAdapter,public void delete(Key key),Description copied from interface: DiskCache
368,load/engine,com.bumptech.glide.load.engine,Class DiskCacheStrategy,public static final DiskCacheStrategy ALL,"Caches remote data with both DATA and RESOURCE, and local data with RESOURCE only."
369,load/engine,com.bumptech.glide.load.engine,Class DiskCacheStrategy,public static final DiskCacheStrategy NONE,Saves no data to cache.
370,load/engine,com.bumptech.glide.load.engine,Class DiskCacheStrategy,public static final DiskCacheStrategy DATA,Writes retrieved data directly to the disk cache before it's decoded.
371,load/engine,com.bumptech.glide.load.engine,Class DiskCacheStrategy,public static final DiskCacheStrategy RESOURCE,Writes resources to disk after they've been decoded.
372,load/engine,com.bumptech.glide.load.engine,Class DiskCacheStrategy,public abstract boolean isDataCacheable(DataSource dataSource),Returns true if this request should cache the original unmodified data.
373,load/engine,com.bumptech.glide.load.engine,Class DiskCacheStrategy,"public abstract boolean isResourceCacheable(boolean isFromAlternateCacheKey, DataSource dataSource, EncodeStrategy encodeStrategy)",Returns true if this request should cache the final transformed resource.
374,load/engine,com.bumptech.glide.load.engine,Class DiskCacheStrategy,public abstract boolean decodeCachedResource(),Returns true if this request should attempt to decode cached resource data.
375,glide/disklrucache,com.bumptech.glide.disklrucache,Class DiskLruCache,"public static DiskLruCache open(java.io.File directory, int appVersion, int valueCount, long maxSize) throws java.io.IOException","Opens the cache in directory, creating a cache if none exists there."
376,glide/disklrucache,com.bumptech.glide.disklrucache,Class DiskLruCache,public DiskLruCache.Value get(java.lang.String key) throws java.io.IOException,"Returns a snapshot of the entry named key, or null if it doesn't exist is not currently readable. If a value is returned, it is moved to the head of the LRU queue."
377,glide/disklrucache,com.bumptech.glide.disklrucache,Class DiskLruCache,public DiskLruCache.Editor edit(java.lang.String key) throws java.io.IOException,"Returns an editor for the entry named key, or null if another edit is in progress."
378,glide/disklrucache,com.bumptech.glide.disklrucache,Class DiskLruCache,public java.io.File getDirectory(),Returns the directory where this cache stores its data.
379,glide/disklrucache,com.bumptech.glide.disklrucache,Class DiskLruCache,public long getMaxSize(),Returns the maximum number of bytes that this cache should use to store its data.
380,glide/disklrucache,com.bumptech.glide.disklrucache,Class DiskLruCache,public void setMaxSize(long maxSize),"Changes the maximum number of bytes the cache can store and queues a job to trim the existing store, if necessary."
381,glide/disklrucache,com.bumptech.glide.disklrucache,Class DiskLruCache,public long size(),Returns the number of bytes currently being used to store the values in this cache. This may be greater than the max size if a background deletion is pending.
382,glide/disklrucache,com.bumptech.glide.disklrucache,Class DiskLruCache,public boolean remove(java.lang.String key) throws java.io.IOException,Drops the entry for key if it exists and can be removed. Entries actively being edited cannot be removed.
383,glide/disklrucache,com.bumptech.glide.disklrucache,Class DiskLruCache,public boolean isClosed(),Returns true if this cache has been closed.
384,glide/disklrucache,com.bumptech.glide.disklrucache,Class DiskLruCache,public void flush() throws java.io.IOException,Force buffered operations to the filesystem.
385,glide/disklrucache,com.bumptech.glide.disklrucache,Class DiskLruCache,public void close() throws java.io.IOException,Closes this cache. Stored values will remain on the filesystem.
386,engine/cache,com.bumptech.glide.load.engine.cache,Class DiskLruCacheFactory,"public DiskLruCacheFactory(java.lang.String diskCacheFolder, long diskCacheSize)",
387,engine/cache,com.bumptech.glide.load.engine.cache,Class DiskLruCacheFactory,"public DiskLruCacheFactory(java.lang.String diskCacheFolder, java.lang.String diskCacheName, long diskCacheSize)",
388,engine/cache,com.bumptech.glide.load.engine.cache,Class DiskLruCacheWrapper,"@Deprecatedpublic static DiskCache get(java.io.File directory, long maxSize)","Deprecated. Use create(File, long) to create a new cache with the specified arguments."
389,engine/cache,com.bumptech.glide.load.engine.cache,Class DiskLruCacheWrapper,"public static DiskCache create(java.io.File directory, long maxSize)",Create a new DiskCache in the given directory with a specified max size.
390,engine/cache,com.bumptech.glide.load.engine.cache,Class DiskLruCacheWrapper,public java.io.File get(Key key),Description copied from interface: DiskCache
391,engine/cache,com.bumptech.glide.load.engine.cache,Class DiskLruCacheWrapper,"public void put(Key key, DiskCache.Writer writer)",Description copied from interface: DiskCache
392,engine/cache,com.bumptech.glide.load.engine.cache,Class DiskLruCacheWrapper,public void delete(Key key),Description copied from interface: DiskCache
393,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class Downsampler,public static final Option<DecodeFormat> DECODE_FORMAT,Indicates the DecodeFormat that will be used in conjunction with the image format to determine the Bitmap.Config to provide to BitmapFactory.Options.inPreferredConfig when decoding the image.
394,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class Downsampler,public static final Option<PreferredColorSpace> PREFERRED_COLOR_SPACE,Sets the PreferredColorSpace that will be used along with the version of Android and color space of the requested image to determine the final color space used to decode the image. Refer to PreferredColorSpace for details on how this option works and its various limitations.
395,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class Downsampler,@Deprecatedpublic static final Option<DownsampleStrategy> DOWNSAMPLE_STRATEGY,Deprecated. Use DownsampleStrategy.OPTION directly instead.
396,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class Downsampler,public static final Option<java.lang.Boolean> FIX_BITMAP_SIZE_TO_REQUESTED_DIMENSIONS,"Ensure that the size of the bitmap is fixed to the requested width and height of the resource from the caller. The final resource dimensions may differ from the requested width and height, and thus setting this to true may result in the bitmap size differing from the resource dimensions. This can be used as a performance optimization for KitKat and above by fixing the size of the bitmap for a collection of requested resources so that the bitmap pool will not need to allocate new bitmaps for images of different sizes."
397,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class Downsampler,public boolean handles(java.io.InputStream is),
398,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class Downsampler,public boolean handles(java.nio.ByteBuffer byteBuffer),
399,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class Downsampler,public boolean handles(android.os.ParcelFileDescriptor source),
400,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class Downsampler,"public Resource<android.graphics.Bitmap> decode(java.io.InputStream is, int outWidth, int outHeight, Options options) throws java.io.IOException",Returns a Bitmap decoded from the given InputStream that is rotated to match any EXIF data present in the stream and that is downsampled according to the given dimensions and any provided DownsampleStrategy option.
401,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class Downsampler,"public Resource<android.graphics.Bitmap> decode(java.io.InputStream is, int requestedWidth, int requestedHeight, Options options, Downsampler.DecodeCallbacks callbacks) throws java.io.IOException","Returns a Bitmap decoded from the given InputStream that is rotated to match any EXIF data present in the stream and that is downsampled according to the given dimensions and any provided DownsampleStrategy option. If a Bitmap is present in the BitmapPool whose dimensions exactly match those of the image for the given InputStream is available, the operation is much less expensive in terms of memory."
402,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Interface Downsampler.DecodeCallbacks,void onObtainBounds(),
403,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class DownsampleStrategy,public static final DownsampleStrategy AT_LEAST,"Downsamples so the image's smallest dimension is between the given dimensions and 2x the given dimensions, with no size restrictions on the image's largest dimension. Does not upscale if the requested dimensions are larger than the original dimensions."
404,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class DownsampleStrategy,public static final DownsampleStrategy AT_MOST,"Downsamples so the image's largest dimension is between 1/2 the given dimensions and the given dimensions, with no restrictions on the image's smallest dimension. Does not upscale if the requested dimensions are larger than the original dimensions."
405,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class DownsampleStrategy,public static final DownsampleStrategy FIT_CENTER,"Scales, maintaining the original aspect ratio, so that one of the image's dimensions is exactly equal to the requested size and the other dimension is less than or equal to the requested size. This method will upscale if the requested width and height are greater than the source width and height. To avoid upscaling, use AT_LEAST, AT_MOST or CENTER_INSIDE. On pre-KitKat devices, FIT_CENTER will downsample by a power of two only so that one of the image's dimensions is greater than or equal to the requested size. No guarantees are made about the second dimensions. This is NOT the same as AT_LEAST because only one dimension, not both, are greater than or equal to the requested dimensions, the other may be smaller."
406,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class DownsampleStrategy,public static final DownsampleStrategy CENTER_INSIDE,"Identical to FIT_CENTER, but never upscales."
407,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class DownsampleStrategy,public static final DownsampleStrategy CENTER_OUTSIDE,"Scales, maintaining the original aspect ratio, so that one of the image's dimensions is exactly equal to the requested size and the other dimension is greater than or equal to the requested size. This method will upscale if the requested width and height are greater than the source width and height. To avoid upscaling, use AT_LEAST, AT_MOST, or CENTER_INSIDE. On pre-KitKat devices, Downsampler treats this as equivalent to AT_LEAST because only power of two downsampling can be used."
408,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class DownsampleStrategy,public static final DownsampleStrategy NONE,Performs no downsampling or scaling.
409,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class DownsampleStrategy,public static final DownsampleStrategy DEFAULT,"Default strategy, currently CENTER_OUTSIDE."
410,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class DownsampleStrategy,"public abstract float getScaleFactor(int sourceWidth, int sourceHeight, int requestedWidth, int requestedHeight)","Returns a float (0, +infinity) indicating a scale factor to apply to the source width and height when displayed in the requested width and height. The returned scale factor will be split into a power of two sample size applied via BitmapFactory.Options.inSampleSize and a float scale factor applied after downsampling via BitmapFactory.Options.inTargetDensity and BitmapFactory.Options.inDensity. Because of rounding errors the scale factor may not be applied precisely. The float scaling factor will only be applied on KitKat+. Prior to KitKat, only the power of two downsampling will be applied."
411,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Enum DownsampleStrategy.SampleSizeRounding,public static final DownsampleStrategy.SampleSizeRounding MEMORY,Prefer to round the sample size up so that the image is downsampled to smaller than the requested size to use less memory.
412,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Enum DownsampleStrategy.SampleSizeRounding,public static DownsampleStrategy.SampleSizeRounding[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (DownsampleStrategy.SampleSizeRounding c : DownsampleStrategy.SampleSizeRounding.values())  System.out.println(c);"
413,request/transition,com.bumptech.glide.request.transition,Class DrawableCrossFadeFactory.Builder,public Builder(),
414,request/transition,com.bumptech.glide.request.transition,Class DrawableCrossFadeFactory.Builder,public DrawableCrossFadeFactory.Builder setCrossFadeEnabled(boolean isCrossFadeEnabled),Enables or disables animating the alpha of the Drawable the cross fade will animate from. Defaults to false.
415,resource/drawable,com.bumptech.glide.load.resource.drawable,Class DrawableDecoderCompat,"public static android.graphics.drawable.Drawable getDrawable(android.content.Context ourContext, android.content.Context targetContext, @DrawableRes int id)","See getDrawable(Context, int, Theme)."
416,request/target,com.bumptech.glide.request.target,Class DrawableImageViewTarget,public DrawableImageViewTarget(android.widget.ImageView view),
417,resource/drawable,com.bumptech.glide.load.resource.drawable,Class DrawableResource<T extends android.graphics.drawable.Drawable>,@NonNullpublic final T get(),Description copied from interface: Resource
418,request/target,com.bumptech.glide.request.target,Class DrawableThumbnailImageViewTarget,public DrawableThumbnailImageViewTarget(android.widget.ImageView view),
419,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class DrawableTransformation,public Transformation<android.graphics.drawable.BitmapDrawable> asBitmapDrawable(),
420,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class DrawableTransformation,"@NonNullpublic Resource<android.graphics.drawable.Drawable> transform(@NonNull android.content.Context context, @NonNull Resource<android.graphics.drawable.Drawable> resource, int outWidth, int outHeight)",Description copied from interface: Transformation
421,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class DrawableTransformation,public boolean equals(java.lang.Object o),Description copied from interface: Key
422,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class DrawableTransformation,public int hashCode(),Description copied from interface: Key
423,resource/drawable,com.bumptech.glide.load.resource.drawable,Class DrawableTransitionOptions,@NonNullpublic static DrawableTransitionOptions withCrossFade(),Returns a DrawableTransitionOptions object that enables a cross fade animation.
424,resource/drawable,com.bumptech.glide.load.resource.drawable,Class DrawableTransitionOptions,@NonNullpublic static DrawableTransitionOptions withCrossFade(int duration),Returns a DrawableTransitionOptions object that enables a cross fade animation.
425,resource/drawable,com.bumptech.glide.load.resource.drawable,Class DrawableTransitionOptions,@NonNullpublic static DrawableTransitionOptions withCrossFade(@NonNull DrawableCrossFadeFactory drawableCrossFadeFactory),Returns a DrawableTransitionOptions object that enables a cross fade animation.
426,resource/drawable,com.bumptech.glide.load.resource.drawable,Class DrawableTransitionOptions,@NonNullpublic static DrawableTransitionOptions withCrossFade(@NonNull DrawableCrossFadeFactory.Builder builder),Returns a DrawableTransitionOptions object that enables a cross fade animation.
427,resource/drawable,com.bumptech.glide.load.resource.drawable,Class DrawableTransitionOptions,@NonNullpublic static DrawableTransitionOptions with(@NonNull TransitionFactory<android.graphics.drawable.Drawable> transitionFactory),Returns a DrawableTransitionOptions object that uses the given transition factory.
428,resource/drawable,com.bumptech.glide.load.resource.drawable,Class DrawableTransitionOptions,@NonNullpublic DrawableTransitionOptions crossFade(),Enables a cross fade animation between both the placeholder and the first resource and between subsequent resources (if thumbnails are used).
429,resource/drawable,com.bumptech.glide.load.resource.drawable,Class DrawableTransitionOptions,@NonNullpublic DrawableTransitionOptions crossFade(int duration),Enables a cross fade animation between both the placeholder and the first resource and between subsequent resources (if thumbnails are used).
430,resource/drawable,com.bumptech.glide.load.resource.drawable,Class DrawableTransitionOptions,@NonNullpublic DrawableTransitionOptions crossFade(@NonNull DrawableCrossFadeFactory drawableCrossFadeFactory),Enables a cross fade animation between both the placeholder and the first resource and between subsequent resources (if thumbnails are used).
431,glide/signature,com.bumptech.glide.signature,Class EmptySignature,@NonNullpublic static EmptySignature obtain(),
432,glide/signature,com.bumptech.glide.signature,Class EmptySignature,public java.lang.String toString(),
433,glide/provider,com.bumptech.glide.provider,Class EncoderRegistry,@Nullablepublic <T> Encoder<T> getEncoder(@NonNull java.lang.Class<T> dataClass),
434,glide/provider,com.bumptech.glide.provider,Class EncoderRegistry,"public <T> void append(@NonNull java.lang.Class<T> dataClass, @NonNull Encoder<T> encoder)",
435,glide/load,com.bumptech.glide.load,Enum EncodeStrategy,public static final EncodeStrategy SOURCE,"Writes the original unmodified data for the resource to disk, not include downsampling or transformations."
436,glide/load,com.bumptech.glide.load,Enum EncodeStrategy,public static final EncodeStrategy TRANSFORMED,"Writes the decoded, downsampled and transformed data for the resource to disk."
437,glide/load,com.bumptech.glide.load,Enum EncodeStrategy,public static EncodeStrategy[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (EncodeStrategy c : EncodeStrategy.values())  System.out.println(c);"
438,load/engine,com.bumptech.glide.load.engine,Class Engine,"public <R> Engine.LoadStatus load(GlideContext glideContext, java.lang.Object model, Key signature, int width, int height, java.lang.Class<?> resourceClass, java.lang.Class<R> transcodeClass, Priority priority, DiskCacheStrategy diskCacheStrategy, java.util.Map<java.lang.Class<?>,Transformation<?>> transformations, boolean isTransformationRequired, boolean isScaleOnlyOrNoTransform, Options options, boolean isMemoryCacheable, boolean useUnlimitedSourceExecutorPool, boolean useAnimationPool, boolean onlyRetrieveFromCache, ResourceCallback cb, java.util.concurrent.Executor callbackExecutor)","Starts a load for the given arguments. Must be called on the main thread. The flow for any request is as follows: Check the current set of actively used resources, return the active resource if present, and move any newly inactive resources into the memory cache. Check the memory cache and provide the cached resource if present. Check the current set of in progress loads and add the cb to the in progress load if one is present. Start a new load. Active resources are those that have been provided to at least one request and have not yet been released. Once all consumers of a resource have released that resource, the resource then goes to cache. If the resource is ever returned to a new consumer from cache, it is re-added to the active resources. If the resource is evicted from the cache, its resources are recycled and re-used if possible and the resource is discarded. There is no strict requirement that consumers release their resources so active resources are held weakly."
439,load/engine,com.bumptech.glide.load.engine,Class Engine,public void release(Resource<?> resource),
440,load/engine,com.bumptech.glide.load.engine,Class Engine,"public void onEngineJobComplete(com.bumptech.glide.load.engine.EngineJob<?> engineJob, Key key, com.bumptech.glide.load.engine.EngineResource<?> resource)",
441,load/engine,com.bumptech.glide.load.engine,Class Engine,"public void onEngineJobCancelled(com.bumptech.glide.load.engine.EngineJob<?> engineJob, Key key)",
442,load/engine,com.bumptech.glide.load.engine,Class Engine,public void onResourceRemoved(@NonNull Resource<?> resource),
443,load/engine,com.bumptech.glide.load.engine,Class Engine,"public void onResourceReleased(Key cacheKey, com.bumptech.glide.load.engine.EngineResource<?> resource)",
444,load/engine,com.bumptech.glide.load.engine,Class Engine,public void clearDiskCache(),
445,glide/request,com.bumptech.glide.request,Class ErrorRequestCoordinator,"public void setRequests(Request primary, Request error)",
446,glide/request,com.bumptech.glide.request,Class ErrorRequestCoordinator,public void begin(),Description copied from interface: Request
447,glide/request,com.bumptech.glide.request,Class ErrorRequestCoordinator,public void clear(),Description copied from interface: Request
448,glide/request,com.bumptech.glide.request,Class ErrorRequestCoordinator,public void pause(),Description copied from interface: Request
449,glide/request,com.bumptech.glide.request,Class ErrorRequestCoordinator,public boolean isRunning(),Description copied from interface: Request
450,glide/request,com.bumptech.glide.request,Class ErrorRequestCoordinator,public boolean isComplete(),Description copied from interface: Request
451,glide/request,com.bumptech.glide.request,Class ErrorRequestCoordinator,public boolean isCleared(),Description copied from interface: Request
452,glide/request,com.bumptech.glide.request,Class ErrorRequestCoordinator,public boolean isEquivalentTo(Request o),Description copied from interface: Request
453,glide/request,com.bumptech.glide.request,Class ErrorRequestCoordinator,public boolean canSetImage(Request request),Description copied from interface: RequestCoordinator
454,glide/request,com.bumptech.glide.request,Class ErrorRequestCoordinator,public boolean canNotifyStatusChanged(Request request),Description copied from interface: RequestCoordinator
455,glide/request,com.bumptech.glide.request,Class ErrorRequestCoordinator,public boolean canNotifyCleared(Request request),Description copied from interface: RequestCoordinator
456,glide/request,com.bumptech.glide.request,Class ErrorRequestCoordinator,public boolean isAnyResourceSet(),Description copied from interface: RequestCoordinator
457,glide/request,com.bumptech.glide.request,Class ErrorRequestCoordinator,public void onRequestSuccess(Request request),Description copied from interface: RequestCoordinator
458,glide/request,com.bumptech.glide.request,Class ErrorRequestCoordinator,public void onRequestFailed(Request request),Description copied from interface: RequestCoordinator
459,glide/util,com.bumptech.glide.util,Class ExceptionCatchingInputStream,@NonNullpublic static ExceptionCatchingInputStream obtain(@NonNull java.io.InputStream toWrap),
460,glide/util,com.bumptech.glide.util,Class ExceptionCatchingInputStream,public int available() throws java.io.IOException,
461,glide/util,com.bumptech.glide.util,Class ExceptionCatchingInputStream,public void close() throws java.io.IOException,
462,glide/util,com.bumptech.glide.util,Class ExceptionCatchingInputStream,public void mark(int readLimit),
463,glide/util,com.bumptech.glide.util,Class ExceptionCatchingInputStream,public boolean markSupported(),
464,glide/util,com.bumptech.glide.util,Class ExceptionCatchingInputStream,public int read(byte[] buffer),
465,glide/util,com.bumptech.glide.util,Class ExceptionCatchingInputStream,"public int read(byte[] buffer, int byteOffset, int byteCount)",
466,glide/util,com.bumptech.glide.util,Class ExceptionCatchingInputStream,public void reset() throws java.io.IOException,
467,glide/util,com.bumptech.glide.util,Class ExceptionCatchingInputStream,public long skip(long byteCount),
468,glide/util,com.bumptech.glide.util,Class ExceptionCatchingInputStream,public int read(),
469,glide/util,com.bumptech.glide.util,Class ExceptionCatchingInputStream,@Nullablepublic java.io.IOException getException(),
470,glide/util,com.bumptech.glide.util,Class Executors,public static java.util.concurrent.Executor mainThreadExecutor(),Posts executions to the main thread.
471,glide/util,com.bumptech.glide.util,Class Executors,public static java.util.concurrent.Executor directExecutor(),Immediately calls Runnable.run() on the current thread.
472,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class ExifInterfaceImageHeaderParser,@NonNullpublic ImageHeaderParser.ImageType getType(@NonNull java.io.InputStream is),
473,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class ExifInterfaceImageHeaderParser,@NonNullpublic ImageHeaderParser.ImageType getType(@NonNull java.nio.ByteBuffer byteBuffer),
474,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class ExifInterfaceImageHeaderParser,"public int getOrientation(@NonNull java.io.InputStream is, @NonNull ArrayPool byteArrayPool) throws java.io.IOException",Description copied from interface: ImageHeaderParser
475,load/data,com.bumptech.glide.load.data,Class ExifOrientationStream,public boolean markSupported(),
476,load/data,com.bumptech.glide.load.data,Class ExifOrientationStream,public void mark(int readLimit),
477,load/data,com.bumptech.glide.load.data,Class ExifOrientationStream,public int read() throws java.io.IOException,
478,load/data,com.bumptech.glide.load.data,Class ExifOrientationStream,"public int read(@NonNull byte[] buffer, int byteOffset, int byteCount) throws java.io.IOException",
479,load/data,com.bumptech.glide.load.data,Class ExifOrientationStream,public long skip(long byteCount) throws java.io.IOException,
480,engine/cache,com.bumptech.glide.load.engine.cache,Class ExternalCacheDiskCacheFactory,public ExternalCacheDiskCacheFactory(android.content.Context context),Deprecated. 
481,engine/cache,com.bumptech.glide.load.engine.cache,Class ExternalCacheDiskCacheFactory,"public ExternalCacheDiskCacheFactory(android.content.Context context, int diskCacheSize)",Deprecated. 
482,engine/cache,com.bumptech.glide.load.engine.cache,Class ExternalPreferredCacheDiskCacheFactory,public ExternalPreferredCacheDiskCacheFactory(android.content.Context context),
483,engine/cache,com.bumptech.glide.load.engine.cache,Class ExternalPreferredCacheDiskCacheFactory,"public ExternalPreferredCacheDiskCacheFactory(android.content.Context context, long diskCacheSize)",
484,util/pool,com.bumptech.glide.util.pool,Class FactoryPools,"@NonNullpublic static <T extends FactoryPools.Poolable> androidx.core.util.Pools.Pool<T> simple(int size, @NonNull FactoryPools.Factory<T> factory)","Returns a non-thread safe Pools.Pool that never returns null from Pools.Pool.acquire() and that contains objects of the type created by the given FactoryPools.Factory with the given maximum size. If the pool is empty when Pools.Pool.acquire() is called, the given FactoryPools.Factory will be used to create a new instance."
485,util/pool,com.bumptech.glide.util.pool,Class FactoryPools,"@NonNullpublic static <T extends FactoryPools.Poolable> androidx.core.util.Pools.Pool<T> threadSafe(int size, @NonNull FactoryPools.Factory<T> factory)","Returns a new thread safe Pools.Pool that never returns null from Pools.Pool.acquire() and that contains objects of the type created by the given FactoryPools.Factory with the given maximum size. If the pool is empty when Pools.Pool.acquire() is called, the given FactoryPools.Factory will be used to create a new instance."
486,util/pool,com.bumptech.glide.util.pool,Class FactoryPools,@NonNullpublic static <T> androidx.core.util.Pools.Pool<java.util.List<T>> threadSafeList(),"Returns a new Pools.Pool that never returns null and that contains Lists of a specific generic type with a standard maximum size of 20. If the pool is empty when Pools.Pool.acquire() is called, a new List will be created."
487,resource/file,com.bumptech.glide.load.resource.file,Class FileDecoder,"public boolean handles(@NonNull java.io.File source, @NonNull Options options)",Description copied from interface: ResourceDecoder
488,load/data,com.bumptech.glide.load.data,Class FileDescriptorAssetPathFetcher,"protected android.os.ParcelFileDescriptor loadResource(android.content.res.AssetManager assetManager, java.lang.String path) throws java.io.IOException",Description copied from class: AssetPathFetcher
489,load/data,com.bumptech.glide.load.data,Class FileDescriptorAssetPathFetcher,protected void close(android.os.ParcelFileDescriptor data) throws java.io.IOException,Description copied from class: AssetPathFetcher
490,load/data,com.bumptech.glide.load.data,Class FileDescriptorLocalUriFetcher,"protected android.os.ParcelFileDescriptor loadResource(android.net.Uri uri, android.content.ContentResolver contentResolver) throws java.io.FileNotFoundException",Description copied from class: LocalUriFetcher
491,load/data,com.bumptech.glide.load.data,Class FileDescriptorLocalUriFetcher,protected void close(android.os.ParcelFileDescriptor data) throws java.io.IOException,Description copied from class: LocalUriFetcher
492,load/model,com.bumptech.glide.load.model,Class FileLoader<Data>,"public ModelLoader.LoadData<Data> buildLoadData(@NonNull java.io.File model, int width, int height, @NonNull Options options)",Description copied from interface: ModelLoader
493,load/model,com.bumptech.glide.load.model,Class FileLoader.Factory<Data>,"@NonNullpublic final ModelLoader<java.io.File,Data> build(@NonNull MultiModelLoaderFactory multiFactory)",Description copied from interface: ModelLoaderFactory
494,load/model,com.bumptech.glide.load.model,Interface FileLoader.FileOpener<Data>,Data open(java.io.File file) throws java.io.FileNotFoundException,
495,load/model,com.bumptech.glide.load.model,Interface FileLoader.FileOpener<Data>,void close(Data data) throws java.io.IOException,
496,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class FitCenter,"protected android.graphics.Bitmap transform(@NonNull BitmapPool pool, @NonNull android.graphics.Bitmap toTransform, int outWidth, int outHeight)",Description copied from class: BitmapTransformation
497,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class FitCenter,public boolean equals(java.lang.Object o),Description copied from interface: Key
498,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class FitCenter,public int hashCode(),Description copied from interface: Key
499,request/target,com.bumptech.glide.request.target,Class FixedSizeDrawable,"public void setBounds(int left, int top, int right, int bottom)",
500,request/target,com.bumptech.glide.request.target,Class FixedSizeDrawable,public void setBounds(@NonNull android.graphics.Rect bounds),
501,request/target,com.bumptech.glide.request.target,Class FixedSizeDrawable,public void setChangingConfigurations(int configs),
502,request/target,com.bumptech.glide.request.target,Class FixedSizeDrawable,public int getChangingConfigurations(),
503,request/target,com.bumptech.glide.request.target,Class FixedSizeDrawable,@Deprecatedpublic void setDither(boolean dither),Deprecated. 
504,request/target,com.bumptech.glide.request.target,Class FixedSizeDrawable,public void setFilterBitmap(boolean filter),
505,request/target,com.bumptech.glide.request.target,Class FixedSizeDrawable,public android.graphics.drawable.Drawable.Callback getCallback(),
506,request/target,com.bumptech.glide.request.target,Class FixedSizeDrawable,public int getAlpha(),
507,request/target,com.bumptech.glide.request.target,Class FixedSizeDrawable,"public void setColorFilter(int color, @NonNull android.graphics.PorterDuff.Mode mode)",
508,request/target,com.bumptech.glide.request.target,Class FixedSizeDrawable,public void clearColorFilter(),
509,request/target,com.bumptech.glide.request.target,Class FixedSizeDrawable,@NonNullpublic android.graphics.drawable.Drawable getCurrent(),
510,request/target,com.bumptech.glide.request.target,Class FixedSizeDrawable,"public boolean setVisible(boolean visible, boolean restart)",
511,request/target,com.bumptech.glide.request.target,Class FixedSizeDrawable,public int getIntrinsicWidth(),
512,request/target,com.bumptech.glide.request.target,Class FixedSizeDrawable,public int getIntrinsicHeight(),
513,request/target,com.bumptech.glide.request.target,Class FixedSizeDrawable,public int getMinimumWidth(),
514,request/target,com.bumptech.glide.request.target,Class FixedSizeDrawable,public int getMinimumHeight(),
515,request/target,com.bumptech.glide.request.target,Class FixedSizeDrawable,public boolean getPadding(@NonNull android.graphics.Rect padding),
516,request/target,com.bumptech.glide.request.target,Class FixedSizeDrawable,public void invalidateSelf(),
517,request/target,com.bumptech.glide.request.target,Class FixedSizeDrawable,public void unscheduleSelf(@NonNull java.lang.Runnable what),
518,request/target,com.bumptech.glide.request.target,Class FixedSizeDrawable,"public void scheduleSelf(@NonNull java.lang.Runnable what, long when)",
519,request/target,com.bumptech.glide.request.target,Class FixedSizeDrawable,public void draw(@NonNull android.graphics.Canvas canvas),
520,request/target,com.bumptech.glide.request.target,Class FixedSizeDrawable,public void setAlpha(int i),
521,request/target,com.bumptech.glide.request.target,Class FixedSizeDrawable,public void setColorFilter(android.graphics.ColorFilter colorFilter),
522,request/target,com.bumptech.glide.request.target,Class FixedSizeDrawable,public int getOpacity(),
523,request/target,com.bumptech.glide.request.target,Class FixedSizeDrawable,@NonNullpublic android.graphics.drawable.Drawable mutate(),
524,bumptech/glide,com.bumptech.glide,Class GenericTransitionOptions<TranscodeType>,@NonNullpublic static <TranscodeType> GenericTransitionOptions<TranscodeType> withNoTransition(),Removes any existing animation put on the builder.
525,bumptech/glide,com.bumptech.glide,Class GenericTransitionOptions<TranscodeType>,@NonNullpublic static <TranscodeType> GenericTransitionOptions<TranscodeType> with(int viewAnimationId),Returns a typed GenericTransitionOptions object that uses the given view animation.
526,bumptech/glide,com.bumptech.glide,Class GenericTransitionOptions<TranscodeType>,@NonNullpublic static <TranscodeType> GenericTransitionOptions<TranscodeType> with(@NonNull ViewPropertyTransition.Animator animator),Returns a typed GenericTransitionOptions object that uses the given animator.
527,resource/gif,com.bumptech.glide.load.resource.gif,Class GifBitmapProvider,public GifBitmapProvider(BitmapPool bitmapPool),Constructs an instance without a shared byte array pool. Byte arrays will be always constructed when requested.
528,resource/gif,com.bumptech.glide.load.resource.gif,Class GifBitmapProvider,"@NonNullpublic android.graphics.Bitmap obtain(int width, int height, @NonNull android.graphics.Bitmap.Config config)",Description copied from interface: GifDecoder.BitmapProvider
529,resource/gif,com.bumptech.glide.load.resource.gif,Class GifBitmapProvider,public void release(@NonNull android.graphics.Bitmap bitmap),Description copied from interface: GifDecoder.BitmapProvider
530,resource/gif,com.bumptech.glide.load.resource.gif,Class GifBitmapProvider,@NonNullpublic byte[] obtainByteArray(int size),Description copied from interface: GifDecoder.BitmapProvider
531,resource/gif,com.bumptech.glide.load.resource.gif,Class GifBitmapProvider,public void release(@NonNull byte[] bytes),Description copied from interface: GifDecoder.BitmapProvider
532,resource/gif,com.bumptech.glide.load.resource.gif,Class GifBitmapProvider,@NonNullpublic int[] obtainIntArray(int size),Description copied from interface: GifDecoder.BitmapProvider
533,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder,static final int STATUS_OK,File read status: No errors.
534,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder,static final int STATUS_FORMAT_ERROR,File read status: Error decoding file (may be partially decoded).
535,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder,static final int STATUS_OPEN_ERROR,File read status: Unable to open source.
536,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder,static final int STATUS_PARTIAL_DECODE,Unable to fully decode the current frame.
537,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder,int getWidth(),
538,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder,int getHeight(),
539,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder,@NonNulljava.nio.ByteBuffer getData(),
540,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder,int getStatus(),Returns the current status of the decoder. Status will update per frame to allow the caller to tell whether or not the current frame was decoded successfully and/or completely. Format and open failures persist across frames. 
541,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder,void advance(),Move the animation frame counter forward.
542,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder,int getDelay(int n),Gets display duration for specified frame.
543,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder,int getNextDelay(),Gets display duration for the upcoming frame in ms.
544,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder,int getFrameCount(),Gets the number of frames read from file.
545,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder,int getCurrentFrameIndex(),"Gets the current index of the animation frame, or -1 if animation hasn't not yet started."
546,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder,void resetFrameIndex(),"Resets the frame pointer to before the 0th frame, as if we'd never used this decoder to decode any frames."
547,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder,@Deprecatedint getLoopCount(),Deprecated. Use getNetscapeLoopCount() instead. This method cannot distinguish whether the loop count is 1 or doesn't exist.
548,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder,int getNetscapeLoopCount(),"Gets the Netscape loop count, if any. A count of 0 (GifHeader.NETSCAPE_LOOP_COUNT_FOREVER) means repeat indefinitely. It must not be a negative value. Use getTotalIterationCount() to know how many times the animation sequence should be displayed."
549,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder,int getTotalIterationCount(),Gets the total count which represents how many times the animation sequence should be displayed. A count of 0 (TOTAL_ITERATION_COUNT_FOREVER) means repeat indefinitely. It must not be a negative value. The total count is calculated as follows by using getNetscapeLoopCount(). This behavior is the same as most web browsers. getNetscapeLoopCount()The total countGifHeader.NETSCAPE_LOOP_COUNT_FOREVERTOTAL_ITERATION_COUNT_FOREVERGifHeader.NETSCAPE_LOOP_COUNT_DOES_NOT_EXIST1n (n > 0)n + 1
550,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder,int getByteSize(),"Returns an estimated byte size for this decoder based on the data provided to setData(GifHeader, byte[]), as well as internal buffers."
551,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder,@Nullableandroid.graphics.Bitmap getNextFrame(),Get the next frame in the animation sequence.
552,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder,"int read(@Nullable java.io.InputStream is, int contentLength)",Reads GIF image from stream.
553,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder,void clear(),
554,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder,"void setData(@NonNull GifHeader header, @NonNull byte[] data)",
555,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder,"void setData(@NonNull GifHeader header, @NonNull java.nio.ByteBuffer buffer)",
556,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder,"void setData(@NonNull GifHeader header, @NonNull java.nio.ByteBuffer buffer, int sampleSize)",
557,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder,int read(@Nullable byte[] data),Reads GIF image from byte array.
558,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder.BitmapProvider,"@NonNullandroid.graphics.Bitmap obtain(int width, int height, @NonNull android.graphics.Bitmap.Config config)",Returns an Bitmap with exactly the given dimensions and config.
559,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder.BitmapProvider,void release(@NonNull android.graphics.Bitmap bitmap),Releases the given Bitmap back to the pool.
560,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder.BitmapProvider,@NonNullbyte[] obtainByteArray(int size),Returns a byte array used for decoding and generating the frame bitmap.
561,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder.BitmapProvider,void release(@NonNull byte[] bytes),Releases the given byte array back to the pool.
562,glide/gifdecoder,com.bumptech.glide.gifdecoder,Interface GifDecoder.BitmapProvider,@NonNullint[] obtainIntArray(int size),Returns an int array used for decoding/generating the frame bitmaps.
563,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawable,public static final int LOOP_FOREVER,A constant indicating that an animated drawable should loop continuously.
564,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawable,"@Deprecatedpublic GifDrawable(android.content.Context context, GifDecoder gifDecoder, BitmapPool bitmapPool, Transformation<android.graphics.Bitmap> frameTransformation, int targetFrameWidth, int targetFrameHeight, android.graphics.Bitmap firstFrame)","Deprecated. Use GifDrawable(Context, GifDecoder, Transformation, int, int, Bitmap)"
565,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawable,public int getSize(),
566,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawable,public android.graphics.Bitmap getFirstFrame(),
567,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawable,"public void setFrameTransformation(Transformation<android.graphics.Bitmap> frameTransformation, android.graphics.Bitmap firstFrame)",
568,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawable,public Transformation<android.graphics.Bitmap> getFrameTransformation(),
569,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawable,public java.nio.ByteBuffer getBuffer(),
570,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawable,public int getFrameCount(),
571,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawable,public int getFrameIndex(),"Returns the current frame index in the range 0..getFrameCount() - 1, or -1 if no frame is displayed."
572,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawable,public void startFromFirstFrame(),Starts the animation from the first frame. Can only be called while animation is not running.
573,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawable,public void start(),
574,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawable,public void stop(),
575,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawable,"public boolean setVisible(boolean visible, boolean restart)",
576,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawable,public int getIntrinsicWidth(),
577,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawable,public int getIntrinsicHeight(),
578,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawable,public boolean isRunning(),
579,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawable,protected void onBoundsChange(android.graphics.Rect bounds),
580,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawable,public void draw(@NonNull android.graphics.Canvas canvas),
581,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawable,public void setAlpha(int i),
582,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawable,public void setColorFilter(android.graphics.ColorFilter colorFilter),
583,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawable,public int getOpacity(),
584,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawable,public void onFrameReady(),
585,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawable,public android.graphics.drawable.Drawable.ConstantState getConstantState(),
586,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawable,public void recycle(),Clears any resources for loading frames that are currently held on to by this object.
587,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawable,public void setLoopCount(int loopCount),
588,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawable,public void registerAnimationCallback(@NonNull androidx.vectordrawable.graphics.drawable.Animatable2Compat.AnimationCallback animationCallback),Register callback to listen to GifDrawable animation end event after specific loop count set by setLoopCount(int). Note: This will only be called if the Gif stop because it reaches the loop count. Unregister this in onLoadCleared to avoid potential memory leak.
589,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawable,public boolean unregisterAnimationCallback(@NonNull androidx.vectordrawable.graphics.drawable.Animatable2Compat.AnimationCallback animationCallback),
590,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawableEncoder,@NonNullpublic EncodeStrategy getEncodeStrategy(@NonNull Options options),
591,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawableResource,@NonNullpublic java.lang.Class<GifDrawable> getResourceClass(),Description copied from interface: Resource
592,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawableResource,public int getSize(),Description copied from interface: Resource
593,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawableResource,public void recycle(),Description copied from interface: Resource
594,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawableTransformation,"@NonNullpublic Resource<GifDrawable> transform(@NonNull android.content.Context context, @NonNull Resource<GifDrawable> resource, int outWidth, int outHeight)",Description copied from interface: Transformation
595,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawableTransformation,public boolean equals(java.lang.Object o),Description copied from interface: Key
596,resource/gif,com.bumptech.glide.load.resource.gif,Class GifDrawableTransformation,public int hashCode(),Description copied from interface: Key
597,resource/gif,com.bumptech.glide.load.resource.gif,Class GifFrameResourceDecoder,"public boolean handles(@NonNull GifDecoder source, @NonNull Options options)",Description copied from interface: ResourceDecoder
598,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class GifHeader,public static final int NETSCAPE_LOOP_COUNT_FOREVER,The Netscape loop count which means loop forever.
599,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class GifHeader,public int getHeight(),
600,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class GifHeader,public int getWidth(),
601,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class GifHeader,public int getNumFrames(),
602,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class GifHeaderParser,public GifHeaderParser setData(@NonNull java.nio.ByteBuffer data),
603,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class GifHeaderParser,public GifHeaderParser setData(@Nullable byte[] data),
604,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class GifHeaderParser,public void clear(),
605,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class GifHeaderParser,@NonNullpublic GifHeader parseHeader(),
606,resource/gif,com.bumptech.glide.load.resource.gif,Class GifOptions,public static final Option<DecodeFormat> DECODE_FORMAT,Indicates the DecodeFormat that will be used in conjunction with the particular GIF to determine the Bitmap.Config to use when decoding frames of GIFs.
607,bumptech/glide,com.bumptech.glide,Class Glide,@Nullablepublic static java.io.File getPhotoCacheDir(@NonNull android.content.Context context),Returns a directory with a default name in the private cache directory of the application to use to store retrieved media and thumbnails.
608,bumptech/glide,com.bumptech.glide,Class Glide,"@Nullablepublic static java.io.File getPhotoCacheDir(@NonNull android.content.Context context, @NonNull java.lang.String cacheName)",Returns a directory with the given name in the private cache directory of the application to use to store retrieved media and thumbnails.
609,bumptech/glide,com.bumptech.glide,Class Glide,@NonNullpublic static Glide get(@NonNull android.content.Context context),Get the singleton.
610,bumptech/glide,com.bumptech.glide,Class Glide,@Deprecatedpublic static void init(Glide glide),"Deprecated. Use init(Context, GlideBuilder) to get a singleton compatible with Glide's generated API. This method will be removed in a future version of Glide."
611,bumptech/glide,com.bumptech.glide,Class Glide,"public static void init(@NonNull android.content.Context context, @NonNull GlideBuilder builder)",
612,bumptech/glide,com.bumptech.glide,Class Glide,public static void tearDown(),
613,bumptech/glide,com.bumptech.glide,Class Glide,@NonNullpublic BitmapPool getBitmapPool(),"Returns the BitmapPool used to temporarily store Bitmaps so they can be reused to avoid garbage collections. Note - Using this pool directly can lead to undefined behavior and strange drawing errors. Any Bitmap added to the pool must not be currently in use in any other part of the application. Any Bitmap added to the pool must be removed from the pool before it is added a second time. Note - To make effective use of the pool, any Bitmap removed from the pool must eventually be re-added. Otherwise the pool will eventually empty and will not serve any useful purpose. The primary reason this object is exposed is for use in custom ResourceDecoders and Transformations. Use outside of these classes is not generally recommended."
614,bumptech/glide,com.bumptech.glide,Class Glide,@NonNullpublic ArrayPool getArrayPool(),
615,bumptech/glide,com.bumptech.glide,Class Glide,@NonNullpublic android.content.Context getContext(),
616,bumptech/glide,com.bumptech.glide,Class Glide,public void preFillBitmapPool(@NonNull PreFillType.Builder... bitmapAttributeBuilders),"Pre-fills the BitmapPool using the given sizes. Enough Bitmaps are added to completely fill the pool, so most or all of the Bitmaps currently in the pool will be evicted. Bitmaps are allocated according to the weights of the given sizes, where each size gets (weight / prefillWeightSum) percent of the pool to fill. Note - Pre-filling is done asynchronously using and MessageQueue.IdleHandler. Any currently running pre-fill will be cancelled and replaced by a call to this method. This method should be used with caution, overly aggressive pre-filling is substantially worse than not pre-filling at all. Pre-filling should only be started in onCreate to avoid constantly clearing and re-filling the BitmapPool. Rotation should be carefully considered as well. It may be worth calling this method only when no saved instance state exists so that pre-filling only happens when the Activity is first created, rather than on every rotation."
617,bumptech/glide,com.bumptech.glide,Class Glide,public void clearMemory(),Clears as much memory as possible.
618,bumptech/glide,com.bumptech.glide,Class Glide,public void trimMemory(int level),Clears some memory with the exact amount depending on the given level.
619,bumptech/glide,com.bumptech.glide,Class Glide,public void clearDiskCache(),"Clears disk cache. This method should always be called on a background thread, since it is a blocking call."
620,bumptech/glide,com.bumptech.glide,Class Glide,@NonNullpublic RequestManagerRetriever getRequestManagerRetriever(),Internal method.
621,bumptech/glide,com.bumptech.glide,Class Glide,@NonNullpublic MemoryCategory setMemoryCategory(@NonNull MemoryCategory memoryCategory),Adjusts Glide's current and maximum memory usage based on the given MemoryCategory. The default MemoryCategory is MemoryCategory.NORMAL. MemoryCategory.HIGH increases Glide's maximum memory usage by up to 50% and MemoryCategory.LOW decreases Glide's maximum memory usage by 50%. This method should be used to temporarily increase or decrease memory usage for a single Activity or part of the app. Use GlideBuilder.setMemoryCache(MemoryCache) to put a permanent memory size if you want to change the default.
622,bumptech/glide,com.bumptech.glide,Class Glide,@NonNullpublic static RequestManager with(@NonNull android.content.Context context),"Begin a load with Glide by passing in a context. Any requests started using a context will only have the application level options applied and will not be started or stopped based on lifecycle events. In general, loads should be started at the level the result will be used in. If the resource will be used in a view in a child fragment, the load should be started with with(android.app.Fragment)} using that child fragment. Similarly, if the resource will be used in a view in the parent fragment, the load should be started with with(android.app.Fragment) using the parent fragment. In the same vein, if the resource will be used in a view in an activity, the load should be started with with(android.app.Activity)}. This method is appropriate for resources that will be used outside of the normal fragment or activity lifecycle (For example in services, or for notification thumbnails)."
623,bumptech/glide,com.bumptech.glide,Class Glide,@NonNullpublic static RequestManager with(@NonNull android.app.Activity activity),Begin a load with Glide that will be tied to the given Activity's lifecycle and that uses the given Activity's default options.
624,bumptech/glide,com.bumptech.glide,Class Glide,@NonNullpublic static RequestManager with(@NonNull androidx.fragment.app.FragmentActivity activity),Begin a load with Glide that will tied to the give FragmentActivity's lifecycle and that uses the given FragmentActivity's default options.
625,bumptech/glide,com.bumptech.glide,Class Glide,@NonNullpublic static RequestManager with(@NonNull androidx.fragment.app.Fragment fragment),Begin a load with Glide that will be tied to the given Fragment's lifecycle and that uses the given Fragment's default options.
626,bumptech/glide,com.bumptech.glide,Class Glide,@Deprecated @NonNullpublic static RequestManager with(@NonNull android.app.Fragment fragment),"Deprecated. Prefer support Fragments and with(Fragment) instead, Fragment will be deprecated. See https://github.com/android/android-ktx/pull/161#issuecomment-363270555."
627,bumptech/glide,com.bumptech.glide,Class Glide,@NonNullpublic static RequestManager with(@NonNull android.view.View view),"Begin a load with Glide that will be tied to the lifecycle of the Fragment, Fragment, or Activity that contains the View. A Fragment or Fragment is assumed to contain a View if the View is a child of the View returned by the Fragment.getView()} method. This method will not work if the View is not attached. Prefer the Activity and Fragment variants unless you're loading in a View subclass. This method may be inefficient aways and is definitely inefficient for large hierarchies. Consider memoizing the result after the View is attached or again, prefer the Activity and Fragment variants whenever possible. When used in Applications that use the non-support Fragment classes, calling this method will produce noisy logs from FragmentManager. Consider avoiding entirely or using the Fragments from the support library instead. If the support FragmentActivity class is used, this method will only attempt to discover support Fragments. Any non-support Fragments attached to the FragmentActivity will be ignored."
628,bumptech/glide,com.bumptech.glide,Class Glide,@NonNullpublic Registry getRegistry(),
629,bumptech/glide,com.bumptech.glide,Class Glide,public void onTrimMemory(int level),
630,bumptech/glide,com.bumptech.glide,Class Glide,public void onConfigurationChanged(android.content.res.Configuration newConfig),
631,bumptech/glide,com.bumptech.glide,Class GlideBuilder,@NonNullpublic GlideBuilder setBitmapPool(@Nullable BitmapPool bitmapPool),Sets the BitmapPool implementation to use to store and retrieve reused Bitmaps.
632,bumptech/glide,com.bumptech.glide,Class GlideBuilder,@NonNullpublic GlideBuilder setArrayPool(@Nullable ArrayPool arrayPool),Sets the ArrayPool implementation to allow variable sized arrays to be stored and retrieved as needed.
633,bumptech/glide,com.bumptech.glide,Class GlideBuilder,@NonNullpublic GlideBuilder setMemoryCache(@Nullable MemoryCache memoryCache),Sets the MemoryCache implementation to store Resources that are not currently in use.
634,bumptech/glide,com.bumptech.glide,Class GlideBuilder,@NonNullpublic GlideBuilder setDiskCache(@Nullable DiskCache.Factory diskCacheFactory),Sets the DiskCache.Factory implementation to use to construct the DiskCache to use to store Resource data on disk.
635,bumptech/glide,com.bumptech.glide,Class GlideBuilder,@Deprecatedpublic GlideBuilder setResizeExecutor(@Nullable GlideExecutor service),Deprecated. Use setSourceExecutor(GlideExecutor)
636,bumptech/glide,com.bumptech.glide,Class GlideBuilder,@NonNullpublic GlideBuilder setSourceExecutor(@Nullable GlideExecutor service),"Sets the GlideExecutor to use when retrieving Resources that are not already in the cache. The thread count defaults to the number of cores available on the device, with a maximum of 4. Use the GlideExecutor.newSourceExecutor() methods if you'd like to specify options for the source executor."
637,bumptech/glide,com.bumptech.glide,Class GlideBuilder,@NonNullpublic GlideBuilder setDiskCacheExecutor(@Nullable GlideExecutor service),"Sets the GlideExecutor to use when retrieving Resources that are currently in Glide's disk caches. Defaults to a single thread which is usually the best combination of memory usage, jank, and performance, even on high end devices. Use the GlideExecutor.newDiskCacheExecutor() if you'd like to specify options for the disk cache executor."
638,bumptech/glide,com.bumptech.glide,Class GlideBuilder,@NonNullpublic GlideBuilder setAnimationExecutor(@Nullable GlideExecutor service),"Sets the GlideExecutor to use when loading frames of animated images and particularly of GifDrawables. Defaults to one or two threads, depending on the number of cores available. Use the GlideExecutor.newAnimationExecutor() methods if you'd like to specify options for the animation executor."
639,bumptech/glide,com.bumptech.glide,Class GlideBuilder,@NonNullpublic GlideBuilder setDefaultRequestOptions(@Nullable RequestOptions requestOptions),Sets the default RequestOptions to use for all loads across the app. Applying additional options with RequestBuilder.apply(BaseRequestOptions) will override defaults set here.
640,bumptech/glide,com.bumptech.glide,Class GlideBuilder,@NonNullpublic GlideBuilder setDefaultRequestOptions(@NonNull Glide.RequestOptionsFactory factory),Sets a factory for the default RequestOptions to use for all loads across the app and returns this GlideBuilder. This factory will NOT be called once per load. Instead it will be called a handful of times and memoized. It's not safe to assume that this factory will be called again for every new load. Applying additional options with RequestBuilder.apply(BaseRequestOptions) will override defaults set here.
641,bumptech/glide,com.bumptech.glide,Class GlideBuilder,"@NonNullpublic <T> GlideBuilder setDefaultTransitionOptions(@NonNull java.lang.Class<T> clazz, @Nullable TransitionOptions<?,T> options)","Sets the default TransitionOptions to use when starting a request that will load a resource with the given Class. It's preferable but not required for the requested resource class to match the resource class applied here as long as the resource class applied here is assignable from the requested resource class. For example you can set a default transition for Drawable and that default transition will be used if you subsequently start requests for specific Drawable types like GifDrawable or BitmapDrawable. Specific types are always preferred so if you register a default transition for both Drawable and BitmapDrawable and then start a request for BitmapDrawables, the transition you registered for BitmapDrawables will be used."
642,bumptech/glide,com.bumptech.glide,Class GlideBuilder,@NonNullpublic GlideBuilder setMemorySizeCalculator(@NonNull MemorySizeCalculator.Builder builder),Sets the MemorySizeCalculator to use to calculate maximum sizes for default MemoryCaches and/or default BitmapPools.
643,bumptech/glide,com.bumptech.glide,Class GlideBuilder,@NonNullpublic GlideBuilder setMemorySizeCalculator(@Nullable MemorySizeCalculator calculator),Sets the MemorySizeCalculator to use to calculate maximum sizes for default MemoryCaches and/or default BitmapPools. The given MemorySizeCalculator will not affect custom pools or caches provided via setBitmapPool(BitmapPool) or setMemoryCache(MemoryCache).
644,bumptech/glide,com.bumptech.glide,Class GlideBuilder,@NonNullpublic GlideBuilder setConnectivityMonitorFactory(@Nullable ConnectivityMonitorFactory factory),Sets the ConnectivityMonitorFactory to use to notify RequestManager of connectivity events. If not set DefaultConnectivityMonitorFactory would be used.
645,bumptech/glide,com.bumptech.glide,Class GlideBuilder,@NonNullpublic GlideBuilder setLogLevel(int logLevel),"Sets a log level constant from those in Log to indicate the desired log verbosity. The level must be one of Log.VERBOSE, Log.DEBUG, Log.INFO, Log.WARN, or Log.ERROR. Log.VERBOSE means one or more lines will be logged per request, including timing logs and failures. Log.DEBUG means at most one line will be logged per successful request, including timing logs, although many lines may be logged for failures including multiple complete stack traces. Log.INFO means failed loads will be logged including multiple complete stack traces, but successful loads will not be logged at all. Log.WARN means only summaries of failed loads will be logged. Log.ERROR means only exceptional cases will be logged. All logs will be logged using the 'Glide' tag. Many other debugging logs are available in individual classes. The log level supplied here only controls a small set of informative and well formatted logs. Users wishing to debug certain aspects of the library can look for individual TAG variables at the tops of classes and use adb shell setprop log.tag.TAG to enable or disable any relevant tags."
646,bumptech/glide,com.bumptech.glide,Class GlideBuilder,@NonNullpublic GlideBuilder setIsActiveResourceRetentionAllowed(boolean isActiveResourceRetentionAllowed),"If set to true, allows Glide to re-capture resources that are loaded into Targets which are subsequently de-referenced and garbage collected without being cleared. Defaults to false. Glide's resource re-use system is permissive, which means that's acceptable for callers to load resources into Targets and then never clear the Target. To do so, Glide uses WeakReferences to track resources that belong to Targets that haven't yet been cleared. Setting this method to true allows Glide to also maintain a hard reference to the underlying resource so that if the Target is garbage collected, Glide can return the underlying resource to it's memory cache so that subsequent requests will not unexpectedly re-load the resource from disk or source. As a side affect, it will take the system slightly longer to garbage collect the underlying resource because the weak reference has to be cleared and processed before the hard reference is removed. As a result, setting this method to true may transiently increase the memory usage of an application. Leaving this method at the default false value will allow the platform to garbage collect resources more quickly, but will lead to unexpected memory cache misses if callers load resources into Targets but never clear them. If you set this method to true you must not call Bitmap.recycle() or mutate any Bitmaps returned by Glide. If this method is set to false, recycling or mutating Bitmaps is inefficient but safe as long as you do not clear the corresponding Target used to load the Bitmap. However, if you set this method to true and recycle or mutate any returned Bitmaps or other mutable resources, Glide may recover those resources and attempt to use them later on, resulting in crashes, graphical corruption or undefined behavior. Regardless of what value this method is set to, it's always good practice to clear Targets when you're done with the corresponding resource. Clearing Targets allows Glide to maximize resource re-use, minimize memory overhead and minimize unexpected behavior resulting from edge cases. If you use RequestManager.clear(Target), calling Bitmap.recycle() or mutating Bitmaps is not only unsafe, it's also totally unnecessary and should be avoided. In all cases, prefer RequestManager.clear(Target) to Bitmap.recycle()."
647,bumptech/glide,com.bumptech.glide,Class GlideBuilder,@NonNullpublic GlideBuilder addGlobalRequestListener(@NonNull RequestListener<java.lang.Object> listener),"Adds a global RequestListener that will be added to every request started with Glide. Multiple RequestListeners can be added here, in RequestManager scopes or to individual RequestBuilders. RequestListeners are called in the order they're added. Even if an earlier RequestListener returns true from RequestListener.onLoadFailed(GlideException, Object, Target, boolean) or RequestListener.onResourceReady(Object, Object, Target, DataSource, boolean), it will not prevent subsequent RequestListeners from being called. Because Glide requests can be started for any number of individual resource types, any listener added here has to accept any generic resource type in RequestListener.onResourceReady(Object, Object, Target, DataSource, boolean). If you must base the behavior of the listener on the resource type, you will need to use instanceof to do so. It's not safe to cast resource types without first checking with instanceof."
648,bumptech/glide,com.bumptech.glide,Class GlideBuilder,public GlideBuilder setLogRequestOrigins(boolean isEnabled),Set to true to make Glide populate GlideException.setOrigin(Exception) for failed requests. The exception set by this method is not printed by GlideException and can only be viewed via a RequestListener that reads the field via GlideException.getOrigin(). This is an experimental API that may be removed in the future.
649,bumptech/glide,com.bumptech.glide,Class GlideContext,public java.util.List<RequestListener<java.lang.Object>> getDefaultRequestListeners(),
650,bumptech/glide,com.bumptech.glide,Class GlideContext,public RequestOptions getDefaultRequestOptions(),
651,bumptech/glide,com.bumptech.glide,Class GlideContext,"@NonNullpublic <T> TransitionOptions<?,T> getDefaultTransitionOptions(@NonNull java.lang.Class<T> transcodeClass)",
652,bumptech/glide,com.bumptech.glide,Class GlideContext,"@NonNullpublic <X> ViewTarget<android.widget.ImageView,X> buildImageViewTarget(@NonNull android.widget.ImageView imageView, @NonNull java.lang.Class<X> transcodeClass)",
653,bumptech/glide,com.bumptech.glide,Class GlideContext,@NonNullpublic Engine getEngine(),
654,bumptech/glide,com.bumptech.glide,Class GlideContext,@NonNullpublic Registry getRegistry(),
655,bumptech/glide,com.bumptech.glide,Class GlideContext,public int getLogLevel(),
656,bumptech/glide,com.bumptech.glide,Class GlideContext,@NonNullpublic ArrayPool getArrayPool(),
657,load/engine,com.bumptech.glide.load.engine,Class GlideException,public GlideException(java.lang.String message),
658,load/engine,com.bumptech.glide.load.engine,Class GlideException,"public GlideException(java.lang.String detailMessage, java.lang.Throwable cause)",
659,load/engine,com.bumptech.glide.load.engine,Class GlideException,public void setOrigin(@Nullable java.lang.Exception exception),Sets a stack trace that includes where the request originated. This is an experimental API that may be removed in the future.
660,load/engine,com.bumptech.glide.load.engine,Class GlideException,@Nullablepublic java.lang.Exception getOrigin(),Returns an Exception with a stack trace that includes where the request originated (if previously set via setOrigin(Exception)) This is an experimental API that may be removed in the future.
661,load/engine,com.bumptech.glide.load.engine,Class GlideException,public java.lang.Throwable fillInStackTrace(),
662,load/engine,com.bumptech.glide.load.engine,Class GlideException,public java.util.List<java.lang.Throwable> getCauses(),"Returns a list of causes that are immediate children of this exception. Causes may or may not be GlideExceptions. Causes may also not be root causes, and in turn my have been caused by other failures."
663,load/engine,com.bumptech.glide.load.engine,Class GlideException,public java.util.List<java.lang.Throwable> getRootCauses(),"Returns the list of root causes that are the leaf nodes of all children of this exception. Use this method to do things like look for http exceptions that indicate the load may have failed due to an error that can be retried. Keep in mind that because Glide may attempt to load a given model using multiple different pathways, there may be multiple related or unrelated reasons for a load to fail."
664,load/engine,com.bumptech.glide.load.engine,Class GlideException,public void logRootCauses(java.lang.String tag),"Logs all root causes using the given tag. Each root cause is logged separately to avoid throttling. printStackTrace() will provide a more succinct overview of why the exception occurred, although it does not include complete stack traces."
665,load/engine,com.bumptech.glide.load.engine,Class GlideException,public void printStackTrace(),
666,load/engine,com.bumptech.glide.load.engine,Class GlideException,public void printStackTrace(java.io.PrintStream err),
667,load/engine,com.bumptech.glide.load.engine,Class GlideException,public void printStackTrace(java.io.PrintWriter err),
668,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor,public static GlideExecutor.Builder newDiskCacheBuilder(),"Returns a new GlideExecutor.Builder with the DEFAULT_DISK_CACHE_EXECUTOR_THREADS threads, DEFAULT_DISK_CACHE_EXECUTOR_NAME name and GlideExecutor.UncaughtThrowableStrategy.DEFAULT uncaught throwable strategy. Disk cache executors do not allow network operations on their threads."
669,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor,public static GlideExecutor newDiskCacheExecutor(),Shortcut for calling GlideExecutor.Builder.build() on newDiskCacheBuilder().
670,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor,@Deprecatedpublic static GlideExecutor newDiskCacheExecutor(GlideExecutor.UncaughtThrowableStrategy uncaughtThrowableStrategy),Deprecated. Use newDiskCacheBuilder() and Builder#setUncaughtThrowableStrategy(UncaughtThrowableStrategy) instead.
671,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor,"@Deprecatedpublic static GlideExecutor newDiskCacheExecutor(int threadCount, java.lang.String name, GlideExecutor.UncaughtThrowableStrategy uncaughtThrowableStrategy)",Deprecated. Use newDiskCacheBuilder() instead.
672,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor,public static GlideExecutor.Builder newSourceBuilder(),"Returns a new GlideExecutor.Builder with the default thread count returned from calculateBestThreadCount(), the DEFAULT_SOURCE_EXECUTOR_NAME thread name prefix, and the GlideExecutor.UncaughtThrowableStrategy.DEFAULT uncaught throwable strategy. Source executors allow network operations on their threads."
673,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor,public static GlideExecutor newSourceExecutor(),Shortcut for calling GlideExecutor.Builder.build() on newSourceBuilder().
674,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor,@Deprecatedpublic static GlideExecutor newSourceExecutor(GlideExecutor.UncaughtThrowableStrategy uncaughtThrowableStrategy),Deprecated. Use newSourceBuilder() instead.
675,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor,"@Deprecatedpublic static GlideExecutor newSourceExecutor(int threadCount, java.lang.String name, GlideExecutor.UncaughtThrowableStrategy uncaughtThrowableStrategy)",Deprecated. Use newSourceBuilder() instead.
676,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor,public static GlideExecutor newUnlimitedSourceExecutor(),"Returns a new unlimited thread pool with zero core thread count to make sure no threads are created by default, KEEP_ALIVE_TIME_MS keep alive time, the #SOURCE_UNLIMITED_EXECUTOR_NAME thread name prefix, the GlideExecutor.UncaughtThrowableStrategy.DEFAULT uncaught throwable strategy, and the SynchronousQueue since using default unbounded blocking queue, for example, PriorityBlockingQueue effectively won't create more than corePoolSize threads. See ThreadPoolExecutor documentation. Source executors allow network operations on their threads."
677,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor,public static GlideExecutor.Builder newAnimationBuilder(),Returns a new fixed thread pool that defaults to either one or two threads depending on the number of available cores to use when loading frames of animations. Animation executors do not allow network operations on their threads.
678,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor,public static GlideExecutor newAnimationExecutor(),Shortcut for calling GlideExecutor.Builder.build() on newAnimationBuilder().
679,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor,"@Deprecatedpublic static GlideExecutor newAnimationExecutor(int threadCount, GlideExecutor.UncaughtThrowableStrategy uncaughtThrowableStrategy)",Deprecated. Use newAnimationBuilder() instead.
680,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor,public void execute(@NonNull java.lang.Runnable command),
681,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor,@NonNullpublic java.util.concurrent.Future<?> submit(@NonNull java.lang.Runnable task),
682,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor,@NonNullpublic <T> java.util.List<java.util.concurrent.Future<T>> invokeAll(@NonNull java.util.Collection<? extends java.util.concurrent.Callable<T>> tasks) throws java.lang.InterruptedException,
683,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor,"@NonNullpublic <T> java.util.List<java.util.concurrent.Future<T>> invokeAll(@NonNull java.util.Collection<? extends java.util.concurrent.Callable<T>> tasks, long timeout, @NonNull java.util.concurrent.TimeUnit unit) throws java.lang.InterruptedException",
684,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor,"@NonNullpublic <T> T invokeAny(@NonNull java.util.Collection<? extends java.util.concurrent.Callable<T>> tasks) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException",
685,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor,"public <T> T invokeAny(@NonNull java.util.Collection<? extends java.util.concurrent.Callable<T>> tasks, long timeout, @NonNull java.util.concurrent.TimeUnit unit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException",
686,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor,"@NonNullpublic <T> java.util.concurrent.Future<T> submit(@NonNull java.lang.Runnable task, T result)",
687,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor,public <T> java.util.concurrent.Future<T> submit(@NonNull java.util.concurrent.Callable<T> task),
688,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor,public void shutdown(),
689,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor,@NonNullpublic java.util.List<java.lang.Runnable> shutdownNow(),
690,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor,public boolean isShutdown(),
691,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor,public boolean isTerminated(),
692,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor,"public boolean awaitTermination(long timeout, @NonNull java.util.concurrent.TimeUnit unit) throws java.lang.InterruptedException",
693,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor,public java.lang.String toString(),
694,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor.Builder,public GlideExecutor.Builder setThreadTimeoutMillis(long threadTimeoutMillis),Allows both core and non-core threads in the executor to be terminated if no tasks arrive for at least the given timeout milliseconds. Use NO_THREAD_TIMEOUT to remove a previously set timeout.
695,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor.Builder,public GlideExecutor.Builder setThreadCount(int threadCount),Sets the maximum number of threads to use.
696,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor.Builder,public GlideExecutor.Builder setUncaughtThrowableStrategy(@NonNull GlideExecutor.UncaughtThrowableStrategy strategy),Sets the GlideExecutor.UncaughtThrowableStrategy to use for unexpected exceptions thrown by tasks on GlideExecutors built by this Builder.
697,engine/executor,com.bumptech.glide.load.engine.executor,Class GlideExecutor.Builder,public GlideExecutor.Builder setName(java.lang.String name),Sets the prefix to use for each thread name created by any GlideExecutors built by this Builder.
698,engine/executor,com.bumptech.glide.load.engine.executor,Interface GlideExecutor.UncaughtThrowableStrategy,static final GlideExecutor.UncaughtThrowableStrategy IGNORE,Silently catches and ignores the uncaught Throwables.
699,engine/executor,com.bumptech.glide.load.engine.executor,Interface GlideExecutor.UncaughtThrowableStrategy,static final GlideExecutor.UncaughtThrowableStrategy LOG,Logs the uncaught Throwables using GlideExecutor.TAG and Log.
700,engine/executor,com.bumptech.glide.load.engine.executor,Interface GlideExecutor.UncaughtThrowableStrategy,static final GlideExecutor.UncaughtThrowableStrategy THROW,Rethrows the uncaught Throwables to crash the app.
701,integration/concurrent,com.bumptech.glide.integration.concurrent,Class GlideFutures,"public static <T> com.google.common.util.concurrent.ListenableFuture<java.lang.Void> submitAndExecute(RequestManager requestManager, RequestBuilder<T> requestBuilder, GlideFutures.ResourceConsumer<T> action, java.util.concurrent.Executor executor)","Submits the provided request, performs the provided action and returns a ListenableFuture that can be used to cancel the request or monitor its status. Cancellation is best effort and may result in some resources not being returned back to Glide's pool. In particular, if the request is cancelled after the resource is loaded by Glide, but before action is run on executor, the resource will not be returned. We have the unfortunate choice between unsafely returning resources to the pool immediately when cancel is called while they may still be in use via com.google.common.util.concurrent.ClosingFuture or occasionally failing to return resources to the pool. Because failing to return resources to the pool is inefficient, but safe, that's the route we've chosen. A more sophisticated implementation may allow us to avoid the resource inefficiency. If you do not need to interact with resource, use #preload(RequestManager, RequestBuilder, Executor). preload is more efficient because it knows that the resource is never used and can always clear the resource immediately on cancellation, unlike this method. An example usage: ListenableFuture<Void> future = submitAndExecute( requestManager, requestBuilder, (bitmap) -> doSomethingWithBitmap(bitmap), backgroundExecutor); ; "
702,glide/module,com.bumptech.glide.module,Interface GlideModule,"void registerComponents(@NonNull android.content.Context context, @NonNull Glide glide, @NonNull Registry registry)",Deprecated. 
703,util/pool,com.bumptech.glide.util.pool,Class GlideTrace,public static void beginSection(java.lang.String tag),
704,util/pool,com.bumptech.glide.util.pool,Class GlideTrace,"public static void beginSectionFormat(java.lang.String format, java.lang.Object arg1)",
705,util/pool,com.bumptech.glide.util.pool,Class GlideTrace,"public static void beginSectionFormat(java.lang.String format, java.lang.Object arg1, java.lang.Object arg2)",
706,util/pool,com.bumptech.glide.util.pool,Class GlideTrace,"public static void beginSectionFormat(java.lang.String format, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3)",
707,load/model,com.bumptech.glide.load.model,Class GlideUrl,public GlideUrl(java.net.URL url),
708,load/model,com.bumptech.glide.load.model,Class GlideUrl,public GlideUrl(java.lang.String url),
709,load/model,com.bumptech.glide.load.model,Class GlideUrl,"public GlideUrl(java.net.URL url, Headers headers)",
710,load/model,com.bumptech.glide.load.model,Class GlideUrl,public java.net.URL toURL() throws java.net.MalformedURLException,
711,load/model,com.bumptech.glide.load.model,Class GlideUrl,public java.lang.String toStringUrl(),Returns a properly escaped String url that can be used to make http/https requests.
712,load/model,com.bumptech.glide.load.model,Class GlideUrl,"public java.util.Map<java.lang.String,java.lang.String> getHeaders()",Returns a non-null Map containing headers.
713,load/model,com.bumptech.glide.load.model,Class GlideUrl,public java.lang.String getCacheKey(),"Returns an inexpensive to calculate String suitable for use as a disk cache key. This method does not include headers. Unlike toStringUrl()} and toURL(), this method does not escape input."
714,load/model,com.bumptech.glide.load.model,Class GlideUrl,public java.lang.String toString(),
715,load/model,com.bumptech.glide.load.model,Class GlideUrl,public void updateDiskCacheKey(@NonNull java.security.MessageDigest messageDigest),Description copied from interface: Key
716,load/model,com.bumptech.glide.load.model,Class GlideUrl,public boolean equals(java.lang.Object o),Description copied from interface: Key
717,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class GranularRoundedCorners,"protected android.graphics.Bitmap transform(@NonNull BitmapPool pool, @NonNull android.graphics.Bitmap toTransform, int outWidth, int outHeight)",Description copied from class: BitmapTransformation
718,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class GranularRoundedCorners,public boolean equals(java.lang.Object o),Description copied from interface: Key
719,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class GranularRoundedCorners,public int hashCode(),Description copied from interface: Key
720,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class HardwareConfigState,public static HardwareConfigState getInstance(),
721,load/model,com.bumptech.glide.load.model,Interface Headers,@Deprecatedstatic final Headers NONE,Deprecated. Use DEFAULT instead.
722,glide/load,com.bumptech.glide.load,Class HttpException,public HttpException(int statusCode),
723,glide/load,com.bumptech.glide.load,Class HttpException,public HttpException(java.lang.String message),
724,glide/load,com.bumptech.glide.load,Class HttpException,"public HttpException(java.lang.String message, int statusCode)",
725,model/stream,com.bumptech.glide.load.model.stream,Class HttpGlideUrlLoader,public HttpGlideUrlLoader(),
726,model/stream,com.bumptech.glide.load.model.stream,Class HttpGlideUrlLoader,"public ModelLoader.LoadData<java.io.InputStream> buildLoadData(@NonNull GlideUrl model, int width, int height, @NonNull Options options)",Description copied from interface: ModelLoader
727,model/stream,com.bumptech.glide.load.model.stream,Class HttpGlideUrlLoader.Factory,"@NonNullpublic ModelLoader<GlideUrl,java.io.InputStream> build(MultiModelLoaderFactory multiFactory)",Description copied from interface: ModelLoaderFactory
728,model/stream,com.bumptech.glide.load.model.stream,Class HttpUriLoader,"public ModelLoader.LoadData<java.io.InputStream> buildLoadData(@NonNull android.net.Uri model, int width, int height, @NonNull Options options)",Description copied from interface: ModelLoader
729,model/stream,com.bumptech.glide.load.model.stream,Class HttpUriLoader.Factory,"@NonNullpublic ModelLoader<android.net.Uri,java.io.InputStream> build(MultiModelLoaderFactory multiFactory)",Description copied from interface: ModelLoaderFactory
730,load/data,com.bumptech.glide.load.data,Class HttpUrlFetcher,"public void loadData(@NonNull Priority priority, @NonNull DataFetcher.DataCallback<? super java.io.InputStream> callback)",Description copied from interface: DataFetcher
731,load/data,com.bumptech.glide.load.data,Class HttpUrlFetcher,public void cleanup(),Description copied from interface: DataFetcher
732,load/data,com.bumptech.glide.load.data,Class HttpUrlFetcher,public void cancel(),Description copied from interface: DataFetcher
733,load/data,com.bumptech.glide.load.data,Class HttpUrlFetcher,@NonNullpublic java.lang.Class<java.io.InputStream> getDataClass(),Description copied from interface: DataFetcher
734,load/resource,com.bumptech.glide.load.resource,Class ImageDecoderResourceDecoder<T>,"public final boolean handles(@NonNull android.graphics.ImageDecoder.Source source, @NonNull Options options)",Description copied from interface: ResourceDecoder
735,load/resource,com.bumptech.glide.load.resource,Class ImageDecoderResourceDecoder<T>,"@Nullablepublic final Resource<T> decode(@NonNull android.graphics.ImageDecoder.Source source, int requestedWidth, int requestedHeight, @NonNull Options options) throws java.io.IOException",Description copied from interface: ResourceDecoder
736,glide/load,com.bumptech.glide.load,Interface ImageHeaderParser,@NonNullImageHeaderParser.ImageType getType(@NonNull java.io.InputStream is) throws java.io.IOException,
737,glide/load,com.bumptech.glide.load,Interface ImageHeaderParser,@NonNullImageHeaderParser.ImageType getType(@NonNull java.nio.ByteBuffer byteBuffer) throws java.io.IOException,
738,glide/load,com.bumptech.glide.load,Interface ImageHeaderParser,"int getOrientation(@NonNull java.io.InputStream is, @NonNull ArrayPool byteArrayPool) throws java.io.IOException",Parse the orientation from the image header. If it doesn't handle this image type (or this is not an image) it will return a default value rather than throwing an exception.
739,glide/load,com.bumptech.glide.load,Enum ImageHeaderParser.ImageType,public static final ImageHeaderParser.ImageType GIF,
740,glide/load,com.bumptech.glide.load,Enum ImageHeaderParser.ImageType,public static final ImageHeaderParser.ImageType JPEG,
741,glide/load,com.bumptech.glide.load,Enum ImageHeaderParser.ImageType,public static final ImageHeaderParser.ImageType RAW,
742,glide/load,com.bumptech.glide.load,Enum ImageHeaderParser.ImageType,public static final ImageHeaderParser.ImageType PNG_A,PNG type with alpha.
743,glide/load,com.bumptech.glide.load,Enum ImageHeaderParser.ImageType,public static final ImageHeaderParser.ImageType PNG,PNG type without alpha.
744,glide/load,com.bumptech.glide.load,Enum ImageHeaderParser.ImageType,public static final ImageHeaderParser.ImageType WEBP_A,WebP type with alpha.
745,glide/load,com.bumptech.glide.load,Enum ImageHeaderParser.ImageType,public static final ImageHeaderParser.ImageType WEBP,WebP type without alpha.
746,glide/load,com.bumptech.glide.load,Enum ImageHeaderParser.ImageType,public static ImageHeaderParser.ImageType[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (ImageHeaderParser.ImageType c : ImageHeaderParser.ImageType.values())  System.out.println(c);"
747,glide/load,com.bumptech.glide.load,Enum ImageHeaderParser.ImageType,public static ImageHeaderParser.ImageType valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.The string must match exactly an identifier used to declare anenum constant in this type. (Extraneous whitespace characters are not permitted.)
748,glide/provider,com.bumptech.glide.provider,Class ImageHeaderParserRegistry,@NonNullpublic java.util.List<ImageHeaderParser> getParsers(),
749,glide/load,com.bumptech.glide.load,Class ImageHeaderParserUtils,"@NonNullpublic static ImageHeaderParser.ImageType getType(@NonNull java.util.List<ImageHeaderParser> parsers, @Nullable java.io.InputStream is, @NonNull ArrayPool byteArrayPool) throws java.io.IOException",Returns the ImageType for the given InputStream.
750,glide/load,com.bumptech.glide.load,Class ImageHeaderParserUtils,"@NonNullpublic static ImageHeaderParser.ImageType getType(@NonNull java.util.List<ImageHeaderParser> parsers, @Nullable java.nio.ByteBuffer buffer) throws java.io.IOException",Returns the ImageType for the given ByteBuffer.
751,glide/load,com.bumptech.glide.load,Class ImageHeaderParserUtils,"@NonNullpublic static ImageHeaderParser.ImageType getType(@NonNull java.util.List<ImageHeaderParser> parsers, @NonNull ParcelFileDescriptorRewinder parcelFileDescriptorRewinder, @NonNull ArrayPool byteArrayPool) throws java.io.IOException",
752,glide/load,com.bumptech.glide.load,Class ImageHeaderParserUtils,"public static int getOrientation(@NonNull java.util.List<ImageHeaderParser> parsers, @Nullable java.io.InputStream is, @NonNull ArrayPool byteArrayPool) throws java.io.IOException",Returns the orientation for the given InputStream.
753,request/target,com.bumptech.glide.request.target,Class ImageViewTarget<Z>,public ImageViewTarget(android.widget.ImageView view),
754,request/target,com.bumptech.glide.request.target,Class ImageViewTarget<Z>,@Nullablepublic android.graphics.drawable.Drawable getCurrentDrawable(),Returns the current Drawable being displayed in the view using ImageView.getDrawable().
755,request/target,com.bumptech.glide.request.target,Class ImageViewTarget<Z>,public void setDrawable(android.graphics.drawable.Drawable drawable),Sets the given Drawable on the view using ImageView.setImageDrawable(android.graphics.drawable.Drawable).
756,request/target,com.bumptech.glide.request.target,Class ImageViewTarget<Z>,public void onLoadStarted(@Nullable android.graphics.drawable.Drawable placeholder),Sets the given Drawable on the view using ImageView.setImageDrawable(android.graphics.drawable.Drawable).
757,request/target,com.bumptech.glide.request.target,Class ImageViewTarget<Z>,public void onLoadFailed(@Nullable android.graphics.drawable.Drawable errorDrawable),Sets the given Drawable on the view using ImageView.setImageDrawable(android.graphics.drawable.Drawable).
758,request/target,com.bumptech.glide.request.target,Class ImageViewTarget<Z>,public void onLoadCleared(@Nullable android.graphics.drawable.Drawable placeholder),Sets the given Drawable on the view using ImageView.setImageDrawable(android.graphics.drawable.Drawable).
759,request/target,com.bumptech.glide.request.target,Class ImageViewTarget<Z>,"public void onResourceReady(@NonNull Z resource, @Nullable Transition<? super Z> transition)",Description copied from interface: Target
760,request/target,com.bumptech.glide.request.target,Class ImageViewTarget<Z>,public void onStart(),Description copied from interface: LifecycleListener
761,request/target,com.bumptech.glide.request.target,Class ImageViewTarget<Z>,public void onStop(),Description copied from interface: LifecycleListener
762,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class InputStreamBitmapImageDecoderResourceDecoder,"public boolean handles(@NonNull java.io.InputStream source, @NonNull Options options) throws java.io.IOException",Description copied from interface: ResourceDecoder
763,load/data,com.bumptech.glide.load.data,Class InputStreamRewinder,@NonNullpublic java.io.InputStream rewindAndGet() throws java.io.IOException,Description copied from interface: DataRewinder
764,load/data,com.bumptech.glide.load.data,Class InputStreamRewinder,public void cleanup(),Description copied from interface: DataRewinder
765,load/data,com.bumptech.glide.load.data,Class InputStreamRewinder.Factory,@NonNullpublic DataRewinder<java.io.InputStream> build(java.io.InputStream data),Description copied from interface: DataRewinder.Factory
766,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class IntegerArrayAdapter,public java.lang.String getTag(),TAG for logging.
767,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class IntegerArrayAdapter,public int getArrayLength(int[] array),Return the length of the given array.
768,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class IntegerArrayAdapter,public int[] newArray(int length),Allocate and return an array of the specified size.
769,engine/cache,com.bumptech.glide.load.engine.cache,Class InternalCacheDiskCacheFactory,public InternalCacheDiskCacheFactory(android.content.Context context),
770,engine/cache,com.bumptech.glide.load.engine.cache,Class InternalCacheDiskCacheFactory,"public InternalCacheDiskCacheFactory(android.content.Context context, long diskCacheSize)",
771,glide/load,com.bumptech.glide.load,Interface Key,static final java.lang.String STRING_CHARSET_NAME,
772,glide/load,com.bumptech.glide.load,Interface Key,void updateDiskCacheKey(@NonNull java.security.MessageDigest messageDigest),Adds all uniquely identifying information to the given digest. Note - Using MessageDigest.reset() inside of this method will result in undefined behavior.
773,glide/load,com.bumptech.glide.load,Interface Key,boolean equals(java.lang.Object o),"For caching to work correctly, implementations must implement this method and hashCode()."
774,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class LazyBitmapDrawableResource,"@Deprecatedpublic static LazyBitmapDrawableResource obtain(android.content.Context context, android.graphics.Bitmap bitmap)","Deprecated. Use obtain(Resources, Resource) instead, it can be unsafe to extract Bitmaps from their wrapped Resource."
775,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class LazyBitmapDrawableResource,"@Deprecatedpublic static LazyBitmapDrawableResource obtain(android.content.res.Resources resources, BitmapPool bitmapPool, android.graphics.Bitmap bitmap)","Deprecated. Use obtain(Resources, Resource) instead, it can be unsafe to extract Bitmaps from their wrapped Resource."
776,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class LazyBitmapDrawableResource,"@Nullablepublic static Resource<android.graphics.drawable.BitmapDrawable> obtain(@NonNull android.content.res.Resources resources, @Nullable Resource<android.graphics.Bitmap> bitmapResource)",
777,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class LazyBitmapDrawableResource,@NonNullpublic java.lang.Class<android.graphics.drawable.BitmapDrawable> getResourceClass(),Description copied from interface: Resource
778,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class LazyBitmapDrawableResource,@NonNullpublic android.graphics.drawable.BitmapDrawable get(),Description copied from interface: Resource
779,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class LazyBitmapDrawableResource,public int getSize(),Description copied from interface: Resource
780,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class LazyBitmapDrawableResource,public void recycle(),Description copied from interface: Resource
781,load/model,com.bumptech.glide.load.model,Class LazyHeaders,"public java.util.Map<java.lang.String,java.lang.String> getHeaders()",Description copied from interface: Headers
782,load/model,com.bumptech.glide.load.model,Class LazyHeaders,public java.lang.String toString(),
783,load/model,com.bumptech.glide.load.model,Class LazyHeaders,public boolean equals(java.lang.Object o),
784,load/model,com.bumptech.glide.load.model,Class LazyHeaders.Builder,"public LazyHeaders.Builder addHeader(@NonNull java.lang.String key, @NonNull java.lang.String value)","Adds a value for the given header and returns this builder. Use addHeader(String, LazyHeaderFactory) if obtaining the value requires I/O (i.e. an OAuth token)."
785,load/model,com.bumptech.glide.load.model,Class LazyHeaders.Builder,"public LazyHeaders.Builder addHeader(@NonNull java.lang.String key, @NonNull LazyHeaderFactory factory)",Adds an LazyHeaderFactory that will be used to construct a value for the given key lazily on a background thread. Headers may have multiple values whose order is defined by the order in which this method is called. This class does not prevent you from adding the same value to a given key multiple times
786,load/model,com.bumptech.glide.load.model,Class LazyHeaders.Builder,"public LazyHeaders.Builder setHeader(@NonNull java.lang.String key, @Nullable java.lang.String value)","Replaces all existing LazyHeaderFactorys for the given key with the given LazyHeaderFactory. If the given value is null, the header at the given key will be removed. Use setHeader(String, LazyHeaderFactory) if obtaining the value requires I/O (i.e. an OAuth token)."
787,load/model,com.bumptech.glide.load.model,Class LazyHeaders.Builder,"public LazyHeaders.Builder setHeader(@NonNull java.lang.String key, @Nullable LazyHeaderFactory factory)","Replaces all existing LazyHeaderFactorys for the given key with the given LazyHeaderFactory. If the given value is null, the header at the given key will be removed."
788,glide/manager,com.bumptech.glide.manager,Interface Lifecycle,void addListener(@NonNull LifecycleListener listener),Adds the given listener to the set of listeners managed by this Lifecycle implementation.
789,glide/manager,com.bumptech.glide.manager,Interface LifecycleListener,void onStart(),Callback for when Fragment.onStart()} or Activity.onStart() is called.
790,glide/manager,com.bumptech.glide.manager,Interface LifecycleListener,void onStop(),Callback for when Fragment.onStop()} or Activity.onStop()} is called.
791,bumptech/glide,com.bumptech.glide,Class ListPreloader<T>,"public void onScrollStateChanged(android.widget.AbsListView absListView, int scrollState)",
792,bumptech/glide,com.bumptech.glide,Interface ListPreloader.PreloadModelProvider<U>,@NonNulljava.util.List<U> getPreloadItems(int position),"Returns a List of models that need to be loaded for the list to display adapter items in positions between start and end. A list of any size can be returned so there can be multiple models per adapter position. Every model returned by this method is expected to produce a valid RequestBuilder in getPreloadRequestBuilder(Object). If that's not possible for any set of models, avoid including them in the List returned by this method. Although it's acceptable for the returned List to contain null models, it's best to filter them from the list instead of adding null to avoid unnecessary logic and expanding the size of the List"
793,load/engine,com.bumptech.glide.load.engine,"Class LoadPath<Data,ResourceType,Transcode>","public Resource<Transcode> load(DataRewinder<Data> rewinder, @NonNull Options options, int width, int height, com.bumptech.glide.load.engine.DecodePath.DecodeCallback<ResourceType> decodeCallback) throws GlideException",
794,load/engine,com.bumptech.glide.load.engine,"Class LoadPath<Data,ResourceType,Transcode>",public java.lang.Class<Data> getDataClass(),
795,glide/provider,com.bumptech.glide.provider,Class LoadPathCache,"public boolean isEmptyLoadPath(@Nullable LoadPath<?,?,?> path)","Returns true if the given LoadPath is the signal object returned from get(Class, Class, Class) that indicates that we've previously found that there are no available paths to load the requested resources and false otherwise."
796,glide/provider,com.bumptech.glide.provider,Class LoadPathCache,"@Nullablepublic <Data,TResource,Transcode> LoadPath<Data,TResource,Transcode> get(java.lang.Class<Data> dataClass, java.lang.Class<TResource> resourceClass, java.lang.Class<Transcode> transcodeClass)",May return NO_PATHS_SIGNAL to indicate that we've previously found that there are 0 available load paths for the requested types. Callers must check using isEmptyLoadPath(LoadPath) before using any load path returned by this method.
797,load/data,com.bumptech.glide.load.data,Class LocalUriFetcher<T>,"public final void loadData(@NonNull Priority priority, @NonNull DataFetcher.DataCallback<? super T> callback)",Description copied from interface: DataFetcher
798,load/data,com.bumptech.glide.load.data,Class LocalUriFetcher<T>,public void cleanup(),Description copied from interface: DataFetcher
799,load/data,com.bumptech.glide.load.data,Class LocalUriFetcher<T>,public void cancel(),Description copied from interface: DataFetcher
800,load/data,com.bumptech.glide.load.data,Class LocalUriFetcher<T>,@NonNullpublic DataSource getDataSource(),Description copied from interface: DataFetcher
801,load/data,com.bumptech.glide.load.data,Class LocalUriFetcher<T>,"protected abstract T loadResource(android.net.Uri uri, android.content.ContentResolver contentResolver) throws java.io.FileNotFoundException",Returns a concrete data type from the given Uri using the given ContentResolver.
802,glide/util,com.bumptech.glide.util,Class LogTime,public static long getLogTime(),Returns the current time in either millis or nanos depending on the api level to be used with getElapsedMillis(long).
803,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class LruArrayPool,public LruArrayPool(),
804,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class LruArrayPool,"@Deprecatedpublic <T> void put(T array, java.lang.Class<T> arrayClass)",Deprecated. 
805,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class LruArrayPool,public <T> void put(T array),Description copied from interface: ArrayPool
806,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class LruArrayPool,"public <T> T getExact(int size, java.lang.Class<T> arrayClass)",Description copied from interface: ArrayPool
807,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class LruArrayPool,"public <T> T get(int size, java.lang.Class<T> arrayClass)",Description copied from interface: ArrayPool
808,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class LruArrayPool,public void clearMemory(),Description copied from interface: ArrayPool
809,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class LruBitmapPool,public LruBitmapPool(long maxSize),Constructor for LruBitmapPool.
810,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class LruBitmapPool,public long hitCount(),Returns the number of cache hits for bitmaps in the pool.
811,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class LruBitmapPool,public long missCount(),Returns the number of cache misses for bitmaps in the pool.
812,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class LruBitmapPool,public long evictionCount(),Returns the number of bitmaps that have been evicted from the pool.
813,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class LruBitmapPool,public long getCurrentSize(),Returns the current size of the pool in bytes.
814,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class LruBitmapPool,public long getMaxSize(),Description copied from interface: BitmapPool
815,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class LruBitmapPool,public void setSizeMultiplier(float sizeMultiplier),Description copied from interface: BitmapPool
816,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class LruBitmapPool,public void put(android.graphics.Bitmap bitmap),Description copied from interface: BitmapPool
817,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class LruBitmapPool,"@NonNullpublic android.graphics.Bitmap get(int width, int height, android.graphics.Bitmap.Config config)",Description copied from interface: BitmapPool
818,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class LruBitmapPool,"@NonNullpublic android.graphics.Bitmap getDirty(int width, int height, android.graphics.Bitmap.Config config)",Description copied from interface: BitmapPool
819,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class LruBitmapPool,public void clearMemory(),Description copied from interface: BitmapPool
820,glide/util,com.bumptech.glide.util,"Class LruCache<T,Y>",public void setSizeMultiplier(float multiplier),"Sets a size multiplier that will be applied to the size provided in the constructor to put the new size of the cache. If the new size is less than the current size, entries will be evicted until the current size is less than or equal to the new size."
821,glide/util,com.bumptech.glide.util,"Class LruCache<T,Y>",protected int getSize(@Nullable Y item),"Returns the size of a given item, defaulting to one. The units must match those used in the size passed in to the constructor. Subclasses can override this method to return sizes in various units, usually bytes."
822,glide/util,com.bumptech.glide.util,"Class LruCache<T,Y>",protected int getCount(),Returns the number of entries stored in cache.
823,glide/util,com.bumptech.glide.util,"Class LruCache<T,Y>","protected void onItemEvicted(@NonNull T key, @Nullable Y item)",A callback called whenever an item is evicted from the cache. Subclasses can override.
824,glide/util,com.bumptech.glide.util,"Class LruCache<T,Y>",public long getMaxSize(),Returns the current maximum size of the cache in bytes.
825,glide/util,com.bumptech.glide.util,"Class LruCache<T,Y>",public long getCurrentSize(),Returns the sum of the sizes of all items in the cache.
826,glide/util,com.bumptech.glide.util,"Class LruCache<T,Y>",public boolean contains(@NonNull T key),Returns true if there is a value for the given key in the cache.
827,glide/util,com.bumptech.glide.util,"Class LruCache<T,Y>",@Nullablepublic Y get(@NonNull T key),Returns the item in the cache for the given key or null if no such item exists.
828,glide/util,com.bumptech.glide.util,"Class LruCache<T,Y>","@Nullablepublic Y put(@NonNull T key, @Nullable Y item)","Adds the given item to the cache with the given key and returns any previous entry for the given key that may have already been in the cache. If the size of the item is larger than the total cache size, the item will not be added to the cache and instead onItemEvicted(Object, Object) will be called synchronously with the given key and item."
829,glide/util,com.bumptech.glide.util,"Class LruCache<T,Y>",@Nullablepublic Y remove(@NonNull T key),"Removes the item at the given key and returns the removed item if present, and null otherwise."
830,glide/util,com.bumptech.glide.util,"Class LruCache<T,Y>",public void clearMemory(),Clears all items in the cache.
831,engine/cache,com.bumptech.glide.load.engine.cache,Class LruResourceCache,public void setResourceRemovedListener(@NonNull MemoryCache.ResourceRemovedListener listener),Description copied from interface: MemoryCache
832,engine/cache,com.bumptech.glide.load.engine.cache,Class LruResourceCache,"protected void onItemEvicted(@NonNull Key key, @Nullable Resource<?> item)",Description copied from class: LruCache
833,engine/cache,com.bumptech.glide.load.engine.cache,Class LruResourceCache,protected int getSize(@Nullable Resource<?> item),Description copied from class: LruCache
834,glide/util,com.bumptech.glide.util,Class MarkEnforcingInputStream,public void mark(int readLimit),
835,glide/util,com.bumptech.glide.util,Class MarkEnforcingInputStream,public int read() throws java.io.IOException,
836,glide/util,com.bumptech.glide.util,Class MarkEnforcingInputStream,"public int read(@NonNull byte[] buffer, int byteOffset, int byteCount) throws java.io.IOException",
837,glide/util,com.bumptech.glide.util,Class MarkEnforcingInputStream,public void reset() throws java.io.IOException,
838,glide/util,com.bumptech.glide.util,Class MarkEnforcingInputStream,public long skip(long byteCount) throws java.io.IOException,
839,load/model,com.bumptech.glide.load.model,Class MediaStoreFileLoader,"public ModelLoader.LoadData<java.io.File> buildLoadData(@NonNull android.net.Uri uri, int width, int height, @NonNull Options options)",Description copied from interface: ModelLoader
840,load/model,com.bumptech.glide.load.model,Class MediaStoreFileLoader.Factory,"@NonNullpublic ModelLoader<android.net.Uri,java.io.File> build(MultiModelLoaderFactory multiFactory)",Description copied from interface: ModelLoaderFactory
841,model/stream,com.bumptech.glide.load.model.stream,Class MediaStoreImageThumbLoader,"public ModelLoader.LoadData<java.io.InputStream> buildLoadData(@NonNull android.net.Uri model, int width, int height, @NonNull Options options)",Description copied from interface: ModelLoader
842,model/stream,com.bumptech.glide.load.model.stream,Class MediaStoreImageThumbLoader.Factory,"@NonNullpublic ModelLoader<android.net.Uri,java.io.InputStream> build(MultiModelLoaderFactory multiFactory)",Description copied from interface: ModelLoaderFactory
843,glide/signature,com.bumptech.glide.signature,Class MediaStoreSignature,public boolean equals(java.lang.Object o),Description copied from interface: Key
844,glide/signature,com.bumptech.glide.signature,Class MediaStoreSignature,public int hashCode(),Description copied from interface: Key
845,data/mediastore,com.bumptech.glide.load.data.mediastore,Class MediaStoreUtil,public static boolean isMediaStoreUri(android.net.Uri uri),
846,data/mediastore,com.bumptech.glide.load.data.mediastore,Class MediaStoreUtil,public static boolean isMediaStoreVideoUri(android.net.Uri uri),
847,data/mediastore,com.bumptech.glide.load.data.mediastore,Class MediaStoreUtil,public static boolean isMediaStoreImageUri(android.net.Uri uri),
848,model/stream,com.bumptech.glide.load.model.stream,Class MediaStoreVideoThumbLoader,"@Nullablepublic ModelLoader.LoadData<java.io.InputStream> buildLoadData(@NonNull android.net.Uri model, int width, int height, @NonNull Options options)",Description copied from interface: ModelLoader
849,model/stream,com.bumptech.glide.load.model.stream,Class MediaStoreVideoThumbLoader.Factory,"@NonNullpublic ModelLoader<android.net.Uri,java.io.InputStream> build(MultiModelLoaderFactory multiFactory)",Description copied from interface: ModelLoaderFactory
850,engine/cache,com.bumptech.glide.load.engine.cache,Interface MemoryCache,long getCurrentSize(),Returns the sum of the sizes of all the contents of the cache in bytes.
851,engine/cache,com.bumptech.glide.load.engine.cache,Interface MemoryCache,long getMaxSize(),Returns the current maximum size in bytes of the cache.
852,engine/cache,com.bumptech.glide.load.engine.cache,Interface MemoryCache,void setSizeMultiplier(float multiplier),"Adjust the maximum size of the cache by multiplying the original size of the cache by the given multiplier. If the size multiplier causes the size of the cache to be decreased, items will be evicted until the cache is smaller than the new size."
853,engine/cache,com.bumptech.glide.load.engine.cache,Interface MemoryCache,@NullableResource<?> remove(@NonNull Key key),Removes the value for the given key and returns it if present or null otherwise.
854,engine/cache,com.bumptech.glide.load.engine.cache,Interface MemoryCache,"@NullableResource<?> put(@NonNull Key key, @Nullable Resource<?> resource)",Add bitmap to the cache with the given key.
855,engine/cache,com.bumptech.glide.load.engine.cache,Interface MemoryCache,void setResourceRemovedListener(@NonNull MemoryCache.ResourceRemovedListener listener),Set the listener to be called when a bitmap is removed from the cache.
856,engine/cache,com.bumptech.glide.load.engine.cache,Interface MemoryCache,void clearMemory(),Evict all items from the memory cache.
857,engine/cache,com.bumptech.glide.load.engine.cache,Class MemoryCacheAdapter,public long getCurrentSize(),Description copied from interface: MemoryCache
858,engine/cache,com.bumptech.glide.load.engine.cache,Class MemoryCacheAdapter,public long getMaxSize(),Description copied from interface: MemoryCache
859,engine/cache,com.bumptech.glide.load.engine.cache,Class MemoryCacheAdapter,public void setSizeMultiplier(float multiplier),Description copied from interface: MemoryCache
860,engine/cache,com.bumptech.glide.load.engine.cache,Class MemoryCacheAdapter,@Nullablepublic Resource<?> remove(@NonNull Key key),Description copied from interface: MemoryCache
861,engine/cache,com.bumptech.glide.load.engine.cache,Class MemoryCacheAdapter,"@Nullablepublic Resource<?> put(@NonNull Key key, @Nullable Resource<?> resource)",Description copied from interface: MemoryCache
862,engine/cache,com.bumptech.glide.load.engine.cache,Class MemoryCacheAdapter,public void setResourceRemovedListener(@NonNull MemoryCache.ResourceRemovedListener listener),Description copied from interface: MemoryCache
863,engine/cache,com.bumptech.glide.load.engine.cache,Class MemoryCacheAdapter,public void clearMemory(),Description copied from interface: MemoryCache
864,bumptech/glide,com.bumptech.glide,Enum MemoryCategory,public static final MemoryCategory LOW,Tells Glide's memory cache and bitmap pool to use at most half of their initial maximum size.
865,bumptech/glide,com.bumptech.glide,Enum MemoryCategory,public static final MemoryCategory NORMAL,Tells Glide's memory cache and bitmap pool to use at most their initial maximum size.
866,bumptech/glide,com.bumptech.glide,Enum MemoryCategory,public static MemoryCategory[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (MemoryCategory c : MemoryCategory.values())  System.out.println(c);"
867,bumptech/glide,com.bumptech.glide,Enum MemoryCategory,public static MemoryCategory valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.The string must match exactly an identifier used to declare anenum constant in this type. (Extraneous whitespace characters are not permitted.)
868,engine/cache,com.bumptech.glide.load.engine.cache,Class MemorySizeCalculator,public int getMemoryCacheSize(),Returns the recommended memory cache size for the device it is run on in bytes.
869,engine/cache,com.bumptech.glide.load.engine.cache,Class MemorySizeCalculator,public int getBitmapPoolSize(),Returns the recommended bitmap pool size for the device it is run on in bytes.
870,engine/cache,com.bumptech.glide.load.engine.cache,Class MemorySizeCalculator.Builder,public MemorySizeCalculator.Builder setMemoryCacheScreens(float memoryCacheScreens),Sets the number of device screens worth of pixels the MemoryCache should be able to hold and returns this Builder.
871,engine/cache,com.bumptech.glide.load.engine.cache,Class MemorySizeCalculator.Builder,public MemorySizeCalculator.Builder setBitmapPoolScreens(float bitmapPoolScreens),Sets the number of device screens worth of pixels the BitmapPool should be able to hold and returns this Builder.
872,engine/cache,com.bumptech.glide.load.engine.cache,Class MemorySizeCalculator.Builder,public MemorySizeCalculator.Builder setMaxSizeMultiplier(float maxSizeMultiplier),"Sets the maximum percentage of the device's memory class for standard devices that can be taken up by Glide's MemoryCache and BitmapPool put together, and returns this builder."
873,engine/cache,com.bumptech.glide.load.engine.cache,Class MemorySizeCalculator.Builder,public MemorySizeCalculator.Builder setLowMemoryMaxSizeMultiplier(float lowMemoryMaxSizeMultiplier),"Sets the maximum percentage of the device's memory class for low ram devices that can be taken up by Glide's MemoryCache and BitmapPool put together, and returns this builder."
874,engine/cache,com.bumptech.glide.load.engine.cache,Class MemorySizeCalculator.Builder,public MemorySizeCalculator.Builder setArrayPoolSize(int arrayPoolSizeBytes),Sets the size in bytes of the ArrayPool to use to store temporary arrays while decoding data and returns this builder. This number will be halved on low memory devices that return true from ActivityManager.isLowRamDevice().
875,engine/executor,com.bumptech.glide.load.engine.executor,Class MockGlideExecutor,public static GlideExecutor newTestExecutor(java.util.concurrent.ExecutorService executorService),
876,engine/executor,com.bumptech.glide.load.engine.executor,Class MockGlideExecutor,public static GlideExecutor newMainThreadExecutor(),
877,load/model,com.bumptech.glide.load.model,"Class ModelCache<A,B>",public ModelCache(),
878,load/model,com.bumptech.glide.load.model,"Class ModelCache<A,B>","@Nullablepublic B get(A model, int width, int height)",Get a value.
879,load/model,com.bumptech.glide.load.model,"Class ModelCache<A,B>","public void put(A model, int width, int height, B value)",Add a value.
880,load/model,com.bumptech.glide.load.model,"Interface ModelLoader<Model,Data>","@NullableModelLoader.LoadData<Data> buildLoadData(@NonNull Model model, int width, int height, @NonNull Options options)","Returns a ModelLoader.LoadData containing a DataFetcher required to decode the resource represented by this model, as well as a set of Keys that identify the data loaded by the DataFetcher as well as an optional list of alternate keys from which equivalent data can be loaded. The DataFetcher will not be used if the resource is already cached. Note - If no valid data fetcher can be returned (for example if a model has a null URL), then it is acceptable to return a null data fetcher from this method."
881,load/model,com.bumptech.glide.load.model,Class ModelLoader.LoadData<Data>,public final Key sourceKey,
882,load/model,com.bumptech.glide.load.model,Class ModelLoader.LoadData<Data>,public final java.util.List<Key> alternateKeys,
883,load/model,com.bumptech.glide.load.model,Class ModelLoader.LoadData<Data>,"public LoadData(@NonNull Key sourceKey, @NonNull DataFetcher<Data> fetcher)",
884,load/model,com.bumptech.glide.load.model,"Interface ModelLoaderFactory<T,Y>","@NonNullModelLoader<T,Y> build(@NonNull MultiModelLoaderFactory multiFactory)",Build a concrete ModelLoader for this model type.
885,load/model,com.bumptech.glide.load.model,Class ModelLoaderRegistry,"public <Model,Data> void append(@NonNull java.lang.Class<Model> modelClass, @NonNull java.lang.Class<Data> dataClass, @NonNull ModelLoaderFactory<? extends Model,? extends Data> factory)",
886,load/model,com.bumptech.glide.load.model,Class ModelLoaderRegistry,"public <Model,Data> void prepend(@NonNull java.lang.Class<Model> modelClass, @NonNull java.lang.Class<Data> dataClass, @NonNull ModelLoaderFactory<? extends Model,? extends Data> factory)",
887,load/model,com.bumptech.glide.load.model,Class ModelLoaderRegistry,"public <Model,Data> void remove(@NonNull java.lang.Class<Model> modelClass, @NonNull java.lang.Class<Data> dataClass)",
888,load/model,com.bumptech.glide.load.model,Class ModelLoaderRegistry,"public <Model,Data> void replace(@NonNull java.lang.Class<Model> modelClass, @NonNull java.lang.Class<Data> dataClass, @NonNull ModelLoaderFactory<? extends Model,? extends Data> factory)",
889,load/model,com.bumptech.glide.load.model,Class ModelLoaderRegistry,"@NonNullpublic <A> java.util.List<ModelLoader<A,?>> getModelLoaders(@NonNull A model)",
890,load/model,com.bumptech.glide.load.model,Class ModelLoaderRegistry,"public <Model,Data> ModelLoader<Model,Data> build(@NonNull java.lang.Class<Model> modelClass, @NonNull java.lang.Class<Data> dataClass)",
891,glide/provider,com.bumptech.glide.provider,Class ModelToResourceClassCache,"@Nullablepublic java.util.List<java.lang.Class<?>> get(@NonNull java.lang.Class<?> modelClass, @NonNull java.lang.Class<?> resourceClass, @NonNull java.lang.Class<?> transcodeClass)",
892,glide/provider,com.bumptech.glide.provider,Class ModelToResourceClassCache,"public void put(@NonNull java.lang.Class<?> modelClass, @NonNull java.lang.Class<?> resourceClass, @NonNull java.lang.Class<?> transcodeClass, @NonNull java.util.List<java.lang.Class<?>> resourceClasses)",
893,glide/util,com.bumptech.glide.util,Class MultiClassKey,public MultiClassKey(),
894,glide/util,com.bumptech.glide.util,Class MultiClassKey,"public MultiClassKey(@NonNull java.lang.Class<?> first, @NonNull java.lang.Class<?> second)",
895,glide/util,com.bumptech.glide.util,Class MultiClassKey,"public void set(@NonNull java.lang.Class<?> first, @NonNull java.lang.Class<?> second)",
896,glide/util,com.bumptech.glide.util,Class MultiClassKey,"public void set(@NonNull java.lang.Class<?> first, @NonNull java.lang.Class<?> second, @Nullable java.lang.Class<?> third)",
897,glide/util,com.bumptech.glide.util,Class MultiClassKey,public java.lang.String toString(),
898,glide/util,com.bumptech.glide.util,Class MultiClassKey,public boolean equals(java.lang.Object o),
899,glide/load,com.bumptech.glide.load,Class MultiTransformation<T>,@SafeVarargspublic MultiTransformation(@NonNull Transformation<T>... transformations),
900,glide/load,com.bumptech.glide.load,Class MultiTransformation<T>,"@NonNullpublic Resource<T> transform(@NonNull android.content.Context context, @NonNull Resource<T> resource, int outWidth, int outHeight)",Description copied from interface: Transformation
901,glide/load,com.bumptech.glide.load,Class MultiTransformation<T>,public boolean equals(java.lang.Object o),Description copied from interface: Key
902,glide/load,com.bumptech.glide.load,Class MultiTransformation<T>,public int hashCode(),Description copied from interface: Key
903,request/target,com.bumptech.glide.request.target,Class NotificationTarget,"public NotificationTarget(android.content.Context context, int viewId, android.widget.RemoteViews remoteViews, android.app.Notification notification, int notificationId)",Constructor using a Notification object and a notificationId to get a handle on the Notification in order to update it that uses Target.SIZE_ORIGINAL as the target width and height.
904,request/target,com.bumptech.glide.request.target,Class NotificationTarget,"public NotificationTarget(android.content.Context context, int viewId, android.widget.RemoteViews remoteViews, android.app.Notification notification, int notificationId, java.lang.String notificationTag)","Constructor using a Notification object, a notificationId, and a notificationTag to get a handle on the Notification in order to update it that uses Target.SIZE_ORIGINAL as the target width and height."
905,request/target,com.bumptech.glide.request.target,Class NotificationTarget,"public void onResourceReady(@NonNull android.graphics.Bitmap resource, @Nullable Transition<? super android.graphics.Bitmap> transition)",Description copied from interface: Target
906,request/transition,com.bumptech.glide.request.transition,Class NoTransition<R>,public static <R> TransitionFactory<R> getFactory(),Returns an instance of a factory that produces NoTransitions.
907,request/transition,com.bumptech.glide.request.transition,Class NoTransition<R>,public static <R> Transition<R> get(),Returns an instance of NoTransition.
908,glide/signature,com.bumptech.glide.signature,Class ObjectKey,public java.lang.String toString(),
909,glide/signature,com.bumptech.glide.signature,Class ObjectKey,public boolean equals(java.lang.Object o),Description copied from interface: Key
910,glide/signature,com.bumptech.glide.signature,Class ObjectKey,public int hashCode(),Description copied from interface: Key
911,integration/okhttp,com.bumptech.glide.integration.okhttp,Class OkHttpGlideModule,"public void applyOptions(@NonNull android.content.Context context, @NonNull GlideBuilder builder)",Deprecated. 
912,integration/okhttp3,com.bumptech.glide.integration.okhttp3,Class OkHttpGlideModule,"public void applyOptions(@NonNull android.content.Context context, @NonNull GlideBuilder builder)",Deprecated. 
913,integration/okhttp,com.bumptech.glide.integration.okhttp,Class OkHttpStreamFetcher,"public void loadData(@NonNull Priority priority, @NonNull DataFetcher.DataCallback<? super java.io.InputStream> callback)",Deprecated. 
914,integration/okhttp,com.bumptech.glide.integration.okhttp,Class OkHttpStreamFetcher,public void cleanup(),Deprecated. 
915,integration/okhttp,com.bumptech.glide.integration.okhttp,Class OkHttpStreamFetcher,public void cancel(),Deprecated. 
916,integration/okhttp,com.bumptech.glide.integration.okhttp,Class OkHttpStreamFetcher,@NonNullpublic java.lang.Class<java.io.InputStream> getDataClass(),Deprecated. 
917,integration/okhttp3,com.bumptech.glide.integration.okhttp3,Class OkHttpStreamFetcher,"public void loadData(@NonNull Priority priority, @NonNull DataFetcher.DataCallback<? super java.io.InputStream> callback)",Description copied from interface: DataFetcher
918,integration/okhttp3,com.bumptech.glide.integration.okhttp3,Class OkHttpStreamFetcher,"public void onFailure(@NonNull Call call, @NonNull java.io.IOException e)",
919,integration/okhttp3,com.bumptech.glide.integration.okhttp3,Class OkHttpStreamFetcher,"public void onResponse(@NonNull Call call, @NonNull Response response)",
920,integration/okhttp3,com.bumptech.glide.integration.okhttp3,Class OkHttpStreamFetcher,public void cleanup(),Description copied from interface: DataFetcher
921,integration/okhttp3,com.bumptech.glide.integration.okhttp3,Class OkHttpStreamFetcher,public void cancel(),Description copied from interface: DataFetcher
922,integration/okhttp3,com.bumptech.glide.integration.okhttp3,Class OkHttpStreamFetcher,@NonNullpublic java.lang.Class<java.io.InputStream> getDataClass(),Description copied from interface: DataFetcher
923,integration/okhttp,com.bumptech.glide.integration.okhttp,Class OkHttpUrlLoader,public boolean handles(@NonNull GlideUrl url),Deprecated. 
924,integration/okhttp3,com.bumptech.glide.integration.okhttp3,Class OkHttpUrlLoader,public boolean handles(@NonNull GlideUrl url),Description copied from interface: ModelLoader
925,integration/okhttp,com.bumptech.glide.integration.okhttp,Class OkHttpUrlLoader.Factory,public Factory(),Constructor for a new Factory that runs requests using a static singleton client.
926,integration/okhttp,com.bumptech.glide.integration.okhttp,Class OkHttpUrlLoader.Factory,"@NonNullpublic ModelLoader<GlideUrl,java.io.InputStream> build(MultiModelLoaderFactory multiFactory)",Description copied from interface: ModelLoaderFactory
927,integration/okhttp3,com.bumptech.glide.integration.okhttp3,Class OkHttpUrlLoader.Factory,public Factory(),Constructor for a new Factory that runs requests using a static singleton client.
928,integration/okhttp3,com.bumptech.glide.integration.okhttp3,Class OkHttpUrlLoader.Factory,"@NonNullpublic ModelLoader<GlideUrl,java.io.InputStream> build(MultiModelLoaderFactory multiFactory)",Description copied from interface: ModelLoaderFactory
929,glide/load,com.bumptech.glide.load,Class Option<T>,@NonNullpublic static <T> Option<T> memory(@NonNull java.lang.String key),Returns a new Option that does not affect disk cache keys with a null default value.
930,glide/load,com.bumptech.glide.load,Class Option<T>,"@NonNullpublic static <T> Option<T> memory(@NonNull java.lang.String key, @NonNull T defaultValue)",Returns a new Option that does not affect disk cache keys with the given value as the default value.
931,glide/load,com.bumptech.glide.load,Class Option<T>,"@NonNullpublic static <T> Option<T> disk(@NonNull java.lang.String key, @NonNull Option.CacheKeyUpdater<T> cacheKeyUpdater)",Returns a new Option that uses the given Option.CacheKeyUpdater to update disk cache keys.
932,glide/load,com.bumptech.glide.load,Class Option<T>,"@NonNullpublic static <T> Option<T> disk(@NonNull java.lang.String key, @Nullable T defaultValue, @NonNull Option.CacheKeyUpdater<T> cacheKeyUpdater)",Returns a new Option that uses the given Option.CacheKeyUpdater to update disk cache keys and provides the given value as the default value.
933,glide/load,com.bumptech.glide.load,Class Option<T>,@Nullablepublic T getDefaultValue(),"Returns a reasonable default to use if no other value is set, or null."
934,glide/load,com.bumptech.glide.load,Class Option<T>,"public void update(@NonNull T value, @NonNull java.security.MessageDigest messageDigest)",Updates the given MessageDigest used to construct a cache key with the given value using the Option.CacheKeyUpdater optionally provided in the constructor.
935,glide/load,com.bumptech.glide.load,Class Option<T>,public boolean equals(java.lang.Object o),
936,glide/load,com.bumptech.glide.load,Class Option<T>,public int hashCode(),
937,glide/load,com.bumptech.glide.load,Class Options,public void putAll(@NonNull Options other),
938,glide/load,com.bumptech.glide.load,Class Options,"@NonNullpublic <T> Options set(@NonNull Option<T> option, @NonNull T value)",
939,glide/load,com.bumptech.glide.load,Class Options,@Nullablepublic <T> T get(@NonNull Option<T> option),
940,glide/load,com.bumptech.glide.load,Class Options,public boolean equals(java.lang.Object o),Description copied from interface: Key
941,glide/load,com.bumptech.glide.load,Class Options,public int hashCode(),Description copied from interface: Key
942,glide/load,com.bumptech.glide.load,Class Options,public void updateDiskCacheKey(@NonNull java.security.MessageDigest messageDigest),Description copied from interface: Key
943,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class ParcelFileDescriptorBitmapDecoder,"public boolean handles(@NonNull android.os.ParcelFileDescriptor source, @NonNull Options options)",Description copied from interface: ResourceDecoder
944,load/data,com.bumptech.glide.load.data,Class ParcelFileDescriptorRewinder,public static boolean isSupported(),
945,load/data,com.bumptech.glide.load.data,Class ParcelFileDescriptorRewinder,@NonNullpublic android.os.ParcelFileDescriptor rewindAndGet() throws java.io.IOException,Description copied from interface: DataRewinder
946,load/data,com.bumptech.glide.load.data,Class ParcelFileDescriptorRewinder.Factory,@NonNullpublic DataRewinder<android.os.ParcelFileDescriptor> build(@NonNull android.os.ParcelFileDescriptor parcelFileDescriptor),Description copied from interface: DataRewinder.Factory
947,glide/util,com.bumptech.glide.util,Class Preconditions,"public static void checkArgument(boolean expression, @NonNull java.lang.String message)",
948,glide/util,com.bumptech.glide.util,Class Preconditions,@NonNullpublic static <T> T checkNotNull(@Nullable T arg),
949,glide/util,com.bumptech.glide.util,Class Preconditions,"@NonNullpublic static <T> T checkNotNull(@Nullable T arg, @NonNull java.lang.String message)",
950,glide/util,com.bumptech.glide.util,Class Preconditions,@NonNullpublic static java.lang.String checkNotEmpty(@Nullable java.lang.String string),
951,glide/load,com.bumptech.glide.load,Enum PreferredColorSpace,public static final PreferredColorSpace SRGB,Prefers to decode images using ColorSpace.Named.SRGB.
952,glide/load,com.bumptech.glide.load,Enum PreferredColorSpace,public static PreferredColorSpace[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (PreferredColorSpace c : PreferredColorSpace.values())  System.out.println(c);"
953,engine/prefill,com.bumptech.glide.load.engine.prefill,Class PreFillType,public boolean equals(java.lang.Object o),
954,engine/prefill,com.bumptech.glide.load.engine.prefill,Class PreFillType,public int hashCode(),
955,engine/prefill,com.bumptech.glide.load.engine.prefill,Class PreFillType.Builder,public Builder(int size),Constructor for a builder that uses the given size as the width and height of the Bitmaps to prefill.
956,engine/prefill,com.bumptech.glide.load.engine.prefill,Class PreFillType.Builder,public PreFillType.Builder setConfig(@Nullable android.graphics.Bitmap.Config config),Sets the Bitmap.Config for the Bitmaps to pre-fill.
957,request/target,com.bumptech.glide.request.target,Class PreloadTarget<Z>,"public static <Z> PreloadTarget<Z> obtain(RequestManager requestManager, int width, int height)",Returns a PreloadTarget.
958,request/target,com.bumptech.glide.request.target,Class PreloadTarget<Z>,"public void onResourceReady(@NonNull Z resource, @Nullable Transition<? super Z> transition)",Description copied from interface: Target
959,bumptech/glide,com.bumptech.glide,Enum Priority,public static final Priority IMMEDIATE,
960,bumptech/glide,com.bumptech.glide,Enum Priority,public static final Priority HIGH,
961,bumptech/glide,com.bumptech.glide,Enum Priority,public static final Priority NORMAL,
962,bumptech/glide,com.bumptech.glide,Enum Priority,public static Priority[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (Priority c : Priority.values())  System.out.println(c);"
963,model/stream,com.bumptech.glide.load.model.stream,Class QMediaStoreUriLoader<DataT>,"public ModelLoader.LoadData<DataT> buildLoadData(@NonNull android.net.Uri uri, int width, int height, @NonNull Options options)",Description copied from interface: ModelLoader
964,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class RecyclableBufferedInputStream,public int available() throws java.io.IOException,"Returns an estimated number of bytes that can be read or skipped without blocking for more input. This method returns the number of bytes available in the buffer plus those available in the source stream, but see InputStream.available() for important caveats."
965,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class RecyclableBufferedInputStream,public void fixMarkLimit(),Reduces the mark limit to match the current buffer length to prevent the buffer from continuing to increase in size. Subsequent calls to mark(int) will be obeyed and may cause the buffer size to increase.
966,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class RecyclableBufferedInputStream,public void release(),
967,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class RecyclableBufferedInputStream,public void close() throws java.io.IOException,Closes this stream. The source stream is closed and any resources associated with it are released.
968,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class RecyclableBufferedInputStream,public void mark(int readlimit),Sets a mark position in this stream. The parameter readlimit indicates how many bytes can be read before a mark is invalidated. Calling reset() will reposition the stream back to the marked position if readlimit has not been surpassed. The underlying buffer may be increased in size to allow readlimit number of bytes to be supported.
969,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class RecyclableBufferedInputStream,public boolean markSupported(),Indicates whether BufferedInputStream supports the mark(int) and reset() methods.
970,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class RecyclableBufferedInputStream,public int read() throws java.io.IOException,Reads a single byte from this stream and returns it as an integer in the range from 0 to 255. Returns -1 if the end of the source string has been reached. If the internal buffer does not contain any available bytes then it is filled from the source stream and the first byte is returned.
971,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class RecyclableBufferedInputStream,"public int read(@NonNull byte[] buffer, int offset, int byteCount) throws java.io.IOException","Reads at most byteCount bytes from this stream and stores them in byte array buffer starting at offset offset. Returns the number of bytes actually read or -1 if no bytes were read and the end of the stream was encountered. If all the buffered bytes have been used, a mark has not been put and the requested number of bytes is larger than the receiver's buffer size, this implementation bypasses the buffer and simply places the results directly into buffer."
972,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class RecyclableBufferedInputStream,public void reset() throws java.io.IOException,Resets this stream to the last marked location.
973,integration/recyclerview,com.bumptech.glide.integration.recyclerview,Class RecyclerToListViewScrollListener,"public void onScrollStateChanged(androidx.recyclerview.widget.RecyclerView recyclerView, int newState)",
974,integration/recyclerview,com.bumptech.glide.integration.recyclerview,Class RecyclerViewPreloader<T>,"public RecyclerViewPreloader(@NonNull android.app.Activity activity, @NonNull ListPreloader.PreloadModelProvider<T> preloadModelProvider, @NonNull ListPreloader.PreloadSizeProvider<T> preloadDimensionProvider, int maxPreload)",Helper constructor that accepts an Activity.
975,integration/recyclerview,com.bumptech.glide.integration.recyclerview,Class RecyclerViewPreloader<T>,"public RecyclerViewPreloader(@NonNull androidx.fragment.app.FragmentActivity fragmentActivity, @NonNull ListPreloader.PreloadModelProvider<T> preloadModelProvider, @NonNull ListPreloader.PreloadSizeProvider<T> preloadDimensionProvider, int maxPreload)",Helper constructor that accepts an FragmentActivity.
976,integration/recyclerview,com.bumptech.glide.integration.recyclerview,Class RecyclerViewPreloader<T>,"public RecyclerViewPreloader(@NonNull androidx.fragment.app.Fragment fragment, @NonNull ListPreloader.PreloadModelProvider<T> preloadModelProvider, @NonNull ListPreloader.PreloadSizeProvider<T> preloadDimensionProvider, int maxPreload)",Helper constructor that accepts an Fragment.
977,integration/recyclerview,com.bumptech.glide.integration.recyclerview,Class RecyclerViewPreloader<T>,"@Deprecatedpublic RecyclerViewPreloader(@NonNull android.app.Fragment fragment, @NonNull ListPreloader.PreloadModelProvider<T> preloadModelProvider, @NonNull ListPreloader.PreloadSizeProvider<T> preloadDimensionProvider, int maxPreload)","Deprecated. Use constructor RecyclerViewPreloader(Fragment, PreloadModelProvider, PreloadSizeProvider) instead."
978,integration/gifencoder,com.bumptech.glide.integration.gifencoder,Class ReEncodingGifResourceEncoder,@NonNullpublic EncodeStrategy getEncodeStrategy(@NonNull Options options),
979,bumptech/glide,com.bumptech.glide,Class Registry,public static final java.lang.String BUCKET_GIF,
980,bumptech/glide,com.bumptech.glide,Class Registry,public static final java.lang.String BUCKET_BITMAP,
981,bumptech/glide,com.bumptech.glide,Class Registry,"@NonNull @Deprecatedpublic <Data> Registry register(@NonNull java.lang.Class<Data> dataClass, @NonNull Encoder<Data> encoder)","Deprecated. Use the equivalent append(Class, Class, ModelLoaderFactory) method instead."
982,bumptech/glide,com.bumptech.glide,Class Registry,"@NonNullpublic <Data> Registry append(@NonNull java.lang.Class<Data> dataClass, @NonNull Encoder<Data> encoder)","Appends the given Encoder onto the list of available Encoders so that it is attempted after all earlier and default Encoders for the given data class. The Encoder will be used both for the exact data class and any subtypes. For example, registering an Encoder for InputStream will result in the Encoder being used for AssetFileDescriptor.AutoCloseInputStream, FileInputStream and any other subclass. If multiple Encoders are registered for the same type or super type, the Encoder that is registered first will be used."
983,bumptech/glide,com.bumptech.glide,Class Registry,"@NonNullpublic <Data> Registry prepend(@NonNull java.lang.Class<Data> dataClass, @NonNull Encoder<Data> encoder)","Prepends the given Encoder into the list of available Encoders so that it is attempted before all later and default Encoders for the given data class. This method allows you to replace the default Encoder because it ensures the registered Encoder will run first. If multiple Encoders are registered for the same type or super type, the Encoder that is registered first will be used."
984,bumptech/glide,com.bumptech.glide,Class Registry,"@NonNullpublic <Data,TResource> Registry append(@NonNull java.lang.Class<Data> dataClass, @NonNull java.lang.Class<TResource> resourceClass, @NonNull ResourceDecoder<Data,TResource> decoder)","Appends the given ResourceDecoder onto the list of all available ResourceDecoders allowing it to be used if all earlier and default ResourceDecoders for the given types fail (or there are none). If you're attempting to replace an existing ResourceDecoder or would like to ensure that your ResourceDecoder gets the chance to run before an existing ResourceDecoder, use prepend(Class, Class, ResourceDecoder). This method is best for new types of resources and data or as a way to add an additional fallback decoder for an existing type of data."
985,bumptech/glide,com.bumptech.glide,Class Registry,"@NonNullpublic <Data,TResource> Registry append(@NonNull java.lang.String bucket, @NonNull java.lang.Class<Data> dataClass, @NonNull java.lang.Class<TResource> resourceClass, @NonNull ResourceDecoder<Data,TResource> decoder)","Appends the given ResourceDecoder onto the list of available ResourceDecoders in this bucket, allowing it to be used if all earlier and default ResourceDecoders for the given types in this bucket fail (or there are none). If you're attempting to replace an existing ResourceDecoder or would like to ensure that your ResourceDecoder gets the chance to run before an existing ResourceDecoder, use prepend(Class, Class, ResourceDecoder). This method is best for new types of resources and data or as a way to add an additional fallback decoder for an existing type of data."
986,bumptech/glide,com.bumptech.glide,Class Registry,"@NonNullpublic <Data,TResource> Registry prepend(@NonNull java.lang.Class<Data> dataClass, @NonNull java.lang.Class<TResource> resourceClass, @NonNull ResourceDecoder<Data,TResource> decoder)","Prepends the given ResourceDecoder into the list of all available ResourceDecoders so that it is attempted before all later and default ResourceDecoders for the given types. This method allows you to replace the default ResourceDecoder because it ensures the registered ResourceDecoder will run first. You can use the ResourceDecoder.handles(Object, Options) to fall back to the default ResourceDecoders if you only want to change the default functionality for certain types of data."
987,bumptech/glide,com.bumptech.glide,Class Registry,"@NonNullpublic <Data,TResource> Registry prepend(@NonNull java.lang.String bucket, @NonNull java.lang.Class<Data> dataClass, @NonNull java.lang.Class<TResource> resourceClass, @NonNull ResourceDecoder<Data,TResource> decoder)","Prepends the given ResourceDecoder into the list of available ResourceDecoders in the same bucket so that it is attempted before all later and default ResourceDecoders for the given types in that bucket. This method allows you to replace the default ResourceDecoder for this bucket because it ensures the registered ResourceDecoder will run first. You can use the ResourceDecoder.handles(Object, Options) to fall back to the default ResourceDecoders if you only want to change the default functionality for certain types of data."
988,bumptech/glide,com.bumptech.glide,Class Registry,@NonNullpublic final Registry setResourceDecoderBucketPriorityList(@NonNull java.util.List<java.lang.String> buckets),"Overrides the default ordering of resource decoder buckets. You may also add custom buckets which are identified as a unique string. Glide will attempt to decode using decoders in the highest priority bucket before moving on to the next one. The default order is [BUCKET_GIF, BUCKET_BITMAP, BUCKET_BITMAP_DRAWABLE]. When registering decoders, you can use these buckets to specify the ordering relative only to other decoders in that bucket."
989,bumptech/glide,com.bumptech.glide,Class Registry,"@NonNull @Deprecatedpublic <TResource> Registry register(@NonNull java.lang.Class<TResource> resourceClass, @NonNull ResourceEncoder<TResource> encoder)","Deprecated. Use the equivalent append(Class, ResourceEncoder) method instead."
990,bumptech/glide,com.bumptech.glide,Class Registry,"@NonNullpublic <TResource> Registry append(@NonNull java.lang.Class<TResource> resourceClass, @NonNull ResourceEncoder<TResource> encoder)","Appends the given ResourceEncoder into the list of available ResourceEncoders so that it is attempted after all earlier and default ResourceEncoders for the given data type. The ResourceEncoder will be used both for the exact resource class and any subtypes. For example, registering an ResourceEncoder for Drawable (not recommended) will result in the ResourceEncoder being used for BitmapDrawable and GifDrawable and any other subclass. If multiple ResourceEncoders are registered for the same type or super type, the ResourceEncoder that is registered first will be used."
991,bumptech/glide,com.bumptech.glide,Class Registry,"@NonNullpublic <TResource> Registry prepend(@NonNull java.lang.Class<TResource> resourceClass, @NonNull ResourceEncoder<TResource> encoder)","Prepends the given ResourceEncoder into the list of available ResourceEncoders so that it is attempted before all later and default ResourceEncoders for the given data type. This method allows you to replace the default ResourceEncoder because it ensures the registered ResourceEncoder will run first. If multiple ResourceEncoders are registered for the same type or super type, the ResourceEncoder that is registered first will be used."
992,bumptech/glide,com.bumptech.glide,Class Registry,@NonNullpublic Registry register(@NonNull DataRewinder.Factory<?> factory),Registers a new DataRewinder.Factory to handle a non-default data type that can be rewind to allow for efficient reads of file headers.
993,bumptech/glide,com.bumptech.glide,Class Registry,"@NonNullpublic <TResource,Transcode> Registry register(@NonNull java.lang.Class<TResource> resourceClass, @NonNull java.lang.Class<Transcode> transcodeClass, @NonNull ResourceTranscoder<TResource,Transcode> transcoder)",Registers the given ResourceTranscoder to convert from the given resource Class to the given transcode Class.
994,bumptech/glide,com.bumptech.glide,Class Registry,@NonNullpublic Registry register(@NonNull ImageHeaderParser parser),"Registers a new ImageHeaderParser that can obtain some basic metadata from an image header (orientation, type etc)."
995,bumptech/glide,com.bumptech.glide,Class Registry,"@NonNullpublic <Model,Data> Registry append(@NonNull java.lang.Class<Model> modelClass, @NonNull java.lang.Class<Data> dataClass, @NonNull ModelLoaderFactory<Model,Data> factory)","Appends a new ModelLoaderFactory onto the end of the existing set so that the constructed ModelLoader will be tried after all default and previously registered ModelLoaders for the given model and data classes. If you're attempting to replace an existing ModelLoader, use prepend(Class, Class, ModelLoaderFactory). This method is best for new types of models and/or data or as a way to add an additional fallback loader for an existing type of model/data. If multiple ModelLoaderFactorys are registered for the same model and/or data classes, the ModelLoaders they produce will be attempted in the order the ModelLoaderFactorys were registered. Only if all ModelLoaders fail will the entire request fail."
996,bumptech/glide,com.bumptech.glide,Class Registry,"@NonNullpublic <Model,Data> Registry prepend(@NonNull java.lang.Class<Model> modelClass, @NonNull java.lang.Class<Data> dataClass, @NonNull ModelLoaderFactory<Model,Data> factory)","Prepends a new ModelLoaderFactory onto the beginning of the existing set so that the constructed ModelLoader will be tried before all default and previously registered ModelLoaders for the given model and data classes. If you're attempting to add additional functionality or add a backup that should run only after the default ModelLoaders run, use append(Class, Class, ModelLoaderFactory). This method is best for adding an additional case to Glide's existing functionality that should run first. This method will still run Glide's default ModelLoaders if the prepended ModelLoaders fail. If multiple ModelLoaderFactorys are registered for the same model and/or data classes, the ModelLoaders they produce will be attempted in the order the ModelLoaderFactorys were registered. Only if all ModelLoaders fail will the entire request fail."
997,bumptech/glide,com.bumptech.glide,Class Registry,"@NonNullpublic <Model,Data> Registry replace(@NonNull java.lang.Class<Model> modelClass, @NonNull java.lang.Class<Data> dataClass, @NonNull ModelLoaderFactory<? extends Model,? extends Data> factory)","Removes all default and previously registered ModelLoaderFactorys for the given data and model class and replaces all of them with the single ModelLoader provided. If you're attempting to add additional functionality or add a backup that should run only after the default ModelLoaders run, use append(Class, Class, ModelLoaderFactory). This method should be used only when you want to ensure that Glide's default ModelLoaders do not run. One good use case for this method is when you want to replace Glide's default networking library with your OkHttp, Volley, or your own implementation. Using prepend(Class, Class, ModelLoaderFactory) or append(Class, Class, ModelLoaderFactory) may still allow Glide's default networking library to run in some cases. Using this method will ensure that only your networking library will run and that the request will fail otherwise."
998,bumptech/glide,com.bumptech.glide,Class Registry,"@Nullablepublic <Data,TResource,Transcode> LoadPath<Data,TResource,Transcode> getLoadPath(@NonNull java.lang.Class<Data> dataClass, @NonNull java.lang.Class<TResource> resourceClass, @NonNull java.lang.Class<Transcode> transcodeClass)",
999,bumptech/glide,com.bumptech.glide,Class Registry,"@NonNullpublic <Model,TResource,Transcode> java.util.List<java.lang.Class<?>> getRegisteredResourceClasses(@NonNull java.lang.Class<Model> modelClass, @NonNull java.lang.Class<TResource> resourceClass, @NonNull java.lang.Class<Transcode> transcodeClass)",
1000,bumptech/glide,com.bumptech.glide,Class Registry,public boolean isResourceEncoderAvailable(@NonNull Resource<?> resource),
1001,bumptech/glide,com.bumptech.glide,Class Registry,@NonNullpublic <X> ResourceEncoder<X> getResultEncoder(@NonNull Resource<X> resource) throws Registry.NoResultEncoderAvailableException,
1002,bumptech/glide,com.bumptech.glide,Class Registry,@NonNullpublic <X> Encoder<X> getSourceEncoder(@NonNull X data) throws Registry.NoSourceEncoderAvailableException,
1003,bumptech/glide,com.bumptech.glide,Class Registry,@NonNullpublic <X> DataRewinder<X> getRewinder(@NonNull X data),
1004,bumptech/glide,com.bumptech.glide,Class Registry,"@NonNullpublic <Model> java.util.List<ModelLoader<Model,?>> getModelLoaders(@NonNull Model model)",
1005,bumptech/glide,com.bumptech.glide,Class Registry.NoModelLoaderAvailableException,public NoModelLoaderAvailableException(@NonNull java.lang.Object model),
1006,bumptech/glide,com.bumptech.glide,Class Registry.NoModelLoaderAvailableException,"public NoModelLoaderAvailableException(@NonNull M model, @NonNull java.util.List<ModelLoader<M,?>> matchingButNotHandlingModelLoaders)",
1007,glide/request,com.bumptech.glide.request,Interface Request,void begin(),Starts an asynchronous load.
1008,glide/request,com.bumptech.glide.request,Interface Request,void clear(),"Prevents any bitmaps being loaded from previous requests, releases any resources held by this request, displays the current placeholder if one was provided, and marks the request as having been cancelled."
1009,glide/request,com.bumptech.glide.request,Interface Request,void pause(),"Similar to clear() for in progress requests (or portions of a request), but does nothing if the request is already complete. Unlike clear(), this method allows implementations to act differently on subparts of a request. For example if a Request has both a thumbnail and a primary request and the thumbnail portion of the request is complete, this method allows only the primary portion of the request to be paused without clearing the previously completed thumbnail portion."
1010,glide/request,com.bumptech.glide.request,Interface Request,boolean isRunning(),Returns true if this request is running and has not completed or failed.
1011,glide/request,com.bumptech.glide.request,Interface Request,boolean isComplete(),Returns true if the request has completed successfully.
1012,glide/request,com.bumptech.glide.request,Interface Request,boolean isCleared(),Returns true if the request has been cleared.
1013,glide/request,com.bumptech.glide.request,Interface Request,boolean isAnyResourceSet(),"Returns true if a resource is set, even if the request is not yet complete or the primary request has failed."
1014,bumptech/glide,com.bumptech.glide,Class RequestBuilder<TranscodeType>,"protected RequestBuilder(@NonNull Glide glide, RequestManager requestManager, java.lang.Class<TranscodeType> transcodeClass, android.content.Context context)",
1015,bumptech/glide,com.bumptech.glide,Class RequestBuilder<TranscodeType>,@NonNull @CheckResultpublic RequestBuilder<TranscodeType> apply(@NonNull BaseRequestOptions<?> requestOptions),"Applies the given options to the request. As with BaseRequestOptions.apply(BaseRequestOptions), #apply only replaces those values that are explicitly set in the given RequestOptions object. If you need to completely reset all previously set options, create a new RequestBuilder instead of using this method."
1016,bumptech/glide,com.bumptech.glide,Class RequestBuilder<TranscodeType>,"@NonNull @CheckResultpublic RequestBuilder<TranscodeType> transition(@NonNull TransitionOptions<?,? super TranscodeType> transitionOptions)",Sets the TransitionOptions to use to transition from the placeholder or thumbnail when this load completes. The given TransitionOptions will replace any TransitionOptions set previously.
1017,bumptech/glide,com.bumptech.glide,Class RequestBuilder<TranscodeType>,@NonNull @CheckResultpublic RequestBuilder<TranscodeType> listener(@Nullable RequestListener<TranscodeType> requestListener),"Sets a RequestListener to monitor the resource load. It's best to create a single instance of an exception handler per type of request (usually activity/fragment) rather than pass one in per request to avoid some redundant object allocation. Subsequent calls to this method will replace previously set listeners. To set multiple listeners, use addListener(com.bumptech.glide.request.RequestListener<TranscodeType>) instead."
1018,bumptech/glide,com.bumptech.glide,Class RequestBuilder<TranscodeType>,@NonNull @CheckResultpublic RequestBuilder<TranscodeType> addListener(@Nullable RequestListener<TranscodeType> requestListener),"Adds a RequestListener. If called multiple times, all passed listeners will be called in order."
1019,bumptech/glide,com.bumptech.glide,Class RequestBuilder<TranscodeType>,@NonNullpublic RequestBuilder<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> errorBuilder),"Sets a RequestBuilder that is built and run if the load started by this RequestBuilder fails. If this RequestBuilder uses a thumbnail that succeeds the given error RequestBuilder will be started anyway if the non-thumbnail request fails. Recursive calls to this method as well as calls to thumbnail(float) and thumbnail(RequestBuilder) are supported for the given error RequestBuilder. Unlike thumbnail(RequestBuilder) and thumbnail(float), no options from this primary RequestBuilder are propagated to the given error RequestBuilder. Options like priority, override widths and heights and transitions must be applied independently to the error builder. The given RequestBuilder will start and potentially override a fallback drawable if it's set on this RequestBuilder via BaseRequestOptions.fallback(android.graphics.drawable.Drawable) or BaseRequestOptions.fallback(int)."
1020,bumptech/glide,com.bumptech.glide,Class RequestBuilder<TranscodeType>,@NonNull @CheckResultpublic RequestBuilder<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> thumbnailRequest),"Loads and displays the resource retrieved by the given thumbnail request if it finishes before this request. Best used for loading thumbnail resources that are smaller and will be loaded more quickly than the full size resource. There are no guarantees about the order in which the requests will actually finish. However, if the thumb request completes after the full request, the thumb resource will never replace the full resource. Recursive calls to thumbnail are supported. Overrides any previous calls to this method, thumbnail(float) and thumbnail(RequestBuilder[])."
1021,bumptech/glide,com.bumptech.glide,Class RequestBuilder<TranscodeType>,@NonNull @CheckResultpublic RequestBuilder<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... thumbnails),"Recursively applies thumbnail(RequestBuilder) so that the RequestBuilders are loaded as thumbnails in the given priority order. thumbnail(RequestBuilder) is applied in the order given so that the RequestBuilder at position 0 has the RequestBuilder at position 1 applied as using its thumbnail method, the RequestBuilder at position 1 has the RequestBuilder at position 2 applied using its thumbnail method and so on. Calling this method with an null array of RequestBuilder thumbnails or an empty array of RequestBuilder thumbnails is equivalent to calling thumbnail(RequestBuilder) with null. Any individual RequestBuilder in the array of thumbnails provided here may be null. null RequestBuilders are ignored and excluded from the recursive chain. The RequestBuilder objects provided here may be mutated and have any previous calls to this method or thumbnail(RequestBuilder) methods overridden. Overrides any previous calls to thumbnail(RequestBuilder), thumbnail(float) and this method."
1022,bumptech/glide,com.bumptech.glide,Class RequestBuilder<TranscodeType>,@NonNull @CheckResultpublic RequestBuilder<TranscodeType> thumbnail(float sizeMultiplier),"Loads a resource in an identical manner to this request except with the dimensions of the target multiplied by the given size multiplier. If the thumbnail load completes before the full size load, the thumbnail will be shown. If the thumbnail load completes after the full size load, the thumbnail will not be shown. Note - The thumbnail resource will be smaller than the size requested so the target (or ImageView) must be able to scale the thumbnail appropriately. See ImageView.ScaleType. Almost all options will be copied from the original load, including the ModelLoader, ResourceDecoder, and Transformations. However, BaseRequestOptions.placeholder(int) and BaseRequestOptions.error(int), and listener(RequestListener) will only be used on the full size load and will not be copied for the thumbnail load. Recursive calls to thumbnail are supported. Overrides any previous calls to this method, thumbnail(RequestBuilder[]), and thumbnail(RequestBuilder)."
1023,bumptech/glide,com.bumptech.glide,Class RequestBuilder<TranscodeType>,@NonNull @CheckResultpublic RequestBuilder<TranscodeType> load(@Nullable java.lang.Object model),Sets the specific model to load data for.
1024,bumptech/glide,com.bumptech.glide,Class RequestBuilder<TranscodeType>,@NonNull @CheckResultpublic RequestBuilder<TranscodeType> load(@Nullable android.graphics.Bitmap bitmap),"Returns an object to load the given Bitmap. It's almost always better to allow Glide to load Bitmaps than pass Bitmaps into Glide. If you have a custom way to obtain Bitmaps that is not supported by Glide by default, consider registering a custom ModelLoader or ResourceDecoder instead of using this method. The DiskCacheStrategy is set to DiskCacheStrategy.NONE. Previous calls to apply(BaseRequestOptions) or previously applied DiskCacheStrategys will be overridden by this method. Applying an DiskCacheStrategy other than DiskCacheStrategy.NONE after calling this method may result in undefined behavior. In memory caching relies on Object equality. The contents of the Bitmaps are not compared."
1025,bumptech/glide,com.bumptech.glide,Class RequestBuilder<TranscodeType>,@NonNull @CheckResultpublic RequestBuilder<TranscodeType> load(@Nullable android.graphics.drawable.Drawable drawable),"Returns a request builder to load the given Drawable. It's almost always better to allow Glide to load Bitmaps than to pass Bitmaps into Glide using this method . If you have a custom way to obtain Bitmaps that is not supported by Glide by default, consider registering a custom ModelLoader or ResourceDecoder instead of using this method. The DiskCacheStrategy is set to DiskCacheStrategy.NONE. Previous calls to apply(BaseRequestOptions) or previously applied DiskCacheStrategys will be overridden by this method. Applying an DiskCacheStrategy other than DiskCacheStrategy.NONE after calling this method may result in undefined behavior. In memory caching relies on Object equality. The contents of the Drawables are not compared."
1026,bumptech/glide,com.bumptech.glide,Class RequestBuilder<TranscodeType>,@NonNull @CheckResultpublic RequestBuilder<TranscodeType> load(@Nullable java.lang.String string),"Returns a request builder to load the given String. Note - this method caches data using only the given String as the cache key. If the data is a Uri outside of your control, or you otherwise expect the data represented by the given String to change without the String identifier changing, Consider using BaseRequestOptions.signature(com.bumptech.glide.load.Key) to mixin a signature you create that identifies the data currently at the given String that will invalidate the cache if that data changes. Alternatively, using DiskCacheStrategy.NONE and/or BaseRequestOptions.skipMemoryCache(boolean) may be appropriate."
1027,bumptech/glide,com.bumptech.glide,Class RequestBuilder<TranscodeType>,@NonNull @CheckResultpublic RequestBuilder<TranscodeType> load(@Nullable android.net.Uri uri),"Returns a request builder to load the given Uri. Note - this method caches data at Uris using only the Uri itself as the cache key. The data represented by Uris from some content providers may change without the Uri changing, which means using this method can lead to displaying stale data. Consider using BaseRequestOptions.signature(com.bumptech.glide.load.Key) to mixin a signature you create based on the data at the given Uri that will invalidate the cache if that data changes. Alternatively, using DiskCacheStrategy.NONE and/or BaseRequestOptions.skipMemoryCache(boolean) may be appropriate."
1028,bumptech/glide,com.bumptech.glide,Class RequestBuilder<TranscodeType>,@NonNull @CheckResultpublic RequestBuilder<TranscodeType> load(@Nullable java.io.File file),"Returns a request builder to load the given File. Note - this method caches data for Files using only the file path itself as the cache key. The data in the File can change so using this method can lead to displaying stale data. If you expect the data in the File to change, Consider using BaseRequestOptions.signature(com.bumptech.glide.load.Key) to mixin a signature you create that identifies the data currently in the File that will invalidate the cache if that data changes. Alternatively, using DiskCacheStrategy.NONE and/or BaseRequestOptions.skipMemoryCache(boolean) may be appropriate."
1029,bumptech/glide,com.bumptech.glide,Class RequestBuilder<TranscodeType>,@NonNull @CheckResultpublic RequestBuilder<TranscodeType> load(@RawRes @DrawableRes @Nullable java.lang.Integer resourceId),"Returns a request builder that uses the ModelLoaderFactory currently registered or Integer to load the image represented by the given Integer resource id. Defaults to ResourceLoader to load resource id models. By default this method adds a version code and night mode based signature to the cache key used to cache this resource in Glide. This signature is sufficient to guarantee that end users will see the most up to date versions of your Drawables, but during development if you do not increment your version code before each install and you replace a Drawable with different data without changing the Drawable name, you may see inconsistent cached data. To get around this, consider using DiskCacheStrategy.NONE via BaseRequestOptions.diskCacheStrategy(com.bumptech.glide.load.engine.DiskCacheStrategy) during development, and re-enabling the default DiskCacheStrategy.RESOURCE for release builds. This method will load non-Bitmap resources like VectorDrawables. Although Glide makes a best effort to apply Transformations to these Drawables by either extracting the underlying Bitmap or by converting the Drawable to a Bitmap, Glide is still not able to transform all types of resources. Animated Drawables cannot be transformed (other than GifDrawable). To avoid load failures if a Drawable can't be transformed, use the optional transformation methods like BaseRequestOptions.optionalTransform(Class, Transformation). In some cases converting Drawables to Bitmaps may be inefficient. Use this method, especially in conjunction with Transformations with caution for non-Bitmap Drawables."
1030,bumptech/glide,com.bumptech.glide,Class RequestBuilder<TranscodeType>,@Deprecated @CheckResultpublic RequestBuilder<TranscodeType> load(@Nullable java.net.URL url),Deprecated. The URL class has a number of performance problems and should generally be avoided when possible. Prefer load(android.net.Uri) or load(String).
1031,bumptech/glide,com.bumptech.glide,Class RequestBuilder<TranscodeType>,@NonNull @CheckResultpublic RequestBuilder<TranscodeType> load(@Nullable byte[] model),Returns a request to load the given byte array. Note - by default loads for bytes are not cached in either the memory or the disk cache.
1032,bumptech/glide,com.bumptech.glide,Class RequestBuilder<TranscodeType>,@CheckResultpublic RequestBuilder<TranscodeType> clone(),"Returns a copy of this request builder with all of the options put so far on this builder. This method returns a deep copy in that all non-immutable arguments are copied such that changes to one builder will not affect the other builder. However, in addition to immutable arguments, the current model is not copied copied so changes to the model will affect both builders."
1033,bumptech/glide,com.bumptech.glide,Class RequestBuilder<TranscodeType>,@NonNullpublic <Y extends Target<TranscodeType>> Y into(@NonNull Y target),Set the target the resource will be loaded into.
1034,bumptech/glide,com.bumptech.glide,Class RequestBuilder<TranscodeType>,"@NonNullpublic ViewTarget<android.widget.ImageView,TranscodeType> into(@NonNull android.widget.ImageView view)","Sets the ImageView the resource will be loaded into, cancels any existing loads into the view, and frees any resources Glide may have previously loaded into the view so they may be reused."
1035,bumptech/glide,com.bumptech.glide,Class RequestBuilder<TranscodeType>,"@Deprecatedpublic FutureTarget<TranscodeType> into(int width, int height)","Deprecated. Use submit(int, int) instead."
1036,bumptech/glide,com.bumptech.glide,Class RequestBuilder<TranscodeType>,@NonNullpublic FutureTarget<TranscodeType> submit(),"Returns a future that can be used to do a blocking get on a background thread. This method defaults to Target.SIZE_ORIGINAL for the width and the height. However, since the width and height will be overridden by values passed to BaseRequestOptions.override(int, int), this method can be used whenever RequestOptions with override values are applied, or whenever you want to retrieve the image in its original size."
1037,bumptech/glide,com.bumptech.glide,Class RequestBuilder<TranscodeType>,"@NonNullpublic FutureTarget<TranscodeType> submit(int width, int height)",Returns a future that can be used to do a blocking get on a background thread.
1038,bumptech/glide,com.bumptech.glide,Class RequestBuilder<TranscodeType>,"@NonNullpublic Target<TranscodeType> preload(int width, int height)",Preloads the resource into the cache using the given width and height. Pre-loading is useful for making sure that resources you are going to to want in the near future are available quickly.
1039,bumptech/glide,com.bumptech.glide,Class RequestBuilder<TranscodeType>,@NonNullpublic Target<TranscodeType> preload(),"Preloads the resource into the cache using Target.SIZE_ORIGINAL as the target width and height. Equivalent to calling preload(int, int) with Target.SIZE_ORIGINAL as the width and height."
1040,bumptech/glide,com.bumptech.glide,Class RequestBuilder<TranscodeType>,@Deprecated @CheckResultpublic <Y extends Target<java.io.File>> Y downloadOnly(@NonNull Y target),Deprecated. Use RequestManager.downloadOnly() and into(Target).
1041,bumptech/glide,com.bumptech.glide,Class RequestBuilder<TranscodeType>,"@Deprecated @CheckResultpublic FutureTarget<java.io.File> downloadOnly(int width, int height)","Deprecated. Use RequestManager.downloadOnly() and submit(int, int)."
1042,glide/request,com.bumptech.glide.request,Interface RequestCoordinator,boolean canSetImage(Request request),Returns true if the Request can display a loaded bitmap.
1043,glide/request,com.bumptech.glide.request,Interface RequestCoordinator,boolean canNotifyStatusChanged(Request request),Returns true if the Request can display a placeholder.
1044,glide/request,com.bumptech.glide.request,Interface RequestCoordinator,boolean canNotifyCleared(Request request),Returns true if the Request can clear the Target.
1045,glide/request,com.bumptech.glide.request,Interface RequestCoordinator,boolean isAnyResourceSet(),Returns true if any coordinated Request has successfully completed.
1046,glide/request,com.bumptech.glide.request,Interface RequestCoordinator,void onRequestSuccess(Request request),Must be called when a Request coordinated by this object completes successfully.
1047,glide/request,com.bumptech.glide.request,Interface RequestCoordinator,void onRequestFailed(Request request),Must be called when a Request coordinated by this object fails.
1048,glide/request,com.bumptech.glide.request,Enum RequestCoordinator.RequestState,public static final RequestCoordinator.RequestState RUNNING,
1049,glide/request,com.bumptech.glide.request,Enum RequestCoordinator.RequestState,public static final RequestCoordinator.RequestState PAUSED,
1050,glide/request,com.bumptech.glide.request,Enum RequestCoordinator.RequestState,public static final RequestCoordinator.RequestState CLEARED,
1051,glide/request,com.bumptech.glide.request,Enum RequestCoordinator.RequestState,public static final RequestCoordinator.RequestState SUCCESS,
1052,glide/request,com.bumptech.glide.request,Enum RequestCoordinator.RequestState,public static RequestCoordinator.RequestState[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (RequestCoordinator.RequestState c : RequestCoordinator.RequestState.values())  System.out.println(c);"
1053,glide/request,com.bumptech.glide.request,Class RequestFutureTarget<R>,public boolean cancel(boolean mayInterruptIfRunning),
1054,glide/request,com.bumptech.glide.request,Class RequestFutureTarget<R>,public boolean isCancelled(),
1055,glide/request,com.bumptech.glide.request,Class RequestFutureTarget<R>,public boolean isDone(),
1056,glide/request,com.bumptech.glide.request,Class RequestFutureTarget<R>,"public R get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException",
1057,glide/request,com.bumptech.glide.request,Class RequestFutureTarget<R>,"public R get(long time, @NonNull java.util.concurrent.TimeUnit timeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException",
1058,glide/request,com.bumptech.glide.request,Class RequestFutureTarget<R>,public void getSize(@NonNull SizeReadyCallback cb),A callback that should never be invoked directly.
1059,glide/request,com.bumptech.glide.request,Class RequestFutureTarget<R>,public void removeCallback(@NonNull SizeReadyCallback cb),Description copied from interface: Target
1060,glide/request,com.bumptech.glide.request,Class RequestFutureTarget<R>,public void setRequest(@Nullable Request request),Description copied from interface: Target
1061,glide/request,com.bumptech.glide.request,Class RequestFutureTarget<R>,@Nullablepublic Request getRequest(),Description copied from interface: Target
1062,glide/request,com.bumptech.glide.request,Class RequestFutureTarget<R>,public void onLoadCleared(@Nullable android.graphics.drawable.Drawable placeholder),A callback that should never be invoked directly.
1063,glide/request,com.bumptech.glide.request,Class RequestFutureTarget<R>,public void onLoadStarted(@Nullable android.graphics.drawable.Drawable placeholder),A callback that should never be invoked directly.
1064,glide/request,com.bumptech.glide.request,Class RequestFutureTarget<R>,public void onLoadFailed(@Nullable android.graphics.drawable.Drawable errorDrawable),A callback that should never be invoked directly.
1065,glide/request,com.bumptech.glide.request,Class RequestFutureTarget<R>,"public void onResourceReady(@NonNull R resource, @Nullable Transition<? super R> transition)",A callback that should never be invoked directly.
1066,glide/request,com.bumptech.glide.request,Class RequestFutureTarget<R>,public void onStart(),Description copied from interface: LifecycleListener
1067,glide/request,com.bumptech.glide.request,Class RequestFutureTarget<R>,public void onStop(),Description copied from interface: LifecycleListener
1068,glide/request,com.bumptech.glide.request,Class RequestFutureTarget<R>,public void onDestroy(),Description copied from interface: LifecycleListener
1069,glide/request,com.bumptech.glide.request,Class RequestFutureTarget<R>,"public boolean onLoadFailed(@Nullable GlideException e, java.lang.Object model, Target<R> target, boolean isFirstResource)",Description copied from interface: RequestListener
1070,glide/request,com.bumptech.glide.request,Interface RequestListener<R>,"boolean onLoadFailed(@Nullable GlideException e, java.lang.Object model, Target<R> target, boolean isFirstResource)","Called when an exception occurs during a load, immediately before Target.onLoadFailed(Drawable). Will only be called if we currently want to display an image for the given model in the given target. It is recommended to create a single instance per activity/fragment rather than instantiate a new object for each call to Glide.with(fragment/activity).load() to avoid object churn. It is not safe to reload this or a different model in this callback. If you need to do so use RequestBuilder.error(RequestBuilder) instead. Although you can't start an entirely new load, it is safe to change what is displayed in the Target at this point, as long as you return true from the method to prevent Target.onLoadFailed(Drawable) from being called. For threading guarantees, see the class comment. For example: public boolean onLoadFailed(Exception e, T model, Target target, boolean isFirstResource) { target.setPlaceholder(R.drawable.a_specific_error_for_my_exception); return true; // Prevent onLoadFailed from being called on the Target. } "
1071,bumptech/glide,com.bumptech.glide,Class RequestManager,protected final Glide glide,
1072,bumptech/glide,com.bumptech.glide,Class RequestManager,protected void setRequestOptions(@NonNull RequestOptions toSet),
1073,bumptech/glide,com.bumptech.glide,Class RequestManager,@NonNullpublic RequestManager applyDefaultRequestOptions(@NonNull RequestOptions requestOptions),"Updates the default RequestOptions for all loads started with this request manager with the given RequestOptions. The RequestOptions provided here are applied on top of those provided via GlideBuilder.setDefaultRequestOptions(RequestOptions). If there are conflicts, the options applied here will win. Note that this method does not mutate options provided to GlideBuilder.setDefaultRequestOptions(RequestOptions). Multiple sets of options can be applied. If there are conflicts the last RequestOptions applied will win. The modified options will only be applied to loads started after this method is called."
1074,bumptech/glide,com.bumptech.glide,Class RequestManager,@NonNullpublic RequestManager setDefaultRequestOptions(@NonNull RequestOptions requestOptions),"Replaces the default RequestOptions for all loads started with this request manager with the given RequestOptions. The RequestOptions provided here replace those that have been previously provided via this method, GlideBuilder.setDefaultRequestOptions(RequestOptions), and applyDefaultRequestOptions(RequestOptions). Subsequent calls to applyDefaultRequestOptions(RequestOptions) will not mutate the RequestOptions provided here. Instead the manager will create a clone of these options and mutate the clone."
1075,bumptech/glide,com.bumptech.glide,Class RequestManager,public RequestManager addDefaultRequestListener(RequestListener<java.lang.Object> requestListener),"Adds a default RequestListener that will be added to every request started with this RequestManager. Multiple RequestListeners can be added here, in RequestManager scopes or to individual RequestBuilders. RequestListeners are called in the order they're added. Even if an earlier RequestListener returns true from RequestListener.onLoadFailed(GlideException, Object, Target, boolean) or RequestListener.onResourceReady(Object, Object, Target, DataSource, boolean), it will not prevent subsequent RequestListeners from being called. Because Glide requests can be started for any number of individual resource types, any listener added here has to accept any generic resource type in RequestListener.onResourceReady(Object, Object, Target, DataSource, boolean). If you must base the behavior of the listener on the resource type, you will need to use instanceof to do so. It's not safe to cast resource types without first checking with instanceof."
1076,bumptech/glide,com.bumptech.glide,Class RequestManager,public void setPauseAllRequestsOnTrimMemoryModerate(boolean pauseAllOnTrim),If true then clear all in-progress and completed requests when the platform sends onTrimMemory with level = TRIM_MEMORY_MODERATE.
1077,bumptech/glide,com.bumptech.glide,Class RequestManager,public boolean isPaused(),Returns true if loads for this RequestManager are currently paused.
1078,bumptech/glide,com.bumptech.glide,Class RequestManager,public void pauseRequests(),"Cancels any in progress loads, but does not clear resources of completed loads. Note #resumeRequests() must be called for any requests made before or while the manager is paused to complete. RequestManagers attached to Fragments and Activities automatically resume onStart()."
1079,bumptech/glide,com.bumptech.glide,Class RequestManager,public void pauseAllRequests(),Cancels any in progress loads and clears resources of completed loads. Note #resumeRequests() must be called for any requests made before or while the manager is paused to complete. RequestManagers attached to Fragments and Activities automatically resume onStart(). This will release the memory used by completed bitmaps but leaves them in any configured caches. When an #Activity receives #Activity.onTrimMemory(int) at a level of #ComponentCallbacks2.TRIM_MEMORY_BACKGROUND this is desirable in order to keep your process alive longer.
1080,bumptech/glide,com.bumptech.glide,Class RequestManager,public void pauseAllRequestsRecursive(),Performs pauseAllRequests() recursively for all managers that are contextually descendant to this manager based on the Activity/Fragment hierarchy. Similar to pauseRequestsRecursive() with the exception that it also clears resources of completed loads.
1081,bumptech/glide,com.bumptech.glide,Class RequestManager,public void pauseRequestsRecursive(),"Performs pauseRequests() recursively for all managers that are contextually descendant to this manager based on the Activity/Fragment hierarchy: When pausing on an Activity all attached fragments will also get paused. When pausing on an attached Fragment all descendant fragments will also get paused. When pausing on a detached Fragment or the application context only the current RequestManager is paused. Note, on pre-Jelly Bean MR1 calling pause on a Fragment will not cause child fragments to pause, in this case either call pause on the Activity or use a support Fragment."
1082,bumptech/glide,com.bumptech.glide,Class RequestManager,public void resumeRequests(),Restarts any loads that have not yet completed.
1083,bumptech/glide,com.bumptech.glide,Class RequestManager,public void resumeRequestsRecursive(),Performs resumeRequests() recursively for all managers that are contextually descendant to this manager based on the Activity/Fragment hierarchy. The hierarchical semantics are identical as for pauseRequestsRecursive().
1084,bumptech/glide,com.bumptech.glide,Class RequestManager,public void onStart(),Lifecycle callback that registers for connectivity events (if the android.permission.ACCESS_NETWORK_STATE permission is present) and restarts failed or paused requests.
1085,bumptech/glide,com.bumptech.glide,Class RequestManager,public void onStop(),Lifecycle callback that unregisters for connectivity events (if the android.permission.ACCESS_NETWORK_STATE permission is present) and pauses in progress loads.
1086,bumptech/glide,com.bumptech.glide,Class RequestManager,public void onDestroy(),Lifecycle callback that cancels all in progress requests and clears and recycles resources for all completed requests.
1087,bumptech/glide,com.bumptech.glide,Class RequestManager,@NonNull @CheckResultpublic RequestBuilder<android.graphics.Bitmap> asBitmap(),"Attempts to always load the resource as a Bitmap, even if it could actually be animated."
1088,bumptech/glide,com.bumptech.glide,Class RequestManager,@NonNull @CheckResultpublic RequestBuilder<GifDrawable> asGif(),"Attempts to always load the resource as a GifDrawable. If the underlying data is not a GIF, this will fail. As a result, this should only be used if the model represents an animated GIF and the caller wants to interact with the GifDrawable directly. Normally using just asDrawable() is sufficient because it will determine whether or not the given data represents an animated GIF and return the appropriate Drawable, animated or not, automatically."
1089,bumptech/glide,com.bumptech.glide,Class RequestManager,@NonNull @CheckResultpublic RequestBuilder<android.graphics.drawable.Drawable> asDrawable(),"Attempts to always load the resource using any registered ResourceDecoders that can decode any subclass of Drawable. By default, may return either a BitmapDrawable or GifDrawable, but if additional decoders are registered for other Drawable subclasses, any of those subclasses may also be returned."
1090,bumptech/glide,com.bumptech.glide,Class RequestManager,@NonNull @CheckResultpublic RequestBuilder<android.graphics.drawable.Drawable> load(@Nullable android.graphics.Bitmap bitmap),Equivalent to calling asDrawable() and then RequestBuilder.load(Bitmap).
1091,bumptech/glide,com.bumptech.glide,Class RequestManager,@NonNull @CheckResultpublic RequestBuilder<android.graphics.drawable.Drawable> load(@Nullable android.graphics.drawable.Drawable drawable),Equivalent to calling asDrawable() and then RequestBuilder.load(Drawable).
1092,bumptech/glide,com.bumptech.glide,Class RequestManager,@NonNull @CheckResultpublic RequestBuilder<android.graphics.drawable.Drawable> load(@Nullable java.lang.String string),Equivalent to calling asDrawable() and then RequestBuilder.load(String).
1093,bumptech/glide,com.bumptech.glide,Class RequestManager,@NonNull @CheckResultpublic RequestBuilder<android.graphics.drawable.Drawable> load(@Nullable android.net.Uri uri),Equivalent to calling asDrawable() and then RequestBuilder.load(Uri).
1094,bumptech/glide,com.bumptech.glide,Class RequestManager,@NonNull @CheckResultpublic RequestBuilder<android.graphics.drawable.Drawable> load(@Nullable java.io.File file),Equivalent to calling asDrawable() and then RequestBuilder.load(File).
1095,bumptech/glide,com.bumptech.glide,Class RequestManager,@NonNull @CheckResultpublic RequestBuilder<android.graphics.drawable.Drawable> load(@RawRes @DrawableRes @Nullable java.lang.Integer resourceId),Equivalent to calling asDrawable() and then RequestBuilder.load(Integer).
1096,bumptech/glide,com.bumptech.glide,Class RequestManager,@CheckResult @Deprecatedpublic RequestBuilder<android.graphics.drawable.Drawable> load(@Nullable java.net.URL url),Deprecated. 
1097,bumptech/glide,com.bumptech.glide,Class RequestManager,@NonNull @CheckResultpublic RequestBuilder<android.graphics.drawable.Drawable> load(@Nullable byte[] model),Equivalent to calling asDrawable() and then RequestBuilder.load(byte[]).
1098,bumptech/glide,com.bumptech.glide,Class RequestManager,@NonNull @CheckResultpublic RequestBuilder<android.graphics.drawable.Drawable> load(@Nullable java.lang.Object model),A helper method equivalent to calling asDrawable() and then RequestBuilder.load(Object) with the given model.
1099,bumptech/glide,com.bumptech.glide,Class RequestManager,@NonNull @CheckResultpublic RequestBuilder<java.io.File> downloadOnly(),"Attempts always load the resource into the cache and return the File containing the cached source data. This method is designed to work for remote data that is or will be cached using DiskCacheStrategy.DATA. As a result, specifying a DiskCacheStrategy on this request is generally not recommended."
1100,bumptech/glide,com.bumptech.glide,Class RequestManager,@NonNull @CheckResultpublic RequestBuilder<java.io.File> download(@Nullable java.lang.Object model),A helper method equivalent to calling downloadOnly() ()} and then RequestBuilder.load(Object) with the given model.
1101,bumptech/glide,com.bumptech.glide,Class RequestManager,@NonNull @CheckResultpublic RequestBuilder<java.io.File> asFile(),"Attempts to always load a File containing the resource, either using a file path obtained from the media store (for local images/videos), or using Glide's disk cache (for remote images/videos). For remote content, prefer downloadOnly()."
1102,bumptech/glide,com.bumptech.glide,Class RequestManager,@NonNull @CheckResultpublic <ResourceType> RequestBuilder<ResourceType> as(@NonNull java.lang.Class<ResourceType> resourceClass),Attempts to load the resource using any registered ResourceDecoders that can decode the given resource class or any subclass of the given resource class.
1103,bumptech/glide,com.bumptech.glide,Class RequestManager,public void clear(@NonNull android.view.View view),Cancel any pending loads Glide may have for the view and free any resources that may have been loaded for the view. Note that this will only work if View.setTag(Object) is not called on this view outside of Glide.
1104,bumptech/glide,com.bumptech.glide,Class RequestManager,public void clear(@Nullable Target<?> target),Cancel any pending loads Glide may have for the target and free any resources (such as Bitmaps) that may have been loaded for the target so they may be reused.
1105,bumptech/glide,com.bumptech.glide,Class RequestManager,public java.lang.String toString(),
1106,bumptech/glide,com.bumptech.glide,Class RequestManager,public void onTrimMemory(int level),
1107,bumptech/glide,com.bumptech.glide,Class RequestManager,public void onLowMemory(),
1108,glide/manager,com.bumptech.glide.manager,Class RequestManagerFragment,public void setRequestManager(@Nullable RequestManager requestManager),Deprecated. 
1109,glide/manager,com.bumptech.glide.manager,Class RequestManagerFragment,@Nullablepublic RequestManager getRequestManager(),Deprecated. 
1110,glide/manager,com.bumptech.glide.manager,Class RequestManagerFragment,@NonNullpublic RequestManagerTreeNode getRequestManagerTreeNode(),Deprecated. 
1111,glide/manager,com.bumptech.glide.manager,Class RequestManagerFragment,public void onAttach(android.app.Activity activity),Deprecated. 
1112,glide/manager,com.bumptech.glide.manager,Class RequestManagerFragment,public void onDetach(),Deprecated. 
1113,glide/manager,com.bumptech.glide.manager,Class RequestManagerFragment,public void onStart(),Deprecated. 
1114,glide/manager,com.bumptech.glide.manager,Class RequestManagerFragment,public void onStop(),Deprecated. 
1115,glide/manager,com.bumptech.glide.manager,Class RequestManagerFragment,public void onDestroy(),Deprecated. 
1116,glide/manager,com.bumptech.glide.manager,Class RequestManagerRetriever,@NonNullpublic RequestManager get(@NonNull android.content.Context context),
1117,glide/manager,com.bumptech.glide.manager,Class RequestManagerRetriever,@NonNullpublic RequestManager get(@NonNull androidx.fragment.app.FragmentActivity activity),
1118,glide/manager,com.bumptech.glide.manager,Class RequestManagerRetriever,@NonNullpublic RequestManager get(@NonNull androidx.fragment.app.Fragment fragment),
1119,glide/manager,com.bumptech.glide.manager,Class RequestManagerRetriever,@NonNullpublic RequestManager get(@NonNull android.app.Activity activity),
1120,glide/manager,com.bumptech.glide.manager,Class RequestManagerRetriever,@NonNullpublic RequestManager get(@NonNull android.view.View view),
1121,glide/manager,com.bumptech.glide.manager,Class RequestManagerRetriever,@Deprecated @NonNullpublic RequestManager get(@NonNull android.app.Fragment fragment),Deprecated. 
1122,glide/request,com.bumptech.glide.request,Class RequestOptions,@NonNull @CheckResultpublic static RequestOptions sizeMultiplierOf(float sizeMultiplier),Returns a RequestOptions object with BaseRequestOptions.sizeMultiplier(float) set.
1123,glide/request,com.bumptech.glide.request,Class RequestOptions,@NonNull @CheckResultpublic static RequestOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy diskCacheStrategy),Returns a RequestOptions object with BaseRequestOptions.diskCacheStrategy(DiskCacheStrategy) set.
1124,glide/request,com.bumptech.glide.request,Class RequestOptions,@NonNull @CheckResultpublic static RequestOptions priorityOf(@NonNull Priority priority),Returns a RequestOptions object with BaseRequestOptions.priority(Priority)} set.
1125,glide/request,com.bumptech.glide.request,Class RequestOptions,@NonNull @CheckResultpublic static RequestOptions placeholderOf(@Nullable android.graphics.drawable.Drawable placeholder),Returns a RequestOptions object with BaseRequestOptions.placeholder(Drawable) set.
1126,glide/request,com.bumptech.glide.request,Class RequestOptions,@NonNull @CheckResultpublic static RequestOptions placeholderOf(@DrawableRes int placeholderId),Returns a RequestOptions object with BaseRequestOptions.placeholder(int) set.
1127,glide/request,com.bumptech.glide.request,Class RequestOptions,@NonNull @CheckResultpublic static RequestOptions errorOf(@Nullable android.graphics.drawable.Drawable errorDrawable),Returns a RequestOptions object with BaseRequestOptions.error(Drawable) set.
1128,glide/request,com.bumptech.glide.request,Class RequestOptions,@NonNull @CheckResultpublic static RequestOptions errorOf(@DrawableRes int errorId),Returns a RequestOptions object with BaseRequestOptions.error(int)} set.
1129,glide/request,com.bumptech.glide.request,Class RequestOptions,@NonNull @CheckResultpublic static RequestOptions skipMemoryCacheOf(boolean skipMemoryCache),Returns a RequestOptions object with BaseRequestOptions.skipMemoryCache(boolean) set.
1130,glide/request,com.bumptech.glide.request,Class RequestOptions,"@NonNull @CheckResultpublic static RequestOptions overrideOf(int width, int height)","Returns a RequestOptions object with BaseRequestOptions.override(int, int)} set."
1131,glide/request,com.bumptech.glide.request,Class RequestOptions,@NonNull @CheckResultpublic static RequestOptions overrideOf(int size),"Returns a RequestOptions with BaseRequestOptions.override(int, int) set where both the width and height are the given size."
1132,glide/request,com.bumptech.glide.request,Class RequestOptions,@NonNull @CheckResultpublic static RequestOptions signatureOf(@NonNull Key signature),Returns a RequestOptions object with BaseRequestOptions.signature set.
1133,glide/request,com.bumptech.glide.request,Class RequestOptions,@NonNull @CheckResultpublic static RequestOptions fitCenterTransform(),Returns a RequestOptions object with BaseRequestOptions.fitCenter() set.
1134,glide/request,com.bumptech.glide.request,Class RequestOptions,@NonNull @CheckResultpublic static RequestOptions centerInsideTransform(),Returns a RequestOptions object with BaseRequestOptions.centerInside() set.
1135,glide/request,com.bumptech.glide.request,Class RequestOptions,@NonNull @CheckResultpublic static RequestOptions centerCropTransform(),Returns a RequestOptions object with BaseRequestOptions.centerCrop() set.
1136,glide/request,com.bumptech.glide.request,Class RequestOptions,@NonNull @CheckResultpublic static RequestOptions circleCropTransform(),Returns a RequestOptions object with BaseRequestOptions.circleCrop() set.
1137,glide/request,com.bumptech.glide.request,Class RequestOptions,@NonNull @CheckResultpublic static RequestOptions bitmapTransform(@NonNull Transformation<android.graphics.Bitmap> transformation),Returns a RequestOptions object with BaseRequestOptions.transform(Transformation) set.
1138,glide/request,com.bumptech.glide.request,Class RequestOptions,@NonNull @CheckResultpublic static RequestOptions noTransformation(),Returns a RequestOptions object with BaseRequestOptions.dontTransform() set.
1139,glide/request,com.bumptech.glide.request,Class RequestOptions,"@NonNull @CheckResultpublic static <T> RequestOptions option(@NonNull Option<T> option, @NonNull T value)","Returns a RequestOptions object with the given Option set via BaseRequestOptions.set(Option, Object)."
1140,glide/request,com.bumptech.glide.request,Class RequestOptions,@NonNull @CheckResultpublic static RequestOptions decodeTypeOf(@NonNull java.lang.Class<?> resourceClass),Returns a RequestOptions object with BaseRequestOptions.decode(Class) set.
1141,glide/request,com.bumptech.glide.request,Class RequestOptions,@NonNull @CheckResultpublic static RequestOptions formatOf(@NonNull DecodeFormat format),Returns a RequestOptions object with BaseRequestOptions.format(DecodeFormat) set.
1142,glide/request,com.bumptech.glide.request,Class RequestOptions,@NonNull @CheckResultpublic static RequestOptions frameOf(long frameTimeMicros),Returns a RequestOptions object with BaseRequestOptions.frame(long) set.
1143,glide/request,com.bumptech.glide.request,Class RequestOptions,@NonNull @CheckResultpublic static RequestOptions downsampleOf(@NonNull DownsampleStrategy strategy),Returns a RequestOptions object with BaseRequestOptions.downsample(DownsampleStrategy) set.
1144,glide/request,com.bumptech.glide.request,Class RequestOptions,@NonNull @CheckResultpublic static RequestOptions timeoutOf(int timeout),Returns a RequestOptions object with BaseRequestOptions.timeout(int) set.
1145,glide/request,com.bumptech.glide.request,Class RequestOptions,@NonNull @CheckResultpublic static RequestOptions encodeQualityOf(int quality),Returns a RequestOptions with BaseRequestOptions.encodeQuality(int) called with the given quality.
1146,glide/request,com.bumptech.glide.request,Class RequestOptions,@NonNull @CheckResultpublic static RequestOptions encodeFormatOf(@NonNull android.graphics.Bitmap.CompressFormat format),Returns a RequestOptions with BaseRequestOptions.encodeFormat(android.graphics.Bitmap.CompressFormat) called with the given format.
1147,glide/manager,com.bumptech.glide.manager,Class RequestTracker,public void runRequest(@NonNull Request request),Starts tracking the given request.
1148,glide/manager,com.bumptech.glide.manager,Class RequestTracker,public boolean clearAndRemove(@Nullable Request request),"Stops tracking the given request, clears, and recycles it, and returns true if the request was removed or invalid or false if the request was not found."
1149,glide/manager,com.bumptech.glide.manager,Class RequestTracker,public boolean isPaused(),"Returns true if requests are currently paused, and false otherwise."
1150,glide/manager,com.bumptech.glide.manager,Class RequestTracker,public void pauseRequests(),Stops any in progress requests.
1151,glide/manager,com.bumptech.glide.manager,Class RequestTracker,public void pauseAllRequests(),Stops any in progress requests and releases bitmaps associated with completed requests.
1152,glide/manager,com.bumptech.glide.manager,Class RequestTracker,public void resumeRequests(),Starts any not yet completed or failed requests.
1153,glide/manager,com.bumptech.glide.manager,Class RequestTracker,public void clearRequests(),Cancels all requests and clears their resources. After this call requests cannot be restarted.
1154,glide/manager,com.bumptech.glide.manager,Class RequestTracker,public void restartRequests(),Restarts failed requests and cancels and restarts in progress requests.
1155,load/engine,com.bumptech.glide.load.engine,Interface Resource<Z>,@NonNulljava.lang.Class<Z> getResourceClass(),Returns the Class of the wrapped resource.
1156,load/engine,com.bumptech.glide.load.engine,Interface Resource<Z>,@NonNullZ get(),"Returns an instance of the wrapped resource. Note - This does not have to be the same instance of the wrapped resource class and in fact it is often appropriate to return a new instance for each call. For example, Drawables should only be used by a single View at a time so each call to this method for Resources that wrap Drawables should always return a new Drawable."
1157,load/engine,com.bumptech.glide.load.engine,Interface Resource<Z>,int getSize(),Returns the size in bytes of the wrapped resource to use to determine how much of the memory cache this resource uses.
1158,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class ResourceBitmapDecoder,"public boolean handles(@NonNull android.net.Uri source, @NonNull Options options)",Description copied from interface: ResourceDecoder
1159,glide/request,com.bumptech.glide.request,Interface ResourceCallback,"void onResourceReady(Resource<?> resource, DataSource dataSource)",Called when a resource is successfully loaded.
1160,glide/request,com.bumptech.glide.request,Interface ResourceCallback,void onLoadFailed(GlideException e),Called when a resource fails to load successfully.
1161,glide/load,com.bumptech.glide.load,"Interface ResourceDecoder<T,Z>","boolean handles(@NonNull T source, @NonNull Options options) throws java.io.IOException","Returns true if this decoder is capable of decoding the given source with the given options, and false otherwise. Decoders should make a best effort attempt to quickly determine if they are likely to be able to decode data, but should not attempt to completely read the given data. A typical implementation would check the file headers verify they match content the decoder expects to handle (i.e. a GIF decoder should verify that the image contains the GIF header block. Decoders that return true from handles may still return null from decode(Object, int, int, Options) if the data is partial or formatted incorrectly."
1162,glide/provider,com.bumptech.glide.provider,Class ResourceDecoderRegistry,public void setBucketPriorityList(@NonNull java.util.List<java.lang.String> buckets),
1163,glide/provider,com.bumptech.glide.provider,Class ResourceDecoderRegistry,"@NonNullpublic <T,R> java.util.List<ResourceDecoder<T,R>> getDecoders(@NonNull java.lang.Class<T> dataClass, @NonNull java.lang.Class<R> resourceClass)",
1164,glide/provider,com.bumptech.glide.provider,Class ResourceDecoderRegistry,"@NonNullpublic <T,R> java.util.List<java.lang.Class<R>> getResourceClasses(@NonNull java.lang.Class<T> dataClass, @NonNull java.lang.Class<R> resourceClass)",
1165,glide/provider,com.bumptech.glide.provider,Class ResourceDecoderRegistry,"public <T,R> void append(@NonNull java.lang.String bucket, @NonNull ResourceDecoder<T,R> decoder, @NonNull java.lang.Class<T> dataClass, @NonNull java.lang.Class<R> resourceClass)",
1166,resource/drawable,com.bumptech.glide.load.resource.drawable,Class ResourceDrawableDecoder,"public boolean handles(@NonNull android.net.Uri source, @NonNull Options options)",Description copied from interface: ResourceDecoder
1167,glide/provider,com.bumptech.glide.provider,Class ResourceEncoderRegistry,"public <Z> void append(@NonNull java.lang.Class<Z> resourceClass, @NonNull ResourceEncoder<Z> encoder)",
1168,glide/provider,com.bumptech.glide.provider,Class ResourceEncoderRegistry,"public <Z> void prepend(@NonNull java.lang.Class<Z> resourceClass, @NonNull ResourceEncoder<Z> encoder)",
1169,load/model,com.bumptech.glide.load.model,Class ResourceLoader<Data>,"public ModelLoader.LoadData<Data> buildLoadData(@NonNull java.lang.Integer model, int width, int height, @NonNull Options options)",Description copied from interface: ModelLoader
1170,load/model,com.bumptech.glide.load.model,Class ResourceLoader.AssetFileDescriptorFactory,"public ModelLoader<java.lang.Integer,android.content.res.AssetFileDescriptor> build(MultiModelLoaderFactory multiFactory)",Description copied from interface: ModelLoaderFactory
1171,load/model,com.bumptech.glide.load.model,Class ResourceLoader.FileDescriptorFactory,"@NonNullpublic ModelLoader<java.lang.Integer,android.os.ParcelFileDescriptor> build(MultiModelLoaderFactory multiFactory)",Description copied from interface: ModelLoaderFactory
1172,load/model,com.bumptech.glide.load.model,Class ResourceLoader.StreamFactory,"@NonNullpublic ModelLoader<java.lang.Integer,java.io.InputStream> build(MultiModelLoaderFactory multiFactory)",Description copied from interface: ModelLoaderFactory
1173,load/model,com.bumptech.glide.load.model,Class ResourceLoader.UriFactory,"@NonNullpublic ModelLoader<java.lang.Integer,android.net.Uri> build(MultiModelLoaderFactory multiFactory)",Description copied from interface: ModelLoaderFactory
1174,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class Rotate,"protected android.graphics.Bitmap transform(@NonNull BitmapPool pool, @NonNull android.graphics.Bitmap toTransform, int outWidth, int outHeight)",Description copied from class: BitmapTransformation
1175,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class Rotate,public boolean equals(java.lang.Object o),Description copied from interface: Key
1176,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class Rotate,public int hashCode(),Description copied from interface: Key
1177,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class RoundedCorners,"protected android.graphics.Bitmap transform(@NonNull BitmapPool pool, @NonNull android.graphics.Bitmap toTransform, int outWidth, int outHeight)",Description copied from class: BitmapTransformation
1178,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class RoundedCorners,public boolean equals(java.lang.Object o),Description copied from interface: Key
1179,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class RoundedCorners,public int hashCode(),Description copied from interface: Key
1180,load/resource,com.bumptech.glide.load.resource,Class SimpleResource<T>,@NonNullpublic java.lang.Class<T> getResourceClass(),Description copied from interface: Resource
1181,load/resource,com.bumptech.glide.load.resource,Class SimpleResource<T>,@NonNullpublic final T get(),Description copied from interface: Resource
1182,load/resource,com.bumptech.glide.load.resource,Class SimpleResource<T>,public final int getSize(),Description copied from interface: Resource
1183,request/target,com.bumptech.glide.request.target,Class SimpleTarget<Z>,public SimpleTarget(),Deprecated. 
1184,request/target,com.bumptech.glide.request.target,Class SimpleTarget<Z>,public final void getSize(@NonNull SizeReadyCallback cb),Deprecated. 
1185,glide/request,com.bumptech.glide.request,Class SingleRequest<R>,"public static <R> SingleRequest<R> obtain(android.content.Context context, GlideContext glideContext, java.lang.Object requestLock, java.lang.Object model, java.lang.Class<R> transcodeClass, BaseRequestOptions<?> requestOptions, int overrideWidth, int overrideHeight, Priority priority, Target<R> target, RequestListener<R> targetListener, @Nullable java.util.List<RequestListener<R>> requestListeners, RequestCoordinator requestCoordinator, Engine engine, TransitionFactory<? super R> animationFactory, java.util.concurrent.Executor callbackExecutor)",
1186,glide/request,com.bumptech.glide.request,Class SingleRequest<R>,public void begin(),Description copied from interface: Request
1187,glide/request,com.bumptech.glide.request,Class SingleRequest<R>,public void clear(),"Cancels the current load if it is in progress, clears any resources held onto by the request and replaces the loaded resource if the load completed with the placeholder. Cleared requests can be restarted with a subsequent call to begin()"
1188,glide/request,com.bumptech.glide.request,Class SingleRequest<R>,public void pause(),Description copied from interface: Request
1189,glide/request,com.bumptech.glide.request,Class SingleRequest<R>,public boolean isRunning(),Description copied from interface: Request
1190,glide/request,com.bumptech.glide.request,Class SingleRequest<R>,public boolean isComplete(),Description copied from interface: Request
1191,glide/request,com.bumptech.glide.request,Class SingleRequest<R>,public boolean isCleared(),Description copied from interface: Request
1192,glide/request,com.bumptech.glide.request,Class SingleRequest<R>,public boolean isAnyResourceSet(),Description copied from interface: Request
1193,glide/request,com.bumptech.glide.request,Class SingleRequest<R>,"public void onSizeReady(int width, int height)",A callback method that should never be invoked directly.
1194,glide/request,com.bumptech.glide.request,Class SingleRequest<R>,"public void onResourceReady(Resource<?> resource, DataSource dataSource)",A callback method that should never be invoked directly.
1195,glide/request,com.bumptech.glide.request,Class SingleRequest<R>,public void onLoadFailed(GlideException e),A callback method that should never be invoked directly.
1196,glide/request,com.bumptech.glide.request,Class SingleRequest<R>,public java.lang.Object getLock(),Description copied from interface: ResourceCallback
1197,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class SizeConfigStrategy,public void put(android.graphics.Bitmap bitmap),
1198,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class SizeConfigStrategy,"@Nullablepublic android.graphics.Bitmap get(int width, int height, android.graphics.Bitmap.Config config)",
1199,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class SizeConfigStrategy,@Nullablepublic android.graphics.Bitmap removeLast(),
1200,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class SizeConfigStrategy,public java.lang.String logBitmap(android.graphics.Bitmap bitmap),
1201,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class SizeConfigStrategy,"public java.lang.String logBitmap(int width, int height, android.graphics.Bitmap.Config config)",
1202,engine/bitmap_recycle,com.bumptech.glide.load.engine.bitmap_recycle,Class SizeConfigStrategy,public int getSize(android.graphics.Bitmap bitmap),
1203,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class StandardGifDecoder,"public StandardGifDecoder(@NonNull GifDecoder.BitmapProvider provider, GifHeader gifHeader, java.nio.ByteBuffer rawData)",
1204,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class StandardGifDecoder,"public StandardGifDecoder(@NonNull GifDecoder.BitmapProvider provider, GifHeader gifHeader, java.nio.ByteBuffer rawData, int sampleSize)",
1205,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class StandardGifDecoder,public int getWidth(),
1206,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class StandardGifDecoder,public int getHeight(),
1207,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class StandardGifDecoder,@NonNullpublic java.nio.ByteBuffer getData(),
1208,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class StandardGifDecoder,public int getStatus(),Description copied from interface: GifDecoder
1209,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class StandardGifDecoder,public void advance(),Description copied from interface: GifDecoder
1210,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class StandardGifDecoder,public int getDelay(int n),Description copied from interface: GifDecoder
1211,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class StandardGifDecoder,public int getNextDelay(),Description copied from interface: GifDecoder
1212,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class StandardGifDecoder,public int getFrameCount(),Description copied from interface: GifDecoder
1213,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class StandardGifDecoder,public int getCurrentFrameIndex(),Description copied from interface: GifDecoder
1214,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class StandardGifDecoder,public void resetFrameIndex(),Description copied from interface: GifDecoder
1215,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class StandardGifDecoder,@Deprecatedpublic int getLoopCount(),Deprecated. 
1216,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class StandardGifDecoder,public int getNetscapeLoopCount(),Description copied from interface: GifDecoder
1217,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class StandardGifDecoder,public int getTotalIterationCount(),Description copied from interface: GifDecoder
1218,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class StandardGifDecoder,public int getByteSize(),Description copied from interface: GifDecoder
1219,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class StandardGifDecoder,@Nullablepublic android.graphics.Bitmap getNextFrame(),Description copied from interface: GifDecoder
1220,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class StandardGifDecoder,"public int read(@Nullable java.io.InputStream is, int contentLength)",Description copied from interface: GifDecoder
1221,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class StandardGifDecoder,public void clear(),
1222,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class StandardGifDecoder,"public void setData(@NonNull GifHeader header, @NonNull byte[] data)",
1223,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class StandardGifDecoder,"public void setData(@NonNull GifHeader header, @NonNull java.nio.ByteBuffer buffer)",
1224,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class StandardGifDecoder,"public void setData(@NonNull GifHeader header, @NonNull java.nio.ByteBuffer buffer, int sampleSize)",
1225,glide/gifdecoder,com.bumptech.glide.gifdecoder,Class StandardGifDecoder,public int read(@Nullable byte[] data),Description copied from interface: GifDecoder
1226,util/pool,com.bumptech.glide.util.pool,Class StateVerifier,@NonNullpublic static StateVerifier newInstance(),Creates a new StateVerifier instance.
1227,load/data,com.bumptech.glide.load.data,Class StreamAssetPathFetcher,"protected java.io.InputStream loadResource(android.content.res.AssetManager assetManager, java.lang.String path) throws java.io.IOException",Description copied from class: AssetPathFetcher
1228,load/data,com.bumptech.glide.load.data,Class StreamAssetPathFetcher,protected void close(java.io.InputStream data) throws java.io.IOException,Description copied from class: AssetPathFetcher
1229,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class StreamBitmapDecoder,"public boolean handles(@NonNull java.io.InputStream source, @NonNull Options options)",Description copied from interface: ResourceDecoder
1230,resource/gif,com.bumptech.glide.load.resource.gif,Class StreamGifDecoder,"public boolean handles(@NonNull java.io.InputStream source, @NonNull Options options) throws java.io.IOException",Description copied from interface: ResourceDecoder
1231,load/data,com.bumptech.glide.load.data,Class StreamLocalUriFetcher,"protected java.io.InputStream loadResource(android.net.Uri uri, android.content.ContentResolver contentResolver) throws java.io.FileNotFoundException",Description copied from class: LocalUriFetcher
1232,load/data,com.bumptech.glide.load.data,Class StreamLocalUriFetcher,protected void close(java.io.InputStream data) throws java.io.IOException,Description copied from class: LocalUriFetcher
1233,load/model,com.bumptech.glide.load.model,Class StringLoader<Data>,"public ModelLoader.LoadData<Data> buildLoadData(@NonNull java.lang.String model, int width, int height, @NonNull Options options)",Description copied from interface: ModelLoader
1234,load/model,com.bumptech.glide.load.model,Class StringLoader.AssetFileDescriptorFactory,"public ModelLoader<java.lang.String,android.content.res.AssetFileDescriptor> build(@NonNull MultiModelLoaderFactory multiFactory)",Description copied from interface: ModelLoaderFactory
1235,load/model,com.bumptech.glide.load.model,Class StringLoader.FileDescriptorFactory,"@NonNullpublic ModelLoader<java.lang.String,android.os.ParcelFileDescriptor> build(@NonNull MultiModelLoaderFactory multiFactory)",Description copied from interface: ModelLoaderFactory
1236,load/model,com.bumptech.glide.load.model,Class StringLoader.StreamFactory,"@NonNullpublic ModelLoader<java.lang.String,java.io.InputStream> build(@NonNull MultiModelLoaderFactory multiFactory)",Description copied from interface: ModelLoaderFactory
1237,glide/manager,com.bumptech.glide.manager,Class SupportRequestManagerFragment,public SupportRequestManagerFragment(),
1238,glide/manager,com.bumptech.glide.manager,Class SupportRequestManagerFragment,public void setRequestManager(@Nullable RequestManager requestManager),Sets the current RequestManager.
1239,glide/manager,com.bumptech.glide.manager,Class SupportRequestManagerFragment,@Nullablepublic RequestManager getRequestManager(),Returns the current RequestManager or null if none is put.
1240,glide/manager,com.bumptech.glide.manager,Class SupportRequestManagerFragment,@NonNullpublic RequestManagerTreeNode getRequestManagerTreeNode(),Returns the RequestManagerTreeNode that provides tree traversal methods relative to the associated RequestManager.
1241,glide/manager,com.bumptech.glide.manager,Class SupportRequestManagerFragment,public void onAttach(android.content.Context context),
1242,glide/manager,com.bumptech.glide.manager,Class SupportRequestManagerFragment,public void onDetach(),
1243,glide/manager,com.bumptech.glide.manager,Class SupportRequestManagerFragment,public void onStart(),
1244,glide/manager,com.bumptech.glide.manager,Class SupportRequestManagerFragment,public void onStop(),
1245,glide/manager,com.bumptech.glide.manager,Class SupportRequestManagerFragment,public void onDestroy(),
1246,request/target,com.bumptech.glide.request.target,Interface Target<R>,void onLoadStarted(@Nullable android.graphics.drawable.Drawable placeholder),"A lifecycle callback that is called when a load is started. Note - This may not be called for every load, it is possible for example for loads to fail before the load starts (when the model object is null). Note - This method may be called multiple times before any other lifecycle method is called. Loads can be paused and restarted due to lifecycle or connectivity events and each restart may cause a call here."
1247,request/target,com.bumptech.glide.request.target,Interface Target<R>,void onLoadFailed(@Nullable android.graphics.drawable.Drawable errorDrawable),"A mandatory lifecycle callback that is called when a load fails. Note - This may be called before onLoadStarted(android.graphics.drawable.Drawable) if the model object is null. You must ensure that any current Drawable received in onResourceReady(Object, Transition) is no longer used before redrawing the container (usually a View) or changing its visibility."
1248,request/target,com.bumptech.glide.request.target,Interface Target<R>,"void onResourceReady(@NonNull R resource, @Nullable Transition<? super R> transition)",The method that will be called when the resource load has finished.
1249,request/target,com.bumptech.glide.request.target,Interface Target<R>,void onLoadCleared(@Nullable android.graphics.drawable.Drawable placeholder),"A mandatory lifecycle callback that is called when a load is cancelled and its resources are freed. You must ensure that any current Drawable received in onResourceReady(Object, Transition) is no longer used before redrawing the container (usually a View) or changing its visibility."
1250,request/target,com.bumptech.glide.request.target,Interface Target<R>,void getSize(@NonNull SizeReadyCallback cb),A method to retrieve the size of this target.
1251,request/target,com.bumptech.glide.request.target,Interface Target<R>,void removeCallback(@NonNull SizeReadyCallback cb),Removes the given callback from the pending set if it's still retained.
1252,request/target,com.bumptech.glide.request.target,Interface Target<R>,void setRequest(@Nullable Request request),"Sets the current request for this target to retain, should not be called outside of Glide."
1253,glide/manager,com.bumptech.glide.manager,Class TargetTracker,public void track(@NonNull Target<?> target),
1254,glide/manager,com.bumptech.glide.manager,Class TargetTracker,public void untrack(@NonNull Target<?> target),
1255,glide/manager,com.bumptech.glide.manager,Class TargetTracker,public void onStart(),Description copied from interface: LifecycleListener
1256,glide/manager,com.bumptech.glide.manager,Class TargetTracker,public void onStop(),Description copied from interface: LifecycleListener
1257,glide/manager,com.bumptech.glide.manager,Class TargetTracker,public void onDestroy(),Description copied from interface: LifecycleListener
1258,glide/manager,com.bumptech.glide.manager,Class TargetTracker,@NonNullpublic java.util.List<Target<?>> getAll(),
1259,data/mediastore,com.bumptech.glide.load.data.mediastore,Class ThumbFetcher,"public static ThumbFetcher buildImageFetcher(android.content.Context context, android.net.Uri uri)",
1260,data/mediastore,com.bumptech.glide.load.data.mediastore,Class ThumbFetcher,"public static ThumbFetcher buildVideoFetcher(android.content.Context context, android.net.Uri uri)",
1261,data/mediastore,com.bumptech.glide.load.data.mediastore,Class ThumbFetcher,"public void loadData(@NonNull Priority priority, @NonNull DataFetcher.DataCallback<? super java.io.InputStream> callback)",Description copied from interface: DataFetcher
1262,data/mediastore,com.bumptech.glide.load.data.mediastore,Class ThumbFetcher,public void cleanup(),Description copied from interface: DataFetcher
1263,data/mediastore,com.bumptech.glide.load.data.mediastore,Class ThumbFetcher,public void cancel(),Description copied from interface: DataFetcher
1264,data/mediastore,com.bumptech.glide.load.data.mediastore,Class ThumbFetcher,@NonNullpublic java.lang.Class<java.io.InputStream> getDataClass(),Description copied from interface: DataFetcher
1265,request/target,com.bumptech.glide.request.target,Class ThumbnailImageViewTarget<T>,public ThumbnailImageViewTarget(android.widget.ImageView view),
1266,request/target,com.bumptech.glide.request.target,Class ThumbnailImageViewTarget<T>,protected void setResource(@Nullable T resource),
1267,glide/request,com.bumptech.glide.request,Class ThumbnailRequestCoordinator,"public void setRequests(Request full, Request thumb)",
1268,glide/request,com.bumptech.glide.request,Class ThumbnailRequestCoordinator,public boolean canSetImage(Request request),Returns true if the request is either the request loading the full size image or if the request loading the full size image has not yet completed.
1269,glide/request,com.bumptech.glide.request,Class ThumbnailRequestCoordinator,public boolean canNotifyStatusChanged(Request request),Returns true if the request is the request loading the full size image and if neither the full nor the thumbnail image have completed successfully.
1270,glide/request,com.bumptech.glide.request,Class ThumbnailRequestCoordinator,public boolean canNotifyCleared(Request request),Description copied from interface: RequestCoordinator
1271,glide/request,com.bumptech.glide.request,Class ThumbnailRequestCoordinator,public boolean isAnyResourceSet(),Description copied from interface: RequestCoordinator
1272,glide/request,com.bumptech.glide.request,Class ThumbnailRequestCoordinator,public void onRequestSuccess(Request request),Description copied from interface: RequestCoordinator
1273,glide/request,com.bumptech.glide.request,Class ThumbnailRequestCoordinator,public void onRequestFailed(Request request),Description copied from interface: RequestCoordinator
1274,glide/request,com.bumptech.glide.request,Class ThumbnailRequestCoordinator,public RequestCoordinator getRoot(),Description copied from interface: RequestCoordinator
1275,glide/request,com.bumptech.glide.request,Class ThumbnailRequestCoordinator,public void begin(),Starts first the thumb request and then the full request.
1276,glide/request,com.bumptech.glide.request,Class ThumbnailRequestCoordinator,public void clear(),Description copied from interface: Request
1277,glide/request,com.bumptech.glide.request,Class ThumbnailRequestCoordinator,public void pause(),Description copied from interface: Request
1278,glide/request,com.bumptech.glide.request,Class ThumbnailRequestCoordinator,public boolean isRunning(),Description copied from interface: Request
1279,glide/request,com.bumptech.glide.request,Class ThumbnailRequestCoordinator,public boolean isComplete(),Description copied from interface: Request
1280,glide/request,com.bumptech.glide.request,Class ThumbnailRequestCoordinator,public boolean isCleared(),Description copied from interface: Request
1281,resource/transcode,com.bumptech.glide.load.resource.transcode,Class TranscoderRegistry,"public <Z,R> void register(@NonNull java.lang.Class<Z> decodedClass, @NonNull java.lang.Class<R> transcodedClass, @NonNull ResourceTranscoder<Z,R> transcoder)",Registers the given ResourceTranscoder using the given classes so it can later be retrieved using the given classes.
1282,resource/transcode,com.bumptech.glide.load.resource.transcode,Class TranscoderRegistry,"@NonNullpublic <Z,R> ResourceTranscoder<Z,R> get(@NonNull java.lang.Class<Z> resourceClass, @NonNull java.lang.Class<R> transcodedClass)",Returns the currently registered ResourceTranscoder for the given classes.
1283,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class TransformationUtils,public static java.util.concurrent.locks.Lock getBitmapDrawableLock(),
1284,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class TransformationUtils,"public static android.graphics.Bitmap centerCrop(@NonNull BitmapPool pool, @NonNull android.graphics.Bitmap inBitmap, int width, int height)",A potentially expensive operation to crop the given Bitmap so that it fills the given dimensions. This operation is significantly less expensive in terms of memory if a mutable Bitmap with the given dimensions is passed in as well.
1285,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class TransformationUtils,"public static android.graphics.Bitmap fitCenter(@NonNull BitmapPool pool, @NonNull android.graphics.Bitmap inBitmap, int width, int height)",An expensive operation to resize the given Bitmap down so that it fits within the given dimensions maintain the original proportions.
1286,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class TransformationUtils,"public static android.graphics.Bitmap centerInside(@NonNull BitmapPool pool, @NonNull android.graphics.Bitmap inBitmap, int width, int height)","If the Bitmap is smaller or equal to the Target it returns the original size, if not then fitCenter(BitmapPool, Bitmap, int, int) is called instead."
1287,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class TransformationUtils,"public static void setAlpha(android.graphics.Bitmap inBitmap, android.graphics.Bitmap outBitmap)",Sets the alpha of the Bitmap we're going to re-use to the alpha of the Bitmap we're going to transform. This keeps Bitmap.hasAlpha()} consistent before and after the transformation for transformations that don't add or remove transparent pixels.
1288,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class TransformationUtils,"public static android.graphics.Bitmap rotateImage(@NonNull android.graphics.Bitmap imageToOrient, int degreesToRotate)","This is an expensive operation that copies the image in place with the pixels rotated. If possible rather use getOrientationMatrix, and put that as the imageMatrix on an ImageView."
1289,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class TransformationUtils,public static int getExifOrientationDegrees(int exifOrientation),Get the # of degrees an image must be rotated to match the given exif orientation.
1290,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class TransformationUtils,"public static android.graphics.Bitmap rotateImageExif(@NonNull BitmapPool pool, @NonNull android.graphics.Bitmap inBitmap, int exifOrientation)",Rotate and/or flip the image to match the given exif orientation.
1291,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class TransformationUtils,public static boolean isExifOrientationRequired(int exifOrientation),Returns true if the given exif orientation indicates that a transformation is necessary and false otherwise.
1292,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class TransformationUtils,"public static android.graphics.Bitmap circleCrop(@NonNull BitmapPool pool, @NonNull android.graphics.Bitmap inBitmap, int destWidth, int destHeight)",Crop the image to a circle and resize to the specified width/height. The circle crop will have the same width and height equal to the min-edge of the result image.
1293,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class TransformationUtils,"@Deprecatedpublic static android.graphics.Bitmap roundedCorners(@NonNull BitmapPool pool, @NonNull android.graphics.Bitmap inBitmap, int width, int height, int roundingRadius)","Deprecated. Width and height are unused and ignored. Use roundedCorners(BitmapPool, Bitmap, int) instead."
1294,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class TransformationUtils,"public static android.graphics.Bitmap roundedCorners(@NonNull BitmapPool pool, @NonNull android.graphics.Bitmap inBitmap, int roundingRadius)","Creates a bitmap from a source bitmap and rounds the corners. This method does NOT resize the given Bitmap, it only rounds it's corners. To both resize and round the corners of an image, consider BaseRequestOptions.transform(Transformation[]) and/or MultiTransformation."
1295,request/transition,com.bumptech.glide.request.transition,Interface Transition.ViewAdapter,android.view.View getView(),Returns the wrapped View.
1296,request/transition,com.bumptech.glide.request.transition,Interface Transition.ViewAdapter,@Nullableandroid.graphics.drawable.Drawable getCurrentDrawable(),"Returns the current drawable being displayed in the view, or null if no such drawable exists (or one cannot be retrieved)."
1297,bumptech/glide,com.bumptech.glide,"Class TransitionOptions<CHILD extends TransitionOptions<CHILD,TranscodeType>,TranscodeType>",@NonNullpublic final CHILD dontTransition(),Removes any existing animation put on the builder. Will be overridden by subsequent calls that put an animation.
1298,bumptech/glide,com.bumptech.glide,"Class TransitionOptions<CHILD extends TransitionOptions<CHILD,TranscodeType>,TranscodeType>",@NonNullpublic final CHILD transition(int viewAnimationId),Sets an Animation to run on the wrapped target when an resource load finishes. Will only be run if the resource was loaded asynchronously (i.e. was not in the memory cache).
1299,bumptech/glide,com.bumptech.glide,"Class TransitionOptions<CHILD extends TransitionOptions<CHILD,TranscodeType>,TranscodeType>",@NonNullpublic final CHILD transition(@NonNull ViewPropertyTransition.Animator animator),Sets an animator to run a ViewPropertyAnimator on a view that the target may be wrapping when a resource load finishes. Will only be run if the load was loaded asynchronously (i.e. was not in the memory cache).
1300,bumptech/glide,com.bumptech.glide,"Class TransitionOptions<CHILD extends TransitionOptions<CHILD,TranscodeType>,TranscodeType>",@NonNullpublic final CHILD transition(@NonNull TransitionFactory<? super TranscodeType> transitionFactory),Uses the given TransitionFactory to build a Transition for each request started with these TransitionOptions.
1301,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class UnitBitmapDecoder,"public boolean handles(@NonNull android.graphics.Bitmap source, @NonNull Options options)",Description copied from interface: ResourceDecoder
1302,resource/drawable,com.bumptech.glide.load.resource.drawable,Class UnitDrawableDecoder,"public boolean handles(@NonNull android.graphics.drawable.Drawable source, @NonNull Options options)",Description copied from interface: ResourceDecoder
1303,load/model,com.bumptech.glide.load.model,Class UnitModelLoader<Model>,public static <T> UnitModelLoader<T> getInstance(),
1304,load/model,com.bumptech.glide.load.model,Class UnitModelLoader<Model>,"public ModelLoader.LoadData<Model> buildLoadData(@NonNull Model model, int width, int height, @NonNull Options options)",Description copied from interface: ModelLoader
1305,load/model,com.bumptech.glide.load.model,Class UnitModelLoader.Factory<Model>,public static <T> UnitModelLoader.Factory<T> getInstance(),
1306,load/model,com.bumptech.glide.load.model,Class UnitModelLoader.Factory<Model>,"@NonNullpublic ModelLoader<Model,Model> build(MultiModelLoaderFactory multiFactory)",Description copied from interface: ModelLoaderFactory
1307,resource/transcode,com.bumptech.glide.load.resource.transcode,Class UnitTranscoder<Z>,"public static <Z> ResourceTranscoder<Z,Z> get()",
1308,load/resource,com.bumptech.glide.load.resource,Class UnitTransformation<T>,@NonNullpublic static <T> UnitTransformation<T> get(),Returns a UnitTransformation for the given type.
1309,load/resource,com.bumptech.glide.load.resource,Class UnitTransformation<T>,"@NonNullpublic Resource<T> transform(@NonNull android.content.Context context, @NonNull Resource<T> resource, int outWidth, int outHeight)",Description copied from interface: Transformation
1310,load/model,com.bumptech.glide.load.model,Class UriLoader<Data>,"public ModelLoader.LoadData<Data> buildLoadData(@NonNull android.net.Uri model, int width, int height, @NonNull Options options)",Description copied from interface: ModelLoader
1311,load/model,com.bumptech.glide.load.model,Class UriLoader.AssetFileDescriptorFactory,"public ModelLoader<android.net.Uri,android.content.res.AssetFileDescriptor> build(MultiModelLoaderFactory multiFactory)",Description copied from interface: ModelLoaderFactory
1312,load/model,com.bumptech.glide.load.model,Class UriLoader.AssetFileDescriptorFactory,public void teardown(),Description copied from interface: ModelLoaderFactory
1313,load/model,com.bumptech.glide.load.model,Class UriLoader.FileDescriptorFactory,public DataFetcher<android.os.ParcelFileDescriptor> build(android.net.Uri uri),
1314,load/model,com.bumptech.glide.load.model,Class UriLoader.FileDescriptorFactory,"@NonNullpublic ModelLoader<android.net.Uri,android.os.ParcelFileDescriptor> build(MultiModelLoaderFactory multiFactory)",Description copied from interface: ModelLoaderFactory
1315,load/model,com.bumptech.glide.load.model,Class UriLoader.StreamFactory,public DataFetcher<java.io.InputStream> build(android.net.Uri uri),
1316,load/model,com.bumptech.glide.load.model,Class UriLoader.StreamFactory,"@NonNullpublic ModelLoader<android.net.Uri,java.io.InputStream> build(MultiModelLoaderFactory multiFactory)",Description copied from interface: ModelLoaderFactory
1317,model/stream,com.bumptech.glide.load.model.stream,Class UrlLoader,"public ModelLoader.LoadData<java.io.InputStream> buildLoadData(@NonNull java.net.URL model, int width, int height, @NonNull Options options)",Description copied from interface: ModelLoader
1318,model/stream,com.bumptech.glide.load.model.stream,Class UrlLoader.StreamFactory,"@NonNullpublic ModelLoader<java.net.URL,java.io.InputStream> build(MultiModelLoaderFactory multiFactory)",Description copied from interface: ModelLoaderFactory
1319,load/model,com.bumptech.glide.load.model,Class UrlUriLoader<Data>,"public ModelLoader.LoadData<Data> buildLoadData(@NonNull android.net.Uri uri, int width, int height, @NonNull Options options)",Description copied from interface: ModelLoader
1320,load/model,com.bumptech.glide.load.model,Class UrlUriLoader.StreamFactory,"@NonNullpublic ModelLoader<android.net.Uri,java.io.InputStream> build(MultiModelLoaderFactory multiFactory)",Description copied from interface: ModelLoaderFactory
1321,glide/util,com.bumptech.glide.util,Class Util,@NonNullpublic static java.lang.String sha256BytesToHex(@NonNull byte[] bytes),Returns the hex string of the given byte array representing a SHA256 hash.
1322,glide/util,com.bumptech.glide.util,Class Util,@Deprecatedpublic static int getSize(@NonNull android.graphics.Bitmap bitmap),Deprecated. Use getBitmapByteSize(android.graphics.Bitmap) instead. Scheduled to be removed in Glide 4.0.
1323,glide/util,com.bumptech.glide.util,Class Util,public static int getBitmapByteSize(@NonNull android.graphics.Bitmap bitmap),Returns the in memory size of the given Bitmap in bytes.
1324,glide/util,com.bumptech.glide.util,Class Util,"public static int getBitmapByteSize(int width, int height, @Nullable android.graphics.Bitmap.Config config)","Returns the in memory size of Bitmap with the given width, height, and Bitmap.Config."
1325,glide/util,com.bumptech.glide.util,Class Util,"public static boolean isValidDimensions(int width, int height)",Returns true if width and height are both > 0 and/or equal to Target.SIZE_ORIGINAL.
1326,glide/util,com.bumptech.glide.util,Class Util,public static void assertMainThread(),Throws an IllegalArgumentException if called on a thread other than the main thread.
1327,glide/util,com.bumptech.glide.util,Class Util,public static void assertBackgroundThread(),Throws an IllegalArgumentException if called on the main thread.
1328,glide/util,com.bumptech.glide.util,Class Util,public static boolean isOnMainThread(),"Returns true if called on the main thread, false otherwise."
1329,glide/util,com.bumptech.glide.util,Class Util,public static boolean isOnBackgroundThread(),"Returns true if called on a background thread, false otherwise."
1330,glide/util,com.bumptech.glide.util,Class Util,@NonNullpublic static <T> java.util.Queue<T> createQueue(int size),Creates a Queue of the given size using Glide's preferred implementation.
1331,glide/util,com.bumptech.glide.util,Class Util,@NonNullpublic static <T> java.util.List<T> getSnapshot(@NonNull java.util.Collection<T> other),"Returns a copy of the given list that is safe to iterate over and perform actions that may modify the original list. See #303, #375, #322, #2262."
1332,glide/util,com.bumptech.glide.util,Class Util,"public static boolean bothNullOrEqual(@Nullable java.lang.Object a, @Nullable java.lang.Object b)",Null-safe equivalent of a.equals(b).
1333,glide/util,com.bumptech.glide.util,Class Util,"public static boolean bothModelsNullEquivalentOrEquals(@Nullable java.lang.Object a, @Nullable java.lang.Object b)",
1334,glide/util,com.bumptech.glide.util,Class Util,public static int hashCode(int value),
1335,glide/util,com.bumptech.glide.util,Class Util,"public static int hashCode(int value, int accumulator)",
1336,glide/util,com.bumptech.glide.util,Class Util,public static int hashCode(float value),
1337,glide/util,com.bumptech.glide.util,Class Util,"public static int hashCode(float value, int accumulator)",
1338,glide/util,com.bumptech.glide.util,Class Util,"public static int hashCode(@Nullable java.lang.Object object, int accumulator)",
1339,glide/util,com.bumptech.glide.util,Class Util,"public static int hashCode(boolean value, int accumulator)",
1340,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class VideoBitmapDecoder,public VideoBitmapDecoder(android.content.Context context),Deprecated. 
1341,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class VideoDecoder<T>,public static final long DEFAULT_FRAME,"A constant indicating we should use whatever frame we consider best, frequently not the first frame."
1342,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class VideoDecoder<T>,public static final Option<java.lang.Long> TARGET_FRAME,"A long indicating the time position (in microseconds) of the target frame which will be retrieved. MediaMetadataRetriever.getFrameAtTime(long) is used to extract the video frame. When retrieving the frame at the given time position, there is no guarantee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If the long is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned."
1343,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class VideoDecoder<T>,"public static ResourceDecoder<android.content.res.AssetFileDescriptor,android.graphics.Bitmap> asset(BitmapPool bitmapPool)",
1344,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class VideoDecoder<T>,"public static ResourceDecoder<android.os.ParcelFileDescriptor,android.graphics.Bitmap> parcel(BitmapPool bitmapPool)",
1345,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class VideoDecoder<T>,"public static ResourceDecoder<java.nio.ByteBuffer,android.graphics.Bitmap> byteBuffer(BitmapPool bitmapPool)",
1346,resource/bitmap,com.bumptech.glide.load.resource.bitmap,Class VideoDecoder<T>,"public boolean handles(@NonNull T data, @NonNull Options options)",Description copied from interface: ResourceDecoder
1347,request/transition,com.bumptech.glide.request.transition,Class ViewAnimationFactory<R>,public ViewAnimationFactory(android.view.animation.Animation animation),
1348,glide/util,com.bumptech.glide.util,Class ViewPreloadSizeProvider<T>,public ViewPreloadSizeProvider(),Constructor that does nothing by default and requires users to call setView(android.view.View) when a View is available to registerComponents the dimensions returned by this class.
1349,glide/util,com.bumptech.glide.util,Class ViewPreloadSizeProvider<T>,"@Nullablepublic int[] getPreloadSize(@NonNull T item, int adapterPosition, int itemPosition)",Description copied from interface: ListPreloader.PreloadSizeProvider
1350,glide/util,com.bumptech.glide.util,Class ViewPreloadSizeProvider<T>,"public void onSizeReady(int width, int height)",Description copied from interface: SizeReadyCallback
1351,request/target,com.bumptech.glide.request.target,"Class ViewTarget<T extends android.view.View,Z>",public ViewTarget(@NonNull T view),Deprecated. 
1352,request/target,com.bumptech.glide.request.target,"Class ViewTarget<T extends android.view.View,Z>","@NonNullpublic final ViewTarget<T,Z> clearOnDetach()",Deprecated. 
1353,request/target,com.bumptech.glide.request.target,"Class ViewTarget<T extends android.view.View,Z>","@NonNullpublic final ViewTarget<T,Z> waitForLayout()",Deprecated. 
1354,request/target,com.bumptech.glide.request.target,"Class ViewTarget<T extends android.view.View,Z>",@CallSuperpublic void onLoadStarted(@Nullable android.graphics.drawable.Drawable placeholder),Deprecated. 
1355,request/target,com.bumptech.glide.request.target,"Class ViewTarget<T extends android.view.View,Z>",@NonNullpublic T getView(),Deprecated. 
1356,request/target,com.bumptech.glide.request.target,"Class ViewTarget<T extends android.view.View,Z>",@CallSuperpublic void getSize(@NonNull SizeReadyCallback cb),Deprecated. 
1357,request/target,com.bumptech.glide.request.target,"Class ViewTarget<T extends android.view.View,Z>",@CallSuperpublic void removeCallback(@NonNull SizeReadyCallback cb),Deprecated. 
1358,request/target,com.bumptech.glide.request.target,"Class ViewTarget<T extends android.view.View,Z>",@CallSuperpublic void onLoadCleared(@Nullable android.graphics.drawable.Drawable placeholder),Deprecated. 
1359,request/target,com.bumptech.glide.request.target,"Class ViewTarget<T extends android.view.View,Z>",public void setRequest(@Nullable Request request),Deprecated. 
1360,request/target,com.bumptech.glide.request.target,"Class ViewTarget<T extends android.view.View,Z>",@Nullablepublic Request getRequest(),Deprecated. 
1361,request/target,com.bumptech.glide.request.target,"Class ViewTarget<T extends android.view.View,Z>",public java.lang.String toString(),Deprecated. 
1362,integration/volley,com.bumptech.glide.integration.volley,Class VolleyGlideModule,"public void applyOptions(@NonNull android.content.Context context, @NonNull GlideBuilder builder)",Deprecated. 
1363,integration/volley,com.bumptech.glide.integration.volley,Class VolleyStreamFetcher,"public VolleyStreamFetcher(com.android.volley.RequestQueue requestQueue, GlideUrl url)",
1364,integration/volley,com.bumptech.glide.integration.volley,Class VolleyStreamFetcher,"public void loadData(@NonNull Priority priority, @NonNull DataFetcher.DataCallback<? super java.io.InputStream> callback)",Description copied from interface: DataFetcher
1365,integration/volley,com.bumptech.glide.integration.volley,Class VolleyStreamFetcher,public void cleanup(),Description copied from interface: DataFetcher
1366,integration/volley,com.bumptech.glide.integration.volley,Class VolleyStreamFetcher,public void cancel(),Description copied from interface: DataFetcher
1367,integration/volley,com.bumptech.glide.integration.volley,Class VolleyStreamFetcher,@NonNullpublic java.lang.Class<java.io.InputStream> getDataClass(),Description copied from interface: DataFetcher
1368,integration/volley,com.bumptech.glide.integration.volley,Class VolleyStreamFetcher.GlideRequest,"public GlideRequest(java.lang.String url, DataFetcher.DataCallback<? super java.io.InputStream> callback, com.android.volley.Request.Priority priority)",
1369,integration/volley,com.bumptech.glide.integration.volley,Class VolleyStreamFetcher.GlideRequest,"public java.util.Map<java.lang.String,java.lang.String> getHeaders()",
1370,integration/volley,com.bumptech.glide.integration.volley,Class VolleyStreamFetcher.GlideRequest,public com.android.volley.Request.Priority getPriority(),
1371,integration/volley,com.bumptech.glide.integration.volley,Class VolleyStreamFetcher.GlideRequest,protected com.android.volley.VolleyError parseNetworkError(com.android.volley.VolleyError volleyError),
1372,integration/volley,com.bumptech.glide.integration.volley,Class VolleyStreamFetcher.GlideRequest,protected com.android.volley.Response<byte[]> parseNetworkResponse(com.android.volley.NetworkResponse response),
1373,integration/volley,com.bumptech.glide.integration.volley,Class VolleyUrlLoader,public VolleyUrlLoader(com.android.volley.RequestQueue requestQueue),
1374,integration/volley,com.bumptech.glide.integration.volley,Class VolleyUrlLoader,public boolean handles(@NonNull GlideUrl url),Description copied from interface: ModelLoader
1375,integration/volley,com.bumptech.glide.integration.volley,Class VolleyUrlLoader.Factory,public Factory(android.content.Context context),Constructor for a new Factory that runs requests using a static singleton request queue.
1376,integration/volley,com.bumptech.glide.integration.volley,Class VolleyUrlLoader.Factory,public Factory(com.android.volley.RequestQueue requestQueue),Constructor for a new Factory that runs requests using the given RequestQueue.
1377,integration/volley,com.bumptech.glide.integration.volley,Class VolleyUrlLoader.Factory,"@NonNullpublic ModelLoader<GlideUrl,java.io.InputStream> build(MultiModelLoaderFactory factory)",Description copied from interface: ModelLoaderFactory
1378,expanded/decoders,com.google.zxing.oned.rss.expanded.decoders,Class AbstractExpandedDecoder,protected final BitArray getInformation(),
1379,expanded/decoders,com.google.zxing.oned.rss.expanded.decoders,Class AbstractExpandedDecoder,protected final com.google.zxing.oned.rss.expanded.decoders.GeneralAppIdDecoder getGeneralDecoder(),
1380,expanded/decoders,com.google.zxing.oned.rss.expanded.decoders,Class AbstractExpandedDecoder,"public abstract String parseInformation() throws NotFoundException, FormatException",
1381,oned/rss,com.google.zxing.oned.rss,Class AbstractRSSReader,protected final int[] getDecodeFinderCounters(),
1382,oned/rss,com.google.zxing.oned.rss,Class AbstractRSSReader,protected final int[] getDataCharacterCounters(),
1383,oned/rss,com.google.zxing.oned.rss,Class AbstractRSSReader,protected final float[] getOddRoundingErrors(),
1384,oned/rss,com.google.zxing.oned.rss,Class AbstractRSSReader,protected final float[] getEvenRoundingErrors(),
1385,oned/rss,com.google.zxing.oned.rss,Class AbstractRSSReader,protected final int[] getOddCounts(),
1386,oned/rss,com.google.zxing.oned.rss,Class AbstractRSSReader,protected final int[] getEvenCounts(),
1387,oned/rss,com.google.zxing.oned.rss,Class AbstractRSSReader,"protected static int parseFinderValue(int[] counters, int[][] finderPatterns) throws NotFoundException",
1388,oned/rss,com.google.zxing.oned.rss,Class AbstractRSSReader,@Deprecatedprotected static int count(int[] array),Deprecated. call MathUtils.sum(int[])
1389,oned/rss,com.google.zxing.oned.rss,Class AbstractRSSReader,"protected static void increment(int[] array, float[] errors)",
1390,oned/rss,com.google.zxing.oned.rss,Class AbstractRSSReader,"protected static void decrement(int[] array, float[] errors)",
1391,client/result,com.google.zxing.client.result,Class AddressBookParsedResult,"public AddressBookParsedResult(String[] names, String[] phoneNumbers, String[] phoneTypes, String[] emails, String[] emailTypes, String[] addresses, String[] addressTypes)",
1392,client/result,com.google.zxing.client.result,Class AddressBookParsedResult,public String[] getNames(),
1393,client/result,com.google.zxing.client.result,Class AddressBookParsedResult,public String[] getNicknames(),
1394,client/result,com.google.zxing.client.result,Class AddressBookParsedResult,public String getPronunciation(),"In Japanese, the name is written in kanji, which can have multiple readings. Therefore a hint is often provided, called furigana, which spells the name phonetically."
1395,client/result,com.google.zxing.client.result,Class AddressBookParsedResult,public String[] getPhoneNumbers(),
1396,client/result,com.google.zxing.client.result,Class AddressBookParsedResult,public String[] getPhoneTypes(),
1397,client/result,com.google.zxing.client.result,Class AddressBookParsedResult,public String[] getEmails(),
1398,client/result,com.google.zxing.client.result,Class AddressBookParsedResult,public String[] getEmailTypes(),
1399,client/result,com.google.zxing.client.result,Class AddressBookParsedResult,public String getInstantMessenger(),
1400,client/result,com.google.zxing.client.result,Class AddressBookParsedResult,public String getNote(),
1401,client/result,com.google.zxing.client.result,Class AddressBookParsedResult,public String[] getAddresses(),
1402,client/result,com.google.zxing.client.result,Class AddressBookParsedResult,public String[] getAddressTypes(),
1403,client/result,com.google.zxing.client.result,Class AddressBookParsedResult,public String getTitle(),
1404,client/result,com.google.zxing.client.result,Class AddressBookParsedResult,public String getOrg(),
1405,client/result,com.google.zxing.client.result,Class AddressBookParsedResult,public String[] getURLs(),
1406,client/result,com.google.zxing.client.result,Class AddressBookParsedResult,public String getBirthday(),
1407,client/result,com.google.zxing.client.result,Class AddressBookParsedResult,public String[] getGeo(),
1408,aztec/encoder,com.google.zxing.aztec.encoder,Class AztecCode,public boolean isCompact(),
1409,aztec/encoder,com.google.zxing.aztec.encoder,Class AztecCode,public void setCompact(boolean compact),
1410,aztec/encoder,com.google.zxing.aztec.encoder,Class AztecCode,public int getSize(),
1411,aztec/encoder,com.google.zxing.aztec.encoder,Class AztecCode,public void setSize(int size),
1412,aztec/encoder,com.google.zxing.aztec.encoder,Class AztecCode,public int getLayers(),
1413,aztec/encoder,com.google.zxing.aztec.encoder,Class AztecCode,public void setLayers(int layers),
1414,aztec/encoder,com.google.zxing.aztec.encoder,Class AztecCode,public int getCodeWords(),
1415,aztec/encoder,com.google.zxing.aztec.encoder,Class AztecCode,public void setCodeWords(int codeWords),
1416,aztec/encoder,com.google.zxing.aztec.encoder,Class AztecCode,public BitMatrix getMatrix(),
1417,zxing/aztec,com.google.zxing.aztec,Class AztecDetectorResult,public int getNbLayers(),
1418,zxing/aztec,com.google.zxing.aztec,Class AztecDetectorResult,public int getNbDatablocks(),
1419,zxing/aztec,com.google.zxing.aztec,Class AztecReader,"public Result decode(BinaryBitmap image) throws NotFoundException, FormatException",Locates and decodes a Data Matrix code in an image.
1420,zxing/aztec,com.google.zxing.aztec,Class AztecReader,"public Result decode(BinaryBitmap image, Map<DecodeHintType,?> hints) throws NotFoundException, FormatException",Description copied from interface: Reader
1421,zxing/aztec,com.google.zxing.aztec,Class AztecWriter,"public BitMatrix encode(String contents, BarcodeFormat format, int width, int height)",Description copied from interface: Writer
1422,google/zxing,com.google.zxing,Enum BarcodeFormat,public static final BarcodeFormat AZTEC,Aztec 2D barcode format.
1423,google/zxing,com.google.zxing,Enum BarcodeFormat,public static final BarcodeFormat CODABAR,CODABAR 1D format.
1424,google/zxing,com.google.zxing,Enum BarcodeFormat,public static final BarcodeFormat CODE_39,Code 39 1D format.
1425,google/zxing,com.google.zxing,Enum BarcodeFormat,public static final BarcodeFormat CODE_93,Code 93 1D format.
1426,google/zxing,com.google.zxing,Enum BarcodeFormat,public static final BarcodeFormat CODE_128,Code 128 1D format.
1427,google/zxing,com.google.zxing,Enum BarcodeFormat,public static final BarcodeFormat DATA_MATRIX,Data Matrix 2D barcode format.
1428,google/zxing,com.google.zxing,Enum BarcodeFormat,public static final BarcodeFormat EAN_8,EAN-8 1D format.
1429,google/zxing,com.google.zxing,Enum BarcodeFormat,public static final BarcodeFormat EAN_13,EAN-13 1D format.
1430,google/zxing,com.google.zxing,Enum BarcodeFormat,public static final BarcodeFormat ITF,ITF (Interleaved Two of Five) 1D format.
1431,google/zxing,com.google.zxing,Enum BarcodeFormat,public static final BarcodeFormat MAXICODE,MaxiCode 2D barcode format.
1432,google/zxing,com.google.zxing,Enum BarcodeFormat,public static final BarcodeFormat PDF_417,PDF417 format.
1433,google/zxing,com.google.zxing,Enum BarcodeFormat,public static final BarcodeFormat QR_CODE,QR Code 2D barcode format.
1434,google/zxing,com.google.zxing,Enum BarcodeFormat,public static final BarcodeFormat RSS_14,RSS 14
1435,google/zxing,com.google.zxing,Enum BarcodeFormat,public static final BarcodeFormat RSS_EXPANDED,RSS EXPANDED
1436,google/zxing,com.google.zxing,Enum BarcodeFormat,public static final BarcodeFormat UPC_A,UPC-A 1D format.
1437,google/zxing,com.google.zxing,Enum BarcodeFormat,public static final BarcodeFormat UPC_E,UPC-E 1D format.
1438,google/zxing,com.google.zxing,Enum BarcodeFormat,public static BarcodeFormat[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (BarcodeFormat c : BarcodeFormat.values())  System.out.println(c);"
1439,pdf417/encoder,com.google.zxing.pdf417.encoder,Class BarcodeMatrix,public byte[][] getMatrix(),
1440,google/zxing,com.google.zxing,Class Binarizer,public final LuminanceSource getLuminanceSource(),
1441,google/zxing,com.google.zxing,Class Binarizer,"public abstract BitArray getBlackRow(int y, BitArray row) throws NotFoundException","Converts one row of luminance data to 1 bit data. May actually do the conversion, or return cached data. Callers should assume this method is expensive and call it as seldom as possible. This method is intended for decoding 1D barcodes and may choose to apply sharpening. For callers which only examine one row of pixels at a time, the same BitArray should be reused and passed in with each call for performance. However it is legal to keep more than one row at a time if needed."
1442,google/zxing,com.google.zxing,Class Binarizer,public abstract BitMatrix getBlackMatrix() throws NotFoundException,"Converts a 2D array of luminance data to 1 bit data. As above, assume this method is expensive and do not call it repeatedly. This method is intended for decoding 2D barcodes and may or may not apply sharpening. Therefore, a row from this matrix may not be identical to one fetched using getBlackRow(), so don't mix and match between them."
1443,google/zxing,com.google.zxing,Class Binarizer,public abstract Binarizer createBinarizer(LuminanceSource source),"Creates a new object with the same type as this Binarizer implementation, but with pristine state. This is needed because Binarizer implementations may be stateful, e.g. keeping a cache of 1 bit data. See Effective Java for why we can't use Java's clone() method."
1444,google/zxing,com.google.zxing,Class Binarizer,public final int getWidth(),
1445,google/zxing,com.google.zxing,Class BinaryBitmap,public int getWidth(),
1446,google/zxing,com.google.zxing,Class BinaryBitmap,public int getHeight(),
1447,google/zxing,com.google.zxing,Class BinaryBitmap,"public BitArray getBlackRow(int y, BitArray row) throws NotFoundException","Converts one row of luminance data to 1 bit data. May actually do the conversion, or return cached data. Callers should assume this method is expensive and call it as seldom as possible. This method is intended for decoding 1D barcodes and may choose to apply sharpening."
1448,google/zxing,com.google.zxing,Class BinaryBitmap,public BitMatrix getBlackMatrix() throws NotFoundException,"Converts a 2D array of luminance data to 1 bit. As above, assume this method is expensive and do not call it repeatedly. This method is intended for decoding 2D barcodes and may or may not apply sharpening. Therefore, a row from this matrix may not be identical to one fetched using getBlackRow(), so don't mix and match between them."
1449,google/zxing,com.google.zxing,Class BinaryBitmap,public boolean isCropSupported(),
1450,google/zxing,com.google.zxing,Class BinaryBitmap,"public BinaryBitmap crop(int left, int top, int width, int height)",Returns a new object with cropped image data. Implementations may keep a reference to the original data rather than a copy. Only callable if isCropSupported() is true.
1451,google/zxing,com.google.zxing,Class BinaryBitmap,public boolean isRotateSupported(),
1452,google/zxing,com.google.zxing,Class BinaryBitmap,public BinaryBitmap rotateCounterClockwise(),Returns a new object with rotated image data by 90 degrees counterclockwise. Only callable if isRotateSupported() is true.
1453,google/zxing,com.google.zxing,Class BinaryBitmap,public BinaryBitmap rotateCounterClockwise45(),Returns a new object with rotated image data by 45 degrees counterclockwise. Only callable if isRotateSupported() is true.
1454,zxing/common,com.google.zxing.common,Class BitArray,public BitArray(),
1455,zxing/common,com.google.zxing.common,Class BitArray,public int getSize(),
1456,zxing/common,com.google.zxing.common,Class BitArray,public int getSizeInBytes(),
1457,zxing/common,com.google.zxing.common,Class BitArray,public boolean get(int i),
1458,zxing/common,com.google.zxing.common,Class BitArray,public void set(int i),Sets bit i.
1459,zxing/common,com.google.zxing.common,Class BitArray,public void flip(int i),Flips bit i.
1460,zxing/common,com.google.zxing.common,Class BitArray,public int getNextSet(int from),
1461,zxing/common,com.google.zxing.common,Class BitArray,public int getNextUnset(int from),
1462,zxing/common,com.google.zxing.common,Class BitArray,"public void setBulk(int i, int newBits)","Sets a block of 32 bits, starting at bit i."
1463,zxing/common,com.google.zxing.common,Class BitArray,"public void setRange(int start, int end)",Sets a range of bits.
1464,zxing/common,com.google.zxing.common,Class BitArray,public void clear(),Clears all bits (sets to false).
1465,zxing/common,com.google.zxing.common,Class BitArray,"public boolean isRange(int start, int end, boolean value)","Efficient method to check if a range of bits is set, or not set."
1466,zxing/common,com.google.zxing.common,Class BitArray,public void appendBit(boolean bit),
1467,zxing/common,com.google.zxing.common,Class BitArray,"public void appendBits(int value, int numBits)","Appends the least-significant bits, from value, in order from most-significant to least-significant. For example, appending 6 bits from 0x000001E will append the bits 0, 1, 1, 1, 1, 0 in that order."
1468,zxing/common,com.google.zxing.common,Class BitArray,public void appendBitArray(BitArray other),
1469,zxing/common,com.google.zxing.common,Class BitArray,public void xor(BitArray other),
1470,zxing/common,com.google.zxing.common,Class BitArray,"public void toBytes(int bitOffset, byte[] array, int offset, int numBytes)",
1471,zxing/common,com.google.zxing.common,Class BitArray,public int[] getBitArray(),
1472,zxing/common,com.google.zxing.common,Class BitArray,public void reverse(),Reverses all bits in the array.
1473,zxing/common,com.google.zxing.common,Class BitArray,public boolean equals(Object o),
1474,zxing/common,com.google.zxing.common,Class BitArray,public int hashCode(),
1475,zxing/common,com.google.zxing.common,Class BitArray,public String toString(),
1476,zxing/common,com.google.zxing.common,Class BitMatrix,public BitMatrix(int dimension),Creates an empty square BitMatrix.
1477,zxing/common,com.google.zxing.common,Class BitMatrix,public static BitMatrix parse(boolean[][] image),"Interprets a 2D array of booleans as a BitMatrix, where true means an on bit."
1478,zxing/common,com.google.zxing.common,Class BitMatrix,"public static BitMatrix parse(String stringRepresentation, String setString, String unsetString)",
1479,zxing/common,com.google.zxing.common,Class BitMatrix,"public boolean get(int x, int y)","Gets the requested bit, where true means black."
1480,zxing/common,com.google.zxing.common,Class BitMatrix,"public void set(int x, int y)",Sets the given bit to true.
1481,zxing/common,com.google.zxing.common,Class BitMatrix,"public void unset(int x, int y)",
1482,zxing/common,com.google.zxing.common,Class BitMatrix,"public void flip(int x, int y)",Flips the given bit.
1483,zxing/common,com.google.zxing.common,Class BitMatrix,public void xor(BitMatrix mask),Exclusive-or (XOR): Flip the bit in this BitMatrix if the corresponding mask bit is set.
1484,zxing/common,com.google.zxing.common,Class BitMatrix,public void clear(),Clears all bits (sets to false).
1485,zxing/common,com.google.zxing.common,Class BitMatrix,"public void setRegion(int left, int top, int width, int height)",Sets a square region of the bit matrix to true.
1486,zxing/common,com.google.zxing.common,Class BitMatrix,"public BitArray getRow(int y, BitArray row)",A fast method to retrieve one row of data from the matrix as a BitArray.
1487,zxing/common,com.google.zxing.common,Class BitMatrix,"public void setRow(int y, BitArray row)",
1488,zxing/common,com.google.zxing.common,Class BitMatrix,public void rotate180(),Modifies this BitMatrix to represent the same but rotated 180 degrees
1489,zxing/common,com.google.zxing.common,Class BitMatrix,public int[] getEnclosingRectangle(),This is useful in detecting the enclosing rectangle of a 'pure' barcode.
1490,zxing/common,com.google.zxing.common,Class BitMatrix,public int[] getTopLeftOnBit(),This is useful in detecting a corner of a 'pure' barcode.
1491,zxing/common,com.google.zxing.common,Class BitMatrix,public int[] getBottomRightOnBit(),
1492,zxing/common,com.google.zxing.common,Class BitMatrix,public int getWidth(),
1493,zxing/common,com.google.zxing.common,Class BitMatrix,public int getHeight(),
1494,zxing/common,com.google.zxing.common,Class BitMatrix,public int getRowSize(),
1495,zxing/common,com.google.zxing.common,Class BitMatrix,public boolean equals(Object o),
1496,zxing/common,com.google.zxing.common,Class BitMatrix,public int hashCode(),
1497,zxing/common,com.google.zxing.common,Class BitMatrix,public String toString(),
1498,zxing/common,com.google.zxing.common,Class BitMatrix,"public String toString(String setString, String unsetString)",
1499,zxing/common,com.google.zxing.common,Class BitMatrix,"@Deprecatedpublic String toString(String setString, String unsetString, String lineSeparator)","Deprecated. call toString(String,String) only, which uses \n line separator always"
1500,zxing/common,com.google.zxing.common,Class BitSource,public int getBitOffset(),
1501,zxing/common,com.google.zxing.common,Class BitSource,public int getByteOffset(),
1502,zxing/common,com.google.zxing.common,Class BitSource,public int readBits(int numBits),
1503,client/j2se,com.google.zxing.client.j2se,Class BufferedImageLuminanceSource,public BufferedImageLuminanceSource(BufferedImage image),
1504,client/j2se,com.google.zxing.client.j2se,Class BufferedImageLuminanceSource,"public byte[] getRow(int y, byte[] row)",Description copied from class: LuminanceSource
1505,client/j2se,com.google.zxing.client.j2se,Class BufferedImageLuminanceSource,public byte[] getMatrix(),Description copied from class: LuminanceSource
1506,client/j2se,com.google.zxing.client.j2se,Class BufferedImageLuminanceSource,public boolean isCropSupported(),
1507,client/j2se,com.google.zxing.client.j2se,Class BufferedImageLuminanceSource,"public LuminanceSource crop(int left, int top, int width, int height)",Description copied from class: LuminanceSource
1508,client/j2se,com.google.zxing.client.j2se,Class BufferedImageLuminanceSource,public boolean isRotateSupported(),"This is always true, since the image is a gray-scale image."
1509,client/j2se,com.google.zxing.client.j2se,Class BufferedImageLuminanceSource,public LuminanceSource rotateCounterClockwise(),Description copied from class: LuminanceSource
1510,zxing/multi,com.google.zxing.multi,Class ByQuadrantReader,"public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException",Description copied from interface: Reader
1511,zxing/multi,com.google.zxing.multi,Class ByQuadrantReader,"public Result decode(BinaryBitmap image, Map<DecodeHintType,?> hints) throws NotFoundException, ChecksumException, FormatException",Description copied from interface: Reader
1512,qrcode/encoder,com.google.zxing.qrcode.encoder,Class ByteMatrix,public int getHeight(),
1513,qrcode/encoder,com.google.zxing.qrcode.encoder,Class ByteMatrix,public int getWidth(),
1514,qrcode/encoder,com.google.zxing.qrcode.encoder,Class ByteMatrix,"public byte get(int x, int y)",
1515,qrcode/encoder,com.google.zxing.qrcode.encoder,Class ByteMatrix,public byte[][] getArray(),
1516,qrcode/encoder,com.google.zxing.qrcode.encoder,Class ByteMatrix,"public void set(int x, int y, byte value)",
1517,qrcode/encoder,com.google.zxing.qrcode.encoder,Class ByteMatrix,"public void set(int x, int y, int value)",
1518,qrcode/encoder,com.google.zxing.qrcode.encoder,Class ByteMatrix,"public void set(int x, int y, boolean value)",
1519,qrcode/encoder,com.google.zxing.qrcode.encoder,Class ByteMatrix,public void clear(byte value),
1520,client/result,com.google.zxing.client.result,Class CalendarParsedResult,public String getSummary(),
1521,client/result,com.google.zxing.client.result,Class CalendarParsedResult,@Deprecatedpublic Date getStart(),Deprecated. use getStartTimestamp()
1522,client/result,com.google.zxing.client.result,Class CalendarParsedResult,public long getStartTimestamp(),
1523,client/result,com.google.zxing.client.result,Class CalendarParsedResult,public boolean isStartAllDay(),
1524,client/result,com.google.zxing.client.result,Class CalendarParsedResult,@Deprecatedpublic Date getEnd(),Deprecated. use getEndTimestamp()
1525,client/result,com.google.zxing.client.result,Class CalendarParsedResult,public long getEndTimestamp(),
1526,client/result,com.google.zxing.client.result,Class CalendarParsedResult,public boolean isEndAllDay(),
1527,client/result,com.google.zxing.client.result,Class CalendarParsedResult,public String getLocation(),
1528,client/result,com.google.zxing.client.result,Class CalendarParsedResult,public String getOrganizer(),
1529,client/result,com.google.zxing.client.result,Class CalendarParsedResult,public String[] getAttendees(),
1530,client/result,com.google.zxing.client.result,Class CalendarParsedResult,public String getDescription(),
1531,client/result,com.google.zxing.client.result,Class CalendarParsedResult,public double getLatitude(),
1532,client/result,com.google.zxing.client.result,Class CalendarParsedResult,public double getLongitude(),
1533,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public static final CharacterSetECI Cp437,
1534,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public static final CharacterSetECI ISO8859_1,
1535,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public static final CharacterSetECI ISO8859_2,
1536,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public static final CharacterSetECI ISO8859_3,
1537,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public static final CharacterSetECI ISO8859_4,
1538,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public static final CharacterSetECI ISO8859_5,
1539,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public static final CharacterSetECI ISO8859_6,
1540,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public static final CharacterSetECI ISO8859_7,
1541,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public static final CharacterSetECI ISO8859_8,
1542,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public static final CharacterSetECI ISO8859_9,
1543,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public static final CharacterSetECI ISO8859_10,
1544,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public static final CharacterSetECI ISO8859_11,
1545,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public static final CharacterSetECI ISO8859_13,
1546,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public static final CharacterSetECI ISO8859_14,
1547,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public static final CharacterSetECI ISO8859_15,
1548,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public static final CharacterSetECI ISO8859_16,
1549,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public static final CharacterSetECI SJIS,
1550,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public static final CharacterSetECI Cp1250,
1551,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public static final CharacterSetECI Cp1251,
1552,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public static final CharacterSetECI Cp1252,
1553,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public static final CharacterSetECI Cp1256,
1554,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public static final CharacterSetECI UnicodeBigUnmarked,
1555,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public static final CharacterSetECI UTF8,
1556,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public static final CharacterSetECI ASCII,
1557,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public static final CharacterSetECI Big5,
1558,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public static final CharacterSetECI GB18030,
1559,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public static CharacterSetECI[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (CharacterSetECI c : CharacterSetECI.values())  System.out.println(c);"
1560,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public static CharacterSetECI valueOf(String name),Returns the enum constant of this type with the specified name.The string must match exactly an identifier used to declare anenum constant in this type. (Extraneous whitespace characters are not permitted.)
1561,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public int getValue(),
1562,zxing/common,com.google.zxing.common,Enum CharacterSetECI,public static CharacterSetECI getCharacterSetECIByValue(int value) throws FormatException,
1563,zxing/web,com.google.zxing.web,Class ChartServlet,"protected void doGet(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws IOException",
1564,google/zxing,com.google.zxing,Class ChecksumException,public static ChecksumException getChecksumInstance(),
1565,zxing/oned,com.google.zxing.oned,Class CodaBarWriter,protected Collection<BarcodeFormat> getSupportedWriteFormats(),
1566,zxing/oned,com.google.zxing.oned,Class Code128Writer,protected Collection<BarcodeFormat> getSupportedWriteFormats(),
1567,zxing/oned,com.google.zxing.oned,Class Code39Reader,public Code39Reader(),"Creates a reader that assumes all encoded data is data, and does not treat the final character as a check digit. It will not decoded extended Code 39 sequences."
1568,zxing/oned,com.google.zxing.oned,Class Code39Reader,public Code39Reader(boolean usingCheckDigit),Creates a reader that can be configured to check the last character as a check digit. It will not decoded extended Code 39 sequences.
1569,zxing/oned,com.google.zxing.oned,Class Code39Writer,protected Collection<BarcodeFormat> getSupportedWriteFormats(),
1570,zxing/oned,com.google.zxing.oned,Class Code93Writer,protected Collection<BarcodeFormat> getSupportedWriteFormats(),
1571,zxing/oned,com.google.zxing.oned,Class Code93Writer,public boolean[] encode(String contents),Description copied from class: OneDimensionalCodeWriter
1572,pdf417/encoder,com.google.zxing.pdf417.encoder,Enum Compaction,public static final Compaction AUTO,
1573,pdf417/encoder,com.google.zxing.pdf417.encoder,Enum Compaction,public static final Compaction TEXT,
1574,pdf417/encoder,com.google.zxing.pdf417.encoder,Enum Compaction,public static final Compaction BYTE,
1575,pdf417/encoder,com.google.zxing.pdf417.encoder,Enum Compaction,public static Compaction[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (Compaction c : Compaction.values())  System.out.println(c);"
1576,oned/rss,com.google.zxing.oned.rss,Class DataCharacter,public final int getValue(),
1577,oned/rss,com.google.zxing.oned.rss,Class DataCharacter,public final int getChecksumPortion(),
1578,oned/rss,com.google.zxing.oned.rss,Class DataCharacter,public final String toString(),
1579,oned/rss,com.google.zxing.oned.rss,Class DataCharacter,public final boolean equals(Object o),
1580,zxing/datamatrix,com.google.zxing.datamatrix,Class DataMatrixReader,"public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException",Locates and decodes a Data Matrix code in an image.
1581,zxing/datamatrix,com.google.zxing.datamatrix,Class DataMatrixReader,"public Result decode(BinaryBitmap image, Map<DecodeHintType,?> hints) throws NotFoundException, ChecksumException, FormatException",Description copied from interface: Reader
1582,zxing/datamatrix,com.google.zxing.datamatrix,Class DataMatrixWriter,"public BitMatrix encode(String contents, BarcodeFormat format, int width, int height)",Description copied from interface: Writer
1583,google/zxing,com.google.zxing,Enum DecodeHintType,public static final DecodeHintType OTHER,"Unspecified, application-specific hint. Maps to an unspecified Object."
1584,google/zxing,com.google.zxing,Enum DecodeHintType,public static final DecodeHintType PURE_BARCODE,Image is a pure monochrome image of a barcode. Doesn't matter what it maps to; use Boolean.TRUE.
1585,google/zxing,com.google.zxing,Enum DecodeHintType,public static final DecodeHintType POSSIBLE_FORMATS,Image is known to be of one of a few possible formats. Maps to a List of BarcodeFormats.
1586,google/zxing,com.google.zxing,Enum DecodeHintType,public static final DecodeHintType TRY_HARDER,"Spend more time to try to find a barcode; optimize for accuracy, not speed. Doesn't matter what it maps to; use Boolean.TRUE."
1587,google/zxing,com.google.zxing,Enum DecodeHintType,public static final DecodeHintType CHARACTER_SET,"Specifies what character encoding to use when decoding, where applicable (type String)"
1588,google/zxing,com.google.zxing,Enum DecodeHintType,public static final DecodeHintType ALLOWED_LENGTHS,Allowed lengths of encoded data -- reject anything else. Maps to an int[].
1589,google/zxing,com.google.zxing,Enum DecodeHintType,public static final DecodeHintType ASSUME_CODE_39_CHECK_DIGIT,Assume Code 39 codes employ a check digit. Doesn't matter what it maps to; use Boolean.TRUE.
1590,google/zxing,com.google.zxing,Enum DecodeHintType,public static final DecodeHintType ASSUME_GS1,"Assume the barcode is being processed as a GS1 barcode, and modify behavior as needed. For example this affects FNC1 handling for Code 128 (aka GS1-128). Doesn't matter what it maps to; use Boolean.TRUE."
1591,google/zxing,com.google.zxing,Enum DecodeHintType,public static final DecodeHintType RETURN_CODABAR_START_END,"If true, return the start and end digits in a Codabar barcode instead of stripping them. They are alpha, whereas the rest are numeric. By default, they are stripped, but this causes them to not be. Doesn't matter what it maps to; use Boolean.TRUE."
1592,google/zxing,com.google.zxing,Enum DecodeHintType,public static final DecodeHintType NEED_RESULT_POINT_CALLBACK,The caller needs to be notified via callback when a possible ResultPoint is found. Maps to a ResultPointCallback.
1593,google/zxing,com.google.zxing,Enum DecodeHintType,public static DecodeHintType[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (DecodeHintType c : DecodeHintType.values())  System.out.println(c);"
1594,google/zxing,com.google.zxing,Enum DecodeHintType,public static DecodeHintType valueOf(String name),Returns the enum constant of this type with the specified name.The string must match exactly an identifier used to declare anenum constant in this type. (Extraneous whitespace characters are not permitted.)
1595,aztec/decoder,com.google.zxing.aztec.decoder,Class Decoder,public DecoderResult decode(AztecDetectorResult detectorResult) throws FormatException,
1596,datamatrix/decoder,com.google.zxing.datamatrix.decoder,Class Decoder,"public DecoderResult decode(boolean[][] image) throws FormatException, ChecksumException",Convenience method that can decode a Data Matrix Code represented as a 2D array of booleans. true is taken to mean a black module.
1597,maxicode/decoder,com.google.zxing.maxicode.decoder,Class Decoder,"public DecoderResult decode(BitMatrix bits) throws ChecksumException, FormatException",
1598,qrcode/decoder,com.google.zxing.qrcode.decoder,Class Decoder,"public DecoderResult decode(boolean[][] image) throws ChecksumException, FormatException",
1599,qrcode/decoder,com.google.zxing.qrcode.decoder,Class Decoder,"public DecoderResult decode(boolean[][] image, Map<DecodeHintType,?> hints) throws ChecksumException, FormatException",Convenience method that can decode a QR Code represented as a 2D array of booleans. true is taken to mean a black module.
1600,qrcode/decoder,com.google.zxing.qrcode.decoder,Class Decoder,"public DecoderResult decode(BitMatrix bits) throws ChecksumException, FormatException",
1601,zxing/common,com.google.zxing.common,Class DecoderResult,"public DecoderResult(byte[] rawBytes, String text, List<byte[]> byteSegments, String ecLevel)",
1602,zxing/common,com.google.zxing.common,Class DecoderResult,public byte[] getRawBytes(),
1603,zxing/common,com.google.zxing.common,Class DecoderResult,public int getNumBits(),
1604,zxing/common,com.google.zxing.common,Class DecoderResult,public void setNumBits(int numBits),
1605,zxing/common,com.google.zxing.common,Class DecoderResult,public String getText(),
1606,zxing/common,com.google.zxing.common,Class DecoderResult,public List<byte[]> getByteSegments(),
1607,zxing/common,com.google.zxing.common,Class DecoderResult,public String getECLevel(),
1608,zxing/common,com.google.zxing.common,Class DecoderResult,public Integer getErrorsCorrected(),
1609,zxing/common,com.google.zxing.common,Class DecoderResult,public void setErrorsCorrected(Integer errorsCorrected),
1610,zxing/common,com.google.zxing.common,Class DecoderResult,public Integer getErasures(),
1611,zxing/common,com.google.zxing.common,Class DecoderResult,public void setErasures(Integer erasures),
1612,zxing/common,com.google.zxing.common,Class DecoderResult,public Object getOther(),
1613,zxing/common,com.google.zxing.common,Class DecoderResult,public void setOther(Object other),
1614,zxing/common,com.google.zxing.common,Class DecoderResult,public boolean hasStructuredAppend(),
1615,zxing/common,com.google.zxing.common,Class DecoderResult,public int getStructuredAppendParity(),
1616,zxing/web,com.google.zxing.web,Class DecodeServlet,public void init(javax.servlet.ServletConfig servletConfig) throws javax.servlet.ServletException,
1617,zxing/web,com.google.zxing.web,Class DecodeServlet,public void destroy(),
1618,zxing/web,com.google.zxing.web,Class DecodeServlet,"protected void doGet(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws javax.servlet.ServletException, IOException",
1619,zxing/common,com.google.zxing.common,Class DefaultGridSampler,"public BitMatrix sampleGrid(BitMatrix image, int dimensionX, int dimensionY, float p1ToX, float p1ToY, float p2ToX, float p2ToY, float p3ToX, float p3ToY, float p4ToX, float p4ToY, float p1FromX, float p1FromY, float p2FromX, float p2FromY, float p3FromX, float p3FromY, float p4FromX, float p4FromY) throws NotFoundException",Description copied from class: GridSampler
1620,datamatrix/encoder,com.google.zxing.datamatrix.encoder,Class DefaultPlacement,"public final boolean getBit(int col, int row)",
1621,aztec/detector,com.google.zxing.aztec.detector,Class Detector,public AztecDetectorResult detect() throws NotFoundException,
1622,qrcode/detector,com.google.zxing.qrcode.detector,Class Detector,protected final BitMatrix getImage(),
1623,qrcode/detector,com.google.zxing.qrcode.detector,Class Detector,protected final ResultPointCallback getResultPointCallback(),
1624,qrcode/detector,com.google.zxing.qrcode.detector,Class Detector,"public DetectorResult detect() throws NotFoundException, FormatException",Detects a QR Code in an image.
1625,qrcode/detector,com.google.zxing.qrcode.detector,Class Detector,"public final DetectorResult detect(Map<DecodeHintType,?> hints) throws NotFoundException, FormatException",Detects a QR Code in an image.
1626,qrcode/detector,com.google.zxing.qrcode.detector,Class Detector,"protected final DetectorResult processFinderPatternInfo(FinderPatternInfo info) throws NotFoundException, FormatException",
1627,qrcode/detector,com.google.zxing.qrcode.detector,Class Detector,"protected final float calculateModuleSize(ResultPoint topLeft, ResultPoint topRight, ResultPoint bottomLeft)",Computes an average estimated module size based on estimated derived from the positions of the three finder patterns.
1628,zxing/common,com.google.zxing.common,Class DetectorResult,public final BitMatrix getBits(),
1629,google/zxing,com.google.zxing,Class Dimension,public int getWidth(),
1630,google/zxing,com.google.zxing,Class Dimension,public int getHeight(),
1631,google/zxing,com.google.zxing,Class Dimension,public boolean equals(Object other),
1632,google/zxing,com.google.zxing,Class Dimension,public int hashCode(),
1633,pdf417/encoder,com.google.zxing.pdf417.encoder,Class Dimensions,public int getMinCols(),
1634,pdf417/encoder,com.google.zxing.pdf417.encoder,Class Dimensions,public int getMaxCols(),
1635,pdf417/encoder,com.google.zxing.pdf417.encoder,Class Dimensions,public int getMinRows(),
1636,zxing/web,com.google.zxing.web,Class DoSFilter,public void init(javax.servlet.FilterConfig filterConfig),
1637,zxing/web,com.google.zxing.web,Class DoSFilter,"public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws IOException, javax.servlet.ServletException",
1638,zxing/oned,com.google.zxing.oned,Class EAN13Writer,protected Collection<BarcodeFormat> getSupportedWriteFormats(),
1639,zxing/oned,com.google.zxing.oned,Class EAN8Writer,protected Collection<BarcodeFormat> getSupportedWriteFormats(),
1640,client/result,com.google.zxing.client.result,Class EmailAddressParsedResult,@Deprecatedpublic String getEmailAddress(),Deprecated. use getTos()
1641,client/result,com.google.zxing.client.result,Class EmailAddressParsedResult,public String[] getTos(),
1642,client/result,com.google.zxing.client.result,Class EmailAddressParsedResult,public String[] getCCs(),
1643,client/result,com.google.zxing.client.result,Class EmailAddressParsedResult,public String[] getBCCs(),
1644,client/result,com.google.zxing.client.result,Class EmailAddressParsedResult,public String getSubject(),
1645,client/result,com.google.zxing.client.result,Class EmailAddressParsedResult,public String getBody(),
1646,client/result,com.google.zxing.client.result,Class EmailAddressParsedResult,@Deprecatedpublic String getMailtoURI(),Deprecated. without replacement
1647,google/zxing,com.google.zxing,Enum EncodeHintType,public static final EncodeHintType ERROR_CORRECTION,"Specifies what degree of error correction to use, for example in QR Codes. Type depends on the encoder. For example for QR codes it's type ErrorCorrectionLevel. For Aztec it is of type Integer, representing the minimal percentage of error correction words. For PDF417 it is of type Integer, valid values being 0 to 8. In all cases, it can also be a String representation of the desired value as well. Note: an Aztec symbol should have a minimum of 25% EC words."
1648,google/zxing,com.google.zxing,Enum EncodeHintType,public static final EncodeHintType CHARACTER_SET,Specifies what character encoding to use where applicable (type String)
1649,google/zxing,com.google.zxing,Enum EncodeHintType,public static final EncodeHintType DATA_MATRIX_SHAPE,Specifies the matrix shape for Data Matrix (type SymbolShapeHint)
1650,google/zxing,com.google.zxing,Enum EncodeHintType,@Deprecatedpublic static final EncodeHintType MIN_SIZE,"Deprecated. use width/height params in DataMatrixWriter.encode(String, BarcodeFormat, int, int)"
1651,google/zxing,com.google.zxing,Enum EncodeHintType,@Deprecatedpublic static final EncodeHintType MAX_SIZE,Deprecated. without replacement
1652,google/zxing,com.google.zxing,Enum EncodeHintType,public static final EncodeHintType MARGIN,"Specifies margin, in pixels, to use when generating the barcode. The meaning can vary by format; for example it controls margin before and after the barcode horizontally for most 1D formats. (Type Integer, or String representation of the integer value)."
1653,google/zxing,com.google.zxing,Enum EncodeHintType,public static final EncodeHintType PDF417_COMPACT,"Specifies whether to use compact mode for PDF417 (type Boolean, or true or false String value)."
1654,google/zxing,com.google.zxing,Enum EncodeHintType,public static final EncodeHintType PDF417_COMPACTION,Specifies what compaction mode to use for PDF417 (type Compaction or String value of one of its enum values).
1655,google/zxing,com.google.zxing,Enum EncodeHintType,public static final EncodeHintType PDF417_DIMENSIONS,Specifies the minimum and maximum number of rows and columns for PDF417 (type Dimensions).
1656,google/zxing,com.google.zxing,Enum EncodeHintType,public static final EncodeHintType AZTEC_LAYERS,"Specifies the required number of layers for an Aztec code. A negative number (-1, -2, -3, -4) specifies a compact Aztec code. 0 indicates to use the minimum number of layers (the default). A positive number (1, 2, .. 32) specifies a normal (non-compact) Aztec code. (Type Integer, or String representation of the integer value)."
1657,google/zxing,com.google.zxing,Enum EncodeHintType,public static final EncodeHintType QR_VERSION,"Specifies the exact version of QR code to be encoded. (Type Integer, or String representation of the integer value)."
1658,google/zxing,com.google.zxing,Enum EncodeHintType,public static final EncodeHintType QR_MASK_PATTERN,"Specifies the QR code mask pattern to be used. Allowed values are 0..QRCode.NUM_MASK_PATTERNS-1. By default the code will automatically select the optimal mask pattern. * (Type Integer, or String representation of the integer value)."
1659,google/zxing,com.google.zxing,Enum EncodeHintType,public static EncodeHintType[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (EncodeHintType c : EncodeHintType.values())  System.out.println(c);"
1660,aztec/encoder,com.google.zxing.aztec.encoder,Class Encoder,public static final int DEFAULT_EC_PERCENT,
1661,aztec/encoder,com.google.zxing.aztec.encoder,Class Encoder,public static AztecCode encode(byte[] data),Encodes the given binary content as an Aztec symbol
1662,qrcode/encoder,com.google.zxing.qrcode.encoder,Class Encoder,"public static QRCode encode(String content, ErrorCorrectionLevel ecLevel) throws WriterException",
1663,qrcode/encoder,com.google.zxing.qrcode.encoder,Class Encoder,"public static QRCode encode(String content, ErrorCorrectionLevel ecLevel, Map<EncodeHintType,?> hints) throws WriterException",
1664,qrcode/decoder,com.google.zxing.qrcode.decoder,Enum ErrorCorrectionLevel,public static final ErrorCorrectionLevel L,L = ~7% correction
1665,qrcode/decoder,com.google.zxing.qrcode.decoder,Enum ErrorCorrectionLevel,public static final ErrorCorrectionLevel M,M = ~15% correction
1666,qrcode/decoder,com.google.zxing.qrcode.decoder,Enum ErrorCorrectionLevel,public static final ErrorCorrectionLevel Q,Q = ~25% correction
1667,qrcode/decoder,com.google.zxing.qrcode.decoder,Enum ErrorCorrectionLevel,public static ErrorCorrectionLevel[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (ErrorCorrectionLevel c : ErrorCorrectionLevel.values())  System.out.println(c);"
1668,qrcode/decoder,com.google.zxing.qrcode.decoder,Enum ErrorCorrectionLevel,public static ErrorCorrectionLevel valueOf(String name),Returns the enum constant of this type with the specified name.The string must match exactly an identifier used to declare anenum constant in this type. (Extraneous whitespace characters are not permitted.)
1669,qrcode/decoder,com.google.zxing.qrcode.decoder,Enum ErrorCorrectionLevel,public int getBits(),
1670,client/result,com.google.zxing.client.result,Class ExpandedProductParsedResult,public static final String KILOGRAM,
1671,client/result,com.google.zxing.client.result,Class ExpandedProductParsedResult,public boolean equals(Object o),
1672,client/result,com.google.zxing.client.result,Class ExpandedProductParsedResult,public int hashCode(),
1673,client/result,com.google.zxing.client.result,Class ExpandedProductParsedResult,public String getRawText(),
1674,client/result,com.google.zxing.client.result,Class ExpandedProductParsedResult,public String getProductID(),
1675,client/result,com.google.zxing.client.result,Class ExpandedProductParsedResult,public String getSscc(),
1676,client/result,com.google.zxing.client.result,Class ExpandedProductParsedResult,public String getLotNumber(),
1677,client/result,com.google.zxing.client.result,Class ExpandedProductParsedResult,public String getProductionDate(),
1678,client/result,com.google.zxing.client.result,Class ExpandedProductParsedResult,public String getPackagingDate(),
1679,client/result,com.google.zxing.client.result,Class ExpandedProductParsedResult,public String getBestBeforeDate(),
1680,client/result,com.google.zxing.client.result,Class ExpandedProductParsedResult,public String getExpirationDate(),
1681,client/result,com.google.zxing.client.result,Class ExpandedProductParsedResult,public String getWeight(),
1682,client/result,com.google.zxing.client.result,Class ExpandedProductParsedResult,public String getWeightType(),
1683,client/result,com.google.zxing.client.result,Class ExpandedProductParsedResult,public String getWeightIncrement(),
1684,client/result,com.google.zxing.client.result,Class ExpandedProductParsedResult,public String getPrice(),
1685,client/result,com.google.zxing.client.result,Class ExpandedProductParsedResult,public String getPriceIncrement(),
1686,client/result,com.google.zxing.client.result,Class ExpandedProductParsedResult,public String getPriceCurrency(),
1687,client/result,com.google.zxing.client.result,Class ExpandedProductParsedResult,"public Map<String,String> getUncommonAIs()",
1688,oned/rss,com.google.zxing.oned.rss,Class FinderPattern,public int getValue(),
1689,oned/rss,com.google.zxing.oned.rss,Class FinderPattern,public int[] getStartEnd(),
1690,oned/rss,com.google.zxing.oned.rss,Class FinderPattern,public ResultPoint[] getResultPoints(),
1691,oned/rss,com.google.zxing.oned.rss,Class FinderPattern,public boolean equals(Object o),
1692,qrcode/detector,com.google.zxing.qrcode.detector,Class FinderPatternFinder,protected static final int MIN_SKIP,
1693,qrcode/detector,com.google.zxing.qrcode.detector,Class FinderPatternFinder,public FinderPatternFinder(BitMatrix image),Creates a finder that will search the image for three finder patterns.
1694,qrcode/detector,com.google.zxing.qrcode.detector,Class FinderPatternFinder,protected final BitMatrix getImage(),
1695,qrcode/detector,com.google.zxing.qrcode.detector,Class FinderPatternFinder,protected final List<FinderPattern> getPossibleCenters(),
1696,qrcode/detector,com.google.zxing.qrcode.detector,Class FinderPatternFinder,protected static boolean foundPatternCross(int[] stateCount),
1697,qrcode/detector,com.google.zxing.qrcode.detector,Class FinderPatternFinder,protected static boolean foundPatternDiagonal(int[] stateCount),
1698,qrcode/detector,com.google.zxing.qrcode.detector,Class FinderPatternFinder,@Deprecatedprotected final void clearCounts(int[] counts),Deprecated. 
1699,qrcode/detector,com.google.zxing.qrcode.detector,Class FinderPatternFinder,@Deprecatedprotected final void shiftCounts2(int[] stateCount),Deprecated. 
1700,qrcode/detector,com.google.zxing.qrcode.detector,Class FinderPatternFinder,protected static void doClearCounts(int[] counts),
1701,qrcode/detector,com.google.zxing.qrcode.detector,Class FinderPatternFinder,protected static void doShiftCounts2(int[] stateCount),
1702,qrcode/detector,com.google.zxing.qrcode.detector,Class FinderPatternFinder,"@Deprecatedprotected final boolean handlePossibleCenter(int[] stateCount, int i, int j, boolean pureBarcode)",Deprecated. only exists for backwards compatibility
1703,qrcode/detector,com.google.zxing.qrcode.detector,Class FinderPatternInfo,public FinderPattern getBottomLeft(),
1704,qrcode/detector,com.google.zxing.qrcode.detector,Class FinderPatternInfo,public FinderPattern getTopLeft(),
1705,google/zxing,com.google.zxing,Class FormatException,public static FormatException getFormatInstance(),
1706,common/reedsolomon,com.google.zxing.common.reedsolomon,Class GenericGF,public static final GenericGF AZTEC_DATA_12,
1707,common/reedsolomon,com.google.zxing.common.reedsolomon,Class GenericGF,public static final GenericGF AZTEC_DATA_10,
1708,common/reedsolomon,com.google.zxing.common.reedsolomon,Class GenericGF,public static final GenericGF AZTEC_DATA_6,
1709,common/reedsolomon,com.google.zxing.common.reedsolomon,Class GenericGF,public static final GenericGF AZTEC_PARAM,
1710,common/reedsolomon,com.google.zxing.common.reedsolomon,Class GenericGF,public static final GenericGF QR_CODE_FIELD_256,
1711,common/reedsolomon,com.google.zxing.common.reedsolomon,Class GenericGF,public static final GenericGF DATA_MATRIX_FIELD_256,
1712,common/reedsolomon,com.google.zxing.common.reedsolomon,Class GenericGF,public static final GenericGF AZTEC_DATA_8,
1713,common/reedsolomon,com.google.zxing.common.reedsolomon,Class GenericGF,public int getSize(),
1714,common/reedsolomon,com.google.zxing.common.reedsolomon,Class GenericGF,public int getGeneratorBase(),
1715,zxing/multi,com.google.zxing.multi,Class GenericMultipleBarcodeReader,public Result[] decodeMultiple(BinaryBitmap image) throws NotFoundException,
1716,client/result,com.google.zxing.client.result,Class GeoParsedResult,public String getGeoURI(),
1717,client/result,com.google.zxing.client.result,Class GeoParsedResult,public double getLatitude(),
1718,client/result,com.google.zxing.client.result,Class GeoParsedResult,public double getLongitude(),
1719,client/result,com.google.zxing.client.result,Class GeoParsedResult,public double getAltitude(),
1720,client/result,com.google.zxing.client.result,Class GeoParsedResult,public String getQuery(),
1721,zxing/common,com.google.zxing.common,Class GlobalHistogramBinarizer,"public BitArray getBlackRow(int y, BitArray row) throws NotFoundException",Description copied from class: Binarizer
1722,zxing/common,com.google.zxing.common,Class GlobalHistogramBinarizer,public BitMatrix getBlackMatrix() throws NotFoundException,Description copied from class: Binarizer
1723,zxing/common,com.google.zxing.common,Class GridSampler,public static void setGridSampler(GridSampler newGridSampler),"Sets the implementation of GridSampler used by the library. One global instance is stored, which may sound problematic. But, the implementation provided ought to be appropriate for the entire platform, and all uses of this library in the whole lifetime of the JVM. For instance, an Android activity can swap in an implementation that takes advantage of native platform libraries."
1724,zxing/common,com.google.zxing.common,Class GridSampler,public static GridSampler getInstance(),
1725,zxing/common,com.google.zxing.common,Class GridSampler,"public abstract BitMatrix sampleGrid(BitMatrix image, int dimensionX, int dimensionY, float p1ToX, float p1ToY, float p2ToX, float p2ToY, float p3ToX, float p3ToY, float p4ToX, float p4ToY, float p1FromX, float p1FromY, float p2FromX, float p2FromY, float p3FromX, float p3FromY, float p4FromX, float p4FromY) throws NotFoundException","Samples an image for a rectangular matrix of bits of the given dimension. The sampling transformation is determined by the coordinates of 4 points, in the original and transformed image space."
1726,zxing/common,com.google.zxing.common,Class GridSampler,"public abstract BitMatrix sampleGrid(BitMatrix image, int dimensionX, int dimensionY, PerspectiveTransform transform) throws NotFoundException",
1727,datamatrix/encoder,com.google.zxing.datamatrix.encoder,Class HighLevelEncoder,public static String encodeHighLevel(String msg),Performs message encoding of a DataMatrix message using the algorithm described in annex P of ISO/IEC 16022:2000(E).
1728,datamatrix/encoder,com.google.zxing.datamatrix.encoder,Class HighLevelEncoder,"public static String encodeHighLevel(String msg, SymbolShapeHint shape, Dimension minSize, Dimension maxSize)",Performs message encoding of a DataMatrix message using the algorithm described in annex P of ISO/IEC 16022:2000(E).
1729,zxing/web,com.google.zxing.web,Class HTTPSFilter,"public void doFilter(javax.servlet.ServletRequest servletRequest, javax.servlet.ServletResponse servletResponse, javax.servlet.FilterChain chain) throws IOException, javax.servlet.ServletException",
1730,zxing/web,com.google.zxing.web,Class HTTPSFilter,public final void init(javax.servlet.FilterConfig filterConfig),
1731,zxing/common,com.google.zxing.common,Class HybridBinarizer,public BitMatrix getBlackMatrix() throws NotFoundException,"Calculates the final BitMatrix once for all requests. This could be called once from the constructor instead, but there are some advantages to doing it lazily, such as making profiling easier, and not doing heavy lifting when callers don't expect it."
1732,client/j2se,com.google.zxing.client.j2se,Class ImageReader,public static BufferedImage readImage(URI uri) throws IOException,
1733,google/zxing,com.google.zxing,Class InvertedLuminanceSource,"public byte[] getRow(int y, byte[] row)",Description copied from class: LuminanceSource
1734,google/zxing,com.google.zxing,Class InvertedLuminanceSource,public byte[] getMatrix(),Description copied from class: LuminanceSource
1735,google/zxing,com.google.zxing,Class InvertedLuminanceSource,public boolean isCropSupported(),
1736,google/zxing,com.google.zxing,Class InvertedLuminanceSource,"public LuminanceSource crop(int left, int top, int width, int height)",Description copied from class: LuminanceSource
1737,google/zxing,com.google.zxing,Class InvertedLuminanceSource,public boolean isRotateSupported(),
1738,google/zxing,com.google.zxing,Class InvertedLuminanceSource,public LuminanceSource invert(),
1739,google/zxing,com.google.zxing,Class InvertedLuminanceSource,public LuminanceSource rotateCounterClockwise(),Description copied from class: LuminanceSource
1740,client/result,com.google.zxing.client.result,Class ISBNParsedResult,public String getISBN(),
1741,zxing/oned,com.google.zxing.oned,Class ITFWriter,protected Collection<BarcodeFormat> getSupportedWriteFormats(),
1742,google/zxing,com.google.zxing,Class LuminanceSource,"public abstract byte[] getRow(int y, byte[] row)","Fetches one row of luminance data from the underlying platform's bitmap. Values range from 0 (black) to 255 (white). Because Java does not have an unsigned byte type, callers will have to bitwise and with 0xff for each value. It is preferable for implementations of this method to only fetch this row rather than the whole image, since no 2D Readers may be installed and getMatrix() may never be called."
1743,google/zxing,com.google.zxing,Class LuminanceSource,public abstract byte[] getMatrix(),Fetches luminance data for the underlying bitmap. Values should be fetched using: int luminance = array[y * width + x] & 0xff
1744,google/zxing,com.google.zxing,Class LuminanceSource,public final int getWidth(),
1745,google/zxing,com.google.zxing,Class LuminanceSource,public final int getHeight(),
1746,google/zxing,com.google.zxing,Class LuminanceSource,public boolean isCropSupported(),
1747,google/zxing,com.google.zxing,Class LuminanceSource,"public LuminanceSource crop(int left, int top, int width, int height)",Returns a new object with cropped image data. Implementations may keep a reference to the original data rather than a copy. Only callable if isCropSupported() is true.
1748,google/zxing,com.google.zxing,Class LuminanceSource,public boolean isRotateSupported(),
1749,google/zxing,com.google.zxing,Class LuminanceSource,public LuminanceSource invert(),
1750,google/zxing,com.google.zxing,Class LuminanceSource,public LuminanceSource rotateCounterClockwise(),Returns a new object with rotated image data by 90 degrees counterclockwise. Only callable if isRotateSupported() is true.
1751,google/zxing,com.google.zxing,Class LuminanceSource,public LuminanceSource rotateCounterClockwise45(),Returns a new object with rotated image data by 45 degrees counterclockwise. Only callable if isRotateSupported() is true.
1752,common/detector,com.google.zxing.common.detector,Class MathUtils,public static int round(float d),"Ends up being a bit faster than Math.round(float). This merely rounds its argument to the nearest int, where x.5 rounds up to x+1. Semantics of this shortcut differ slightly from Math.round(float) in that half rounds down for negative values. -2.5 rounds to -3, not -2. For purposes here it makes no difference."
1753,common/detector,com.google.zxing.common.detector,Class MathUtils,"public static float distance(float aX, float aY, float bX, float bY)",
1754,common/detector,com.google.zxing.common.detector,Class MathUtils,"public static float distance(int aX, int aY, int bX, int bY)",
1755,client/j2se,com.google.zxing.client.j2se,Class MatrixToImageConfig,public static final int BLACK,
1756,client/j2se,com.google.zxing.client.j2se,Class MatrixToImageConfig,public MatrixToImageConfig(),"Creates a default config with on color BLACK and off color WHITE, generating normal black-on-white barcodes."
1757,client/j2se,com.google.zxing.client.j2se,Class MatrixToImageConfig,public int getPixelOnColor(),
1758,client/j2se,com.google.zxing.client.j2se,Class MatrixToImageWriter,public static BufferedImage toBufferedImage(BitMatrix matrix),"Renders a BitMatrix as an image, where false bits are rendered as white, and true bits are rendered as black. Uses default configuration."
1759,client/j2se,com.google.zxing.client.j2se,Class MatrixToImageWriter,"public static BufferedImage toBufferedImage(BitMatrix matrix, MatrixToImageConfig config)","As toBufferedImage(BitMatrix), but allows customization of the output."
1760,client/j2se,com.google.zxing.client.j2se,Class MatrixToImageWriter,"@Deprecatedpublic static void writeToFile(BitMatrix matrix, String format, File file) throws IOException","Deprecated. use writeToPath(BitMatrix, String, Path)"
1761,client/j2se,com.google.zxing.client.j2se,Class MatrixToImageWriter,"public static void writeToPath(BitMatrix matrix, String format, Path file) throws IOException",Writes a BitMatrix to a file with default configuration.
1762,client/j2se,com.google.zxing.client.j2se,Class MatrixToImageWriter,"@Deprecatedpublic static void writeToFile(BitMatrix matrix, String format, File file, MatrixToImageConfig config) throws IOException","Deprecated. use writeToPath(BitMatrix, String, Path, MatrixToImageConfig)"
1763,client/j2se,com.google.zxing.client.j2se,Class MatrixToImageWriter,"public static void writeToPath(BitMatrix matrix, String format, Path file, MatrixToImageConfig config) throws IOException","As writeToPath(BitMatrix, String, Path), but allows customization of the output."
1764,client/j2se,com.google.zxing.client.j2se,Class MatrixToImageWriter,"public static void writeToStream(BitMatrix matrix, String format, OutputStream stream) throws IOException",Writes a BitMatrix to a stream with default configuration.
1765,zxing/maxicode,com.google.zxing.maxicode,Class MaxiCodeReader,"public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException",Locates and decodes a MaxiCode in an image.
1766,zxing/maxicode,com.google.zxing.maxicode,Class MaxiCodeReader,"public Result decode(BinaryBitmap image, Map<DecodeHintType,?> hints) throws NotFoundException, ChecksumException, FormatException",Description copied from interface: Reader
1767,qrcode/decoder,com.google.zxing.qrcode.decoder,Enum Mode,public static final Mode TERMINATOR,
1768,qrcode/decoder,com.google.zxing.qrcode.decoder,Enum Mode,public static final Mode NUMERIC,
1769,qrcode/decoder,com.google.zxing.qrcode.decoder,Enum Mode,public static final Mode ALPHANUMERIC,
1770,qrcode/decoder,com.google.zxing.qrcode.decoder,Enum Mode,public static final Mode STRUCTURED_APPEND,
1771,qrcode/decoder,com.google.zxing.qrcode.decoder,Enum Mode,public static final Mode BYTE,
1772,qrcode/decoder,com.google.zxing.qrcode.decoder,Enum Mode,public static final Mode ECI,
1773,qrcode/decoder,com.google.zxing.qrcode.decoder,Enum Mode,public static final Mode KANJI,
1774,qrcode/decoder,com.google.zxing.qrcode.decoder,Enum Mode,public static final Mode FNC1_FIRST_POSITION,
1775,qrcode/decoder,com.google.zxing.qrcode.decoder,Enum Mode,public static final Mode FNC1_SECOND_POSITION,
1776,qrcode/decoder,com.google.zxing.qrcode.decoder,Enum Mode,public static Mode[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (Mode c : Mode.values())  System.out.println(c);"
1777,qrcode/decoder,com.google.zxing.qrcode.decoder,Enum Mode,public static Mode valueOf(String name),Returns the enum constant of this type with the specified name.The string must match exactly an identifier used to declare anenum constant in this type. (Extraneous whitespace characters are not permitted.)
1778,qrcode/decoder,com.google.zxing.qrcode.decoder,Enum Mode,public static Mode forBits(int bits),
1779,qrcode/decoder,com.google.zxing.qrcode.decoder,Enum Mode,public int getCharacterCountBits(Version version),
1780,zxing/oned,com.google.zxing.oned,Class MultiFormatOneDReader,"public Result decodeRow(int rowNumber, BitArray row, Map<DecodeHintType,?> hints) throws NotFoundException",Description copied from class: OneDReader
1781,google/zxing,com.google.zxing,Class MultiFormatReader,public Result decode(BinaryBitmap image) throws NotFoundException,"This version of decode honors the intent of Reader.decode(BinaryBitmap) in that it passes null as a hint to the decoders. However, that makes it inefficient to call repeatedly. Use setHints() followed by decodeWithState() for continuous scan applications."
1782,google/zxing,com.google.zxing,Class MultiFormatReader,"public Result decode(BinaryBitmap image, Map<DecodeHintType,?> hints) throws NotFoundException",Decode an image using the hints provided. Does not honor existing state.
1783,google/zxing,com.google.zxing,Class MultiFormatReader,public Result decodeWithState(BinaryBitmap image) throws NotFoundException,Decode an image using the state set up by calling setHints() previously. Continuous scan clients will get a large speed increase by using this instead of decode().
1784,google/zxing,com.google.zxing,Class MultiFormatReader,"public void setHints(Map<DecodeHintType,?> hints)","This method adds state to the MultiFormatReader. By setting the hints once, subsequent calls to decodeWithState(image) can reuse the same set of readers without reallocating memory. This is important for performance in continuous scan clients."
1785,zxing/oned,com.google.zxing.oned,Class MultiFormatUPCEANReader,"public Result decodeRow(int rowNumber, BitArray row, Map<DecodeHintType,?> hints) throws NotFoundException",Description copied from class: OneDReader
1786,google/zxing,com.google.zxing,Class MultiFormatWriter,"public BitMatrix encode(String contents, BarcodeFormat format, int width, int height) throws WriterException",Description copied from interface: Writer
1787,zxing/multi,com.google.zxing.multi,Interface MultipleBarcodeReader,Result[] decodeMultiple(BinaryBitmap image) throws NotFoundException,
1788,zxing/oned,com.google.zxing.oned,Class OneDimensionalCodeWriter,"public final BitMatrix encode(String contents, BarcodeFormat format, int width, int height)",Description copied from interface: Writer
1789,zxing/oned,com.google.zxing.oned,Class OneDimensionalCodeWriter,"public BitMatrix encode(String contents, BarcodeFormat format, int width, int height, Map<EncodeHintType,?> hints)","Encode the contents following specified format. width and height are required size. This method may return bigger size BitMatrix when specified size is too small. The user can set both width and height to zero to get minimum size barcode. If negative value is set to width or height, IllegalArgumentException is thrown."
1790,zxing/oned,com.google.zxing.oned,Class OneDimensionalCodeWriter,protected Collection<BarcodeFormat> getSupportedWriteFormats(),
1791,zxing/oned,com.google.zxing.oned,Class OneDimensionalCodeWriter,protected static void checkNumeric(String contents),
1792,zxing/oned,com.google.zxing.oned,Class OneDimensionalCodeWriter,"protected static int appendPattern(boolean[] target, int pos, int[] pattern, boolean startColor)",
1793,zxing/oned,com.google.zxing.oned,Class OneDimensionalCodeWriter,public int getDefaultMargin(),
1794,zxing/oned,com.google.zxing.oned,Class OneDReader,"public Result decode(BinaryBitmap image) throws NotFoundException, FormatException",Description copied from interface: Reader
1795,zxing/oned,com.google.zxing.oned,Class OneDReader,"public Result decode(BinaryBitmap image, Map<DecodeHintType,?> hints) throws NotFoundException, FormatException",Description copied from interface: Reader
1796,zxing/oned,com.google.zxing.oned,Class OneDReader,public void reset(),Description copied from interface: Reader
1797,zxing/oned,com.google.zxing.oned,Class OneDReader,"protected static void recordPattern(BitArray row, int start, int[] counters) throws NotFoundException","Records the size of successive runs of white and black pixels in a row, starting at a given point. The values are recorded in the given array, and the number of runs recorded is equal to the size of the array. If the row starts on a white pixel at the given start point, then the first count recorded is the run of white pixels starting from that point; likewise it is the count of a run of black pixels if the row begin on a black pixels at that point."
1798,zxing/oned,com.google.zxing.oned,Class OneDReader,"protected static void recordPatternInReverse(BitArray row, int start, int[] counters) throws NotFoundException",
1799,zxing/oned,com.google.zxing.oned,Class OneDReader,"protected static float patternMatchVariance(int[] counters, int[] pattern, float maxIndividualVariance)","Determines how closely a set of observed counts of runs of black/white values matches a given target pattern. This is reported as the ratio of the total variance from the expected pattern proportions across all pattern elements, to the length of the pattern."
1800,client/result,com.google.zxing.client.result,Class ParsedResult,public final ParsedResultType getType(),
1801,client/result,com.google.zxing.client.result,Class ParsedResult,public abstract String getDisplayResult(),
1802,client/result,com.google.zxing.client.result,Class ParsedResult,public final String toString(),
1803,client/result,com.google.zxing.client.result,Class ParsedResult,"public static void maybeAppend(String value, StringBuilder result)",
1804,client/result,com.google.zxing.client.result,Enum ParsedResultType,public static final ParsedResultType ADDRESSBOOK,
1805,client/result,com.google.zxing.client.result,Enum ParsedResultType,public static final ParsedResultType EMAIL_ADDRESS,
1806,client/result,com.google.zxing.client.result,Enum ParsedResultType,public static final ParsedResultType PRODUCT,
1807,client/result,com.google.zxing.client.result,Enum ParsedResultType,public static final ParsedResultType URI,
1808,client/result,com.google.zxing.client.result,Enum ParsedResultType,public static final ParsedResultType TEXT,
1809,client/result,com.google.zxing.client.result,Enum ParsedResultType,public static final ParsedResultType GEO,
1810,client/result,com.google.zxing.client.result,Enum ParsedResultType,public static final ParsedResultType TEL,
1811,client/result,com.google.zxing.client.result,Enum ParsedResultType,public static final ParsedResultType SMS,
1812,client/result,com.google.zxing.client.result,Enum ParsedResultType,public static final ParsedResultType CALENDAR,
1813,client/result,com.google.zxing.client.result,Enum ParsedResultType,public static final ParsedResultType WIFI,
1814,client/result,com.google.zxing.client.result,Enum ParsedResultType,public static final ParsedResultType ISBN,
1815,client/result,com.google.zxing.client.result,Enum ParsedResultType,public static ParsedResultType[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (ParsedResultType c : ParsedResultType.values())  System.out.println(c);"
1816,pdf417/encoder,com.google.zxing.pdf417.encoder,Class PDF417,public PDF417(),
1817,pdf417/encoder,com.google.zxing.pdf417.encoder,Class PDF417,public BarcodeMatrix getBarcodeMatrix(),
1818,pdf417/encoder,com.google.zxing.pdf417.encoder,Class PDF417,"public void generateBarcodeLogic(String msg, int errorCorrectionLevel) throws WriterException",
1819,pdf417/encoder,com.google.zxing.pdf417.encoder,Class PDF417,"public void setDimensions(int maxCols, int minCols, int maxRows, int minRows)",Sets max/min row/col values
1820,pdf417/encoder,com.google.zxing.pdf417.encoder,Class PDF417,public void setCompaction(Compaction compaction),
1821,pdf417/encoder,com.google.zxing.pdf417.encoder,Class PDF417,public void setCompact(boolean compact),
1822,zxing/pdf417,com.google.zxing.pdf417,Class PDF417Common,public static final int NUMBER_OF_CODEWORDS,
1823,zxing/pdf417,com.google.zxing.pdf417,Class PDF417Common,public static final int MAX_CODEWORDS_IN_BARCODE,
1824,zxing/pdf417,com.google.zxing.pdf417,Class PDF417Common,public static final int MIN_ROWS_IN_BARCODE,
1825,zxing/pdf417,com.google.zxing.pdf417,Class PDF417Common,public static final int MAX_ROWS_IN_BARCODE,
1826,zxing/pdf417,com.google.zxing.pdf417,Class PDF417Common,public static final int MODULES_IN_CODEWORD,
1827,zxing/pdf417,com.google.zxing.pdf417,Class PDF417Common,public static final int MODULES_IN_STOP_PATTERN,
1828,zxing/pdf417,com.google.zxing.pdf417,Class PDF417Common,public static final int BARS_IN_MODULE,
1829,zxing/pdf417,com.google.zxing.pdf417,Class PDF417Common,@Deprecatedpublic static int getBitCountSum(int[] moduleBitCount),Deprecated. call MathUtils.sum(int[])
1830,zxing/pdf417,com.google.zxing.pdf417,Class PDF417Common,public static int[] toIntArray(Collection<Integer> list),
1831,pdf417/detector,com.google.zxing.pdf417.detector,Class PDF417DetectorResult,public BitMatrix getBits(),
1832,zxing/pdf417,com.google.zxing.pdf417,Class PDF417Reader,"public Result decode(BinaryBitmap image) throws NotFoundException, FormatException, ChecksumException",Locates and decodes a PDF417 code in an image.
1833,zxing/pdf417,com.google.zxing.pdf417,Class PDF417Reader,"public Result decode(BinaryBitmap image, Map<DecodeHintType,?> hints) throws NotFoundException, FormatException, ChecksumException",Description copied from interface: Reader
1834,zxing/pdf417,com.google.zxing.pdf417,Class PDF417Reader,public Result[] decodeMultiple(BinaryBitmap image) throws NotFoundException,
1835,zxing/pdf417,com.google.zxing.pdf417,Class PDF417Reader,"public Result[] decodeMultiple(BinaryBitmap image, Map<DecodeHintType,?> hints) throws NotFoundException",
1836,zxing/pdf417,com.google.zxing.pdf417,Class PDF417ResultMetadata,public int getSegmentIndex(),The Segment ID represents the segment of the whole file distributed over different symbols.
1837,zxing/pdf417,com.google.zxing.pdf417,Class PDF417ResultMetadata,public void setSegmentIndex(int segmentIndex),
1838,zxing/pdf417,com.google.zxing.pdf417,Class PDF417ResultMetadata,public String getFileId(),Is the same for each related PDF417 symbol
1839,zxing/pdf417,com.google.zxing.pdf417,Class PDF417ResultMetadata,public void setFileId(String fileId),
1840,zxing/pdf417,com.google.zxing.pdf417,Class PDF417ResultMetadata,@Deprecatedpublic int[] getOptionalData(),Deprecated. use dedicated already parsed fields
1841,zxing/pdf417,com.google.zxing.pdf417,Class PDF417ResultMetadata,@Deprecatedpublic void setOptionalData(int[] optionalData),Deprecated. parse and use new fields
1842,zxing/pdf417,com.google.zxing.pdf417,Class PDF417ResultMetadata,public boolean isLastSegment(),
1843,zxing/pdf417,com.google.zxing.pdf417,Class PDF417ResultMetadata,public void setLastSegment(boolean lastSegment),
1844,zxing/pdf417,com.google.zxing.pdf417,Class PDF417ResultMetadata,public int getSegmentCount(),
1845,zxing/pdf417,com.google.zxing.pdf417,Class PDF417ResultMetadata,public void setSegmentCount(int segmentCount),
1846,zxing/pdf417,com.google.zxing.pdf417,Class PDF417ResultMetadata,public String getSender(),
1847,zxing/pdf417,com.google.zxing.pdf417,Class PDF417ResultMetadata,public void setSender(String sender),
1848,zxing/pdf417,com.google.zxing.pdf417,Class PDF417ResultMetadata,public String getAddressee(),
1849,zxing/pdf417,com.google.zxing.pdf417,Class PDF417ResultMetadata,public void setAddressee(String addressee),
1850,zxing/pdf417,com.google.zxing.pdf417,Class PDF417ResultMetadata,public String getFileName(),Filename of the encoded file
1851,zxing/pdf417,com.google.zxing.pdf417,Class PDF417ResultMetadata,public void setFileName(String fileName),
1852,zxing/pdf417,com.google.zxing.pdf417,Class PDF417ResultMetadata,public long getFileSize(),filesize in bytes of the encoded file
1853,zxing/pdf417,com.google.zxing.pdf417,Class PDF417ResultMetadata,public void setFileSize(long fileSize),
1854,zxing/pdf417,com.google.zxing.pdf417,Class PDF417ResultMetadata,public int getChecksum(),16-bit CRC checksum using CCITT-16
1855,zxing/pdf417,com.google.zxing.pdf417,Class PDF417ResultMetadata,public void setChecksum(int checksum),
1856,zxing/pdf417,com.google.zxing.pdf417,Class PDF417ResultMetadata,public long getTimestamp(),"unix epock timestamp, elapsed seconds since 1970-01-01"
1857,pdf417/decoder,com.google.zxing.pdf417.decoder,Class PDF417ScanningDecoder,"public static DecoderResult decode(BitMatrix image, ResultPoint imageTopLeft, ResultPoint imageBottomLeft, ResultPoint imageTopRight, ResultPoint imageBottomRight, int minCodewordWidth, int maxCodewordWidth) throws NotFoundException, FormatException, ChecksumException",
1858,zxing/pdf417,com.google.zxing.pdf417,Class PDF417Writer,"public BitMatrix encode(String contents, BarcodeFormat format, int width, int height, Map<EncodeHintType,?> hints) throws WriterException",
1859,zxing/common,com.google.zxing.common,Class PerspectiveTransform,"public static PerspectiveTransform quadrilateralToQuadrilateral(float x0, float y0, float x1, float y1, float x2, float y2, float x3, float y3, float x0p, float y0p, float x1p, float y1p, float x2p, float y2p, float x3p, float y3p)",
1860,zxing/common,com.google.zxing.common,Class PerspectiveTransform,public void transformPoints(float[] points),
1861,zxing/common,com.google.zxing.common,Class PerspectiveTransform,"public void transformPoints(float[] xValues, float[] yValues)",
1862,zxing/common,com.google.zxing.common,Class PerspectiveTransform,"public static PerspectiveTransform squareToQuadrilateral(float x0, float y0, float x1, float y1, float x2, float y2, float x3, float y3)",
1863,google/zxing,com.google.zxing,Class PlanarYUVLuminanceSource,"public byte[] getRow(int y, byte[] row)",Description copied from class: LuminanceSource
1864,google/zxing,com.google.zxing,Class PlanarYUVLuminanceSource,public byte[] getMatrix(),Description copied from class: LuminanceSource
1865,google/zxing,com.google.zxing,Class PlanarYUVLuminanceSource,public boolean isCropSupported(),
1866,google/zxing,com.google.zxing,Class PlanarYUVLuminanceSource,"public LuminanceSource crop(int left, int top, int width, int height)",Description copied from class: LuminanceSource
1867,google/zxing,com.google.zxing,Class PlanarYUVLuminanceSource,public int[] renderThumbnail(),
1868,google/zxing,com.google.zxing,Class PlanarYUVLuminanceSource,public int getThumbnailWidth(),
1869,client/result,com.google.zxing.client.result,Class ProductParsedResult,public String getProductID(),
1870,client/result,com.google.zxing.client.result,Class ProductParsedResult,public String getNormalizedProductID(),
1871,qrcode/encoder,com.google.zxing.qrcode.encoder,Class QRCode,public Mode getMode(),
1872,qrcode/encoder,com.google.zxing.qrcode.encoder,Class QRCode,public ErrorCorrectionLevel getECLevel(),
1873,qrcode/encoder,com.google.zxing.qrcode.encoder,Class QRCode,public Version getVersion(),
1874,qrcode/encoder,com.google.zxing.qrcode.encoder,Class QRCode,public int getMaskPattern(),
1875,qrcode/encoder,com.google.zxing.qrcode.encoder,Class QRCode,public ByteMatrix getMatrix(),
1876,qrcode/encoder,com.google.zxing.qrcode.encoder,Class QRCode,public String toString(),
1877,qrcode/encoder,com.google.zxing.qrcode.encoder,Class QRCode,public void setMode(Mode value),
1878,qrcode/encoder,com.google.zxing.qrcode.encoder,Class QRCode,public void setECLevel(ErrorCorrectionLevel value),
1879,qrcode/encoder,com.google.zxing.qrcode.encoder,Class QRCode,public void setVersion(Version version),
1880,qrcode/encoder,com.google.zxing.qrcode.encoder,Class QRCode,public void setMaskPattern(int value),
1881,qrcode/encoder,com.google.zxing.qrcode.encoder,Class QRCode,public void setMatrix(ByteMatrix value),
1882,qrcode/decoder,com.google.zxing.qrcode.decoder,Class QRCodeDecoderMetaData,public boolean isMirrored(),
1883,multi/qrcode,com.google.zxing.multi.qrcode,Class QRCodeMultiReader,public Result[] decodeMultiple(BinaryBitmap image) throws NotFoundException,
1884,zxing/qrcode,com.google.zxing.qrcode,Class QRCodeReader,protected final Decoder getDecoder(),
1885,zxing/qrcode,com.google.zxing.qrcode,Class QRCodeReader,"public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException",Locates and decodes a QR code in an image.
1886,zxing/qrcode,com.google.zxing.qrcode,Class QRCodeReader,"public final Result decode(BinaryBitmap image, Map<DecodeHintType,?> hints) throws NotFoundException, ChecksumException, FormatException",Description copied from interface: Reader
1887,zxing/qrcode,com.google.zxing.qrcode,Class QRCodeWriter,"public BitMatrix encode(String contents, BarcodeFormat format, int width, int height) throws WriterException",Description copied from interface: Writer
1888,google/zxing,com.google.zxing,Interface Reader,"Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException",Locates and decodes a barcode in some format within an image.
1889,google/zxing,com.google.zxing,Interface Reader,"Result decode(BinaryBitmap image, Map<DecodeHintType,?> hints) throws NotFoundException, ChecksumException, FormatException","Locates and decodes a barcode in some format within an image. This method also accepts hints, each possibly associated to some data, which may help the implementation decode."
1890,google/zxing,com.google.zxing,Class ReaderException,protected static final boolean isStackTrace,
1891,google/zxing,com.google.zxing,Class Result,"public Result(String text, byte[] rawBytes, ResultPoint[] resultPoints, BarcodeFormat format)",
1892,google/zxing,com.google.zxing,Class Result,"public Result(String text, byte[] rawBytes, ResultPoint[] resultPoints, BarcodeFormat format, long timestamp)",
1893,google/zxing,com.google.zxing,Class Result,public String getText(),
1894,google/zxing,com.google.zxing,Class Result,public byte[] getRawBytes(),
1895,google/zxing,com.google.zxing,Class Result,public int getNumBits(),
1896,google/zxing,com.google.zxing,Class Result,public ResultPoint[] getResultPoints(),
1897,google/zxing,com.google.zxing,Class Result,public BarcodeFormat getBarcodeFormat(),
1898,google/zxing,com.google.zxing,Class Result,"public Map<ResultMetadataType,Object> getResultMetadata()",
1899,google/zxing,com.google.zxing,Class Result,"public void putMetadata(ResultMetadataType type, Object value)",
1900,google/zxing,com.google.zxing,Class Result,"public void putAllMetadata(Map<ResultMetadataType,Object> metadata)",
1901,google/zxing,com.google.zxing,Class Result,public void addResultPoints(ResultPoint[] newPoints),
1902,google/zxing,com.google.zxing,Class Result,public long getTimestamp(),
1903,google/zxing,com.google.zxing,Enum ResultMetadataType,public static final ResultMetadataType OTHER,"Unspecified, application-specific metadata. Maps to an unspecified Object."
1904,google/zxing,com.google.zxing,Enum ResultMetadataType,public static final ResultMetadataType ORIENTATION,"Denotes the likely approximate orientation of the barcode in the image. This value is given as degrees rotated clockwise from the normal, upright orientation. For example a 1D barcode which was found by reading top-to-bottom would be said to have orientation 90. This key maps to an Integer whose value is in the range [0,360)."
1905,google/zxing,com.google.zxing,Enum ResultMetadataType,public static final ResultMetadataType BYTE_SEGMENTS,"2D barcode formats typically encode text, but allow for a sort of 'byte mode' which is sometimes used to encode binary data. While Result makes available the complete raw bytes in the barcode for these formats, it does not offer the bytes from the byte segments alone.This maps to a List of byte arrays corresponding to the raw bytes in the byte segments in the barcode, in order."
1906,google/zxing,com.google.zxing,Enum ResultMetadataType,public static final ResultMetadataType ERROR_CORRECTION_LEVEL,"Error correction level used, if applicable. The value type depends on the format, but is typically a String."
1907,google/zxing,com.google.zxing,Enum ResultMetadataType,public static final ResultMetadataType ISSUE_NUMBER,"For some periodicals, indicates the issue number as an Integer."
1908,google/zxing,com.google.zxing,Enum ResultMetadataType,public static final ResultMetadataType SUGGESTED_PRICE,"For some products, indicates the suggested retail price in the barcode as a formatted String."
1909,google/zxing,com.google.zxing,Enum ResultMetadataType,public static final ResultMetadataType POSSIBLE_COUNTRY,"For some products, the possible country of manufacture as a String denoting the ISO country code. Some map to multiple possible countries, like US/CA."
1910,google/zxing,com.google.zxing,Enum ResultMetadataType,public static final ResultMetadataType UPC_EAN_EXTENSION,"For some products, the extension text"
1911,google/zxing,com.google.zxing,Enum ResultMetadataType,public static final ResultMetadataType PDF417_EXTRA_METADATA,PDF417-specific metadata
1912,google/zxing,com.google.zxing,Enum ResultMetadataType,public static final ResultMetadataType STRUCTURED_APPEND_SEQUENCE,If the code format supports structured append and the current scanned code is part of one then the sequence number is given with it.
1913,google/zxing,com.google.zxing,Enum ResultMetadataType,public static ResultMetadataType[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (ResultMetadataType c : ResultMetadataType.values())  System.out.println(c);"
1914,client/result,com.google.zxing.client.result,Class ResultParser,public abstract ParsedResult parse(Result theResult),"Attempts to parse the raw Result's contents as a particular type of information (email, URL, etc.) and return a ParsedResult encapsulating the result of parsing."
1915,client/result,com.google.zxing.client.result,Class ResultParser,protected static String getMassagedText(Result result),
1916,client/result,com.google.zxing.client.result,Class ResultParser,public static ParsedResult parseResult(Result theResult),
1917,client/result,com.google.zxing.client.result,Class ResultParser,"protected static void maybeAppend(String value, StringBuilder result)",
1918,client/result,com.google.zxing.client.result,Class ResultParser,"protected static void maybeAppend(String[] value, StringBuilder result)",
1919,client/result,com.google.zxing.client.result,Class ResultParser,protected static String[] maybeWrap(String value),
1920,client/result,com.google.zxing.client.result,Class ResultParser,protected static String unescapeBackslash(String escaped),
1921,client/result,com.google.zxing.client.result,Class ResultParser,protected static int parseHexDigit(char c),
1922,client/result,com.google.zxing.client.result,Class ResultParser,"protected static boolean isStringOfDigits(CharSequence value, int length)",
1923,google/zxing,com.google.zxing,Class ResultPoint,public final float getX(),
1924,google/zxing,com.google.zxing,Class ResultPoint,public final float getY(),
1925,google/zxing,com.google.zxing,Class ResultPoint,public final boolean equals(Object other),
1926,google/zxing,com.google.zxing,Class ResultPoint,public final int hashCode(),
1927,google/zxing,com.google.zxing,Class ResultPoint,public final String toString(),
1928,google/zxing,com.google.zxing,Class ResultPoint,public static void orderBestPatterns(ResultPoint[] patterns),"Orders an array of three ResultPoints in an order [A,B,C] such that AB is less than AC and BC is less than AC, and the angle between BC and BA is less than 180 degrees."
1929,google/zxing,com.google.zxing,Class RGBLuminanceSource,"public byte[] getRow(int y, byte[] row)",Description copied from class: LuminanceSource
1930,google/zxing,com.google.zxing,Class RGBLuminanceSource,public byte[] getMatrix(),Description copied from class: LuminanceSource
1931,google/zxing,com.google.zxing,Class RGBLuminanceSource,public boolean isCropSupported(),
1932,oned/rss,com.google.zxing.oned.rss,Class RSS14Reader,"public Result decodeRow(int rowNumber, BitArray row, Map<DecodeHintType,?> hints) throws NotFoundException",Description copied from class: OneDReader
1933,rss/expanded,com.google.zxing.oned.rss.expanded,Class RSSExpandedReader,"public Result decodeRow(int rowNumber, BitArray row, Map<DecodeHintType,?> hints) throws NotFoundException, FormatException",Description copied from class: OneDReader
1934,client/result,com.google.zxing.client.result,Class SMSParsedResult,"public SMSParsedResult(String number, String via, String subject, String body)",
1935,client/result,com.google.zxing.client.result,Class SMSParsedResult,public String getSMSURI(),
1936,client/result,com.google.zxing.client.result,Class SMSParsedResult,public String[] getNumbers(),
1937,client/result,com.google.zxing.client.result,Class SMSParsedResult,public String[] getVias(),
1938,client/result,com.google.zxing.client.result,Class SMSParsedResult,public String getSubject(),
1939,client/result,com.google.zxing.client.result,Class SMSParsedResult,public String getBody(),
1940,zxing/common,com.google.zxing.common,Class StringUtils,public static final String SHIFT_JIS,
1941,datamatrix/encoder,com.google.zxing.datamatrix.encoder,Class SymbolInfo,public final int matrixWidth,
1942,datamatrix/encoder,com.google.zxing.datamatrix.encoder,Class SymbolInfo,public static void overrideSymbolSet(SymbolInfo[] override),Overrides the symbol info set used by this class. Used for testing purposes.
1943,datamatrix/encoder,com.google.zxing.datamatrix.encoder,Class SymbolInfo,public static SymbolInfo lookup(int dataCodewords),
1944,datamatrix/encoder,com.google.zxing.datamatrix.encoder,Class SymbolInfo,"public static SymbolInfo lookup(int dataCodewords, SymbolShapeHint shape)",
1945,datamatrix/encoder,com.google.zxing.datamatrix.encoder,Class SymbolInfo,"public static SymbolInfo lookup(int dataCodewords, boolean allowRectangular, boolean fail)",
1946,datamatrix/encoder,com.google.zxing.datamatrix.encoder,Class SymbolInfo,"public static SymbolInfo lookup(int dataCodewords, SymbolShapeHint shape, Dimension minSize, Dimension maxSize, boolean fail)",
1947,datamatrix/encoder,com.google.zxing.datamatrix.encoder,Class SymbolInfo,public final int getSymbolDataWidth(),
1948,datamatrix/encoder,com.google.zxing.datamatrix.encoder,Class SymbolInfo,public final int getSymbolDataHeight(),
1949,datamatrix/encoder,com.google.zxing.datamatrix.encoder,Class SymbolInfo,public final int getSymbolWidth(),
1950,datamatrix/encoder,com.google.zxing.datamatrix.encoder,Class SymbolInfo,public final int getSymbolHeight(),
1951,datamatrix/encoder,com.google.zxing.datamatrix.encoder,Class SymbolInfo,public int getCodewordCount(),
1952,datamatrix/encoder,com.google.zxing.datamatrix.encoder,Class SymbolInfo,public int getInterleavedBlockCount(),
1953,datamatrix/encoder,com.google.zxing.datamatrix.encoder,Class SymbolInfo,public final int getDataCapacity(),
1954,datamatrix/encoder,com.google.zxing.datamatrix.encoder,Class SymbolInfo,public final int getErrorCodewords(),
1955,datamatrix/encoder,com.google.zxing.datamatrix.encoder,Class SymbolInfo,public int getDataLengthForInterleavedBlock(int index),
1956,datamatrix/encoder,com.google.zxing.datamatrix.encoder,Class SymbolInfo,public final int getErrorLengthForInterleavedBlock(int index),
1957,datamatrix/encoder,com.google.zxing.datamatrix.encoder,Enum SymbolShapeHint,public static final SymbolShapeHint FORCE_NONE,
1958,datamatrix/encoder,com.google.zxing.datamatrix.encoder,Enum SymbolShapeHint,public static final SymbolShapeHint FORCE_SQUARE,
1959,datamatrix/encoder,com.google.zxing.datamatrix.encoder,Enum SymbolShapeHint,public static SymbolShapeHint[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (SymbolShapeHint c : SymbolShapeHint.values())  System.out.println(c);"
1960,client/result,com.google.zxing.client.result,Class TelParsedResult,public String getNumber(),
1961,client/result,com.google.zxing.client.result,Class TelParsedResult,public String getTelURI(),
1962,client/result,com.google.zxing.client.result,Class TelParsedResult,public String getTitle(),
1963,client/result,com.google.zxing.client.result,Class TextParsedResult,public String getText(),
1964,client/result,com.google.zxing.client.result,Class TextParsedResult,public String getLanguage(),
1965,zxing/oned,com.google.zxing.oned,Class UPCAReader,"public Result decodeRow(int rowNumber, BitArray row, int[] startGuardRange, Map<DecodeHintType,?> hints) throws NotFoundException, FormatException, ChecksumException",Description copied from class: UPCEANReader
1966,zxing/oned,com.google.zxing.oned,Class UPCAReader,"public Result decodeRow(int rowNumber, BitArray row, Map<DecodeHintType,?> hints) throws NotFoundException, FormatException, ChecksumException",Description copied from class: OneDReader
1967,zxing/oned,com.google.zxing.oned,Class UPCAReader,"public Result decode(BinaryBitmap image) throws NotFoundException, FormatException",Description copied from interface: Reader
1968,zxing/oned,com.google.zxing.oned,Class UPCAReader,"public Result decode(BinaryBitmap image, Map<DecodeHintType,?> hints) throws NotFoundException, FormatException",Description copied from interface: Reader
1969,zxing/oned,com.google.zxing.oned,Class UPCAWriter,"public BitMatrix encode(String contents, BarcodeFormat format, int width, int height)",Description copied from interface: Writer
1970,zxing/oned,com.google.zxing.oned,Class UPCEANReader,"public Result decodeRow(int rowNumber, BitArray row, Map<DecodeHintType,?> hints) throws NotFoundException, ChecksumException, FormatException",Description copied from class: OneDReader
1971,zxing/oned,com.google.zxing.oned,Class UPCEANReader,"public Result decodeRow(int rowNumber, BitArray row, int[] startGuardRange, Map<DecodeHintType,?> hints) throws NotFoundException, ChecksumException, FormatException","Like decodeRow(int, BitArray, Map), but allows caller to inform method about where the UPC/EAN start pattern is found. This allows this to be computed once and reused across many implementations."
1972,zxing/oned,com.google.zxing.oned,Class UPCEReader,"protected int decodeMiddle(BitArray row, int[] startRange, StringBuilder result) throws NotFoundException",Description copied from class: UPCEANReader
1973,zxing/oned,com.google.zxing.oned,Class UPCEReader,"protected int[] decodeEnd(BitArray row, int endStart) throws NotFoundException",
1974,zxing/oned,com.google.zxing.oned,Class UPCEReader,protected boolean checkChecksum(String s) throws FormatException,
1975,zxing/oned,com.google.zxing.oned,Class UPCEWriter,protected Collection<BarcodeFormat> getSupportedWriteFormats(),
1976,client/result,com.google.zxing.client.result,Class URIParsedResult,public String getURI(),
1977,client/result,com.google.zxing.client.result,Class URIParsedResult,public String getTitle(),
1978,client/result,com.google.zxing.client.result,Class URIParsedResult,@Deprecatedpublic boolean isPossiblyMaliciousURI(),Deprecated. see URIResultParser.isPossiblyMaliciousURI(String)
1979,datamatrix/decoder,com.google.zxing.datamatrix.decoder,Class Version,public int getVersionNumber(),
1980,datamatrix/decoder,com.google.zxing.datamatrix.decoder,Class Version,public int getSymbolSizeRows(),
1981,datamatrix/decoder,com.google.zxing.datamatrix.decoder,Class Version,public int getSymbolSizeColumns(),
1982,datamatrix/decoder,com.google.zxing.datamatrix.decoder,Class Version,public int getDataRegionSizeRows(),
1983,datamatrix/decoder,com.google.zxing.datamatrix.decoder,Class Version,public int getDataRegionSizeColumns(),
1984,datamatrix/decoder,com.google.zxing.datamatrix.decoder,Class Version,public int getTotalCodewords(),
1985,datamatrix/decoder,com.google.zxing.datamatrix.decoder,Class Version,"public static Version getVersionForDimensions(int numRows, int numColumns) throws FormatException",Deduces version information from Data Matrix dimensions.
1986,qrcode/decoder,com.google.zxing.qrcode.decoder,Class Version,public int getVersionNumber(),
1987,qrcode/decoder,com.google.zxing.qrcode.decoder,Class Version,public int[] getAlignmentPatternCenters(),
1988,qrcode/decoder,com.google.zxing.qrcode.decoder,Class Version,public int getTotalCodewords(),
1989,qrcode/decoder,com.google.zxing.qrcode.decoder,Class Version,public int getDimensionForVersion(),
1990,qrcode/decoder,com.google.zxing.qrcode.decoder,Class Version,public Version.ECBlocks getECBlocksForLevel(ErrorCorrectionLevel ecLevel),
1991,qrcode/decoder,com.google.zxing.qrcode.decoder,Class Version,public static Version getProvisionalVersionForDimension(int dimension) throws FormatException,Deduces version information purely from QR Code dimensions.
1992,qrcode/decoder,com.google.zxing.qrcode.decoder,Class Version,public static Version getVersionForNumber(int versionNumber),
1993,qrcode/decoder,com.google.zxing.qrcode.decoder,Class Version.ECB,public int getCount(),
1994,qrcode/decoder,com.google.zxing.qrcode.decoder,Class Version.ECBlocks,public int getECCodewordsPerBlock(),
1995,qrcode/decoder,com.google.zxing.qrcode.decoder,Class Version.ECBlocks,public int getNumBlocks(),
1996,qrcode/decoder,com.google.zxing.qrcode.decoder,Class Version.ECBlocks,public int getTotalECCodewords(),
1997,client/result,com.google.zxing.client.result,Class VINParsedResult,public String getVIN(),
1998,client/result,com.google.zxing.client.result,Class VINParsedResult,public String getWorldManufacturerID(),
1999,client/result,com.google.zxing.client.result,Class VINParsedResult,public String getVehicleDescriptorSection(),
2000,client/result,com.google.zxing.client.result,Class VINParsedResult,public String getVehicleIdentifierSection(),
2001,client/result,com.google.zxing.client.result,Class VINParsedResult,public String getCountryCode(),
2002,client/result,com.google.zxing.client.result,Class VINParsedResult,public String getVehicleAttributes(),
2003,client/result,com.google.zxing.client.result,Class VINParsedResult,public int getModelYear(),
2004,client/result,com.google.zxing.client.result,Class VINParsedResult,public char getPlantCode(),
2005,client/result,com.google.zxing.client.result,Class VINParsedResult,public String getSequentialNumber(),
2006,zxing/web,com.google.zxing.web,Class WelcomeFilter,"public void doFilter(javax.servlet.ServletRequest servletRequest, javax.servlet.ServletResponse servletResponse, javax.servlet.FilterChain filterChain)",
2007,zxing/web,com.google.zxing.web,Class WelcomeFilter,public final void init(javax.servlet.FilterConfig filterConfig),
2008,common/detector,com.google.zxing.common.detector,Class WhiteRectangleDetector,public WhiteRectangleDetector(BitMatrix image) throws NotFoundException,
2009,client/result,com.google.zxing.client.result,Class WifiParsedResult,"public WifiParsedResult(String networkEncryption, String ssid, String password)",
2010,client/result,com.google.zxing.client.result,Class WifiParsedResult,"public WifiParsedResult(String networkEncryption, String ssid, String password, boolean hidden)",
2011,client/result,com.google.zxing.client.result,Class WifiParsedResult,public String getSsid(),
2012,client/result,com.google.zxing.client.result,Class WifiParsedResult,public String getNetworkEncryption(),
2013,client/result,com.google.zxing.client.result,Class WifiParsedResult,public String getPassword(),
2014,client/result,com.google.zxing.client.result,Class WifiParsedResult,public boolean isHidden(),
2015,client/result,com.google.zxing.client.result,Class WifiParsedResult,public String getIdentity(),
2016,client/result,com.google.zxing.client.result,Class WifiParsedResult,public String getAnonymousIdentity(),
2017,client/result,com.google.zxing.client.result,Class WifiParsedResult,public String getEapMethod(),
2018,client/result,com.google.zxing.client.result,Class WifiParsedResult,public String getPhase2Method(),
2019,google/zxing,com.google.zxing,Interface Writer,"BitMatrix encode(String contents, BarcodeFormat format, int width, int height) throws WriterException",Encode a barcode using the default settings.
2020,google/zxing,com.google.zxing,Class WriterException,public WriterException(),
2021,google/zxing,com.google.zxing,Class WriterException,public WriterException(String message),
2022,butterknife/butterknife,butterknife,Class ButterKnife,public static void setDebug(boolean debug),Control whether debug logging is enabled.
2023,butterknife/butterknife,butterknife,Class ButterKnife,public static Unbinder bind(android.app.Activity target),BindView annotated fields and methods in the specified Activity. The current content view is used as the view root.
2024,butterknife/butterknife,butterknife,Class ButterKnife,public static Unbinder bind(android.view.View target),BindView annotated fields and methods in the specified View. The view and its children are used as the view root.
2025,butterknife/butterknife,butterknife,Class ButterKnife,public static Unbinder bind(android.app.Dialog target),BindView annotated fields and methods in the specified Dialog. The current content view is used as the view root.
2026,butterknife/butterknife,butterknife,Class ButterKnife,"public static Unbinder bind(java.lang.Object target, android.app.Activity source)",BindView annotated fields and methods in the specified target using the sourceActivity as the view root.
2027,butterknife/butterknife,butterknife,Class ButterKnife,"public static Unbinder bind(java.lang.Object target, android.app.Dialog source)",BindView annotated fields and methods in the specified target using the sourceDialog as the view root.
2028,common/cache,com.google.common.cache,"Class AbstractCache<K,V>","public V get(K key, Callable<? extends V> valueLoader) throws ExecutionException",Description copied from interface: Cache
2029,common/cache,com.google.common.cache,"Class AbstractCache<K,V>","public ImmutableMap<K,V> getAllPresent(Iterable<?> keys)","Returns a map of the values associated with keys in this cache. The returned map will only contain entries which are already present in the cache. This implementation of getAllPresent lacks any insight into the internal cache data structure, and is thus forced to return the query keys instead of the cached keys. This is only possible with an unsafe cast which requires keys to actually be of type K."
2030,common/cache,com.google.common.cache,"Class AbstractCache<K,V>","public void put(K key, V value)",Description copied from interface: Cache
2031,common/cache,com.google.common.cache,"Class AbstractCache<K,V>","public void putAll(Map<? extends K,? extends V> m)",Description copied from interface: Cache
2032,common/cache,com.google.common.cache,"Class AbstractCache<K,V>",public void cleanUp(),Description copied from interface: Cache
2033,common/cache,com.google.common.cache,"Class AbstractCache<K,V>",public long size(),Description copied from interface: Cache
2034,common/cache,com.google.common.cache,"Class AbstractCache<K,V>",public void invalidate(Object key),Description copied from interface: Cache
2035,common/cache,com.google.common.cache,"Class AbstractCache<K,V>",public void invalidateAll(Iterable<?> keys),Description copied from interface: Cache
2036,common/cache,com.google.common.cache,"Class AbstractCache<K,V>",public void invalidateAll(),Description copied from interface: Cache
2037,common/cache,com.google.common.cache,"Class AbstractCache<K,V>",public CacheStats stats(),Description copied from interface: Cache
2038,common/cache,com.google.common.cache,Class AbstractCache.SimpleStatsCounter,public void recordHits(int count),Description copied from interface: AbstractCache.StatsCounter
2039,common/cache,com.google.common.cache,Class AbstractCache.SimpleStatsCounter,public void recordMisses(int count),Description copied from interface: AbstractCache.StatsCounter
2040,common/cache,com.google.common.cache,Class AbstractCache.SimpleStatsCounter,public void recordLoadSuccess(long loadTime),Description copied from interface: AbstractCache.StatsCounter
2041,common/cache,com.google.common.cache,Class AbstractCache.SimpleStatsCounter,public void recordLoadException(long loadTime),Description copied from interface: AbstractCache.StatsCounter
2042,common/cache,com.google.common.cache,Class AbstractCache.SimpleStatsCounter,public void recordEviction(),Description copied from interface: AbstractCache.StatsCounter
2043,common/cache,com.google.common.cache,Class AbstractCache.SimpleStatsCounter,public CacheStats snapshot(),Description copied from interface: AbstractCache.StatsCounter
2044,common/cache,com.google.common.cache,Interface AbstractCache.StatsCounter,void recordHits(int count),Records cache hits. This should be called when a cache request returns a cached value.
2045,common/cache,com.google.common.cache,Interface AbstractCache.StatsCounter,void recordMisses(int count),"Records cache misses. This should be called when a cache request returns a value that was not found in the cache. This method should be called by the loading thread, as well as by threads blocking on the load. Multiple concurrent calls to Cache lookup methods with the same key on an absent value should result in a single call to either recordLoadSuccess or recordLoadException and multiple calls to this method, despite all being served by the results of a single load operation."
2046,common/cache,com.google.common.cache,Interface AbstractCache.StatsCounter,void recordLoadSuccess(long loadTime),"Records the successful load of a new entry. This should be called when a cache request causes an entry to be loaded, and the loading completes successfully. In contrast to recordMisses(int), this method should only be called by the loading thread."
2047,common/cache,com.google.common.cache,Interface AbstractCache.StatsCounter,void recordLoadException(long loadTime),"Records the failed load of a new entry. This should be called when a cache request causes an entry to be loaded, but an exception is thrown while loading the entry. In contrast to recordMisses(int), this method should only be called by the loading thread."
2048,common/cache,com.google.common.cache,Interface AbstractCache.StatsCounter,void recordEviction(),"Records the eviction of an entry from the cache. This should only been called when an entry is evicted due to the cache's eviction strategy, and not as a result of manual invalidations."
2049,util/concurrent,com.google.common.util.concurrent,Class AbstractExecutionThreadService,protected void startUp() throws Exception,Start the service. This method is invoked on the execution thread. By default this method does nothing.
2050,util/concurrent,com.google.common.util.concurrent,Class AbstractExecutionThreadService,protected abstract void run() throws Exception,"Run the service. This method is invoked on the execution thread. Implementations must respond to stop requests. You could poll for lifecycle changes in a work loop: public void run() { while (isRunning()) { // perform a unit of work } } ...or you could respond to stop requests by implementing triggerShutdown(), which should cause run() to return."
2051,util/concurrent,com.google.common.util.concurrent,Class AbstractExecutionThreadService,protected void shutDown() throws Exception,Stop the service. This method is invoked on the execution thread. By default this method does nothing.
2052,util/concurrent,com.google.common.util.concurrent,Class AbstractExecutionThreadService,@Betaprotected void triggerShutdown(),"Invoked to request the service to stop. By default this method does nothing. Currently, this method is invoked while holding a lock. If an implementation of this method blocks, it can prevent this service from changing state. If you need to performing a blocking operation in order to trigger shutdown, consider instead registering a listener and implementing stopping. Note, however, that stopping does not run at exactly the same times as triggerShutdown."
2053,util/concurrent,com.google.common.util.concurrent,Class AbstractExecutionThreadService,protected Executor executor(),"Returns the Executor that will be used to run this service. Subclasses may override this method to use a custom Executor, which may configure its worker thread with a specific name, thread group or priority. The returned executor's execute() method is called when this service is started, and should return promptly. The default implementation returns a new Executor that sets the name of its threads to the string returned by serviceName()"
2054,util/concurrent,com.google.common.util.concurrent,Class AbstractExecutionThreadService,public String toString(),Description copied from class: java.lang.Object
2055,util/concurrent,com.google.common.util.concurrent,Class AbstractExecutionThreadService,public final boolean isRunning(),Description copied from interface: Service
2056,util/concurrent,com.google.common.util.concurrent,Class AbstractExecutionThreadService,public final Service.State state(),Description copied from interface: Service
2057,util/concurrent,com.google.common.util.concurrent,Class AbstractExecutionThreadService,"public final void addListener(Service.Listener listener, Executor executor)",Description copied from interface: Service
2058,util/concurrent,com.google.common.util.concurrent,Class AbstractExecutionThreadService,public final Throwable failureCause(),Description copied from interface: Service
2059,util/concurrent,com.google.common.util.concurrent,Class AbstractExecutionThreadService,@CanIgnoreReturnValuepublic final Service startAsync(),Description copied from interface: Service
2060,util/concurrent,com.google.common.util.concurrent,Class AbstractExecutionThreadService,@CanIgnoreReturnValuepublic final Service stopAsync(),Description copied from interface: Service
2061,util/concurrent,com.google.common.util.concurrent,Class AbstractExecutionThreadService,public final void awaitRunning(),Description copied from interface: Service
2062,util/concurrent,com.google.common.util.concurrent,Class AbstractExecutionThreadService,public final void awaitRunning(Duration timeout) throws TimeoutException,Description copied from interface: Service
2063,util/concurrent,com.google.common.util.concurrent,Class AbstractExecutionThreadService,"public final void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException",Description copied from interface: Service
2064,util/concurrent,com.google.common.util.concurrent,Class AbstractExecutionThreadService,public final void awaitTerminated(),Description copied from interface: Service
2065,util/concurrent,com.google.common.util.concurrent,Class AbstractExecutionThreadService,public final void awaitTerminated(Duration timeout) throws TimeoutException,Description copied from interface: Service
2066,util/concurrent,com.google.common.util.concurrent,Class AbstractExecutionThreadService,"public final void awaitTerminated(long timeout, TimeUnit unit) throws TimeoutException",Description copied from interface: Service
2067,util/concurrent,com.google.common.util.concurrent,Class AbstractFuture<V>,"@CanIgnoreReturnValuepublic V get(long timeout, TimeUnit unit) throws InterruptedException, TimeoutException, ExecutionException","Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available. The default AbstractFuture implementation throws InterruptedException if the current thread is interrupted during the call, even if the value is already available."
2068,util/concurrent,com.google.common.util.concurrent,Class AbstractFuture<V>,"@CanIgnoreReturnValuepublic V get() throws InterruptedException, ExecutionException","Waits if necessary for the computation to complete, and then retrieves its result. The default AbstractFuture implementation throws InterruptedException if the current thread is interrupted during the call, even if the value is already available."
2069,util/concurrent,com.google.common.util.concurrent,Class AbstractFuture<V>,public boolean isDone(),Description copied from interface: java.util.concurrent.Future
2070,util/concurrent,com.google.common.util.concurrent,Class AbstractFuture<V>,public boolean isCancelled(),Description copied from interface: java.util.concurrent.Future
2071,util/concurrent,com.google.common.util.concurrent,Class AbstractFuture<V>,@CanIgnoreReturnValuepublic boolean cancel(boolean mayInterruptIfRunning),"Attempts to cancel execution of this task. This attempt will fail if the task has already completed, has already been cancelled, or could not be cancelled for some other reason. If successful, and this task has not started when cancel is called, this task should never run. If the task has already started, then the mayInterruptIfRunning parameter determines whether the thread executing this task should be interrupted in an attempt to stop the task. After this method returns, subsequent calls to Future.isDone() will always return true. Subsequent calls to Future.isCancelled() will always return true if this method returned true. If a cancellation attempt succeeds on a Future that had previously been set asynchronously, then the cancellation will also be propagated to the delegate Future that was supplied in the setFuture call. Rather than override this method to perform additional cancellation work or cleanup, subclasses should override afterDone(), consulting isCancelled() and wasInterrupted() as necessary. This ensures that the work is done even if the future is cancelled without a call to cancel, such as by calling setFuture(cancelledFuture). Beware of completing a future while holding a lock. Its listeners may do slow work or acquire other locks, risking deadlocks."
2072,util/concurrent,com.google.common.util.concurrent,Class AbstractFuture<V>,protected void interruptTask(),"Subclasses can override this method to implement interruption of the future's computation. The method is invoked automatically by a successful call to cancel(true). The default implementation does nothing. This method is likely to be deprecated. Prefer to override afterDone(), checking wasInterrupted() to decide whether to interrupt your task."
2073,util/concurrent,com.google.common.util.concurrent,Class AbstractFuture<V>,protected final boolean wasInterrupted(),Returns true if this future was cancelled with mayInterruptIfRunning set to true.
2074,util/concurrent,com.google.common.util.concurrent,Class AbstractFuture<V>,"public void addListener(Runnable listener, Executor executor)","Registers a listener to be run on the given executor. The listener will run when the Future's computation is complete or, if the computation is already complete, immediately. There is no guaranteed ordering of execution of listeners, but any listener added through this method is guaranteed to be called once the computation is complete. Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown during Executor.execute (e.g., a RejectedExecutionException or an exception thrown by direct execution) will be caught and logged. Note: If your listener is lightweight -- and will not cause stack overflow by completing more futures or adding more directExecutor() listeners inline -- consider MoreExecutors.directExecutor(). Otherwise, avoid it: See the warnings on the docs for directExecutor. This is the most general listener interface. For common operations performed using listeners, see Futures. For a simplified but general listener interface, see addCallback(). Memory consistency effects: Actions in a thread prior to adding a listener happen-before its execution begins, perhaps in another thread. Guava implementations of ListenableFuture promptly release references to listeners after executing them."
2075,util/concurrent,com.google.common.util.concurrent,Class AbstractFuture<V>,@CanIgnoreReturnValueprotected boolean set(V value),"Sets the result of this Future unless this Future has already been cancelled or set (including set asynchronously). When a call to this method returns, the Future is guaranteed to be done only if the call was accepted (in which case it returns true). If it returns false, the Future may have previously been set asynchronously, in which case its result may not be known yet. That result, though not yet known, cannot be overridden by a call to a set* method, only by a call to cancel(boolean). Beware of completing a future while holding a lock. Its listeners may do slow work or acquire other locks, risking deadlocks."
2076,util/concurrent,com.google.common.util.concurrent,Class AbstractFuture<V>,@CanIgnoreReturnValueprotected boolean setException(Throwable throwable),"Sets the failed result of this Future unless this Future has already been cancelled or set (including set asynchronously). When a call to this method returns, the Future is guaranteed to be done only if the call was accepted (in which case it returns true). If it returns false, the Future may have previously been set asynchronously, in which case its result may not be known yet. That result, though not yet known, cannot be overridden by a call to a set* method, only by a call to cancel(boolean). Beware of completing a future while holding a lock. Its listeners may do slow work or acquire other locks, risking deadlocks."
2077,util/concurrent,com.google.common.util.concurrent,Class AbstractFuture<V>,@CanIgnoreReturnValueprotected boolean setFuture(ListenableFuture<? extends V> future),"Sets the result of this Future to match the supplied input Future once the supplied Future is done, unless this Future has already been cancelled or set (including set asynchronously, defined below). If the supplied future is done when this method is called and the call is accepted, then this future is guaranteed to have been completed with the supplied future by the time this method returns. If the supplied future is not done and the call is accepted, then the future will be set asynchronously. Note that such a result, though not yet known, cannot be overridden by a call to a set* method, only by a call to cancel(boolean). If the call setFuture(delegate) is accepted and this Future is later cancelled, cancellation will be propagated to delegate. Additionally, any call to setFuture after any cancellation will propagate cancellation to the supplied Future. Note that, even if the supplied future is cancelled and it causes this future to complete, it will never trigger interruption behavior. In particular, it will not cause this future to invoke the interruptTask() method, and the wasInterrupted() method will not return true. Beware of completing a future while holding a lock. Its listeners may do slow work or acquire other locks, risking deadlocks."
2078,util/concurrent,com.google.common.util.concurrent,Class AbstractFuture<V>,@Beta @ForOverrideprotected void afterDone(),"Callback method that is called exactly once after the future is completed. If interruptTask() is also run during completion, afterDone() runs after it. The default implementation of this method in AbstractFuture does nothing. This is intended for very lightweight cleanup work, for example, timing statistics or clearing fields. If your task does anything heavier consider, just using a listener with an executor."
2079,util/concurrent,com.google.common.util.concurrent,Class AbstractFuture<V>,protected final @Nullable Throwable tryInternalFastPathGetFailure(),"Usually returns null but, if this Future has failed, may optionally return the cause of the failure. Failure means specifically completed with an exception; it does not include was cancelled. To be explicit: If this method returns a non-null value, then: isDone() must return trueisCancelled() must return falseget() must not block, and it must throw an ExecutionException with the return value of this method as its cause This method is protected so that classes like com.google.common.util.concurrent.SettableFuture do not expose it to their users as an instance method. In the unlikely event that you need to call this method, call InternalFutures.tryInternalFastPathGetFailure(InternalFutureFailureAccess)."
2080,util/concurrent,com.google.common.util.concurrent,Class AbstractFuture<V>,public String toString(),Description copied from class: java.lang.Object
2081,common/graph,com.google.common.graph,Class AbstractGraph<N>,public final boolean equals(@Nullable Object obj),Description copied from class: java.lang.Object
2082,common/graph,com.google.common.graph,Class AbstractGraph<N>,public final int hashCode(),Description copied from class: java.lang.Object
2083,common/graph,com.google.common.graph,Class AbstractGraph<N>,public String toString(),Returns a string representation of this graph.
2084,common/graph,com.google.common.graph,Class AbstractGraph<N>,protected long edgeCount(),"Returns the number of edges in this graph; used to calculate the size of edges(). This implementation requires O(|N|) time. Classes extending this one may manually keep track of the number of edges as the graph is updated, and override this method for better performance."
2085,common/graph,com.google.common.graph,Class AbstractGraph<N>,public Set<EndpointPair<N>> edges(),An implementation of BaseGraph.edges() defined in terms of nodes() and successors(Object).
2086,common/graph,com.google.common.graph,Class AbstractGraph<N>,public ElementOrder<N> incidentEdgeOrder(),"Returns an ElementOrder that specifies the order of iteration for the elements of edges(), adjacentNodes(Object), predecessors(Object), successors(Object) and incidentEdges(Object)."
2087,common/graph,com.google.common.graph,Class AbstractGraph<N>,public Set<EndpointPair<N>> incidentEdges(N node),Returns the edges in this graph whose endpoints include node. This is equal to the union of incoming and outgoing edges.
2088,common/graph,com.google.common.graph,Class AbstractGraph<N>,public int degree(N node),"Returns the count of node's incident edges, counting self-loops twice (equivalently, the number of times an edge touches node). For directed graphs, this is equal to inDegree(node) + outDegree(node). For undirected graphs, this is equal to incidentEdges(node).size() + (number of self-loops incident to node). If the count is greater than Integer.MAX_VALUE, returns Integer.MAX_VALUE."
2089,common/graph,com.google.common.graph,Class AbstractGraph<N>,public int inDegree(N node),"Returns the count of node's incoming edges (equal to predecessors(node).size()) in a directed graph. In an undirected graph, returns the degree(Object). If the count is greater than Integer.MAX_VALUE, returns Integer.MAX_VALUE."
2090,common/graph,com.google.common.graph,Class AbstractGraph<N>,public int outDegree(N node),"Returns the count of node's outgoing edges (equal to successors(node).size()) in a directed graph. In an undirected graph, returns the degree(Object). If the count is greater than Integer.MAX_VALUE, returns Integer.MAX_VALUE."
2091,common/graph,com.google.common.graph,Class AbstractGraph<N>,"public boolean hasEdgeConnecting(N nodeU, N nodeV)","Returns true if there is an edge that directly connects nodeU to nodeV. This is equivalent to nodes().contains(nodeU) && successors(nodeU).contains(nodeV). In an undirected graph, this is equal to hasEdgeConnecting(nodeV, nodeU)."
2092,common/graph,com.google.common.graph,Class AbstractGraph<N>,public boolean hasEdgeConnecting(EndpointPair<N> endpoints),"Returns true if there is an edge that directly connects endpoints (in the order, if any, specified by endpoints). This is equivalent to edges().contains(endpoints). Unlike the other EndpointPair-accepting methods, this method does not throw if the endpoints are unordered; it simply returns false. This is for consistency with the behavior of Collection#contains(Object) (which does not generally throw if the object cannot be present in the collection), and the desire to have this method's behavior be compatible with edges().contains(endpoints)."
2093,common/graph,com.google.common.graph,Class AbstractGraph<N>,protected final void validateEndpoints(EndpointPair<?> endpoints),Throws IllegalArgumentException if the ordering of endpoints is not compatible with the directionality of this graph.
2094,util/concurrent,com.google.common.util.concurrent,Class AbstractIdleService,protected abstract void startUp() throws Exception,Start the service.
2095,util/concurrent,com.google.common.util.concurrent,Class AbstractIdleService,protected abstract void shutDown() throws Exception,Stop the service.
2096,util/concurrent,com.google.common.util.concurrent,Class AbstractIdleService,protected Executor executor(),"Returns the Executor that will be used to run this service. Subclasses may override this method to use a custom Executor, which may configure its worker thread with a specific name, thread group or priority. The returned executor's execute() method is called when this service is started and stopped, and should return promptly."
2097,util/concurrent,com.google.common.util.concurrent,Class AbstractIdleService,public String toString(),Description copied from class: java.lang.Object
2098,util/concurrent,com.google.common.util.concurrent,Class AbstractIdleService,public final boolean isRunning(),Description copied from interface: Service
2099,util/concurrent,com.google.common.util.concurrent,Class AbstractIdleService,public final Service.State state(),Description copied from interface: Service
2100,util/concurrent,com.google.common.util.concurrent,Class AbstractIdleService,"public final void addListener(Service.Listener listener, Executor executor)",Description copied from interface: Service
2101,util/concurrent,com.google.common.util.concurrent,Class AbstractIdleService,public final Throwable failureCause(),Description copied from interface: Service
2102,util/concurrent,com.google.common.util.concurrent,Class AbstractIdleService,@CanIgnoreReturnValuepublic final Service startAsync(),Description copied from interface: Service
2103,util/concurrent,com.google.common.util.concurrent,Class AbstractIdleService,@CanIgnoreReturnValuepublic final Service stopAsync(),Description copied from interface: Service
2104,util/concurrent,com.google.common.util.concurrent,Class AbstractIdleService,public final void awaitRunning(),Description copied from interface: Service
2105,util/concurrent,com.google.common.util.concurrent,Class AbstractIdleService,public final void awaitRunning(Duration timeout) throws TimeoutException,Description copied from interface: Service
2106,util/concurrent,com.google.common.util.concurrent,Class AbstractIdleService,"public final void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException",Description copied from interface: Service
2107,util/concurrent,com.google.common.util.concurrent,Class AbstractIdleService,public final void awaitTerminated(),Description copied from interface: Service
2108,util/concurrent,com.google.common.util.concurrent,Class AbstractIdleService,public final void awaitTerminated(Duration timeout) throws TimeoutException,Description copied from interface: Service
2109,util/concurrent,com.google.common.util.concurrent,Class AbstractIdleService,"public final void awaitTerminated(long timeout, TimeUnit unit) throws TimeoutException",Description copied from interface: Service
2110,common/reflect,com.google.common.reflect,Class AbstractInvocationHandler,"public final Object invoke(Object proxy, Method method, Object[] args) throws Throwable","Processes a method invocation on a proxy instance and returns the result. This method will be invoked on an invocation handler when a method is invoked on a proxy instance that it is associated with. proxy.hashCode() delegates to hashCode()proxy.toString() delegates to toString()proxy.equals(argument) returns true if: proxy and argument are of the same type and equals(java.lang.Object) returns true for the InvocationHandler of argumentother method calls are dispatched to handleInvocation(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]). "
2111,common/reflect,com.google.common.reflect,Class AbstractInvocationHandler,"protected abstract Object handleInvocation(Object proxy, Method method, Object[] args) throws Throwable","invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) delegates to this method upon any method invocation on the proxy instance, except Object.equals(java.lang.Object), Object.hashCode() and Object.toString(). The result will be returned as the proxied method's return value. Unlike invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]), args will never be null. When the method has no parameter, an empty array is passed in."
2112,common/reflect,com.google.common.reflect,Class AbstractInvocationHandler,public boolean equals(Object obj),By default delegates to Object.equals(java.lang.Object) so instances are only equal if they are identical. proxy.equals(argument) returns true if: proxy and argument are of the same type and this method returns true for the InvocationHandler of argumentSubclasses can override this method to provide custom equality.
2113,common/reflect,com.google.common.reflect,Class AbstractInvocationHandler,public int hashCode(),By default delegates to Object.hashCode(). The dynamic proxies' hashCode() will delegate to this method. Subclasses can override this method to provide custom equality.
2114,common/collect,com.google.common.collect,Class AbstractIterator<T>,protected abstract T computeNext(),"Returns the next element. Note: the implementation must call endOfData() when there are no elements left in the iteration. Failure to do so could result in an infinite loop. The initial invocation of hasNext() or next() calls this method, as does the first invocation of hasNext or next following each successful call to next. Once the implementation either invokes endOfData or throws an exception, computeNext is guaranteed to never be called again. If this method throws an exception, it will propagate outward to the hasNext or next invocation that invoked this method. Any further attempts to use the iterator will result in an IllegalStateException. The implementation of this method may not invoke the hasNext, next, or peek() methods on this instance; if it does, an IllegalStateException will result."
2115,common/collect,com.google.common.collect,Class AbstractIterator<T>,@CanIgnoreReturnValueprotected final T endOfData(),Implementations of computeNext() must invoke this method when there are no elements left in the iteration.
2116,common/collect,com.google.common.collect,Class AbstractIterator<T>,@CanIgnoreReturnValuepublic final boolean hasNext(),Description copied from interface: java.util.Iterator
2117,common/collect,com.google.common.collect,Class AbstractIterator<T>,@CanIgnoreReturnValuepublic final T next(),Description copied from interface: java.util.Iterator
2118,util/concurrent,com.google.common.util.concurrent,Class AbstractListeningExecutorService,"protected final <T> RunnableFuture<T> newTaskFor(Runnable runnable, T value)",Description copied from class: java.util.concurrent.AbstractExecutorService
2119,util/concurrent,com.google.common.util.concurrent,Class AbstractListeningExecutorService,protected final <T> RunnableFuture<T> newTaskFor(Callable<T> callable),Description copied from class: java.util.concurrent.AbstractExecutorService
2120,util/concurrent,com.google.common.util.concurrent,Class AbstractListeningExecutorService,public ListenableFuture<?> submit(Runnable task),Description copied from interface: java.util.concurrent.ExecutorService
2121,util/concurrent,com.google.common.util.concurrent,Class AbstractListeningExecutorService,"public <T> ListenableFuture<T> submit(Runnable task, T result)",Description copied from interface: java.util.concurrent.ExecutorService
2122,common/cache,com.google.common.cache,"Class AbstractLoadingCache<K,V>",public V getUnchecked(K key),Description copied from interface: LoadingCache
2123,common/cache,com.google.common.cache,"Class AbstractLoadingCache<K,V>","public ImmutableMap<K,V> getAll(Iterable<? extends K> keys) throws ExecutionException",Description copied from interface: LoadingCache
2124,common/cache,com.google.common.cache,"Class AbstractLoadingCache<K,V>",public final V apply(K key),Description copied from interface: java.util.function.Function
2125,common/graph,com.google.common.graph,"Class AbstractNetwork<N,E>",public Graph<N> asGraph(),Description copied from interface: Network
2126,common/graph,com.google.common.graph,"Class AbstractNetwork<N,E>",public int degree(N node),Description copied from interface: Network
2127,common/graph,com.google.common.graph,"Class AbstractNetwork<N,E>",public int inDegree(N node),Description copied from interface: Network
2128,common/graph,com.google.common.graph,"Class AbstractNetwork<N,E>",public int outDegree(N node),Description copied from interface: Network
2129,common/graph,com.google.common.graph,"Class AbstractNetwork<N,E>",public Set<E> adjacentEdges(E edge),Description copied from interface: Network
2130,common/graph,com.google.common.graph,"Class AbstractNetwork<N,E>","public Set<E> edgesConnecting(N nodeU, N nodeV)",Description copied from interface: Network
2131,common/graph,com.google.common.graph,"Class AbstractNetwork<N,E>",public Set<E> edgesConnecting(EndpointPair<N> endpoints),Description copied from interface: Network
2132,common/graph,com.google.common.graph,"Class AbstractNetwork<N,E>","public Optional<E> edgeConnecting(N nodeU, N nodeV)",Description copied from interface: Network
2133,common/graph,com.google.common.graph,"Class AbstractNetwork<N,E>",public Optional<E> edgeConnecting(EndpointPair<N> endpoints),Description copied from interface: Network
2134,common/graph,com.google.common.graph,"Class AbstractNetwork<N,E>","public E edgeConnectingOrNull(N nodeU, N nodeV)",Description copied from interface: Network
2135,common/graph,com.google.common.graph,"Class AbstractNetwork<N,E>",public E edgeConnectingOrNull(EndpointPair<N> endpoints),Description copied from interface: Network
2136,common/graph,com.google.common.graph,"Class AbstractNetwork<N,E>","public boolean hasEdgeConnecting(N nodeU, N nodeV)",Description copied from interface: Network
2137,common/graph,com.google.common.graph,"Class AbstractNetwork<N,E>",public boolean hasEdgeConnecting(EndpointPair<N> endpoints),Description copied from interface: Network
2138,common/graph,com.google.common.graph,"Class AbstractNetwork<N,E>",protected final void validateEndpoints(EndpointPair<?> endpoints),Throws an IllegalArgumentException if the ordering of endpoints is not compatible with the directionality of this graph.
2139,common/graph,com.google.common.graph,"Class AbstractNetwork<N,E>",protected final boolean isOrderingCompatible(EndpointPair<?> endpoints),
2140,common/graph,com.google.common.graph,"Class AbstractNetwork<N,E>",public final boolean equals(@Nullable Object obj),Description copied from class: java.lang.Object
2141,common/graph,com.google.common.graph,"Class AbstractNetwork<N,E>",public final int hashCode(),Description copied from class: java.lang.Object
2142,util/concurrent,com.google.common.util.concurrent,Class AbstractScheduledService,protected abstract void runOneIteration() throws Exception,"Run one iteration of the scheduled task. If any invocation of this method throws an exception, the service will transition to the Service.State.FAILED state and this method will no longer be called."
2143,util/concurrent,com.google.common.util.concurrent,Class AbstractScheduledService,protected void startUp() throws Exception,Start the service. By default this method does nothing.
2144,util/concurrent,com.google.common.util.concurrent,Class AbstractScheduledService,protected void shutDown() throws Exception,Stop the service. This is guaranteed not to run concurrently with runOneIteration(). By default this method does nothing.
2145,util/concurrent,com.google.common.util.concurrent,Class AbstractScheduledService,protected abstract AbstractScheduledService.Scheduler scheduler(),Returns the AbstractScheduledService.Scheduler object used to configure this service. This method will only be called once.
2146,util/concurrent,com.google.common.util.concurrent,Class AbstractScheduledService,protected ScheduledExecutorService executor(),"Returns the ScheduledExecutorService that will be used to execute the startUp(), runOneIteration() and shutDown() methods. If this method is overridden the executor will not be shutdown when this service terminates or fails. Subclasses may override this method to supply a custom ScheduledExecutorService instance. This method is guaranteed to only be called once. By default this returns a new ScheduledExecutorService with a single thread thread pool that sets the name of the thread to the service name. Also, the pool will be shut down when the service terminates or fails."
2147,util/concurrent,com.google.common.util.concurrent,Class AbstractScheduledService,protected String serviceName(),Returns the name of this service. AbstractScheduledService may include the name in debugging output.
2148,util/concurrent,com.google.common.util.concurrent,Class AbstractScheduledService,public String toString(),Description copied from class: java.lang.Object
2149,util/concurrent,com.google.common.util.concurrent,Class AbstractScheduledService,public final boolean isRunning(),Description copied from interface: Service
2150,util/concurrent,com.google.common.util.concurrent,Class AbstractScheduledService,public final Service.State state(),Description copied from interface: Service
2151,util/concurrent,com.google.common.util.concurrent,Class AbstractScheduledService,"public final void addListener(Service.Listener listener, Executor executor)",Description copied from interface: Service
2152,util/concurrent,com.google.common.util.concurrent,Class AbstractScheduledService,public final Throwable failureCause(),Description copied from interface: Service
2153,util/concurrent,com.google.common.util.concurrent,Class AbstractScheduledService,@CanIgnoreReturnValuepublic final Service startAsync(),Description copied from interface: Service
2154,util/concurrent,com.google.common.util.concurrent,Class AbstractScheduledService,@CanIgnoreReturnValuepublic final Service stopAsync(),Description copied from interface: Service
2155,util/concurrent,com.google.common.util.concurrent,Class AbstractScheduledService,public final void awaitRunning(),Description copied from interface: Service
2156,util/concurrent,com.google.common.util.concurrent,Class AbstractScheduledService,public final void awaitRunning(Duration timeout) throws TimeoutException,Description copied from interface: Service
2157,util/concurrent,com.google.common.util.concurrent,Class AbstractScheduledService,"public final void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException",Description copied from interface: Service
2158,util/concurrent,com.google.common.util.concurrent,Class AbstractScheduledService,public final void awaitTerminated(),Description copied from interface: Service
2159,util/concurrent,com.google.common.util.concurrent,Class AbstractScheduledService,public final void awaitTerminated(Duration timeout) throws TimeoutException,Description copied from interface: Service
2160,util/concurrent,com.google.common.util.concurrent,Class AbstractScheduledService.Scheduler,"public static AbstractScheduledService.Scheduler newFixedDelaySchedule(Duration initialDelay, Duration delay)","Returns a AbstractScheduledService.Scheduler that schedules the task using the ScheduledExecutorService.scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit) method."
2161,util/concurrent,com.google.common.util.concurrent,Class AbstractScheduledService.Scheduler,"public static AbstractScheduledService.Scheduler newFixedDelaySchedule(long initialDelay, long delay, TimeUnit unit)","Returns a AbstractScheduledService.Scheduler that schedules the task using the ScheduledExecutorService.scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit) method."
2162,util/concurrent,com.google.common.util.concurrent,Class AbstractScheduledService.Scheduler,"public static AbstractScheduledService.Scheduler newFixedRateSchedule(Duration initialDelay, Duration period)","Returns a AbstractScheduledService.Scheduler that schedules the task using the ScheduledExecutorService.scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit) method."
2163,common/collect,com.google.common.collect,Class AbstractSequentialIterator<T>,protected abstract T computeNext(T previous),"Returns the element that follows previous, or returns null if no elements remain. This method is invoked during each call to next() in order to compute the result of a future call to next()."
2164,common/collect,com.google.common.collect,Class AbstractSequentialIterator<T>,public final boolean hasNext(),Description copied from interface: java.util.Iterator
2165,util/concurrent,com.google.common.util.concurrent,Class AbstractService,@ForOverrideprotected abstract void doStart(),"This method is called by startAsync() to initiate service startup. The invocation of this method should cause a call to notifyStarted(), either during this method's run, or after it has returned. If startup fails, the invocation should cause a call to notifyFailed(Throwable) instead. This method should return promptly; prefer to do work on a different thread where it is convenient. It is invoked exactly once on service startup, even when startAsync() is called multiple times."
2166,util/concurrent,com.google.common.util.concurrent,Class AbstractService,@ForOverrideprotected abstract void doStop(),"This method should be used to initiate service shutdown. The invocation of this method should cause a call to notifyStopped(), either during this method's run, or after it has returned. If shutdown fails, the invocation should cause a call to notifyFailed(Throwable) instead. This method should return promptly; prefer to do work on a different thread where it is convenient. It is invoked exactly once on service shutdown, even when stopAsync() is called multiple times. If stopAsync() is called on a Service.State.STARTING service, this method is not invoked immediately. Instead, it will be deferred until after the service is Service.State.RUNNING. Services that need to cancel startup work can override doCancelStart()."
2167,util/concurrent,com.google.common.util.concurrent,Class AbstractService,@Beta @ForOverrideprotected void doCancelStart(),"This method is called by stopAsync() when the service is still starting (i.e. startAsync() has been called but notifyStarted() has not). Subclasses can override the method to cancel pending work and then call notifyStopped() to stop the service. This method should return promptly; prefer to do work on a different thread where it is convenient. It is invoked exactly once on service shutdown, even when stopAsync() is called multiple times. When this method is called state() will return Service.State.STOPPING, which is the external state observable by the caller of stopAsync()."
2168,util/concurrent,com.google.common.util.concurrent,Class AbstractService,@CanIgnoreReturnValuepublic final Service startAsync(),Description copied from interface: Service
2169,util/concurrent,com.google.common.util.concurrent,Class AbstractService,@CanIgnoreReturnValuepublic final Service stopAsync(),Description copied from interface: Service
2170,util/concurrent,com.google.common.util.concurrent,Class AbstractService,public final void awaitRunning(),Description copied from interface: Service
2171,util/concurrent,com.google.common.util.concurrent,Class AbstractService,public final void awaitRunning(Duration timeout) throws TimeoutException,Description copied from interface: Service
2172,util/concurrent,com.google.common.util.concurrent,Class AbstractService,"public final void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException",Description copied from interface: Service
2173,util/concurrent,com.google.common.util.concurrent,Class AbstractService,public final void awaitTerminated(),Description copied from interface: Service
2174,util/concurrent,com.google.common.util.concurrent,Class AbstractService,public final void awaitTerminated(Duration timeout) throws TimeoutException,Description copied from interface: Service
2175,util/concurrent,com.google.common.util.concurrent,Class AbstractService,"public final void awaitTerminated(long timeout, TimeUnit unit) throws TimeoutException",Description copied from interface: Service
2176,util/concurrent,com.google.common.util.concurrent,Class AbstractService,protected final void notifyStarted(),Implementing classes should invoke this method once their service has started. It will cause the service to transition from Service.State.STARTING to Service.State.RUNNING.
2177,util/concurrent,com.google.common.util.concurrent,Class AbstractService,protected final void notifyStopped(),Implementing classes should invoke this method once their service has stopped. It will cause the service to transition from Service.State.STARTING or Service.State.STOPPING to Service.State.TERMINATED.
2178,util/concurrent,com.google.common.util.concurrent,Class AbstractService,protected final void notifyFailed(Throwable cause),Invoke this method to transition the service to the Service.State.FAILED. The service will not be stopped if it is running. Invoke this method when a service has failed critically or otherwise cannot be started nor stopped.
2179,util/concurrent,com.google.common.util.concurrent,Class AbstractService,public final boolean isRunning(),Description copied from interface: Service
2180,util/concurrent,com.google.common.util.concurrent,Class AbstractService,public final Service.State state(),Description copied from interface: Service
2181,util/concurrent,com.google.common.util.concurrent,Class AbstractService,public final Throwable failureCause(),Description copied from interface: Service
2182,util/concurrent,com.google.common.util.concurrent,Class AbstractService,"public final void addListener(Service.Listener listener, Executor executor)",Description copied from interface: Service
2183,common/graph,com.google.common.graph,"Class AbstractValueGraph<N,V>",public Graph<N> asGraph(),Description copied from interface: ValueGraph
2184,common/graph,com.google.common.graph,"Class AbstractValueGraph<N,V>","public Optional<V> edgeValue(N nodeU, N nodeV)",Description copied from interface: ValueGraph
2185,common/graph,com.google.common.graph,"Class AbstractValueGraph<N,V>",public Optional<V> edgeValue(EndpointPair<N> endpoints),Description copied from interface: ValueGraph
2186,common/graph,com.google.common.graph,"Class AbstractValueGraph<N,V>",public final boolean equals(@Nullable Object obj),Description copied from class: java.lang.Object
2187,common/graph,com.google.common.graph,"Class AbstractValueGraph<N,V>",public final int hashCode(),Description copied from class: java.lang.Object
2188,common/graph,com.google.common.graph,"Class AbstractValueGraph<N,V>",public String toString(),Returns a string representation of this graph.
2189,common/graph,com.google.common.graph,"Class AbstractValueGraph<N,V>",protected long edgeCount(),"Returns the number of edges in this graph; used to calculate the size of edges(). This implementation requires O(|N|) time. Classes extending this one may manually keep track of the number of edges as the graph is updated, and override this method for better performance."
2190,common/graph,com.google.common.graph,"Class AbstractValueGraph<N,V>",public Set<EndpointPair<N>> edges(),An implementation of BaseGraph.edges() defined in terms of nodes() and successors(Object).
2191,common/graph,com.google.common.graph,"Class AbstractValueGraph<N,V>",public ElementOrder<N> incidentEdgeOrder(),"Returns an ElementOrder that specifies the order of iteration for the elements of edges(), adjacentNodes(Object), predecessors(Object), successors(Object) and incidentEdges(Object)."
2192,common/graph,com.google.common.graph,"Class AbstractValueGraph<N,V>",public Set<EndpointPair<N>> incidentEdges(N node),Returns the edges in this graph whose endpoints include node. This is equal to the union of incoming and outgoing edges.
2193,common/graph,com.google.common.graph,"Class AbstractValueGraph<N,V>",public int degree(N node),"Returns the count of node's incident edges, counting self-loops twice (equivalently, the number of times an edge touches node). For directed graphs, this is equal to inDegree(node) + outDegree(node). For undirected graphs, this is equal to incidentEdges(node).size() + (number of self-loops incident to node). If the count is greater than Integer.MAX_VALUE, returns Integer.MAX_VALUE."
2194,common/graph,com.google.common.graph,"Class AbstractValueGraph<N,V>",public int inDegree(N node),"Returns the count of node's incoming edges (equal to predecessors(node).size()) in a directed graph. In an undirected graph, returns the degree(Object). If the count is greater than Integer.MAX_VALUE, returns Integer.MAX_VALUE."
2195,common/graph,com.google.common.graph,"Class AbstractValueGraph<N,V>",public int outDegree(N node),"Returns the count of node's outgoing edges (equal to successors(node).size()) in a directed graph. In an undirected graph, returns the degree(Object). If the count is greater than Integer.MAX_VALUE, returns Integer.MAX_VALUE."
2196,common/graph,com.google.common.graph,"Class AbstractValueGraph<N,V>","public boolean hasEdgeConnecting(N nodeU, N nodeV)","Returns true if there is an edge that directly connects nodeU to nodeV. This is equivalent to nodes().contains(nodeU) && successors(nodeU).contains(nodeV). In an undirected graph, this is equal to hasEdgeConnecting(nodeV, nodeU)."
2197,common/graph,com.google.common.graph,"Class AbstractValueGraph<N,V>",public boolean hasEdgeConnecting(EndpointPair<N> endpoints),"Returns true if there is an edge that directly connects endpoints (in the order, if any, specified by endpoints). This is equivalent to edges().contains(endpoints). Unlike the other EndpointPair-accepting methods, this method does not throw if the endpoints are unordered; it simply returns false. This is for consistency with the behavior of Collection#contains(Object) (which does not generally throw if the object cannot be present in the collection), and the desire to have this method's behavior be compatible with edges().contains(endpoints)."
2198,common/graph,com.google.common.graph,"Class AbstractValueGraph<N,V>",protected final void validateEndpoints(EndpointPair<?> endpoints),Throws IllegalArgumentException if the ordering of endpoints is not compatible with the directionality of this graph.
2199,common/escape,com.google.common.escape,Class ArrayBasedCharEscaper,"protected ArrayBasedCharEscaper(Map<Character,String> replacementMap, char safeMin, char safeMax)","Creates a new ArrayBasedCharEscaper instance with the given replacement map and specified safe range. If safeMax < safeMin then no characters are considered safe. If a character has no mapped replacement then it is checked against the safe range. If it lies outside that, then escapeUnsafe(char) is called, otherwise no escaping is performed."
2200,common/escape,com.google.common.escape,Class ArrayBasedCharEscaper,public final String escape(String s),Description copied from class: CharEscaper
2201,common/escape,com.google.common.escape,Class ArrayBasedCharEscaper,protected final char[] escape(char c),Escapes a single character using the replacement array and safe range values. If the given character does not have an explicit replacement and lies outside the safe range then escapeUnsafe(char) is called.
2202,common/escape,com.google.common.escape,Class ArrayBasedUnicodeEscaper,"protected ArrayBasedUnicodeEscaper(Map<Character,String> replacementMap, int safeMin, int safeMax, @Nullable String unsafeReplacement)","Creates a new ArrayBasedUnicodeEscaper instance with the given replacement map and specified safe range. If safeMax < safeMin then no code points are considered safe. If a code point has no mapped replacement then it is checked against the safe range. If it lies outside that, then escapeUnsafe(int) is called, otherwise no escaping is performed."
2203,common/escape,com.google.common.escape,Class ArrayBasedUnicodeEscaper,public final String escape(String s),Description copied from class: UnicodeEscaper
2204,common/escape,com.google.common.escape,Class ArrayBasedUnicodeEscaper,protected final char[] escape(int cp),Escapes a single Unicode code point using the replacement array and safe range values. If the given character does not have an explicit replacement and lies outside the safe range then escapeUnsafe(int) is called.
2205,common/escape,com.google.common.escape,Class ArrayBasedUnicodeEscaper,"protected final int nextEscapeIndex(CharSequence csq, int index, int end)",Description copied from class: UnicodeEscaper
2206,common/collect,com.google.common.collect,"Class ArrayListMultimap<K,V>","public static <K,V> ArrayListMultimap<K,V> create()","Creates a new, empty ArrayListMultimap with the default initial capacities. This method will soon be deprecated in favor of MultimapBuilder.hashKeys().arrayListValues().build()."
2207,common/collect,com.google.common.collect,"Class ArrayListMultimap<K,V>","public static <K,V> ArrayListMultimap<K,V> create(int expectedKeys, int expectedValuesPerKey)",Constructs an empty ArrayListMultimap with enough capacity to hold the specified numbers of keys and values without resizing. This method will soon be deprecated in favor of MultimapBuilder.hashKeys(expectedKeys).arrayListValues(expectedValuesPerKey).build().
2208,common/collect,com.google.common.collect,"Class ArrayListMultimap<K,V>","public static <K,V> ArrayListMultimap<K,V> create(Multimap<? extends K,? extends V> multimap)",Constructs an ArrayListMultimap with the same mappings as the specified multimap. This method will soon be deprecated in favor of MultimapBuilder.hashKeys().arrayListValues().build(multimap).
2209,common/collect,com.google.common.collect,"Class ArrayListMultimap<K,V>",@Deprecatedpublic void trimToSize(),"Deprecated. For a ListMultimap that automatically trims to size, use ImmutableListMultimap. If you need a mutable collection, remove the trimToSize call, or switch to a HashMap<K, ArrayList<V>>."
2210,common/collect,com.google.common.collect,"Class ArrayListMultimap<K,V>",public List<V> get(K key),"Returns a view collection of the values associated with key in this multimap, if any. Note that when containsKey(key) is false, this returns an empty collection, not null. Changes to the returned collection will update the underlying multimap, and vice versa. The returned collection is not serializable. Because the values for a given key may have duplicates and follow the insertion ordering, this method returns a List, instead of the Collection specified in the Multimap interface."
2211,common/collect,com.google.common.collect,"Class ArrayListMultimap<K,V>",@CanIgnoreReturnValuepublic List<V> removeAll(@Nullable Object key),"Removes all values associated with the key key. Once this method returns, key will not be mapped to any values, so it will not appear in Multimap.keySet(), Multimap.asMap(), or any other views. The returned collection is immutable. Because the values for a given key may have duplicates and follow the insertion ordering, this method returns a List, instead of the Collection specified in the Multimap interface."
2212,common/collect,com.google.common.collect,"Class ArrayListMultimap<K,V>","@CanIgnoreReturnValuepublic List<V> replaceValues(K key, Iterable<? extends V> values)","Stores a collection of values with the same key, replacing any existing values for that key. If values is empty, this is equivalent to removeAll(key). The returned collection is immutable. Because the values for a given key may have duplicates and follow the insertion ordering, this method returns a List, instead of the Collection specified in the Multimap interface."
2213,common/collect,com.google.common.collect,"Class ArrayListMultimap<K,V>","@CanIgnoreReturnValuepublic boolean put(K key, V value)",Stores a key-value pair in the multimap.
2214,common/collect,com.google.common.collect,"Class ArrayListMultimap<K,V>","public Map<K,Collection<V>> asMap()","Returns a view of this multimap as a Map from each distinct key to the nonempty collection of that key's associated values. Note that this.asMap().get(k) is equivalent to this.get(k) only when k is a key contained in the multimap; otherwise it returns null as opposed to an empty collection. Changes to the returned map or the collections that serve as its values will update the underlying multimap, and vice versa. The map does not support put or putAll, nor do its entries support setValue. Though the method signature doesn't say so explicitly, the returned map has List values."
2215,common/collect,com.google.common.collect,"Class ArrayListMultimap<K,V>",public boolean equals(@Nullable Object object),"Compares the specified object to this multimap for equality. Two ListMultimap instances are equal if, for each key, they contain the same values in the same order. If the value orderings disagree, the multimaps will not be considered equal."
2216,common/collect,com.google.common.collect,"Class ArrayListMultimap<K,V>",public int size(),Description copied from interface: Multimap
2217,common/collect,com.google.common.collect,"Class ArrayListMultimap<K,V>",public boolean containsKey(@Nullable Object key),Description copied from interface: Multimap
2218,common/collect,com.google.common.collect,"Class ArrayListMultimap<K,V>",public void clear(),Description copied from interface: Multimap
2219,common/collect,com.google.common.collect,"Class ArrayListMultimap<K,V>",public Collection<V> values(),"Returns a view collection containing the value from each key-value pair contained in this multimap, without collapsing duplicates (so values().size() == size()). Changes to the returned collection will update the underlying multimap, and vice versa. However, adding to the returned collection is not possible. The iterator generated by the returned collection traverses the values for one key, followed by the values of a second key, and so on."
2220,common/collect,com.google.common.collect,"Class ArrayListMultimap<K,V>","public Collection<Map.Entry<K,V>> entries()","Returns a view collection of all key-value pairs contained in this multimap, as Map.Entry instances. Changes to the returned collection or the entries it contains will update the underlying multimap, and vice versa. However, adding to the returned collection is not possible. The iterator generated by the returned collection traverses the values for one key, followed by the values of a second key, and so on. Each entry is an immutable snapshot of a key-value mapping in the multimap, taken at the time the entry is returned by a method call to the collection or its iterator."
2221,common/collect,com.google.common.collect,"Class ArrayListMultimap<K,V>","public void forEach(BiConsumer<? super K,? super V> action)",Description copied from interface: Multimap
2222,common/collect,com.google.common.collect,"Class ArrayListMultimap<K,V>",public boolean isEmpty(),Description copied from interface: Multimap
2223,common/collect,com.google.common.collect,"Class ArrayListMultimap<K,V>",public boolean containsValue(@Nullable Object value),Description copied from interface: Multimap
2224,common/collect,com.google.common.collect,"Class ArrayListMultimap<K,V>","public boolean containsEntry(@Nullable Object key, @Nullable Object value)",Description copied from interface: Multimap
2225,common/collect,com.google.common.collect,"Class ArrayListMultimap<K,V>","@CanIgnoreReturnValuepublic boolean remove(@Nullable Object key, @Nullable Object value)",Description copied from interface: Multimap
2226,common/collect,com.google.common.collect,"Class ArrayListMultimap<K,V>","@CanIgnoreReturnValuepublic boolean putAll(K key, Iterable<? extends V> values)",Description copied from interface: Multimap
2227,common/collect,com.google.common.collect,"Class ArrayListMultimap<K,V>","@CanIgnoreReturnValuepublic boolean putAll(Multimap<? extends K,? extends V> multimap)",Description copied from interface: Multimap
2228,common/collect,com.google.common.collect,"Class ArrayListMultimap<K,V>",public Set<K> keySet(),Description copied from interface: Multimap
2229,common/collect,com.google.common.collect,"Class ArrayListMultimap<K,V>",public Multiset<K> keys(),Description copied from interface: Multimap
2230,common/collect,com.google.common.collect,"Class ArrayListMultimap<K,V>",public int hashCode(),"Returns the hash code for this multimap. The hash code of a multimap is defined as the hash code of the map view, as returned by Multimap.asMap()."
2231,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>","public static <R,C,V> ArrayTable<R,C,V> create(Iterable<? extends R> rowKeys, Iterable<? extends C> columnKeys)",Creates an ArrayTable filled with null.
2232,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>","public static <R,C,V> ArrayTable<R,C,V> create(Table<R,C,V> table)","Creates an ArrayTable with the mappings in the provided table. If table includes a mapping with row key r and a separate mapping with column key c, the returned table contains a mapping with row key r and column key c. If that row key / column key pair in not in table, the pair maps to null in the generated table. The returned table allows subsequent put calls with the row keys in table.rowKeySet() and the column keys in table.columnKeySet(). Calling put(R, C, V) with other keys leads to an IllegalArgumentException. The ordering of table.rowKeySet() and table.columnKeySet() determines the row and column iteration ordering of the returned table."
2233,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>",public ImmutableList<R> rowKeyList(),"Returns, as an immutable list, the row keys provided when the table was constructed, including those that are mapped to null values only."
2234,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>",public ImmutableList<C> columnKeyList(),"Returns, as an immutable list, the column keys provided when the table was constructed, including those that are mapped to null values only."
2235,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>","public V at(int rowIndex, int columnIndex)","Returns the value corresponding to the specified row and column indices. The same value is returned by get(rowKeyList().get(rowIndex), columnKeyList().get(columnIndex)), but this method runs more quickly."
2236,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>","@CanIgnoreReturnValuepublic V set(int rowIndex, int columnIndex, V value)","Associates value with the specified row and column indices. The logic put(rowKeyList().get(rowIndex), columnKeyList().get(columnIndex), value) has the same behavior, but this method runs more quickly."
2237,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>",@GwtIncompatiblepublic V[][] toArray(Class<V> valueClass),"Returns a two-dimensional array with the table contents. The row and column indices correspond to the positions of the row and column in the iterables provided during table construction. If the table lacks a mapping for a given row and column, the corresponding array element is null. Subsequent table changes will not modify the array, and vice versa."
2238,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>",@Deprecatedpublic void clear(),Deprecated. Use eraseAll()
2239,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>",public void eraseAll(),Associates the value null with every pair of allowed row and column keys.
2240,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>","public boolean contains(@Nullable Object rowKey, @Nullable Object columnKey)",Returns true if the provided keys are among the keys provided when the table was constructed.
2241,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>",public boolean containsColumn(@Nullable Object columnKey),Returns true if the provided column key is among the column keys provided when the table was constructed.
2242,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>",public boolean containsRow(@Nullable Object rowKey),Returns true if the provided row key is among the row keys provided when the table was constructed.
2243,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>",public boolean containsValue(@Nullable Object value),Description copied from interface: Table
2244,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>","public V get(@Nullable Object rowKey, @Nullable Object columnKey)",Description copied from interface: Table
2245,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>",public boolean isEmpty(),Returns true if rowKeyList().size == 0 or columnKeyList().size() == 0.
2246,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>","@CanIgnoreReturnValuepublic V put(R rowKey, C columnKey, V value)","Associates the specified value with the specified keys. If the table already contained a mapping for those keys, the old value is replaced with the specified value."
2247,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>","public void putAll(Table<? extends R,? extends C,? extends V> table)","Copies all mappings from the specified table to this table. The effect is equivalent to calling Table.put(R, C, V) with each row key / column key / value mapping in table. If table is an ArrayTable, its null values will be stored in this table, possibly replacing values that were previously non-null."
2248,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>","@CanIgnoreReturnValue @Deprecatedpublic V remove(Object rowKey, Object columnKey)","Deprecated. Use erase(java.lang.Object, java.lang.Object)"
2249,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>","@CanIgnoreReturnValuepublic V erase(@Nullable Object rowKey, @Nullable Object columnKey)","Associates the value null with the specified keys, assuming both keys are valid. If either key is null or isn't among the keys provided during construction, this method has no effect. This method is equivalent to put(rowKey, columnKey, null) when both provided keys are valid."
2250,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>",public int size(),Description copied from interface: Table
2251,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>","public Set<Table.Cell<R,C,V>> cellSet()","Returns an unmodifiable set of all row key / column key / value triplets. Changes to the table will update the returned set. The returned set's iterator traverses the mappings with the first row key, the mappings with the second row key, and so on. The value in the returned cells may change if the table subsequently changes."
2252,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>","public Map<R,V> column(C columnKey)","Returns a view of all mappings that have the given column key. If the column key isn't in columnKeySet(), an empty immutable map is returned. Otherwise, for each row key in rowKeySet(), the returned map associates the row key with the corresponding value in the table. Changes to the returned map will update the underlying table, and vice versa."
2253,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>",public ImmutableSet<C> columnKeySet(),"Returns an immutable set of the valid column keys, including those that are associated with null values only."
2254,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>","public Map<C,Map<R,V>> columnMap()",Description copied from interface: Table
2255,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>","public Map<C,V> row(R rowKey)","Returns a view of all mappings that have the given row key. If the row key isn't in rowKeySet(), an empty immutable map is returned. Otherwise, for each column key in columnKeySet(), the returned map associates the column key with the corresponding value in the table. Changes to the returned map will update the underlying table, and vice versa."
2256,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>",public ImmutableSet<R> rowKeySet(),"Returns an immutable set of the valid row keys, including those that are associated with null values only."
2257,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>","public Map<R,Map<C,V>> rowMap()",Description copied from interface: Table
2258,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>",public Collection<V> values(),"Returns an unmodifiable collection of all values, which may contain duplicates. Changes to the table will update the returned collection. The returned collection's iterator traverses the values of the first row key, the values of the second row key, and so on."
2259,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>",public boolean equals(@Nullable Object obj),Description copied from class: java.lang.Object
2260,common/collect,com.google.common.collect,"Class ArrayTable<R,C,V>",public int hashCode(),Description copied from class: java.lang.Object
2261,common/base,com.google.common.base,Class Ascii,public static final byte NUL,"Null ('\0'): The all-zeros character which may serve to accomplish time fill and media fill. Normally used as a C string terminator. Although RFC 20 names this as Null, note that it is distinct from the C/C++ NULL pointer."
2262,common/base,com.google.common.base,Class Ascii,public static final byte SOH,Start of Heading: A communication control character used at the beginning of a sequence of characters which constitute a machine-sensible address or routing information. Such a sequence is referred to as the heading. An STX character has the effect of terminating a heading.
2263,common/base,com.google.common.base,Class Ascii,public static final byte STX,Start of Text: A communication control character which precedes a sequence of characters that is to be treated as an entity and entirely transmitted through to the ultimate destination. Such a sequence is referred to as text. STX may be used to terminate a sequence of characters started by SOH.
2264,common/base,com.google.common.base,Class Ascii,public static final byte ETX,End of Text: A communication control character used to terminate a sequence of characters started with STX and transmitted as an entity.
2265,common/base,com.google.common.base,Class Ascii,public static final byte EOT,"End of Transmission: A communication control character used to indicate the conclusion of a transmission, which may have contained one or more texts and any associated headings."
2266,common/base,com.google.common.base,Class Ascii,public static final byte ENQ,"Enquiry: A communication control character used in data communication systems as a request for a response from a remote station. It may be used as a Who Are You (WRU) to obtain identification, or may be used to obtain station status, or both."
2267,common/base,com.google.common.base,Class Ascii,public static final byte ACK,Acknowledge: A communication control character transmitted by a receiver as an affirmative response to a sender.
2268,common/base,com.google.common.base,Class Ascii,public static final byte BEL,Bell ('\a'): A character for use when there is a need to call for human attention. It may control alarm or attention devices.
2269,common/base,com.google.common.base,Class Ascii,public static final byte BS,Backspace ('\b'): A format effector which controls the movement of the printing position one printing space backward on the same printing line. (Applicable also to display devices.)
2270,common/base,com.google.common.base,Class Ascii,public static final byte HT,Horizontal Tabulation ('\t'): A format effector which controls the movement of the printing position to the next in a series of predetermined positions along the printing line. (Applicable also to display devices and the skip function on punched cards.)
2271,common/base,com.google.common.base,Class Ascii,public static final byte LF,"Line Feed ('\n'): A format effector which controls the movement of the printing position to the next printing line. (Applicable also to display devices.) Where appropriate, this character may have the meaning New Line (NL), a format effector which controls the movement of the printing point to the first printing position on the next printing line. Use of this convention requires agreement between sender and recipient of data."
2272,common/base,com.google.common.base,Class Ascii,public static final byte NL,Alternate name for LF. (LF is preferred.)
2273,common/base,com.google.common.base,Class Ascii,public static final byte VT,Vertical Tabulation ('\v'): A format effector which controls the movement of the printing position to the next in a series of predetermined printing lines. (Applicable also to display devices.)
2274,common/base,com.google.common.base,Class Ascii,public static final byte FF,Form Feed ('\f'): A format effector which controls the movement of the printing position to the first pre-determined printing line on the next form or page. (Applicable also to display devices.)
2275,common/base,com.google.common.base,Class Ascii,public static final byte CR,Carriage Return ('\r'): A format effector which controls the movement of the printing position to the first printing position on the same printing line. (Applicable also to display devices.)
2276,common/base,com.google.common.base,Class Ascii,public static final byte SO,Shift Out: A control character indicating that the code combinations which follow shall be interpreted as outside of the character set of the standard code table until a Shift In character is reached.
2277,common/base,com.google.common.base,Class Ascii,public static final byte SI,Shift In: A control character indicating that the code combinations which follow shall be interpreted according to the standard code table.
2278,common/base,com.google.common.base,Class Ascii,public static final byte DLE,Data Link Escape: A communication control character which will change the meaning of a limited number of contiguously following characters. It is used exclusively to provide supplementary controls in data communication networks.
2279,common/base,com.google.common.base,Class Ascii,public static final byte DC1,"Device Control 1. Characters for the control of ancillary devices associated with data processing or telecommunication systems, more especially switching devices on or off. (If a single stop control is required to interrupt or turn off ancillary devices, DC4 is the preferred assignment.)"
2280,common/base,com.google.common.base,Class Ascii,public static final byte XON,"Transmission On: Although originally defined as DC1, this ASCII control character is now better known as the XON code used for software flow control in serial communications. The main use is restarting the transmission after the communication has been stopped by the XOFF control code."
2281,common/base,com.google.common.base,Class Ascii,public static final byte DC2,"Device Control 2. Characters for the control of ancillary devices associated with data processing or telecommunication systems, more especially switching devices on or off. (If a single stop control is required to interrupt or turn off ancillary devices, DC4 is the preferred assignment.)"
2282,common/base,com.google.common.base,Class Ascii,public static final byte DC3,"Device Control 3. Characters for the control of ancillary devices associated with data processing or telecommunication systems, more especially switching devices on or off. (If a single stop control is required to interrupt or turn off ancillary devices, DC4 is the preferred assignment.)"
2283,common/base,com.google.common.base,Class Ascii,public static final byte XOFF,Transmission off. See XON for explanation.
2284,common/base,com.google.common.base,Class Ascii,public static final byte DC4,"Device Control 4. Characters for the control of ancillary devices associated with data processing or telecommunication systems, more especially switching devices on or off. (If a single stop control is required to interrupt or turn off ancillary devices, DC4 is the preferred assignment.)"
2285,common/base,com.google.common.base,Class Ascii,public static final byte NAK,Negative Acknowledge: A communication control character transmitted by a receiver as a negative response to the sender.
2286,common/base,com.google.common.base,Class Ascii,public static final byte SYN,Synchronous Idle: A communication control character used by a synchronous transmission system in the absence of any other character to provide a signal from which synchronism may be achieved or retained.
2287,common/base,com.google.common.base,Class Ascii,public static final byte ETB,End of Transmission Block: A communication control character used to indicate the end of a block of data for communication purposes. ETB is used for blocking data where the block structure is not necessarily related to the processing format.
2288,common/base,com.google.common.base,Class Ascii,public static final byte CAN,Cancel: A control character used to indicate that the data with which it is sent is in error or is to be disregarded.
2289,common/base,com.google.common.base,Class Ascii,public static final byte EM,"End of Medium: A control character associated with the sent data which may be used to identify the physical end of the medium, or the end of the used, or wanted, portion of information recorded on a medium. (The position of this character does not necessarily correspond to the physical end of the medium.)"
2290,common/base,com.google.common.base,Class Ascii,public static final byte SUB,Substitute: A character that may be substituted for a character which is determined to be invalid or in error.
2291,common/base,com.google.common.base,Class Ascii,public static final byte ESC,Escape: A control character intended to provide code extension (supplementary characters) in general information interchange. The Escape character itself is a prefix affecting the interpretation of a limited number of contiguously following characters.
2292,common/base,com.google.common.base,Class Ascii,public static final byte FS,"File Separator: These four information separators may be used within data in optional fashion, except that their hierarchical relationship shall be: FS is the most inclusive, then GS, then RS, and US is least inclusive. (The content and length of a File, Group, Record, or Unit are not specified.)"
2293,common/base,com.google.common.base,Class Ascii,public static final byte GS,"Group Separator: These four information separators may be used within data in optional fashion, except that their hierarchical relationship shall be: FS is the most inclusive, then GS, then RS, and US is least inclusive. (The content and length of a File, Group, Record, or Unit are not specified.)"
2294,common/base,com.google.common.base,Class Ascii,public static final byte RS,"Record Separator: These four information separators may be used within data in optional fashion, except that their hierarchical relationship shall be: FS is the most inclusive, then GS, then RS, and US is least inclusive. (The content and length of a File, Group, Record, or Unit are not specified.)"
2295,common/base,com.google.common.base,Class Ascii,public static final byte US,"Unit Separator: These four information separators may be used within data in optional fashion, except that their hierarchical relationship shall be: FS is the most inclusive, then GS, then RS, and US is least inclusive. (The content and length of a File, Group, Record, or Unit are not specified.)"
2296,common/base,com.google.common.base,Class Ascii,public static final byte SP,"Space: A normally non-printing graphic character used to separate words. It is also a format effector which controls the movement of the printing position, one printing position forward. (Applicable also to display devices.)"
2297,common/base,com.google.common.base,Class Ascii,public static final byte SPACE,Alternate name for SP.
2298,common/base,com.google.common.base,Class Ascii,public static final byte DEL,Delete: This character is used primarily to erase or obliterate erroneous or unwanted characters in perforated tape.
2299,common/base,com.google.common.base,Class Ascii,public static final char MIN,The minimum value of an ASCII character.
2300,common/base,com.google.common.base,Class Ascii,public static String toLowerCase(String string),Returns a copy of the input string in which all uppercase ASCII characters have been converted to lowercase. All other characters are copied without modification.
2301,common/base,com.google.common.base,Class Ascii,public static String toLowerCase(CharSequence chars),Returns a copy of the input character sequence in which all uppercase ASCII characters have been converted to lowercase. All other characters are copied without modification.
2302,common/base,com.google.common.base,Class Ascii,public static char toLowerCase(char c),If the argument is an uppercase ASCII character returns the lowercase equivalent. Otherwise returns the argument.
2303,common/base,com.google.common.base,Class Ascii,public static String toUpperCase(String string),Returns a copy of the input string in which all lowercase ASCII characters have been converted to uppercase. All other characters are copied without modification.
2304,common/base,com.google.common.base,Class Ascii,public static String toUpperCase(CharSequence chars),Returns a copy of the input character sequence in which all lowercase ASCII characters have been converted to uppercase. All other characters are copied without modification.
2305,common/base,com.google.common.base,Class Ascii,public static char toUpperCase(char c),If the argument is a lowercase ASCII character returns the uppercase equivalent. Otherwise returns the argument.
2306,common/base,com.google.common.base,Class Ascii,public static boolean isLowerCase(char c),Indicates whether c is one of the twenty-six lowercase ASCII alphabetic characters between 'a' and 'z' inclusive. All others (including non-ASCII characters) return false.
2307,common/base,com.google.common.base,Class Ascii,public static boolean isUpperCase(char c),Indicates whether c is one of the twenty-six uppercase ASCII alphabetic characters between 'A' and 'Z' inclusive. All others (including non-ASCII characters) return false.
2308,common/base,com.google.common.base,Class Ascii,"public static String truncate(CharSequence seq, int maxLength, String truncationIndicator)","Truncates the given character sequence to the given maximum length. If the length of the sequence is greater than maxLength, the returned string will be exactly maxLength chars in length and will end with the given truncationIndicator. Otherwise, the sequence will be returned as a string with no changes to the content. Examples: Ascii.truncate(foobar, 7, ...); // returns foobar Ascii.truncate(foobar, 5, ...); // returns fo... Note: This method may work with certain non-ASCII text but is not safe for use with arbitrary Unicode text. It is mostly intended for use with text that is known to be safe for use with it (such as all-ASCII text) and for simple debugging text. When using this method, consider the following: it may split surrogate pairs it may split characters and combining characters it does not consider word boundaries if truncating for display to users, there are other considerations that must be taken into account the appropriate truncation indicator may be locale-dependent it is safe to use non-ASCII characters in the truncation indicator "
2309,common/eventbus,com.google.common.eventbus,Class AsyncEventBus,"public AsyncEventBus(String identifier, Executor executor)",Creates a new AsyncEventBus that will use executor to dispatch events. Assigns identifier as the bus's name for logging purposes.
2310,common/eventbus,com.google.common.eventbus,Class AsyncEventBus,"public AsyncEventBus(Executor executor, SubscriberExceptionHandler subscriberExceptionHandler)",Creates a new AsyncEventBus that will use executor to dispatch events.
2311,util/concurrent,com.google.common.util.concurrent,Class AtomicDouble,public AtomicDouble(double initialValue),Creates a new AtomicDouble with the given initial value.
2312,util/concurrent,com.google.common.util.concurrent,Class AtomicDouble,public final double get(),Gets the current value.
2313,util/concurrent,com.google.common.util.concurrent,Class AtomicDouble,public final void set(double newValue),Sets to the given value.
2314,util/concurrent,com.google.common.util.concurrent,Class AtomicDouble,public final void lazySet(double newValue),Eventually sets to the given value.
2315,util/concurrent,com.google.common.util.concurrent,Class AtomicDouble,public final double getAndSet(double newValue),Atomically sets to the given value and returns the old value.
2316,util/concurrent,com.google.common.util.concurrent,Class AtomicDouble,"public final boolean compareAndSet(double expect, double update)",Atomically sets the value to the given updated value if the current value is bitwise equal to the expected value.
2317,util/concurrent,com.google.common.util.concurrent,Class AtomicDouble,"public final boolean weakCompareAndSet(double expect, double update)","Atomically sets the value to the given updated value if the current value is bitwise equal to the expected value. May fail spuriously and does not provide ordering guarantees, so is only rarely an appropriate alternative to compareAndSet."
2318,util/concurrent,com.google.common.util.concurrent,Class AtomicDouble,@CanIgnoreReturnValuepublic final double getAndAdd(double delta),Atomically adds the given value to the current value.
2319,util/concurrent,com.google.common.util.concurrent,Class AtomicDouble,@CanIgnoreReturnValuepublic final double addAndGet(double delta),Atomically adds the given value to the current value.
2320,util/concurrent,com.google.common.util.concurrent,Class AtomicDouble,public String toString(),Returns the String representation of the current value.
2321,util/concurrent,com.google.common.util.concurrent,Class AtomicDouble,public int intValue(),Returns the value of this AtomicDouble as an int after a narrowing primitive conversion.
2322,util/concurrent,com.google.common.util.concurrent,Class AtomicDouble,public long longValue(),Returns the value of this AtomicDouble as a long after a narrowing primitive conversion.
2323,util/concurrent,com.google.common.util.concurrent,Class AtomicDouble,public float floatValue(),Returns the value of this AtomicDouble as a float after a narrowing primitive conversion.
2324,util/concurrent,com.google.common.util.concurrent,Class AtomicDoubleArray,public AtomicDoubleArray(int length),"Creates a new AtomicDoubleArray of the given length, with all elements initially zero."
2325,util/concurrent,com.google.common.util.concurrent,Class AtomicDoubleArray,public final int length(),Returns the length of the array.
2326,util/concurrent,com.google.common.util.concurrent,Class AtomicDoubleArray,public final double get(int i),Gets the current value at position i.
2327,util/concurrent,com.google.common.util.concurrent,Class AtomicDoubleArray,"public final void set(int i, double newValue)",Sets the element at position i to the given value.
2328,util/concurrent,com.google.common.util.concurrent,Class AtomicDoubleArray,"public final void lazySet(int i, double newValue)",Eventually sets the element at position i to the given value.
2329,util/concurrent,com.google.common.util.concurrent,Class AtomicDoubleArray,"public final double getAndSet(int i, double newValue)",Atomically sets the element at position i to the given value and returns the old value.
2330,util/concurrent,com.google.common.util.concurrent,Class AtomicDoubleArray,"public final boolean compareAndSet(int i, double expect, double update)",Atomically sets the element at position i to the given updated value if the current value is bitwise equal to the expected value.
2331,util/concurrent,com.google.common.util.concurrent,Class AtomicDoubleArray,"public final boolean weakCompareAndSet(int i, double expect, double update)","Atomically sets the element at position i to the given updated value if the current value is bitwise equal to the expected value. May fail spuriously and does not provide ordering guarantees, so is only rarely an appropriate alternative to compareAndSet."
2332,util/concurrent,com.google.common.util.concurrent,Class AtomicDoubleArray,"@CanIgnoreReturnValuepublic final double getAndAdd(int i, double delta)",Atomically adds the given value to the element at index i.
2333,util/concurrent,com.google.common.util.concurrent,Class AtomicDoubleArray,"@CanIgnoreReturnValuepublic double addAndGet(int i, double delta)",Atomically adds the given value to the element at index i.
2334,util/concurrent,com.google.common.util.concurrent,Class AtomicLongMap<K>,public static <K> AtomicLongMap<K> create(),Creates an AtomicLongMap.
2335,util/concurrent,com.google.common.util.concurrent,Class AtomicLongMap<K>,"public static <K> AtomicLongMap<K> create(Map<? extends K,? extends Long> m)",Creates an AtomicLongMap with the same mappings as the specified Map.
2336,util/concurrent,com.google.common.util.concurrent,Class AtomicLongMap<K>,public long get(K key),"Returns the value associated with key, or zero if there is no value associated with key."
2337,util/concurrent,com.google.common.util.concurrent,Class AtomicLongMap<K>,@CanIgnoreReturnValuepublic long incrementAndGet(K key),"Increments by one the value currently associated with key, and returns the new value."
2338,util/concurrent,com.google.common.util.concurrent,Class AtomicLongMap<K>,@CanIgnoreReturnValuepublic long decrementAndGet(K key),"Decrements by one the value currently associated with key, and returns the new value."
2339,util/concurrent,com.google.common.util.concurrent,Class AtomicLongMap<K>,"@CanIgnoreReturnValuepublic long addAndGet(K key, long delta)","Adds delta to the value currently associated with key, and returns the new value."
2340,util/concurrent,com.google.common.util.concurrent,Class AtomicLongMap<K>,@CanIgnoreReturnValuepublic long getAndIncrement(K key),"Increments by one the value currently associated with key, and returns the old value."
2341,util/concurrent,com.google.common.util.concurrent,Class AtomicLongMap<K>,@CanIgnoreReturnValuepublic long getAndDecrement(K key),"Decrements by one the value currently associated with key, and returns the old value."
2342,util/concurrent,com.google.common.util.concurrent,Class AtomicLongMap<K>,"@CanIgnoreReturnValuepublic long getAndAdd(K key, long delta)","Adds delta to the value currently associated with key, and returns the old value."
2343,util/concurrent,com.google.common.util.concurrent,Class AtomicLongMap<K>,"@CanIgnoreReturnValuepublic long updateAndGet(K key, LongUnaryOperator updaterFunction)","Updates the value currently associated with key with the specified function, and returns the new value. If there is not currently a value associated with key, the function is applied to 0L."
2344,util/concurrent,com.google.common.util.concurrent,Class AtomicLongMap<K>,"@CanIgnoreReturnValuepublic long getAndUpdate(K key, LongUnaryOperator updaterFunction)","Updates the value currently associated with key with the specified function, and returns the old value. If there is not currently a value associated with key, the function is applied to 0L."
2345,util/concurrent,com.google.common.util.concurrent,Class AtomicLongMap<K>,"@CanIgnoreReturnValuepublic long accumulateAndGet(K key, long x, LongBinaryOperator accumulatorFunction)","Updates the value currently associated with key by combining it with x via the specified accumulator function, returning the new value. The previous value associated with key (or zero, if there is none) is passed as the first argument to accumulatorFunction, and x is passed as the second argument."
2346,util/concurrent,com.google.common.util.concurrent,Class AtomicLongMap<K>,"@CanIgnoreReturnValuepublic long getAndAccumulate(K key, long x, LongBinaryOperator accumulatorFunction)","Updates the value currently associated with key by combining it with x via the specified accumulator function, returning the old value. The previous value associated with key (or zero, if there is none) is passed as the first argument to accumulatorFunction, and x is passed as the second argument."
2347,util/concurrent,com.google.common.util.concurrent,Class AtomicLongMap<K>,"@CanIgnoreReturnValuepublic long put(K key, long newValue)","Associates newValue with key in this map, and returns the value previously associated with key, or zero if there was no such value."
2348,util/concurrent,com.google.common.util.concurrent,Class AtomicLongMap<K>,"public void putAll(Map<? extends K,? extends Long> m)","Copies all of the mappings from the specified map to this map. The effect of this call is equivalent to that of calling put(k, v) on this map once for each mapping from key k to value v in the specified map. The behavior of this operation is undefined if the specified map is modified while the operation is in progress."
2349,util/concurrent,com.google.common.util.concurrent,Class AtomicLongMap<K>,@CanIgnoreReturnValuepublic long remove(K key),"Removes and returns the value associated with key. If key is not in the map, this method has no effect and returns zero."
2350,util/concurrent,com.google.common.util.concurrent,Class AtomicLongMap<K>,@Beta @CanIgnoreReturnValuepublic boolean removeIfZero(K key),Atomically remove key from the map iff its associated value is 0.
2351,util/concurrent,com.google.common.util.concurrent,Class AtomicLongMap<K>,public void removeAllZeros(),"Removes all mappings from this map whose values are zero. This method is not atomic: the map may be visible in intermediate states, where some of the zero values have been removed and others have not."
2352,util/concurrent,com.google.common.util.concurrent,Class AtomicLongMap<K>,public long sum(),Returns the sum of all values in this map. This method is not atomic: the sum may or may not include other concurrent operations.
2353,util/concurrent,com.google.common.util.concurrent,Class AtomicLongMap<K>,"public Map<K,Long> asMap()","Returns a live, read-only view of the map backing this AtomicLongMap."
2354,util/concurrent,com.google.common.util.concurrent,Class AtomicLongMap<K>,public boolean containsKey(Object key),Returns true if this map contains a mapping for the specified key.
2355,util/concurrent,com.google.common.util.concurrent,Class AtomicLongMap<K>,public int size(),"Returns the number of key-value mappings in this map. If the map contains more than Integer.MAX_VALUE elements, returns Integer.MAX_VALUE."
2356,util/concurrent,com.google.common.util.concurrent,Class AtomicLongMap<K>,public boolean isEmpty(),Returns true if this map contains no key-value mappings.
2357,util/concurrent,com.google.common.util.concurrent,Class AtomicLongMap<K>,public void clear(),Removes all of the mappings from this map. The map will be empty after this call returns. This method is not atomic: the map may not be empty after returning if there were concurrent writes.
2358,util/concurrent,com.google.common.util.concurrent,Class Atomics,public static <V> AtomicReference<V> newReference(),Creates an AtomicReference instance with no initial value.
2359,util/concurrent,com.google.common.util.concurrent,Class Atomics,public static <V> AtomicReference<V> newReference(V initialValue),Creates an AtomicReference instance with the given initial value.
2360,util/concurrent,com.google.common.util.concurrent,Class Atomics,public static <E> AtomicReferenceArray<E> newReferenceArray(int length),Creates an AtomicReferenceArray instance of given length.
2361,common/io,com.google.common.io,Class BaseEncoding,public String encode(byte[] bytes),"Encodes the specified byte array, and returns the encoded String."
2362,common/io,com.google.common.io,Class BaseEncoding,"public final String encode(byte[] bytes, int off, int len)","Encodes the specified range of the specified byte array, and returns the encoded String."
2363,common/io,com.google.common.io,Class BaseEncoding,@GwtIncompatiblepublic abstract OutputStream encodingStream(Writer writer),"Returns an OutputStream that encodes bytes using this encoding into the specified Writer. When the returned OutputStream is closed, so is the backing Writer."
2364,common/io,com.google.common.io,Class BaseEncoding,@GwtIncompatiblepublic final ByteSink encodingSink(CharSink encodedSink),Returns a ByteSink that writes base-encoded bytes to the specified CharSink.
2365,common/io,com.google.common.io,Class BaseEncoding,public abstract boolean canDecode(CharSequence chars),Determines whether the specified character sequence is a valid encoded string according to this encoding.
2366,common/io,com.google.common.io,Class BaseEncoding,public final byte[] decode(CharSequence chars),"Decodes the specified character sequence, and returns the resulting byte[]. This is the inverse operation to encode(byte[])."
2367,common/io,com.google.common.io,Class BaseEncoding,@GwtIncompatiblepublic abstract InputStream decodingStream(Reader reader),Returns an InputStream that decodes base-encoded input from the specified Reader. The returned stream throws a BaseEncoding.DecodingException upon decoding-specific errors.
2368,common/io,com.google.common.io,Class BaseEncoding,@GwtIncompatiblepublic final ByteSource decodingSource(CharSource encodedSource),Returns a ByteSource that reads base-encoded bytes from the specified CharSource.
2369,common/io,com.google.common.io,Class BaseEncoding,public abstract BaseEncoding omitPadding(),"Returns an encoding that behaves equivalently to this encoding, but omits any padding characters as specified by RFC 4648 section 3.2, Padding of Encoded Data."
2370,common/io,com.google.common.io,Class BaseEncoding,public abstract BaseEncoding withPadChar(char padChar),"Returns an encoding that behaves equivalently to this encoding, but uses an alternate character for padding."
2371,common/io,com.google.common.io,Class BaseEncoding,"public abstract BaseEncoding withSeparator(String separator, int n)","Returns an encoding that behaves equivalently to this encoding, but adds a separator string after every n characters. Any occurrences of any characters that occur in the separator are skipped over in decoding."
2372,common/io,com.google.common.io,Class BaseEncoding,public abstract BaseEncoding upperCase(),"Returns an encoding that behaves equivalently to this encoding, but encodes and decodes with uppercase letters. Padding and separator characters remain in their original case."
2373,common/io,com.google.common.io,Class BaseEncoding,public abstract BaseEncoding lowerCase(),"Returns an encoding that behaves equivalently to this encoding, but encodes and decodes with lowercase letters. Padding and separator characters remain in their original case."
2374,common/io,com.google.common.io,Class BaseEncoding,public static BaseEncoding base64(),"The base64 base encoding specified by RFC 4648 section 4, Base 64 Encoding. (This is the same as the base 64 encoding from RFC 3548.) The character '=' is used for padding, but can be omitted or replaced. No line feeds are added by default, as per RFC 4648 section 3.1, Line Feeds in Encoded Data. Line feeds may be added using withSeparator(String, int)."
2375,common/io,com.google.common.io,Class BaseEncoding,public static BaseEncoding base64Url(),"The base64url encoding specified by RFC 4648 section 5, Base 64 Encoding with URL and Filename Safe Alphabet, also sometimes referred to as the web safe Base64. (This is the same as the base 64 encoding with URL and filename safe alphabet from RFC 3548.) The character '=' is used for padding, but can be omitted or replaced. No line feeds are added by default, as per RFC 4648 section 3.1, Line Feeds in Encoded Data. Line feeds may be added using withSeparator(String, int)."
2376,common/io,com.google.common.io,Class BaseEncoding,public static BaseEncoding base32(),"The base32 encoding specified by RFC 4648 section 6, Base 32 Encoding. (This is the same as the base 32 encoding from RFC 3548.) The character '=' is used for padding, but can be omitted or replaced. No line feeds are added by default, as per RFC 4648 section 3.1, Line Feeds in Encoded Data. Line feeds may be added using withSeparator(String, int)."
2377,common/io,com.google.common.io,Class BaseEncoding,public static BaseEncoding base32Hex(),"The base32hex encoding specified by RFC 4648 section 7, Base 32 Encoding with Extended Hex Alphabet. There is no corresponding encoding in RFC 3548. The character '=' is used for padding, but can be omitted or replaced. No line feeds are added by default, as per RFC 4648 section 3.1, Line Feeds in Encoded Data. Line feeds may be added using withSeparator(String, int)."
2378,common/math,com.google.common.math,Class BigIntegerMath,@Betapublic static BigInteger ceilingPowerOfTwo(BigInteger x),"Returns the smallest power of two greater than or equal to x. This is equivalent to BigInteger.valueOf(2).pow(log2(x, CEILING))."
2379,common/math,com.google.common.math,Class BigIntegerMath,@Betapublic static BigInteger floorPowerOfTwo(BigInteger x),"Returns the largest power of two less than or equal to x. This is equivalent to BigInteger.valueOf(2).pow(log2(x, FLOOR))."
2380,common/math,com.google.common.math,Class BigIntegerMath,public static boolean isPowerOfTwo(BigInteger x),Returns true if x represents a power of two.
2381,common/math,com.google.common.math,Class BigIntegerMath,"public static int log2(BigInteger x, RoundingMode mode)","Returns the base-2 logarithm of x, rounded according to the specified rounding mode."
2382,common/math,com.google.common.math,Class BigIntegerMath,"@GwtIncompatiblepublic static int log10(BigInteger x, RoundingMode mode)","Returns the base-10 logarithm of x, rounded according to the specified rounding mode."
2383,common/math,com.google.common.math,Class BigIntegerMath,"@GwtIncompatiblepublic static BigInteger sqrt(BigInteger x, RoundingMode mode)","Returns the square root of x, rounded with the specified rounding mode."
2384,common/math,com.google.common.math,Class BigIntegerMath,"@GwtIncompatiblepublic static double roundToDouble(BigInteger x, RoundingMode mode)","Returns x, rounded to a double with the specified rounding mode. If x is precisely representable as a double, its double value will be returned; otherwise, the rounding will choose between the two nearest representable values with mode. For the case of RoundingMode.HALF_DOWN, HALF_UP, and HALF_EVEN, infinite double values are considered infinitely far away. For example, 2^2000 is not representable as a double, but roundToDouble(BigInteger.valueOf(2).pow(2000), HALF_UP) will return Double.MAX_VALUE, not Double.POSITIVE_INFINITY. For the case of RoundingMode.HALF_EVEN, this implementation uses the IEEE 754 default rounding mode: if the two nearest representable values are equally near, the one with the least significant bit zero is chosen. (In such cases, both of the nearest representable values are even integers; this method returns the one that is a multiple of a greater power of two.)"
2385,common/math,com.google.common.math,Class BigIntegerMath,"@GwtIncompatiblepublic static BigInteger divide(BigInteger p, BigInteger q, RoundingMode mode)","Returns the result of dividing p by q, rounding using the specified RoundingMode."
2386,common/math,com.google.common.math,Class BigIntegerMath,public static BigInteger factorial(int n),"Returns n!, that is, the product of the first n positive integers, or 1 if n == 0. Warning: the result takes O(n log n) space, so use cautiously. This uses an efficient binary recursive algorithm to compute the factorial with balanced multiplies. It also removes all the 2s from the intermediate products (shifting them back in at the end)."
2387,common/collect,com.google.common.collect,"Interface BiMap<K,V>","@CanIgnoreReturnValueV put(K key, V value)","Associates the specified value with the specified key in this map (optional operation). If the map previously contained a mapping for the key, the old value is replaced by the specified value. (A map m is said to contain a mapping for a key k if and only if m.containsKey(k) would return true.)"
2388,common/collect,com.google.common.collect,"Interface BiMap<K,V>","@CanIgnoreReturnValueV forcePut(K key, V value)","An alternate form of put that silently removes any existing entry with the value value before proceeding with the put(K, V) operation. If the bimap previously contained the provided key-value mapping, this method has no effect. Note that a successful call to this method could cause the size of the bimap to increase by one, stay the same, or even decrease by one. Warning: If an existing entry with this value is removed, the key for that entry is discarded and not returned."
2389,common/collect,com.google.common.collect,"Interface BiMap<K,V>","void putAll(Map<? extends K,? extends V> map)","Copies all of the mappings from the specified map to this map (optional operation). The effect of this call is equivalent to that of calling put(k, v) on this map once for each mapping from key k to value v in the specified map. The behavior of this operation is undefined if the specified map is modified while the operation is in progress. Warning: the results of calling this method may vary depending on the iteration order of map."
2390,common/collect,com.google.common.collect,"Interface BiMap<K,V>",Set<V> values(),"Returns a Collection view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. If the map is modified while an iteration over the collection is in progress (except through the iterator's own remove operation), the results of the iteration are undefined. The collection supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Collection.remove, removeAll, retainAll and clear operations. It does not support the add or addAll operations. Because a bimap has unique values, this method returns a Set, instead of the Collection specified in the Map interface."
2391,common/hash,com.google.common.hash,Class BloomFilter<T>,public BloomFilter<T> copy(),Creates a new BloomFilter that's a copy of this instance. The new instance is equal to this instance but shares no mutable state.
2392,common/hash,com.google.common.hash,Class BloomFilter<T>,public boolean mightContain(T object),"Returns true if the element might have been put in this Bloom filter, false if this is definitely not the case."
2393,common/hash,com.google.common.hash,Class BloomFilter<T>,@Deprecatedpublic boolean apply(T input),Deprecated. Provided only to satisfy the Predicate interface; use mightContain(T) instead.
2394,common/hash,com.google.common.hash,Class BloomFilter<T>,@CanIgnoreReturnValuepublic boolean put(T object),Puts an element into this BloomFilter. Ensures that subsequent invocations of mightContain(Object) with the same element will always return true.
2395,common/hash,com.google.common.hash,Class BloomFilter<T>,public double expectedFpp(),"Returns the probability that mightContain(Object) will erroneously return true for an object that has not actually been put in the BloomFilter. Ideally, this number should be close to the fpp parameter passed in create(Funnel, int, double), or smaller. If it is significantly higher, it is usually the case that too many elements (more than expected) have been put in the BloomFilter, degenerating it."
2396,common/hash,com.google.common.hash,Class BloomFilter<T>,public long approximateElementCount(),Returns an estimate for the total number of distinct elements that have been added to this Bloom filter. This approximation is reasonably accurate if it does not exceed the value of expectedInsertions that was used when constructing the filter.
2397,common/hash,com.google.common.hash,Class BloomFilter<T>,public boolean isCompatible(BloomFilter<T> that),"Determines whether a given Bloom filter is compatible with this Bloom filter. For two Bloom filters to be compatible, they must: not be the same instance have the same number of hash functions have the same bit size have the same strategy have equal funnels "
2398,common/hash,com.google.common.hash,Class BloomFilter<T>,public void putAll(BloomFilter<T> that),Combines this Bloom filter with another Bloom filter by performing a bitwise OR of the underlying data. The mutations happen to this instance. Callers must ensure the Bloom filters are appropriately sized to avoid saturating them.
2399,common/hash,com.google.common.hash,Class BloomFilter<T>,public boolean equals(@Nullable Object object),Description copied from class: java.lang.Object
2400,common/hash,com.google.common.hash,Class BloomFilter<T>,public int hashCode(),Description copied from class: java.lang.Object
2401,common/hash,com.google.common.hash,Class BloomFilter<T>,"public static <T> Collector<T,?,BloomFilter<T>> toBloomFilter(Funnel<? super T> funnel, long expectedInsertions)","Returns a Collector expecting the specified number of insertions, and yielding a BloomFilter with false positive probability 3%. Note that if the Collector receives significantly more elements than specified, the resulting BloomFilter will suffer a sharp deterioration of its false positive probability. The constructed BloomFilter will be serializable if the provided Funnel<T> is. It is recommended that the funnel be implemented as a Java enum. This has the benefit of ensuring proper serialization and deserialization, which is important since equals(java.lang.Object) also relies on object identity of funnels."
2402,common/hash,com.google.common.hash,Class BloomFilter<T>,"public static <T> Collector<T,?,BloomFilter<T>> toBloomFilter(Funnel<? super T> funnel, long expectedInsertions, double fpp)","Returns a Collector expecting the specified number of insertions, and yielding a BloomFilter with the specified expected false positive probability. Note that if the Collector receives significantly more elements than specified, the resulting BloomFilter will suffer a sharp deterioration of its false positive probability. The constructed BloomFilter will be serializable if the provided Funnel<T> is. It is recommended that the funnel be implemented as a Java enum. This has the benefit of ensuring proper serialization and deserialization, which is important since equals(java.lang.Object) also relies on object identity of funnels."
2403,common/hash,com.google.common.hash,Class BloomFilter<T>,"public static <T> BloomFilter<T> create(Funnel<? super T> funnel, int expectedInsertions, double fpp)","Creates a BloomFilter with the expected number of insertions and expected false positive probability. Note that overflowing a BloomFilter with significantly more elements than specified, will result in its saturation, and a sharp deterioration of its false positive probability. The constructed BloomFilter will be serializable if the provided Funnel<T> is. It is recommended that the funnel be implemented as a Java enum. This has the benefit of ensuring proper serialization and deserialization, which is important since equals(java.lang.Object) also relies on object identity of funnels."
2404,common/hash,com.google.common.hash,Class BloomFilter<T>,"public static <T> BloomFilter<T> create(Funnel<? super T> funnel, long expectedInsertions, double fpp)","Creates a BloomFilter with the expected number of insertions and expected false positive probability. Note that overflowing a BloomFilter with significantly more elements than specified, will result in its saturation, and a sharp deterioration of its false positive probability. The constructed BloomFilter will be serializable if the provided Funnel<T> is. It is recommended that the funnel be implemented as a Java enum. This has the benefit of ensuring proper serialization and deserialization, which is important since equals(java.lang.Object) also relies on object identity of funnels."
2405,common/hash,com.google.common.hash,Class BloomFilter<T>,"public static <T> BloomFilter<T> create(Funnel<? super T> funnel, int expectedInsertions)","Creates a BloomFilter with the expected number of insertions and a default expected false positive probability of 3%. Note that overflowing a BloomFilter with significantly more elements than specified, will result in its saturation, and a sharp deterioration of its false positive probability. The constructed BloomFilter will be serializable if the provided Funnel<T> is. It is recommended that the funnel be implemented as a Java enum. This has the benefit of ensuring proper serialization and deserialization, which is important since equals(java.lang.Object) also relies on object identity of funnels."
2406,common/hash,com.google.common.hash,Class BloomFilter<T>,"public static <T> BloomFilter<T> create(Funnel<? super T> funnel, long expectedInsertions)","Creates a BloomFilter with the expected number of insertions and a default expected false positive probability of 3%. Note that overflowing a BloomFilter with significantly more elements than specified, will result in its saturation, and a sharp deterioration of its false positive probability. The constructed BloomFilter will be serializable if the provided Funnel<T> is. It is recommended that the funnel be implemented as a Java enum. This has the benefit of ensuring proper serialization and deserialization, which is important since equals(java.lang.Object) also relies on object identity of funnels."
2407,common/hash,com.google.common.hash,Class BloomFilter<T>,public void writeTo(OutputStream out) throws IOException,"Writes this BloomFilter to an output stream, with a custom format (not Java serialization). This has been measured to save at least 400 bytes compared to regular serialization. Use readFrom(InputStream, Funnel) to reconstruct the written BloomFilter."
2408,common/primitives,com.google.common.primitives,Class Booleans,@Betapublic static Comparator<Boolean> trueFirst(),"Returns a Comparator<Boolean> that sorts true before false. This is particularly useful in Java 8+ in combination with Comparators.comparing, e.g. Comparators.comparing(Foo::hasBar, trueFirst())."
2409,common/primitives,com.google.common.primitives,Class Booleans,@Betapublic static Comparator<Boolean> falseFirst(),"Returns a Comparator<Boolean> that sorts false before true. This is particularly useful in Java 8+ in combination with Comparators.comparing, e.g. Comparators.comparing(Foo::hasBar, falseFirst())."
2410,common/primitives,com.google.common.primitives,Class Booleans,public static int hashCode(boolean value),Returns a hash code for value; equal to the result of invoking ((Boolean) value).hashCode(). Java 8 users: use Boolean.hashCode(boolean) instead.
2411,common/primitives,com.google.common.primitives,Class Booleans,"public static int compare(boolean a, boolean b)","Compares the two specified boolean values in the standard way (false is considered less than true). The sign of the value returned is the same as that of ((Boolean) a).compareTo(b). Note for Java 7 and later: this method should be treated as deprecated; use the equivalent Boolean.compare(boolean, boolean) method instead."
2412,common/primitives,com.google.common.primitives,Class Booleans,"public static boolean contains(boolean[] array, boolean target)","Returns true if target is present as an element anywhere in array. Note: consider representing the array as a BitSet instead, replacing Booleans.contains(array, true) with !bitSet.isEmpty() and Booleans.contains(array, false) with bitSet.nextClearBit(0) == sizeOfBitSet."
2413,common/primitives,com.google.common.primitives,Class Booleans,"public static int indexOf(boolean[] array, boolean target)","Returns the index of the first appearance of the value target in array. Note: consider representing the array as a BitSet instead, and using BitSet.nextSetBit(int) or BitSet.nextClearBit(int)."
2414,common/primitives,com.google.common.primitives,Class Booleans,"public static int indexOf(boolean[] array, boolean[] target)","Returns the start position of the first occurrence of the specified target within array, or -1 if there is no such occurrence. More formally, returns the lowest index i such that Arrays.copyOfRange(array, i, i + target.length) contains exactly the same elements as target."
2415,common/primitives,com.google.common.primitives,Class Booleans,"public static int lastIndexOf(boolean[] array, boolean target)",Returns the index of the last appearance of the value target in array.
2416,common/primitives,com.google.common.primitives,Class Booleans,public static boolean[] concat(boolean[]... arrays),"Returns the values from each provided array combined into a single array. For example, concat(new boolean[] {a, b}, new boolean[] {}, new boolean[] {c} returns the array {a, b, c}."
2417,common/primitives,com.google.common.primitives,Class Booleans,"public static boolean[] ensureCapacity(boolean[] array, int minLength, int padding)","Returns an array containing the same values as array, but guaranteed to be of a specified minimum length. If array already has a length of at least minLength, it is returned directly. Otherwise, a new array of size minLength + padding is returned, containing the values of array, and zeroes in the remaining places."
2418,common/primitives,com.google.common.primitives,Class Booleans,"public static String join(String separator, boolean... array)","Returns a string containing the supplied boolean values separated by separator. For example, join(-, false, true, false) returns the string false-true-false."
2419,common/primitives,com.google.common.primitives,Class Booleans,public static Comparator<boolean[]> lexicographicalComparator(),"Returns a comparator that compares two boolean arrays lexicographically. That is, it compares, using compare(boolean, boolean)), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example, [] < [false] < [false, true] < [true]. The returned comparator is inconsistent with Object.equals(Object) (since arrays support only identity equality), but it is consistent with Arrays.equals(boolean[], boolean[])."
2420,common/primitives,com.google.common.primitives,Class Booleans,public static boolean[] toArray(Collection<Boolean> collection),Copies a collection of Boolean instances into a new array of primitive boolean values. Elements are copied from the argument collection as if by collection.toArray(). Calling this method is as thread-safe as calling that method. Note: consider representing the collection as a BitSet instead.
2421,common/primitives,com.google.common.primitives,Class Booleans,public static List<Boolean> asList(boolean... backingArray),"Returns a fixed-size list backed by the specified array, similar to Arrays.asList(Object[]). The list supports List.set(int, Object), but any attempt to set a value to null will result in a NullPointerException. The returned list maintains the values, but not the identities, of Boolean objects written to or read from it. For example, whether list.get(0) == list.get(0) is true for the returned list is unspecified."
2422,common/primitives,com.google.common.primitives,Class Booleans,@Betapublic static int countTrue(boolean... values),Returns the number of values that are true.
2423,common/primitives,com.google.common.primitives,Class Booleans,public static void reverse(boolean[] array),"Reverses the elements of array. This is equivalent to Collections.reverse(Booleans.asList(array)), but is likely to be more efficient."
2424,common/collect,com.google.common.collect,Enum BoundType,public static final BoundType OPEN,The endpoint value is not considered part of the set (exclusive).
2425,common/collect,com.google.common.collect,Enum BoundType,public static BoundType[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (BoundType c : BoundType.values())  System.out.println(c);"
2426,common/io,com.google.common.io,Interface ByteArrayDataInput,void readFully(byte[] b),Description copied from interface: java.io.DataInput
2427,common/io,com.google.common.io,Interface ByteArrayDataInput,"void readFully(byte[] b, int off, int len)",Description copied from interface: java.io.DataInput
2428,common/io,com.google.common.io,Interface ByteArrayDataInput,int skipBytes(int n),Description copied from interface: java.io.DataInput
2429,common/io,com.google.common.io,Interface ByteArrayDataInput,@CanIgnoreReturnValueboolean readBoolean(),Description copied from interface: java.io.DataInput
2430,common/io,com.google.common.io,Interface ByteArrayDataInput,@CanIgnoreReturnValuebyte readByte(),Description copied from interface: java.io.DataInput
2431,common/io,com.google.common.io,Interface ByteArrayDataInput,@CanIgnoreReturnValueint readUnsignedByte(),Description copied from interface: java.io.DataInput
2432,common/io,com.google.common.io,Interface ByteArrayDataInput,@CanIgnoreReturnValueshort readShort(),Description copied from interface: java.io.DataInput
2433,common/io,com.google.common.io,Interface ByteArrayDataInput,@CanIgnoreReturnValueint readUnsignedShort(),Description copied from interface: java.io.DataInput
2434,common/io,com.google.common.io,Interface ByteArrayDataInput,@CanIgnoreReturnValuechar readChar(),Description copied from interface: java.io.DataInput
2435,common/io,com.google.common.io,Interface ByteArrayDataInput,@CanIgnoreReturnValueint readInt(),Description copied from interface: java.io.DataInput
2436,common/io,com.google.common.io,Interface ByteArrayDataInput,@CanIgnoreReturnValuelong readLong(),Description copied from interface: java.io.DataInput
2437,common/io,com.google.common.io,Interface ByteArrayDataInput,@CanIgnoreReturnValuefloat readFloat(),Description copied from interface: java.io.DataInput
2438,common/io,com.google.common.io,Interface ByteArrayDataInput,@CanIgnoreReturnValuedouble readDouble(),Description copied from interface: java.io.DataInput
2439,common/io,com.google.common.io,Interface ByteArrayDataInput,@CanIgnoreReturnValueString readLine(),Description copied from interface: java.io.DataInput
2440,common/io,com.google.common.io,Interface ByteArrayDataOutput,void write(int b),Description copied from interface: java.io.DataOutput
2441,common/io,com.google.common.io,Interface ByteArrayDataOutput,void write(byte[] b),Description copied from interface: java.io.DataOutput
2442,common/io,com.google.common.io,Interface ByteArrayDataOutput,"void write(byte[] b, int off, int len)",Description copied from interface: java.io.DataOutput
2443,common/io,com.google.common.io,Interface ByteArrayDataOutput,void writeBoolean(boolean v),Description copied from interface: java.io.DataOutput
2444,common/io,com.google.common.io,Interface ByteArrayDataOutput,void writeByte(int v),Description copied from interface: java.io.DataOutput
2445,common/io,com.google.common.io,Interface ByteArrayDataOutput,void writeShort(int v),Description copied from interface: java.io.DataOutput
2446,common/io,com.google.common.io,Interface ByteArrayDataOutput,void writeChar(int v),Description copied from interface: java.io.DataOutput
2447,common/io,com.google.common.io,Interface ByteArrayDataOutput,void writeInt(int v),Description copied from interface: java.io.DataOutput
2448,common/io,com.google.common.io,Interface ByteArrayDataOutput,void writeLong(long v),Description copied from interface: java.io.DataOutput
2449,common/io,com.google.common.io,Interface ByteArrayDataOutput,void writeFloat(float v),Description copied from interface: java.io.DataOutput
2450,common/io,com.google.common.io,Interface ByteArrayDataOutput,void writeDouble(double v),Description copied from interface: java.io.DataOutput
2451,common/io,com.google.common.io,Interface ByteArrayDataOutput,void writeChars(String s),Description copied from interface: java.io.DataOutput
2452,common/io,com.google.common.io,Interface ByteArrayDataOutput,void writeUTF(String s),Description copied from interface: java.io.DataOutput
2453,common/io,com.google.common.io,Interface ByteArrayDataOutput,@Deprecatedvoid writeBytes(String s),"Deprecated. This method is dangerous as it discards the high byte of every character. For UTF-8, use write(s.getBytes(StandardCharsets.UTF_8))."
2454,common/io,com.google.common.io,Interface ByteProcessor<T>,"@CanIgnoreReturnValueboolean processBytes(byte[] buf, int off, int len) throws IOException",This method will be called for each chunk of bytes in an input stream. The implementation should process the bytes from buf[off] through buf[off + len - 1] (inclusive).
2455,common/primitives,com.google.common.primitives,Class Bytes,public static int hashCode(byte value),Returns a hash code for value; equal to the result of invoking ((Byte) value).hashCode(). Java 8 users: use Byte.hashCode(byte) instead.
2456,common/primitives,com.google.common.primitives,Class Bytes,"public static boolean contains(byte[] array, byte target)",Returns true if target is present as an element anywhere in array.
2457,common/primitives,com.google.common.primitives,Class Bytes,"public static int indexOf(byte[] array, byte target)",Returns the index of the first appearance of the value target in array.
2458,common/primitives,com.google.common.primitives,Class Bytes,"public static int indexOf(byte[] array, byte[] target)","Returns the start position of the first occurrence of the specified target within array, or -1 if there is no such occurrence. More formally, returns the lowest index i such that Arrays.copyOfRange(array, i, i + target.length) contains exactly the same elements as target."
2459,common/primitives,com.google.common.primitives,Class Bytes,"public static int lastIndexOf(byte[] array, byte target)",Returns the index of the last appearance of the value target in array.
2460,common/primitives,com.google.common.primitives,Class Bytes,public static byte[] concat(byte[]... arrays),"Returns the values from each provided array combined into a single array. For example, concat(new byte[] {a, b}, new byte[] {}, new byte[] {c} returns the array {a, b, c}."
2461,common/primitives,com.google.common.primitives,Class Bytes,"public static byte[] ensureCapacity(byte[] array, int minLength, int padding)","Returns an array containing the same values as array, but guaranteed to be of a specified minimum length. If array already has a length of at least minLength, it is returned directly. Otherwise, a new array of size minLength + padding is returned, containing the values of array, and zeroes in the remaining places."
2462,common/primitives,com.google.common.primitives,Class Bytes,public static byte[] toArray(Collection<? extends Number> collection),"Returns an array containing each value of collection, converted to a byte value in the manner of Number.byteValue(). Elements are copied from the argument collection as if by collection.toArray(). Calling this method is as thread-safe as calling that method."
2463,common/primitives,com.google.common.primitives,Class Bytes,public static List<Byte> asList(byte... backingArray),"Returns a fixed-size list backed by the specified array, similar to Arrays.asList(Object[]). The list supports List.set(int, Object), but any attempt to set a value to null will result in a NullPointerException. The returned list maintains the values, but not the identities, of Byte objects written to or read from it. For example, whether list.get(0) == list.get(0) is true for the returned list is unspecified."
2464,common/primitives,com.google.common.primitives,Class Bytes,public static void reverse(byte[] array),"Reverses the elements of array. This is equivalent to Collections.reverse(Bytes.asList(array)), but is likely to be more efficient."
2465,common/io,com.google.common.io,Class ByteSink,public CharSink asCharSink(Charset charset),Returns a CharSink view of this ByteSink that writes characters to this sink as bytes encoded with the given charset.
2466,common/io,com.google.common.io,Class ByteSink,public abstract OutputStream openStream() throws IOException,"Opens a new OutputStream for writing to this sink. This method returns a new, independent stream each time it is called. The caller is responsible for ensuring that the returned stream is closed."
2467,common/io,com.google.common.io,Class ByteSink,public OutputStream openBufferedStream() throws IOException,"Opens a new buffered OutputStream for writing to this sink. The returned stream is not required to be a BufferedOutputStream in order to allow implementations to simply delegate to openStream() when the stream returned by that method does not benefit from additional buffering (for example, a ByteArrayOutputStream). This method returns a new, independent stream each time it is called. The caller is responsible for ensuring that the returned stream is closed."
2468,common/io,com.google.common.io,Class ByteSink,public void write(byte[] bytes) throws IOException,Writes all the given bytes to this sink.
2469,common/io,com.google.common.io,Class ByteSource,public CharSource asCharSource(Charset charset),"Returns a CharSource view of this byte source that decodes bytes read from this source as characters using the given Charset. If CharSource.asByteSource(java.nio.charset.Charset) is called on the returned source with the same charset, the default implementation of this method will ensure that the original ByteSource is returned, rather than round-trip encoding. Subclasses that override this method should behave the same way."
2470,common/io,com.google.common.io,Class ByteSource,public abstract InputStream openStream() throws IOException,"Opens a new InputStream for reading from this source. This method returns a new, independent stream each time it is called. The caller is responsible for ensuring that the returned stream is closed."
2471,common/io,com.google.common.io,Class ByteSource,public InputStream openBufferedStream() throws IOException,"Opens a new buffered InputStream for reading from this source. The returned stream is not required to be a BufferedInputStream in order to allow implementations to simply delegate to openStream() when the stream returned by that method does not benefit from additional buffering (for example, a ByteArrayInputStream). This method returns a new, independent stream each time it is called. The caller is responsible for ensuring that the returned stream is closed."
2472,common/io,com.google.common.io,Class ByteSource,"public ByteSource slice(long offset, long length)","Returns a view of a slice of this byte source that is at most length bytes long starting at the given offset. If offset is greater than the size of this source, the returned source will be empty. If offset + length is greater than the size of this source, the returned source will contain the slice starting at offset and ending at the end of this source."
2473,common/io,com.google.common.io,Class ByteSource,public boolean isEmpty() throws IOException,"Returns whether the source has zero bytes. The default implementation first checks sizeIfKnown(), returning true if it's known to be zero and false if it's known to be non-zero. If the size is not known, it falls back to opening a stream and checking for EOF. Note that, in cases where sizeIfKnown returns zero, it is possible that bytes are actually available for reading. (For example, some special files may return a size of 0 despite actually having content when read.) This means that a source may return true from isEmpty() despite having readable content."
2474,common/io,com.google.common.io,Class ByteSource,@Betapublic Optional<Long> sizeIfKnown(),"Returns the size of this source in bytes, if the size can be easily determined without actually opening the data stream. The default implementation returns Optional.absent(). Some sources, such as a file, may return a non-absent value. Note that in such cases, it is possible that this method will return a different number of bytes than would be returned by reading all of the bytes (for example, some special files may return a size of 0 despite actually having content when read). Additionally, for mutable sources such as files, a subsequent read may return a different number of bytes if the contents are changed."
2475,common/io,com.google.common.io,Class ByteSource,public long size() throws IOException,"Returns the size of this source in bytes, even if doing so requires opening and traversing an entire stream. To avoid a potentially expensive operation, see sizeIfKnown(). The default implementation calls sizeIfKnown() and returns the value if present. If absent, it will fall back to a heavyweight operation that will open a stream, read (or skip, if possible) to the end of the stream and return the total number of bytes that were read. Note that for some sources that implement sizeIfKnown() to provide a more efficient implementation, it is possible that this method will return a different number of bytes than would be returned by reading all of the bytes (for example, some special files may return a size of 0 despite actually having content when read). In either case, for mutable sources such as files, a subsequent read may return a different number of bytes if the contents are changed."
2476,common/io,com.google.common.io,Class ByteSource,@CanIgnoreReturnValuepublic long copyTo(OutputStream output) throws IOException,Copies the contents of this byte source to the given OutputStream. Does not close output.
2477,common/io,com.google.common.io,Class ByteSource,@CanIgnoreReturnValuepublic long copyTo(ByteSink sink) throws IOException,Copies the contents of this byte source to the given ByteSink.
2478,common/io,com.google.common.io,Class ByteSource,public byte[] read() throws IOException,Reads the full contents of this byte source as a byte array.
2479,common/io,com.google.common.io,Class ByteSource,@Beta @CanIgnoreReturnValuepublic <T> T read(ByteProcessor<T> processor) throws IOException,Reads the contents of this byte source using the given processor to process bytes as they are read. Stops when all bytes have been read or the consumer returns false. Returns the result produced by the processor.
2480,common/io,com.google.common.io,Class ByteSource,public HashCode hash(HashFunction hashFunction) throws IOException,Hashes the contents of this byte source using the given hash function.
2481,common/io,com.google.common.io,Class ByteSource,public boolean contentEquals(ByteSource other) throws IOException,Checks that the contents of this byte source are equal to the contents of the given byte source.
2482,common/io,com.google.common.io,Class ByteSource,public static ByteSource concat(Iterable<? extends ByteSource> sources),Concatenates multiple ByteSource instances into a single source. Streams returned from the source will contain the concatenated data from the streams of the underlying sources. Only one underlying stream will be open at a time. Closing the concatenated stream will close the open underlying stream.
2483,common/io,com.google.common.io,Class ByteSource,public static ByteSource concat(Iterator<? extends ByteSource> sources),Concatenates multiple ByteSource instances into a single source. Streams returned from the source will contain the concatenated data from the streams of the underlying sources. Only one underlying stream will be open at a time. Closing the concatenated stream will close the open underlying stream. Note: The input Iterator will be copied to an ImmutableList when this method is called. This will fail if the iterator is infinite and may cause problems if the iterator eagerly fetches data for each source when iterated (rather than producing sources that only load data through their streams). Prefer using the concat(Iterable) overload if possible.
2484,common/io,com.google.common.io,Class ByteSource,public static ByteSource concat(ByteSource... sources),Concatenates multiple ByteSource instances into a single source. Streams returned from the source will contain the concatenated data from the streams of the underlying sources. Only one underlying stream will be open at a time. Closing the concatenated stream will close the open underlying stream.
2485,common/io,com.google.common.io,Class ByteSource,public static ByteSource wrap(byte[] b),"Returns a view of the given byte array as a ByteSource. To view only a specific range in the array, use ByteSource.wrap(b).slice(offset, length). Note that the given byte array may be be passed directly to methods on, for example, OutputStream (when copyTo(OutputStream) is called on the resulting ByteSource). This could allow a malicious OutputStream implementation to modify the contents of the array, but provides better performance in the normal case."
2486,common/io,com.google.common.io,Class ByteStreams,"@CanIgnoreReturnValuepublic static long copy(InputStream from, OutputStream to) throws IOException",Copies all bytes from the input stream to the output stream. Does not close or flush either stream.
2487,common/io,com.google.common.io,Class ByteStreams,"@CanIgnoreReturnValuepublic static long copy(ReadableByteChannel from, WritableByteChannel to) throws IOException",Copies all bytes from the readable channel to the writable channel. Does not close or flush either channel.
2488,common/io,com.google.common.io,Class ByteStreams,public static byte[] toByteArray(InputStream in) throws IOException,Reads all bytes from an input stream into a byte array. Does not close the stream.
2489,common/io,com.google.common.io,Class ByteStreams,@CanIgnoreReturnValue @Betapublic static long exhaust(InputStream in) throws IOException,Reads and discards data from the given InputStream until the end of the stream is reached. Returns the total number of bytes read. Does not close the stream.
2490,common/io,com.google.common.io,Class ByteStreams,@Betapublic static ByteArrayDataInput newDataInput(byte[] bytes),Returns a new ByteArrayDataInput instance to read from the bytes array from the beginning.
2491,common/io,com.google.common.io,Class ByteStreams,"@Betapublic static ByteArrayDataInput newDataInput(byte[] bytes, int start)","Returns a new ByteArrayDataInput instance to read from the bytes array, starting at the given position."
2492,common/io,com.google.common.io,Class ByteStreams,@Betapublic static ByteArrayDataInput newDataInput(ByteArrayInputStream byteArrayInputStream),Returns a new ByteArrayDataInput instance to read from the given ByteArrayInputStream. The given input stream is not reset before being read from by the returned ByteArrayDataInput.
2493,common/io,com.google.common.io,Class ByteStreams,@Betapublic static ByteArrayDataOutput newDataOutput(),Returns a new ByteArrayDataOutput instance with a default size.
2494,common/io,com.google.common.io,Class ByteStreams,@Betapublic static ByteArrayDataOutput newDataOutput(int size),Returns a new ByteArrayDataOutput instance sized to hold size bytes before resizing.
2495,common/io,com.google.common.io,Class ByteStreams,@Betapublic static ByteArrayDataOutput newDataOutput(ByteArrayOutputStream byteArrayOutputStream),"Returns a new ByteArrayDataOutput instance which writes to the given ByteArrayOutputStream. The given output stream is not reset before being written to by the returned ByteArrayDataOutput and new data will be appended to any existing content. Note that if the given output stream was not empty or is modified after the ByteArrayDataOutput is created, the contract for ByteArrayDataOutput.toByteArray() will not be honored (the bytes returned in the byte array may not be exactly what was written via calls to ByteArrayDataOutput)."
2496,common/io,com.google.common.io,Class ByteStreams,@Betapublic static OutputStream nullOutputStream(),Returns an OutputStream that simply discards written bytes.
2497,common/io,com.google.common.io,Class ByteStreams,"@Betapublic static InputStream limit(InputStream in, long limit)","Wraps a InputStream, limiting the number of bytes which can be read."
2498,common/io,com.google.common.io,Class ByteStreams,"@Betapublic static void readFully(InputStream in, byte[] b) throws IOException","Attempts to read enough bytes from the stream to fill the given byte array, with the same behavior as DataInput.readFully(byte[]). Does not close the stream."
2499,common/io,com.google.common.io,Class ByteStreams,"@Betapublic static void readFully(InputStream in, byte[] b, int off, int len) throws IOException","Attempts to read len bytes from the stream into the given array starting at off, with the same behavior as DataInput.readFully(byte[], int, int). Does not close the stream."
2500,common/io,com.google.common.io,Class ByteStreams,"@Betapublic static void skipFully(InputStream in, long n) throws IOException",Discards n bytes of data from the input stream. This method will block until the full amount has been skipped. Does not close the stream.
2501,common/io,com.google.common.io,Class ByteStreams,"@Beta @CanIgnoreReturnValuepublic static <T> T readBytes(InputStream input, ByteProcessor<T> processor) throws IOException",Process the bytes of the given input stream using the given processor.
2502,common/cache,com.google.common.cache,"Interface Cache<K,V>","V getIfPresent(@CompatibleWith(value=""K"") Object key)","Returns the value associated with key in this cache, or null if there is no cached value for key."
2503,common/cache,com.google.common.cache,"Interface Cache<K,V>","V get(K key, Callable<? extends V> loader)throws ExecutionException","Returns the value associated with key in this cache, obtaining that value from loader if necessary. The method improves upon the conventional if cached, return; otherwise create, cache and return pattern. For further improvements, use LoadingCache and its get(K) method instead of this one. Among the improvements that this method and LoadingCache.get(K) both provide are: awaiting the result of a pending load rather than starting a redundant one eliminating the error-prone caching boilerplate tracking load statisticsAmong the further improvements that LoadingCache can provide but this method cannot: consolidation of the loader logic to a single authoritative locationrefreshing of entries, including automated refreshingbulk loading requests, including bulk loading implementationsWarning: For any given key, every loader used with it should compute the same value. Otherwise, a call that passes one loader may return the result of another call with a differently behaving loader. For example, a call that requests a short timeout for an RPC may wait for a similar call that requests a long timeout, or a call by an unprivileged user may return a resource accessible only to a privileged user making a similar call. To prevent this problem, create a key object that includes all values that affect the result of the query. Or use LoadingCache.get(K), which lacks the ability to refer to state other than that in the key. Warning: as with CacheLoader.load(K), loader must not return null; it may either return a non-null value or throw an exception. No observable state associated with this cache is modified until loading completes."
2504,common/cache,com.google.common.cache,"Interface Cache<K,V>","ImmutableMap<K,V> getAllPresent(Iterable<?> keys)",Returns a map of the values associated with keys in this cache. The returned map will only contain entries which are already present in the cache.
2505,common/cache,com.google.common.cache,"Interface Cache<K,V>","void put(K key, V value)","Associates value with key in this cache. If the cache previously contained a value associated with key, the old value is replaced by value. Prefer get(Object, Callable) when using the conventional if cached, return; otherwise create, cache and return pattern."
2506,common/cache,com.google.common.cache,"Interface Cache<K,V>","void putAll(Map<? extends K,? extends V> m)","Copies all of the mappings from the specified map to the cache. The effect of this call is equivalent to that of calling put(k, v) on this map once for each mapping from key k to value v in the specified map. The behavior of this operation is undefined if the specified map is modified while the operation is in progress."
2507,common/cache,com.google.common.cache,"Interface Cache<K,V>","void invalidate(@CompatibleWith(value=""K"") Object key)",Discards any cached value for key key.
2508,common/cache,com.google.common.cache,"Interface Cache<K,V>",void invalidateAll(Iterable<?> keys),Discards any cached values for keys keys.
2509,common/cache,com.google.common.cache,"Interface Cache<K,V>",void invalidateAll(),Discards all entries in the cache.
2510,common/cache,com.google.common.cache,"Interface Cache<K,V>",long size(),Returns the approximate number of entries in this cache.
2511,common/cache,com.google.common.cache,"Interface Cache<K,V>",CacheStats stats(),"Returns a current snapshot of this cache's cumulative statistics, or a set of default values if the cache is not recording statistics. All statistics begin at zero and never decrease over the lifetime of the cache. Warning: this cache may not be recording statistical data. For example, a cache created using CacheBuilder only does so if the CacheBuilder.recordStats() method was called. If statistics are not being recorded, a CacheStats instance with zero for all values is returned."
2512,common/cache,com.google.common.cache,"Interface Cache<K,V>","ConcurrentMap<K,V> asMap()","Returns a view of the entries stored in this cache as a thread-safe map. Modifications made to the map directly affect the cache. Iterators from the returned map are at least weakly consistent: they are safe for concurrent use, but if the cache is modified (including by eviction) after the iterator is created, it is undefined which of the changes (if any) will be reflected in that iterator."
2513,common/cache,com.google.common.cache,"Class CacheBuilder<K,V>","public static CacheBuilder<Object,Object> newBuilder()","Constructs a new CacheBuilder instance with default settings, including strong keys, strong values, and no automatic eviction of any kind. Note that while this return type is CacheBuilder<Object, Object>, type parameters on the build(com.google.common.cache.CacheLoader<? super K1, V1>) methods allow you to create a cache of any key and value type desired."
2514,common/cache,com.google.common.cache,"Class CacheBuilder<K,V>","@GwtIncompatiblepublic static CacheBuilder<Object,Object> from(CacheBuilderSpec spec)",Constructs a new CacheBuilder instance with the settings specified in spec.
2515,common/cache,com.google.common.cache,"Class CacheBuilder<K,V>","@GwtIncompatiblepublic static CacheBuilder<Object,Object> from(String spec)",Constructs a new CacheBuilder instance with the settings specified in spec. This is especially useful for command-line configuration of a CacheBuilder.
2516,common/cache,com.google.common.cache,"Class CacheBuilder<K,V>","public CacheBuilder<K,V> initialCapacity(int initialCapacity)","Sets the minimum total size for the internal hash tables. For example, if the initial capacity is 60, and the concurrency level is 8, then eight segments are created, each having a hash table of size eight. Providing a large enough estimate at construction time avoids the need for expensive resizing operations later, but setting this value unnecessarily high wastes memory."
2517,common/cache,com.google.common.cache,"Class CacheBuilder<K,V>","public CacheBuilder<K,V> concurrencyLevel(int concurrencyLevel)","Guides the allowed concurrency among update operations. Used as a hint for internal sizing. The table is internally partitioned to try to permit the indicated number of concurrent updates without contention. Because assignment of entries to these partitions is not necessarily uniform, the actual concurrency observed may vary. Ideally, you should choose a value to accommodate as many threads as will ever concurrently modify the table. Using a significantly higher value than you need can waste space and time, and a significantly lower value can lead to thread contention. But overestimates and underestimates within an order of magnitude do not usually have much noticeable impact. A value of one permits only one thread to modify the cache at a time, but since read operations and cache loading computations can proceed concurrently, this still yields higher concurrency than full synchronization. Defaults to 4. Note:The default may change in the future. If you care about this value, you should always choose it explicitly. The current implementation uses the concurrency level to create a fixed number of hashtable segments, each governed by its own write lock. The segment lock is taken once for each explicit write, and twice for each cache loading computation (once prior to loading the new value, and once after loading completes). Much internal cache management is performed at the segment granularity. For example, access queues and write queues are kept per segment when they are required by the selected eviction algorithm. As such, when writing unit tests it is not uncommon to specify concurrencyLevel(1) in order to achieve more deterministic eviction behavior. Note that future implementations may abandon segment locking in favor of more advanced concurrency controls."
2518,common/cache,com.google.common.cache,"Class CacheBuilder<K,V>","public CacheBuilder<K,V> maximumSize(long maximumSize)","Specifies the maximum number of entries the cache may contain. Note that the cache may evict an entry before this limit is exceeded. For example, in the current implementation, when concurrencyLevel is greater than 1, each resulting segment inside the cache independently limits its own size to approximately maximumSize / concurrencyLevel. When eviction is necessary, the cache evicts entries that are less likely to be used again. For example, the cache may evict an entry because it hasn't been used recently or very often. If maximumSize is zero, elements will be evicted immediately after being loaded into cache. This can be useful in testing, or to disable caching temporarily. This feature cannot be used in conjunction with maximumWeight."
2519,common/cache,com.google.common.cache,"Class CacheBuilder<K,V>","@GwtIncompatiblepublic CacheBuilder<K,V> maximumWeight(long maximumWeight)","Specifies the maximum weight of entries the cache may contain. Weight is determined using the Weigher specified with weigher, and use of this method requires a corresponding call to weigher prior to calling build(com.google.common.cache.CacheLoader<? super K1, V1>). Note that the cache may evict an entry before this limit is exceeded. For example, in the current implementation, when concurrencyLevel is greater than 1, each resulting segment inside the cache independently limits its own weight to approximately maximumWeight / concurrencyLevel. When eviction is necessary, the cache evicts entries that are less likely to be used again. For example, the cache may evict an entry because it hasn't been used recently or very often. If maximumWeight is zero, elements will be evicted immediately after being loaded into cache. This can be useful in testing, or to disable caching temporarily. Note that weight is only used to determine whether the cache is over capacity; it has no effect on selecting which entry should be evicted next. This feature cannot be used in conjunction with maximumSize."
2520,common/cache,com.google.common.cache,"Class CacheBuilder<K,V>","@GwtIncompatiblepublic <K1 extends K,V1 extends V> CacheBuilder<K1,V1> weigher(Weigher<? super K1,? super V1> weigher)","Specifies the weigher to use in determining the weight of entries. Entry weight is taken into consideration by maximumWeight(long) when determining which entries to evict, and use of this method requires a corresponding call to maximumWeight(long) prior to calling build(com.google.common.cache.CacheLoader<? super K1, V1>). Weights are measured and recorded when entries are inserted into the cache, and are thus effectively static during the lifetime of a cache entry. When the weight of an entry is zero it will not be considered for size-based eviction (though it still may be evicted by other means). Important note: Instead of returning this as a CacheBuilder instance, this method returns CacheBuilder<K1, V1>. From this point on, either the original reference or the returned reference may be used to complete configuration and build the cache, but only the generic one is type-safe. That is, it will properly prevent you from building caches whose key or value types are incompatible with the types accepted by the weigher already provided; the CacheBuilder type cannot do this. For best results, simply use the standard method-chaining idiom, as illustrated in the documentation at top, configuring a CacheBuilder and building your Cache all in a single statement. Warning: if you ignore the above advice, and use this CacheBuilder to build a cache whose key or value type is incompatible with the weigher, you will likely experience a ClassCastException at some undefined point in the future."
2521,common/cache,com.google.common.cache,"Class CacheBuilder<K,V>","@GwtIncompatiblepublic CacheBuilder<K,V> weakKeys()","Specifies that each key (not value) stored in the cache should be wrapped in a WeakReference (by default, strong references are used). Warning: when this method is used, the resulting cache will use identity (==) comparison to determine equality of keys. Its Cache.asMap() view will therefore technically violate the Map specification (in the same way that IdentityHashMap does). Entries with keys that have been garbage collected may be counted in Cache.size(), but will never be visible to read or write operations; such entries are cleaned up as part of the routine maintenance described in the class javadoc."
2522,common/cache,com.google.common.cache,"Class CacheBuilder<K,V>","@GwtIncompatiblepublic CacheBuilder<K,V> weakValues()","Specifies that each value (not key) stored in the cache should be wrapped in a WeakReference (by default, strong references are used). Weak values will be garbage collected once they are weakly reachable. This makes them a poor candidate for caching; consider softValues() instead. Note: when this method is used, the resulting cache will use identity (==) comparison to determine equality of values. Entries with values that have been garbage collected may be counted in Cache.size(), but will never be visible to read or write operations; such entries are cleaned up as part of the routine maintenance described in the class javadoc."
2523,common/cache,com.google.common.cache,"Class CacheBuilder<K,V>","@GwtIncompatiblepublic CacheBuilder<K,V> softValues()","Specifies that each value (not key) stored in the cache should be wrapped in a SoftReference (by default, strong references are used). Softly-referenced objects will be garbage-collected in a globally least-recently-used manner, in response to memory demand. Warning: in most circumstances it is better to set a per-cache maximum size instead of using soft references. You should only use this method if you are well familiar with the practical consequences of soft references. Note: when this method is used, the resulting cache will use identity (==) comparison to determine equality of values. Entries with values that have been garbage collected may be counted in Cache.size(), but will never be visible to read or write operations; such entries are cleaned up as part of the routine maintenance described in the class javadoc."
2524,common/cache,com.google.common.cache,"Class CacheBuilder<K,V>","@GwtIncompatiblepublic CacheBuilder<K,V> expireAfterWrite(Duration duration)","Specifies that each entry should be automatically removed from the cache once a fixed duration has elapsed after the entry's creation, or the most recent replacement of its value. When duration is zero, this method hands off to maximumSize(0), ignoring any otherwise-specified maximum size or weight. This can be useful in testing, or to disable caching temporarily without a code change. Expired entries may be counted in Cache.size(), but will never be visible to read or write operations. Expired entries are cleaned up as part of the routine maintenance described in the class javadoc."
2525,common/cache,com.google.common.cache,"Class CacheBuilder<K,V>","public CacheBuilder<K,V> expireAfterWrite(long duration, TimeUnit unit)","Specifies that each entry should be automatically removed from the cache once a fixed duration has elapsed after the entry's creation, or the most recent replacement of its value. When duration is zero, this method hands off to maximumSize(0), ignoring any otherwise-specified maximum size or weight. This can be useful in testing, or to disable caching temporarily without a code change. Expired entries may be counted in Cache.size(), but will never be visible to read or write operations. Expired entries are cleaned up as part of the routine maintenance described in the class javadoc. If you can represent the duration as a Duration (which should be preferred when feasible), use expireAfterWrite(Duration) instead."
2526,common/cache,com.google.common.cache,"Class CacheBuilder<K,V>","@GwtIncompatiblepublic CacheBuilder<K,V> expireAfterAccess(Duration duration)","Specifies that each entry should be automatically removed from the cache once a fixed duration has elapsed after the entry's creation, the most recent replacement of its value, or its last access. Access time is reset by all cache read and write operations (including Cache.asMap().get(Object) and Cache.asMap().put(K, V)), but not by containsKey(Object), nor by operations on the collection-views of Cache.asMap()}. So, for example, iterating through Cache.asMap().entrySet() does not reset access time for the entries you retrieve. When duration is zero, this method hands off to maximumSize(0), ignoring any otherwise-specified maximum size or weight. This can be useful in testing, or to disable caching temporarily without a code change. Expired entries may be counted in Cache.size(), but will never be visible to read or write operations. Expired entries are cleaned up as part of the routine maintenance described in the class javadoc."
2527,common/cache,com.google.common.cache,"Class CacheBuilder<K,V>","public CacheBuilder<K,V> expireAfterAccess(long duration, TimeUnit unit)","Specifies that each entry should be automatically removed from the cache once a fixed duration has elapsed after the entry's creation, the most recent replacement of its value, or its last access. Access time is reset by all cache read and write operations (including Cache.asMap().get(Object) and Cache.asMap().put(K, V)), but not by containsKey(Object), nor by operations on the collection-views of Cache.asMap(). So, for example, iterating through Cache.asMap().entrySet() does not reset access time for the entries you retrieve. When duration is zero, this method hands off to maximumSize(0), ignoring any otherwise-specified maximum size or weight. This can be useful in testing, or to disable caching temporarily without a code change. Expired entries may be counted in Cache.size(), but will never be visible to read or write operations. Expired entries are cleaned up as part of the routine maintenance described in the class javadoc. If you can represent the duration as a Duration (which should be preferred when feasible), use expireAfterAccess(Duration) instead."
2528,common/cache,com.google.common.cache,"Class CacheBuilder<K,V>","@GwtIncompatiblepublic CacheBuilder<K,V> refreshAfterWrite(Duration duration)","Specifies that active entries are eligible for automatic refresh once a fixed duration has elapsed after the entry's creation, or the most recent replacement of its value. The semantics of refreshes are specified in LoadingCache.refresh(K), and are performed by calling CacheLoader.reload(K, V). As the default implementation of CacheLoader.reload(K, V) is synchronous, it is recommended that users of this method override CacheLoader.reload(K, V) with an asynchronous implementation; otherwise refreshes will be performed during unrelated cache read and write operations. Currently automatic refreshes are performed when the first stale request for an entry occurs. The request triggering refresh will make a blocking call to CacheLoader.reload(K, V) and immediately return the new value if the returned future is complete, and the old value otherwise. Note: all exceptions thrown during refresh will be logged and then swallowed."
2529,common/cache,com.google.common.cache,"Class CacheBuilder<K,V>","@GwtIncompatiblepublic CacheBuilder<K,V> refreshAfterWrite(long duration, TimeUnit unit)","Specifies that active entries are eligible for automatic refresh once a fixed duration has elapsed after the entry's creation, or the most recent replacement of its value. The semantics of refreshes are specified in LoadingCache.refresh(K), and are performed by calling CacheLoader.reload(K, V). As the default implementation of CacheLoader.reload(K, V) is synchronous, it is recommended that users of this method override CacheLoader.reload(K, V) with an asynchronous implementation; otherwise refreshes will be performed during unrelated cache read and write operations. Currently automatic refreshes are performed when the first stale request for an entry occurs. The request triggering refresh will make a blocking call to CacheLoader.reload(K, V) and immediately return the new value if the returned future is complete, and the old value otherwise. Note: all exceptions thrown during refresh will be logged and then swallowed. If you can represent the duration as a Duration (which should be preferred when feasible), use refreshAfterWrite(Duration) instead."
2530,common/cache,com.google.common.cache,"Class CacheBuilder<K,V>","public CacheBuilder<K,V> ticker(Ticker ticker)","Specifies a nanosecond-precision time source for this cache. By default, System.nanoTime() is used. The primary intent of this method is to facilitate testing of caches with a fake or mock time source."
2531,common/cache,com.google.common.cache,"Class CacheBuilder<K,V>","@CheckReturnValuepublic <K1 extends K,V1 extends V> CacheBuilder<K1,V1> removalListener(RemovalListener<? super K1,? super V1> listener)","Specifies a listener instance that caches should notify each time an entry is removed for any reason. Each cache created by this builder will invoke this listener as part of the routine maintenance described in the class documentation above. Warning: after invoking this method, do not continue to use this cache builder reference; instead use the reference this method returns. At runtime, these point to the same instance, but only the returned reference has the correct generic type information so as to ensure type safety. For best results, use the standard method-chaining idiom illustrated in the class documentation above, configuring a builder and building your cache in a single statement. Failure to heed this advice can result in a ClassCastException being thrown by a cache operation at some undefined point in the future. Warning: any exception thrown by listener will not be propagated to the Cache user, only logged via a Logger."
2532,common/cache,com.google.common.cache,"Class CacheBuilder<K,V>","public CacheBuilder<K,V> recordStats()","Enable the accumulation of CacheStats during the operation of the cache. Without this Cache.stats() will return zero for all statistics. Note that recording stats requires bookkeeping to be performed with each operation, and thus imposes a performance penalty on cache operation."
2533,common/cache,com.google.common.cache,"Class CacheBuilder<K,V>","public <K1 extends K,V1 extends V> LoadingCache<K1,V1> build(CacheLoader<? super K1,V1> loader)","Builds a cache, which either returns an already-loaded value for a given key or atomically computes or retrieves it using the supplied CacheLoader. If another thread is currently loading the value for this key, simply waits for that thread to finish and returns its loaded value. Note that multiple threads can concurrently load values for distinct keys. This method does not alter the state of this CacheBuilder instance, so it can be invoked again to create multiple independent caches."
2534,common/cache,com.google.common.cache,"Class CacheBuilder<K,V>","public <K1 extends K,V1 extends V> Cache<K1,V1> build()","Builds a cache which does not automatically load values when keys are requested. Consider build(CacheLoader) instead, if it is feasible to implement a CacheLoader. This method does not alter the state of this CacheBuilder instance, so it can be invoked again to create multiple independent caches."
2535,common/cache,com.google.common.cache,Class CacheBuilderSpec,public static CacheBuilderSpec parse(String cacheBuilderSpecification),Creates a CacheBuilderSpec from a string.
2536,common/cache,com.google.common.cache,Class CacheBuilderSpec,public static CacheBuilderSpec disableCaching(),Returns a CacheBuilderSpec that will prevent caching.
2537,common/cache,com.google.common.cache,Class CacheBuilderSpec,public String toParsableString(),"Returns a string that can be used to parse an equivalent CacheBuilderSpec. The order and form of this representation is not guaranteed, except that reparsing its output will produce a CacheBuilderSpec equal to this instance."
2538,common/cache,com.google.common.cache,Class CacheBuilderSpec,public String toString(),Returns a string representation for this CacheBuilderSpec instance. The form of this representation is not guaranteed.
2539,common/cache,com.google.common.cache,Class CacheBuilderSpec,public int hashCode(),Description copied from class: java.lang.Object
2540,common/cache,com.google.common.cache,"Class CacheLoader<K,V>",public abstract V load(K key) throws Exception,Computes or retrieves the value corresponding to key.
2541,common/cache,com.google.common.cache,"Class CacheLoader<K,V>","@GwtIncompatiblepublic ListenableFuture<V> reload(K key, V oldValue) throws Exception","Computes or retrieves a replacement value corresponding to an already-cached key. This method is called when an existing cache entry is refreshed by CacheBuilder.refreshAfterWrite(java.time.Duration), or through a call to LoadingCache.refresh(K). This implementation synchronously delegates to load(K). It is recommended that it be overridden with an asynchronous implementation when using CacheBuilder.refreshAfterWrite(java.time.Duration). Note: all exceptions thrown by this method will be logged and then swallowed."
2542,common/cache,com.google.common.cache,"Class CacheLoader<K,V>","public Map<K,V> loadAll(Iterable<? extends K> keys) throws Exception","Computes or retrieves the values corresponding to keys. This method is called by LoadingCache.getAll(java.lang.Iterable<? extends K>). If the returned map doesn't contain all requested keys then the entries it does contain will be cached, but getAll will throw an exception. If the returned map contains extra keys not present in keys then all returned entries will be cached, but only the entries for keys will be returned from getAll. This method should be overridden when bulk retrieval is significantly more efficient than many individual lookups. Note that LoadingCache.getAll(java.lang.Iterable<? extends K>) will defer to individual calls to LoadingCache.get(K) if this method is not overridden."
2543,common/cache,com.google.common.cache,"Class CacheLoader<K,V>","public static <K,V> CacheLoader<K,V> from(Function<K,V> function)","Returns a cache loader that uses function to load keys, without supporting either reloading or bulk loading. This allows creating a cache loader using a lambda expression."
2544,common/cache,com.google.common.cache,"Class CacheLoader<K,V>","public static <V> CacheLoader<Object,V> from(Supplier<V> supplier)",Returns a cache loader based on an existing supplier instance. Note that there's no need to create a new supplier just to pass it in here; just subclass CacheLoader and implement load instead.
2545,common/cache,com.google.common.cache,Class CacheStats,public long requestCount(),"Returns the number of times Cache lookup methods have returned either a cached or uncached value. This is defined as hitCount + missCount. Note: the values of the metrics are undefined in case of overflow (though it is guaranteed not to throw an exception). If you require specific handling, we recommend implementing your own stats collector."
2546,common/cache,com.google.common.cache,Class CacheStats,public long hitCount(),Returns the number of times Cache lookup methods have returned a cached value.
2547,common/cache,com.google.common.cache,Class CacheStats,public double hitRate(),"Returns the ratio of cache requests which were hits. This is defined as hitCount / requestCount, or 1.0 when requestCount == 0. Note that hitRate + missRate =~ 1.0."
2548,common/cache,com.google.common.cache,Class CacheStats,public long missCount(),"Returns the number of times Cache lookup methods have returned an uncached (newly loaded) value, or null. Multiple concurrent calls to Cache lookup methods on an absent value can result in multiple misses, all returning the results of a single cache load operation."
2549,common/cache,com.google.common.cache,Class CacheStats,public double missRate(),"Returns the ratio of cache requests which were misses. This is defined as missCount / requestCount, or 0.0 when requestCount == 0. Note that hitRate + missRate =~ 1.0. Cache misses include all requests which weren't cache hits, including requests which resulted in either successful or failed loading attempts, and requests which waited for other threads to finish loading. It is thus the case that missCount &gt;= loadSuccessCount + loadExceptionCount. Multiple concurrent misses for the same key will result in a single load operation."
2550,common/cache,com.google.common.cache,Class CacheStats,public long loadCount(),"Returns the total number of times that Cache lookup methods attempted to load new values. This includes both successful load operations, as well as those that threw exceptions. This is defined as loadSuccessCount + loadExceptionCount. Note: the values of the metrics are undefined in case of overflow (though it is guaranteed not to throw an exception). If you require specific handling, we recommend implementing your own stats collector."
2551,common/cache,com.google.common.cache,Class CacheStats,public long loadSuccessCount(),"Returns the number of times Cache lookup methods have successfully loaded a new value. This is usually incremented in conjunction with missCount, though missCount is also incremented when an exception is encountered during cache loading (see loadExceptionCount). Multiple concurrent misses for the same key will result in a single load operation. This may be incremented not in conjunction with missCount if the load occurs as a result of a refresh or if the cache loader returned more items than was requested. missCount may also be incremented not in conjunction with this (nor loadExceptionCount) on calls to getIfPresent."
2552,common/cache,com.google.common.cache,Class CacheStats,public long loadExceptionCount(),"Returns the number of times Cache lookup methods threw an exception while loading a new value. This is usually incremented in conjunction with missCount, though missCount is also incremented when cache loading completes successfully (see loadSuccessCount). Multiple concurrent misses for the same key will result in a single load operation. This may be incremented not in conjunction with missCount if the load occurs as a result of a refresh or if the cache loader returned more items than was requested. missCount may also be incremented not in conjunction with this (nor loadSuccessCount) on calls to getIfPresent."
2553,common/cache,com.google.common.cache,Class CacheStats,public double loadExceptionRate(),"Returns the ratio of cache loading attempts which threw exceptions. This is defined as loadExceptionCount / (loadSuccessCount + loadExceptionCount), or 0.0 when loadSuccessCount + loadExceptionCount == 0. Note: the values of the metrics are undefined in case of overflow (though it is guaranteed not to throw an exception). If you require specific handling, we recommend implementing your own stats collector."
2554,common/cache,com.google.common.cache,Class CacheStats,public long totalLoadTime(),Returns the total number of nanoseconds the cache has spent loading new values. This can be used to calculate the miss penalty. This value is increased every time loadSuccessCount or loadExceptionCount is incremented.
2555,common/cache,com.google.common.cache,Class CacheStats,public double averageLoadPenalty(),"Returns the average time spent loading new values. This is defined as totalLoadTime / (loadSuccessCount + loadExceptionCount). Note: the values of the metrics are undefined in case of overflow (though it is guaranteed not to throw an exception). If you require specific handling, we recommend implementing your own stats collector."
2556,common/cache,com.google.common.cache,Class CacheStats,public long evictionCount(),Returns the number of times an entry has been evicted. This count does not include manual invalidations.
2557,common/cache,com.google.common.cache,Class CacheStats,public CacheStats minus(CacheStats other),"Returns a new CacheStats representing the difference between this CacheStats and other. Negative values, which aren't supported by CacheStats will be rounded up to zero."
2558,common/cache,com.google.common.cache,Class CacheStats,public CacheStats plus(CacheStats other),"Returns a new CacheStats representing the sum of this CacheStats and other. Note: the values of the metrics are undefined in case of overflow (though it is guaranteed not to throw an exception). If you require specific handling, we recommend implementing your own stats collector."
2559,common/cache,com.google.common.cache,Class CacheStats,public int hashCode(),Description copied from class: java.lang.Object
2560,common/cache,com.google.common.cache,Class CacheStats,public boolean equals(@Nullable Object object),Description copied from class: java.lang.Object
2561,util/concurrent,com.google.common.util.concurrent,Class Callables,public static <T> Callable<T> returning(T value),Creates a Callable which immediately returns a preset value each time it is called.
2562,common/base,com.google.common.base,Enum CaseFormat,public static final CaseFormat LOWER_HYPHEN,"Hyphenated variable naming convention, e.g., lower-hyphen."
2563,common/base,com.google.common.base,Enum CaseFormat,public static final CaseFormat LOWER_UNDERSCORE,"C++ variable naming convention, e.g., lower_underscore."
2564,common/base,com.google.common.base,Enum CaseFormat,public static final CaseFormat LOWER_CAMEL,"Java variable naming convention, e.g., lowerCamel."
2565,common/base,com.google.common.base,Enum CaseFormat,public static final CaseFormat UPPER_CAMEL,"Java and C++ class naming convention, e.g., UpperCamel."
2566,common/base,com.google.common.base,Enum CaseFormat,public static CaseFormat[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (CaseFormat c : CaseFormat.values())  System.out.println(c);"
2567,common/base,com.google.common.base,Enum CaseFormat,public static CaseFormat valueOf(String name),Returns the enum constant of this type with the specified name.The string must match exactly an identifier used to declare anenum constant in this type. (Extraneous whitespace characters are not permitted.)
2568,common/base,com.google.common.base,Enum CaseFormat,"public final String to(CaseFormat format, String str)","Converts the specified String str from this format to the specified format. A best effort approach is taken; if str does not conform to the assumed format, then the behavior of this method is undefined but we make a reasonable effort at converting anyway."
2569,common/escape,com.google.common.escape,Class CharEscaper,public String escape(String string),Returns the escaped form of a given literal string.
2570,common/escape,com.google.common.escape,Class CharEscaper,protected abstract char[] escape(char c),"Returns the escaped form of the given character, or null if this character does not need to be escaped. If an empty array is returned, this effectively strips the input character from the resulting text. If the character does not need to be escaped, this method should return null, rather than a one-character array containing the character itself. This enables the escaping algorithm to perform more efficiently. An escaper is expected to be able to deal with any char value, so this method should not throw any exceptions."
2571,common/escape,com.google.common.escape,Class CharEscaperBuilder,"@CanIgnoreReturnValuepublic CharEscaperBuilder addEscape(char c, String r)",Add a new mapping from an index to an object to the escaping.
2572,common/escape,com.google.common.escape,Class CharEscaperBuilder,"@CanIgnoreReturnValuepublic CharEscaperBuilder addEscapes(char[] cs, String r)",Add multiple mappings at once for a particular index.
2573,common/escape,com.google.common.escape,Class CharEscaperBuilder,public char[][] toArray(),Convert this builder into an array of char[]s where the maximum index is the value of the highest character that has been seen. The array will be sparse in the sense that any unseen index will default to null.
2574,common/base,com.google.common.base,Class CharMatcher,public static CharMatcher any(),Matches any character.
2575,common/base,com.google.common.base,Class CharMatcher,public static CharMatcher none(),Matches no characters.
2576,common/base,com.google.common.base,Class CharMatcher,public static CharMatcher whitespace(),"Determines whether a character is whitespace according to the latest Unicode standard, as illustrated here. This is not the same definition used by other Java APIs. (See a comparison of several definitions of whitespace.) All Unicode White_Space characters are on the BMP and thus supported by this API. Note: as the Unicode definition evolves, we will modify this matcher to keep it up to date."
2577,common/base,com.google.common.base,Class CharMatcher,public static CharMatcher breakingWhitespace(),"Determines whether a character is a breaking whitespace (that is, a whitespace which can be interpreted as a break between words for formatting purposes). See whitespace() for a discussion of that term."
2578,common/base,com.google.common.base,Class CharMatcher,public static CharMatcher ascii(),"Determines whether a character is ASCII, meaning that its code point is less than 128."
2579,common/base,com.google.common.base,Class CharMatcher,@Deprecatedpublic static CharMatcher digit(),Deprecated. Many digits are supplementary characters; see the class documentation.
2580,common/base,com.google.common.base,Class CharMatcher,@Deprecatedpublic static CharMatcher javaDigit(),Deprecated. Many digits are supplementary characters; see the class documentation.
2581,common/base,com.google.common.base,Class CharMatcher,@Deprecatedpublic static CharMatcher javaLetter(),Deprecated. Most letters are supplementary characters; see the class documentation.
2582,common/base,com.google.common.base,Class CharMatcher,@Deprecatedpublic static CharMatcher javaLetterOrDigit(),Deprecated. Most letters and digits are supplementary characters; see the class documentation.
2583,common/base,com.google.common.base,Class CharMatcher,@Deprecatedpublic static CharMatcher javaUpperCase(),Deprecated. Some uppercase characters are supplementary characters; see the class documentation.
2584,common/base,com.google.common.base,Class CharMatcher,@Deprecatedpublic static CharMatcher javaLowerCase(),Deprecated. Some lowercase characters are supplementary characters; see the class documentation.
2585,common/base,com.google.common.base,Class CharMatcher,public static CharMatcher javaIsoControl(),Determines whether a character is an ISO control character as specified by Character.isISOControl(char). All ISO control codes are on the BMP and thus supported by this API.
2586,common/base,com.google.common.base,Class CharMatcher,@Deprecatedpublic static CharMatcher invisible(),Deprecated. Most invisible characters are supplementary characters; see the class documentation.
2587,common/base,com.google.common.base,Class CharMatcher,@Deprecatedpublic static CharMatcher singleWidth(),Deprecated. Many such characters are supplementary characters; see the class documentation.
2588,common/base,com.google.common.base,Class CharMatcher,public static CharMatcher is(char match),Returns a char matcher that matches only one specified BMP character.
2589,common/base,com.google.common.base,Class CharMatcher,public static CharMatcher isNot(char match),"Returns a char matcher that matches any character except the BMP character specified. To negate another CharMatcher, use negate()."
2590,common/base,com.google.common.base,Class CharMatcher,public static CharMatcher anyOf(CharSequence sequence),Returns a char matcher that matches any BMP character present in the given character sequence. Returns a bogus matcher if the sequence contains supplementary characters.
2591,common/base,com.google.common.base,Class CharMatcher,public static CharMatcher noneOf(CharSequence sequence),Returns a char matcher that matches any BMP character not present in the given character sequence. Returns a bogus matcher if the sequence contains supplementary characters.
2592,common/base,com.google.common.base,Class CharMatcher,"public static CharMatcher inRange(char startInclusive, char endInclusive)","Returns a char matcher that matches any character in a given BMP range (both endpoints are inclusive). For example, to match any lowercase letter of the English alphabet, use CharMatcher.inRange('a', 'z')."
2593,common/base,com.google.common.base,Class CharMatcher,public static CharMatcher forPredicate(Predicate<? super Character> predicate),"Returns a matcher with identical behavior to the given Character-based predicate, but which operates on primitive char instances instead."
2594,common/base,com.google.common.base,Class CharMatcher,public abstract boolean matches(char c),Determines a true or false value for the given character.
2595,common/base,com.google.common.base,Class CharMatcher,public CharMatcher negate(),Returns a matcher that matches any character not matched by this matcher.
2596,common/base,com.google.common.base,Class CharMatcher,public CharMatcher and(CharMatcher other),Returns a matcher that matches any character matched by both this matcher and other.
2597,common/base,com.google.common.base,Class CharMatcher,public CharMatcher or(CharMatcher other),Returns a matcher that matches any character matched by either this matcher or other.
2598,common/base,com.google.common.base,Class CharMatcher,public CharMatcher precomputed(),"Returns a char matcher functionally equivalent to this one, but which may be faster to query than the original; your mileage may vary. Precomputation takes time and is likely to be worthwhile only if the precomputed matcher is queried many thousands of times. This method has no effect (returns this) when called in GWT: it's unclear whether a precomputed matcher is faster, but it certainly consumes more memory, which doesn't seem like a worthwhile tradeoff in a browser."
2599,common/base,com.google.common.base,Class CharMatcher,public boolean matchesAnyOf(CharSequence sequence),"Returns true if a character sequence contains at least one matching BMP character. Equivalent to !matchesNoneOf(sequence). The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns true or the end is reached."
2600,common/base,com.google.common.base,Class CharMatcher,public boolean matchesAllOf(CharSequence sequence),"Returns true if a character sequence contains only matching BMP characters. The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."
2601,common/base,com.google.common.base,Class CharMatcher,public boolean matchesNoneOf(CharSequence sequence),"Returns true if a character sequence contains no matching BMP characters. Equivalent to !matchesAnyOf(sequence). The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns true or the end is reached."
2602,common/base,com.google.common.base,Class CharMatcher,public int indexIn(CharSequence sequence),"Returns the index of the first matching BMP character in a character sequence, or -1 if no matching character is present. The default implementation iterates over the sequence in forward order calling matches(char) for each character."
2603,common/base,com.google.common.base,Class CharMatcher,"public int indexIn(CharSequence sequence, int start)","Returns the index of the first matching BMP character in a character sequence, starting from a given position, or -1 if no character matches after that position. The default implementation iterates over the sequence in forward order, beginning at start, calling matches(char) for each character."
2604,common/base,com.google.common.base,Class CharMatcher,public int lastIndexIn(CharSequence sequence),"Returns the index of the last matching BMP character in a character sequence, or -1 if no matching character is present. The default implementation iterates over the sequence in reverse order calling matches(char) for each character."
2605,common/base,com.google.common.base,Class CharMatcher,public int countIn(CharSequence sequence),"Returns the number of matching chars found in a character sequence. Counts 2 per supplementary character, such as for whitespace()().negate()()."
2606,common/base,com.google.common.base,Class CharMatcher,public String removeFrom(CharSequence sequence),"Returns a string containing all non-matching characters of a character sequence, in order. For example: CharMatcher.is('a').removeFrom(bazaar) ... returns bzr."
2607,common/base,com.google.common.base,Class CharMatcher,public String retainFrom(CharSequence sequence),"Returns a string containing all matching BMP characters of a character sequence, in order. For example: CharMatcher.is('a').retainFrom(bazaar) ... returns aaa."
2608,common/base,com.google.common.base,Class CharMatcher,"public String replaceFrom(CharSequence sequence, char replacement)","Returns a string copy of the input character sequence, with each matching BMP character replaced by a given replacement character. For example: CharMatcher.is('a').replaceFrom(radar, 'o') ... returns rodor. The default implementation uses indexIn(CharSequence) to find the first matching character, then iterates the remainder of the sequence calling matches(char) for each character."
2609,common/base,com.google.common.base,Class CharMatcher,"public String replaceFrom(CharSequence sequence, CharSequence replacement)","Returns a string copy of the input character sequence, with each matching BMP character replaced by a given replacement sequence. For example: CharMatcher.is('a').replaceFrom(yaha, oo) ... returns yoohoo. Note: If the replacement is a fixed string with only one character, you are better off calling replaceFrom(CharSequence, char) directly."
2610,common/base,com.google.common.base,Class CharMatcher,public String trimFrom(CharSequence sequence),"Returns a substring of the input character sequence that omits all matching BMP characters from the beginning and from the end of the string. For example: CharMatcher.anyOf(ab).trimFrom(abacatbab) ... returns cat. Note that: CharMatcher.inRange('\0', ' ').trimFrom(str) ... is equivalent to String.trim()."
2611,common/base,com.google.common.base,Class CharMatcher,public String trimLeadingFrom(CharSequence sequence),Returns a substring of the input character sequence that omits all matching BMP characters from the beginning of the string. For example: CharMatcher.anyOf(ab).trimLeadingFrom(abacatbab) ... returns catbab.
2612,common/base,com.google.common.base,Class CharMatcher,public String trimTrailingFrom(CharSequence sequence),Returns a substring of the input character sequence that omits all matching BMP characters from the end of the string. For example: CharMatcher.anyOf(ab).trimTrailingFrom(abacatbab) ... returns abacat.
2613,common/base,com.google.common.base,Class CharMatcher,"public String collapseFrom(CharSequence sequence, char replacement)","Returns a string copy of the input character sequence, with each group of consecutive matching BMP characters replaced by a single replacement character. For example: CharMatcher.anyOf(eko).collapseFrom(bookkeeper, '-') ... returns b-p-r. The default implementation uses indexIn(CharSequence) to find the first matching character, then iterates the remainder of the sequence calling matches(char) for each character."
2614,common/base,com.google.common.base,Class CharMatcher,"public String trimAndCollapseFrom(CharSequence sequence, char replacement)","Collapses groups of matching characters exactly as collapseFrom(java.lang.CharSequence, char) does, except that groups of matching BMP characters at the start or end of the sequence are removed without replacement."
2615,common/base,com.google.common.base,Class CharMatcher,@Deprecatedpublic boolean apply(Character character),Deprecated. Provided only to satisfy the Predicate interface; use matches(char) instead.
2616,common/primitives,com.google.common.primitives,Class Chars,public static int hashCode(char value),Returns a hash code for value; equal to the result of invoking ((Character) value).hashCode(). Java 8 users: use Character.hashCode(char) instead.
2617,common/primitives,com.google.common.primitives,Class Chars,public static char checkedCast(long value),"Returns the char value that is equal to value, if possible."
2618,common/primitives,com.google.common.primitives,Class Chars,public static char saturatedCast(long value),Returns the char nearest in value to value.
2619,common/primitives,com.google.common.primitives,Class Chars,"public static int compare(char a, char b)","Compares the two specified char values. The sign of the value returned is the same as that of ((Character) a).compareTo(b). Note for Java 7 and later: this method should be treated as deprecated; use the equivalent Character.compare(char, char) method instead."
2620,common/primitives,com.google.common.primitives,Class Chars,"public static boolean contains(char[] array, char target)",Returns true if target is present as an element anywhere in array.
2621,common/primitives,com.google.common.primitives,Class Chars,"public static int indexOf(char[] array, char target)",Returns the index of the first appearance of the value target in array.
2622,common/primitives,com.google.common.primitives,Class Chars,"public static int indexOf(char[] array, char[] target)","Returns the start position of the first occurrence of the specified target within array, or -1 if there is no such occurrence. More formally, returns the lowest index i such that Arrays.copyOfRange(array, i, i + target.length) contains exactly the same elements as target."
2623,common/primitives,com.google.common.primitives,Class Chars,"public static int lastIndexOf(char[] array, char target)",Returns the index of the last appearance of the value target in array.
2624,common/primitives,com.google.common.primitives,Class Chars,public static char min(char... array),Returns the least value present in array.
2625,common/primitives,com.google.common.primitives,Class Chars,public static char max(char... array),Returns the greatest value present in array.
2626,common/primitives,com.google.common.primitives,Class Chars,"@Betapublic static char constrainToRange(char value, char min, char max)","Returns the value nearest to value which is within the closed range [min..max]. If value is within the range [min..max], value is returned unchanged. If value is less than min, min is returned, and if value is greater than max, max is returned."
2627,common/primitives,com.google.common.primitives,Class Chars,public static char[] concat(char[]... arrays),"Returns the values from each provided array combined into a single array. For example, concat(new char[] {a, b}, new char[] {}, new char[] {c} returns the array {a, b, c}."
2628,common/primitives,com.google.common.primitives,Class Chars,@GwtIncompatiblepublic static byte[] toByteArray(char value),"Returns a big-endian representation of value in a 2-element byte array; equivalent to ByteBuffer.allocate(2).putChar(value).array(). For example, the input value '\\u5432' would yield the byte array {0x54, 0x32}. If you need to convert and concatenate several values (possibly even of different types), use a shared ByteBuffer instance, or use ByteStreams.newDataOutput() to get a growable buffer."
2629,common/primitives,com.google.common.primitives,Class Chars,@GwtIncompatiblepublic static char fromByteArray(byte[] bytes),"Returns the char value whose big-endian representation is stored in the first 2 bytes of bytes; equivalent to ByteBuffer.wrap(bytes).getChar(). For example, the input byte array {0x54, 0x32} would yield the char value '\\u5432'. Arguably, it's preferable to use ByteBuffer; that library exposes much more flexibility at little cost in readability."
2630,common/primitives,com.google.common.primitives,Class Chars,"@GwtIncompatiblepublic static char fromBytes(byte b1, byte b2)","Returns the char value whose byte representation is the given 2 bytes, in big-endian order; equivalent to Chars.fromByteArray(new byte[] {b1, b2})."
2631,common/primitives,com.google.common.primitives,Class Chars,"public static char[] ensureCapacity(char[] array, int minLength, int padding)","Returns an array containing the same values as array, but guaranteed to be of a specified minimum length. If array already has a length of at least minLength, it is returned directly. Otherwise, a new array of size minLength + padding is returned, containing the values of array, and zeroes in the remaining places."
2632,common/primitives,com.google.common.primitives,Class Chars,"public static String join(String separator, char... array)","Returns a string containing the supplied char values separated by separator. For example, join(-, '1', '2', '3') returns the string 1-2-3."
2633,common/primitives,com.google.common.primitives,Class Chars,public static Comparator<char[]> lexicographicalComparator(),"Returns a comparator that compares two char arrays lexicographically; not advisable for sorting user-visible strings as the ordering may not match the conventions of the user's locale. That is, it compares, using compare(char, char)), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example, [] < ['a'] < ['a', 'b'] < ['b']. The returned comparator is inconsistent with Object.equals(Object) (since arrays support only identity equality), but it is consistent with Arrays.equals(char[], char[])."
2634,common/primitives,com.google.common.primitives,Class Chars,public static char[] toArray(Collection<Character> collection),Copies a collection of Character instances into a new array of primitive char values. Elements are copied from the argument collection as if by collection.toArray(). Calling this method is as thread-safe as calling that method.
2635,common/primitives,com.google.common.primitives,Class Chars,public static void sortDescending(char[] array),Sorts the elements of array in descending order.
2636,common/primitives,com.google.common.primitives,Class Chars,"public static void sortDescending(char[] array, int fromIndex, int toIndex)",Sorts the elements of array between fromIndex inclusive and toIndex exclusive in descending order.
2637,common/primitives,com.google.common.primitives,Class Chars,public static void reverse(char[] array),"Reverses the elements of array. This is equivalent to Collections.reverse(Chars.asList(array)), but is likely to be more efficient."
2638,common/primitives,com.google.common.primitives,Class Chars,"public static void reverse(char[] array, int fromIndex, int toIndex)","Reverses the elements of array between fromIndex inclusive and toIndex exclusive. This is equivalent to Collections.reverse(Chars.asList(array).subList(fromIndex, toIndex)), but is likely to be more efficient."
2639,common/base,com.google.common.base,Class Charsets,@GwtIncompatiblepublic static final Charset US_ASCII,"US-ASCII: seven-bit ASCII, the Basic Latin block of the Unicode character set (ISO646-US). Note for Java 7 and later: this constant should be treated as deprecated; use StandardCharsets.US_ASCII instead."
2640,common/base,com.google.common.base,Class Charsets,public static final Charset ISO_8859_1,ISO-8859-1: ISO Latin Alphabet Number 1 (ISO-LATIN-1). Note for Java 7 and later: this constant should be treated as deprecated; use StandardCharsets.ISO_8859_1 instead.
2641,common/base,com.google.common.base,Class Charsets,public static final Charset UTF_8,UTF-8: eight-bit UCS Transformation Format. Note for Java 7 and later: this constant should be treated as deprecated; use StandardCharsets.UTF_8 instead.
2642,common/base,com.google.common.base,Class Charsets,@GwtIncompatiblepublic static final Charset UTF_16BE,"UTF-16BE: sixteen-bit UCS Transformation Format, big-endian byte order. Note for Java 7 and later: this constant should be treated as deprecated; use StandardCharsets.UTF_16BE instead."
2643,common/base,com.google.common.base,Class Charsets,@GwtIncompatiblepublic static final Charset UTF_16LE,"UTF-16LE: sixteen-bit UCS Transformation Format, little-endian byte order. Note for Java 7 and later: this constant should be treated as deprecated; use StandardCharsets.UTF_16LE instead."
2644,common/io,com.google.common.io,Class CharSink,public abstract Writer openStream() throws IOException,"Opens a new Writer for writing to this sink. This method returns a new, independent writer each time it is called. The caller is responsible for ensuring that the returned writer is closed."
2645,common/io,com.google.common.io,Class CharSink,public Writer openBufferedStream() throws IOException,"Opens a new buffered Writer for writing to this sink. The returned stream is not required to be a BufferedWriter in order to allow implementations to simply delegate to openStream() when the stream returned by that method does not benefit from additional buffering. This method returns a new, independent writer each time it is called. The caller is responsible for ensuring that the returned writer is closed."
2646,common/io,com.google.common.io,Class CharSink,public void write(CharSequence charSequence) throws IOException,Writes the given character sequence to this sink.
2647,common/io,com.google.common.io,Class CharSink,public void writeLines(Iterable<? extends CharSequence> lines) throws IOException,"Writes the given lines of text to this sink with each line (including the last) terminated with the operating system's default line separator. This method is equivalent to writeLines(lines, System.getProperty(line.separator))."
2648,common/io,com.google.common.io,Class CharSink,"public void writeLines(Iterable<? extends CharSequence> lines, String lineSeparator) throws IOException",Writes the given lines of text to this sink with each line (including the last) terminated with the given line separator.
2649,common/io,com.google.common.io,Class CharSink,@Betapublic void writeLines(Stream<? extends CharSequence> lines) throws IOException,"Writes the given lines of text to this sink with each line (including the last) terminated with the operating system's default line separator. This method is equivalent to writeLines(lines, System.getProperty(line.separator))."
2650,common/io,com.google.common.io,Class CharSink,"@Betapublic void writeLines(Stream<? extends CharSequence> lines, String lineSeparator) throws IOException",Writes the given lines of text to this sink with each line (including the last) terminated with the given line separator.
2651,common/io,com.google.common.io,Class CharSource,@Betapublic ByteSource asByteSource(Charset charset),"Returns a ByteSource view of this char source that encodes chars read from this source as bytes using the given Charset. If ByteSource.asCharSource(java.nio.charset.Charset) is called on the returned source with the same charset, the default implementation of this method will ensure that the original CharSource is returned, rather than round-trip encoding. Subclasses that override this method should behave the same way."
2652,common/io,com.google.common.io,Class CharSource,public abstract Reader openStream() throws IOException,"Opens a new Reader for reading from this source. This method returns a new, independent reader each time it is called. The caller is responsible for ensuring that the returned reader is closed."
2653,common/io,com.google.common.io,Class CharSource,public BufferedReader openBufferedStream() throws IOException,"Opens a new BufferedReader for reading from this source. This method returns a new, independent reader each time it is called. The caller is responsible for ensuring that the returned reader is closed."
2654,common/io,com.google.common.io,Class CharSource,@Beta @MustBeClosedpublic Stream<String> lines() throws IOException,"Opens a new Stream for reading text one line at a time from this source. This method returns a new, independent stream each time it is called. The returned stream is lazy and only reads from the source in the terminal operation. If an I/O error occurs while the stream is reading from the source or when the stream is closed, an UncheckedIOException is thrown. Like BufferedReader.readLine(), this method considers a line to be a sequence of text that is terminated by (but does not include) one of \r\n, \r or \n. If the source's content does not end in a line termination sequence, it is treated as if it does. The caller is responsible for ensuring that the returned stream is closed. For example: try (Stream<String> lines = source.lines()) { lines.map(...) .filter(...) .forEach(...); } "
2655,common/io,com.google.common.io,Class CharSource,@Betapublic Optional<Long> lengthIfKnown(),"Returns the size of this source in chars, if the size can be easily determined without actually opening the data stream. The default implementation returns Optional.absent(). Some sources, such as a CharSequence, may return a non-absent value. Note that in such cases, it is possible that this method will return a different number of chars than would be returned by reading all of the chars. Additionally, for mutable sources such as StringBuilders, a subsequent read may return a different number of chars if the contents are changed."
2656,common/io,com.google.common.io,Class CharSource,@Betapublic long length() throws IOException,"Returns the length of this source in chars, even if doing so requires opening and traversing an entire stream. To avoid a potentially expensive operation, see lengthIfKnown(). The default implementation calls lengthIfKnown() and returns the value if present. If absent, it will fall back to a heavyweight operation that will open a stream, skip to the end of the stream, and return the total number of chars that were skipped. Note that for sources that implement lengthIfKnown() to provide a more efficient implementation, it is possible that this method will return a different number of chars than would be returned by reading all of the chars. In either case, for mutable sources such as files, a subsequent read may return a different number of chars if the contents are changed."
2657,common/io,com.google.common.io,Class CharSource,@CanIgnoreReturnValuepublic long copyTo(Appendable appendable) throws IOException,Appends the contents of this source to the given Appendable (such as a Writer). Does not close appendable if it is Closeable.
2658,common/io,com.google.common.io,Class CharSource,@CanIgnoreReturnValuepublic long copyTo(CharSink sink) throws IOException,Copies the contents of this source to the given sink.
2659,common/io,com.google.common.io,Class CharSource,public String read() throws IOException,Reads the contents of this source as a string.
2660,common/io,com.google.common.io,Class CharSource,public @Nullable String readFirstLine() throws IOException,"Reads the first line of this source as a string. Returns null if this source is empty. Like BufferedReader.readLine(), this method considers a line to be a sequence of text that is terminated by (but does not include) one of \r\n, \r or \n. If the source's content does not end in a line termination sequence, it is treated as if it does."
2661,common/io,com.google.common.io,Class CharSource,public ImmutableList<String> readLines() throws IOException,"Reads all the lines of this source as a list of strings. The returned list will be empty if this source is empty. Like BufferedReader.readLine(), this method considers a line to be a sequence of text that is terminated by (but does not include) one of \r\n, \r or \n. If the source's content does not end in a line termination sequence, it is treated as if it does."
2662,common/io,com.google.common.io,Class CharSource,@Beta @CanIgnoreReturnValuepublic <T> T readLines(LineProcessor<T> processor) throws IOException,"Reads lines of text from this source, processing each line as it is read using the given processor. Stops when all lines have been processed or the processor returns false and returns the result produced by the processor. Like BufferedReader.readLine(), this method considers a line to be a sequence of text that is terminated by (but does not include) one of \r\n, \r or \n. If the source's content does not end in a line termination sequence, it is treated as if it does."
2663,common/io,com.google.common.io,Class CharSource,@Betapublic void forEachLine(Consumer<? super String> action) throws IOException,"Reads all lines of text from this source, running the given action for each line as it is read. Like BufferedReader.readLine(), this method considers a line to be a sequence of text that is terminated by (but does not include) one of \r\n, \r or \n. If the source's content does not end in a line termination sequence, it is treated as if it does."
2664,common/io,com.google.common.io,Class CharSource,public boolean isEmpty() throws IOException,"Returns whether the source has zero chars. The default implementation first checks lengthIfKnown(), returning true if it's known to be zero and false if it's known to be non-zero. If the length is not known, it falls back to opening a stream and checking for EOF. Note that, in cases where lengthIfKnown returns zero, it is possible that chars are actually available for reading. This means that a source may return true from isEmpty() despite having readable content."
2665,common/io,com.google.common.io,Class CharSource,public static CharSource concat(Iterable<? extends CharSource> sources),Concatenates multiple CharSource instances into a single source. Streams returned from the source will contain the concatenated data from the streams of the underlying sources. Only one underlying stream will be open at a time. Closing the concatenated stream will close the open underlying stream.
2666,common/io,com.google.common.io,Class CharSource,public static CharSource concat(Iterator<? extends CharSource> sources),Concatenates multiple CharSource instances into a single source. Streams returned from the source will contain the concatenated data from the streams of the underlying sources. Only one underlying stream will be open at a time. Closing the concatenated stream will close the open underlying stream. Note: The input Iterator will be copied to an ImmutableList when this method is called. This will fail if the iterator is infinite and may cause problems if the iterator eagerly fetches data for each source when iterated (rather than producing sources that only load data through their streams). Prefer using the concat(Iterable) overload if possible.
2667,common/io,com.google.common.io,Class CharSource,public static CharSource concat(CharSource... sources),Concatenates multiple CharSource instances into a single source. Streams returned from the source will contain the concatenated data from the streams of the underlying sources. Only one underlying stream will be open at a time. Closing the concatenated stream will close the open underlying stream.
2668,common/io,com.google.common.io,Class CharSource,public static CharSource wrap(CharSequence charSequence),"Returns a view of the given character sequence as a CharSource. The behavior of the returned CharSource and any Reader instances created by it is unspecified if the charSequence is mutated while it is being read, so don't do that."
2669,common/io,com.google.common.io,Class CharStreams,"@CanIgnoreReturnValuepublic static long copy(Readable from, Appendable to) throws IOException",Copies all characters between the Readable and Appendable objects. Does not close or flush either object.
2670,common/io,com.google.common.io,Class CharStreams,public static String toString(Readable r) throws IOException,Reads all characters from a Readable object into a String. Does not close the Readable.
2671,common/io,com.google.common.io,Class CharStreams,@Betapublic static List<String> readLines(Readable r) throws IOException,"Reads all of the lines from a Readable object. The lines do not include line-termination characters, but do include other leading and trailing whitespace. Does not close the Readable. If reading files or resources you should use the Files.readLines(java.io.File, java.nio.charset.Charset) and Resources.readLines(java.net.URL, java.nio.charset.Charset, com.google.common.io.LineProcessor<T>) methods."
2672,common/io,com.google.common.io,Class CharStreams,"@Beta @CanIgnoreReturnValuepublic static <T> T readLines(Readable readable, LineProcessor<T> processor) throws IOException","Streams lines from a Readable object, stopping when the processor returns false or all lines have been read and returning the result produced by the processor. Does not close readable. Note that this method may not fully consume the contents of readable if the processor stops processing early."
2673,common/io,com.google.common.io,Class CharStreams,@Beta @CanIgnoreReturnValuepublic static long exhaust(Readable readable) throws IOException,Reads and discards data from the given Readable until the end of the stream is reached. Returns the total number of chars read. Does not close the stream.
2674,common/io,com.google.common.io,Class CharStreams,"@Betapublic static void skipFully(Reader reader, long n) throws IOException",Discards n characters of data from the reader. This method will block until the full amount has been skipped. Does not close the reader.
2675,common/io,com.google.common.io,Class CharStreams,@Betapublic static Writer nullWriter(),Returns a Writer that simply discards written chars.
2676,common/reflect,com.google.common.reflect,Class ClassPath,public static ClassPath from(ClassLoader classloader) throws IOException,"Returns a ClassPath representing all classes and resources loadable from classloader and its ancestor class loaders. Warning: ClassPath can find classes and resources only from: URLClassLoader instances' file: URLs the system class loader. To search the system class loader even when it is not a URLClassLoader (as in Java 9), ClassPath searches the files from the java.class.path system property. "
2677,common/reflect,com.google.common.reflect,Class ClassPath,public ImmutableSet<ClassPath.ResourceInfo> getResources(),"Returns all resources loadable from the current class path, including the class files of all loadable classes but excluding the META-INF/MANIFEST.MF file."
2678,common/reflect,com.google.common.reflect,Class ClassPath,public ImmutableSet<ClassPath.ClassInfo> getAllClasses(),Returns all classes loadable from the current class path.
2679,common/reflect,com.google.common.reflect,Class ClassPath,public ImmutableSet<ClassPath.ClassInfo> getTopLevelClasses(),Returns all top level classes loadable from the current class path. Note that top-level-ness is determined heuristically by class name (see ClassPath.ClassInfo.isTopLevel()).
2680,common/reflect,com.google.common.reflect,Class ClassPath,public ImmutableSet<ClassPath.ClassInfo> getTopLevelClasses(String packageName),Returns all top level classes whose package name is packageName.
2681,common/reflect,com.google.common.reflect,Class ClassPath.ClassInfo,public String getPackageName(),"Returns the package name of the class, without attempting to load the class. Behaves identically to Package.getName() but does not require the class (or package) to be loaded."
2682,common/reflect,com.google.common.reflect,Class ClassPath.ClassInfo,public String getSimpleName(),Returns the simple name of the underlying class as given in the source code. Behaves identically to Class.getSimpleName() but does not require the class to be loaded.
2683,common/reflect,com.google.common.reflect,Class ClassPath.ClassInfo,public String getName(),Returns the fully qualified name of the class. Behaves identically to Class.getName() but does not require the class to be loaded.
2684,common/reflect,com.google.common.reflect,Class ClassPath.ClassInfo,public boolean isTopLevel(),"Returns true if the class name looks to be top level (not nested), that is, it includes no '$' in the name. This method may return false for a top-level class that's intentionally named with the '$' character. If this is a concern, you could use load() and then check on the loaded Class object instead."
2685,common/reflect,com.google.common.reflect,Class ClassPath.ClassInfo,public Class<?> load(),Loads (but doesn't link or initialize) the class.
2686,common/reflect,com.google.common.reflect,Class ClassPath.ResourceInfo,public final URL url(),Returns the url identifying the resource. See ClassLoader.getResource(java.lang.String)
2687,common/reflect,com.google.common.reflect,Class ClassPath.ResourceInfo,public final ByteSource asByteSource(),Returns a ByteSource view of the resource from which its bytes can be read.
2688,common/reflect,com.google.common.reflect,Class ClassPath.ResourceInfo,public final CharSource asCharSource(Charset charset),Returns a CharSource view of the resource from which its bytes can be read as characters decoded with the given charset.
2689,common/reflect,com.google.common.reflect,Class ClassPath.ResourceInfo,public final String getResourceName(),Returns the fully qualified name of the resource. Such as com/mycomp/foo/bar.txt.
2690,common/reflect,com.google.common.reflect,Class ClassPath.ResourceInfo,public int hashCode(),Description copied from class: java.lang.Object
2691,common/reflect,com.google.common.reflect,Class ClassPath.ResourceInfo,public boolean equals(Object obj),Description copied from class: java.lang.Object
2692,common/collect,com.google.common.collect,Interface ClassToInstanceMap<B>,<T extends B> T getInstance(Class<T> type),"Returns the value the specified class is mapped to, or null if no entry for this class is present. This will only return a value that was bound to this specific class, not a value that may have been bound to a subtype."
2693,common/io,com.google.common.io,Class Closeables,"public static void close(@Nullable Closeable closeable, boolean swallowIOException) throws IOException","Closes a Closeable, with control over whether an IOException may be thrown. This is primarily useful in a finally block, where a thrown exception needs to be logged but not propagated (otherwise the original exception will be lost). If swallowIOException is true then we never throw IOException but merely log it. Example: public void useStreamNicely() throws IOException { SomeStream stream = new SomeStream(foo); boolean threw = true; try { // ... code which does something with the stream ... threw = false; } finally { // If an exception occurs, rethrow it only if threw==false: Closeables.close(stream, threw); } } "
2694,common/io,com.google.common.io,Class Closeables,public static void closeQuietly(@Nullable InputStream inputStream),"Closes the given InputStream, logging any IOException that's thrown rather than propagating it. While it's not safe in the general case to ignore exceptions that are thrown when closing an I/O resource, it should generally be safe in the case of a resource that's being used only for reading, such as an InputStream. Unlike with writable resources, there's no chance that a failure that occurs when closing the stream indicates a meaningful problem such as a failure to flush all bytes to the underlying resource."
2695,common/io,com.google.common.io,Class Closer,public static Closer create(),Creates a new Closer.
2696,common/io,com.google.common.io,Class Closer,@CanIgnoreReturnValuepublic <C extends Closeable> C register(C closeable),Registers the given closeable to be closed when this Closer is closed.
2697,common/io,com.google.common.io,Class Closer,public RuntimeException rethrow(Throwable e) throws IOException,"Stores the given throwable and rethrows it. It will be rethrown as is if it is an IOException, RuntimeException or Error. Otherwise, it will be rethrown wrapped in a RuntimeException. Note: Be sure to declare all of the checked exception types your try block can throw when calling an overload of this method so as to avoid losing the original exception type. This method always throws, and as such should be called as throw closer.rethrow(e); to ensure the compiler knows that it will throw."
2698,common/io,com.google.common.io,Class Closer,"public <X extends Exception> RuntimeException rethrow(Throwable e, Class<X> declaredType) throws IOException, X extends Exception","Stores the given throwable and rethrows it. It will be rethrown as is if it is an IOException, RuntimeException, Error or a checked exception of the given type. Otherwise, it will be rethrown wrapped in a RuntimeException. Note: Be sure to declare all of the checked exception types your try block can throw when calling an overload of this method so as to avoid losing the original exception type. This method always throws, and as such should be called as throw closer.rethrow(e, ...); to ensure the compiler knows that it will throw."
2699,common/io,com.google.common.io,Class Closer,"public <X1 extends Exception,X2 extends Exception> RuntimeException rethrow(Throwable e, Class<X1> declaredType1, Class<X2> declaredType2) throws IOException, X1 extends Exception, X2 extends Exception","Stores the given throwable and rethrows it. It will be rethrown as is if it is an IOException, RuntimeException, Error or a checked exception of either of the given types. Otherwise, it will be rethrown wrapped in a RuntimeException. Note: Be sure to declare all of the checked exception types your try block can throw when calling an overload of this method so as to avoid losing the original exception type. This method always throws, and as such should be called as throw closer.rethrow(e, ...); to ensure the compiler knows that it will throw."
2700,util/concurrent,com.google.common.util.concurrent,Class ClosingFuture<V>,"public static <V> ClosingFuture<V> submit(ClosingFuture.ClosingCallable<V> callable, Executor executor)",Starts a ClosingFuture pipeline by submitting a callable block to an executor.
2701,util/concurrent,com.google.common.util.concurrent,Class ClosingFuture<V>,"public static <V> ClosingFuture<V> submitAsync(ClosingFuture.AsyncClosingCallable<V> callable, Executor executor)",Starts a ClosingFuture pipeline by submitting a callable block to an executor.
2702,util/concurrent,com.google.common.util.concurrent,Class ClosingFuture<V>,public static <V> ClosingFuture<V> from(ListenableFuture<V> future),"Starts a ClosingFuture pipeline with a ListenableFuture. future's value will not be closed when the pipeline is done even if V implements Closeable. In order to start a pipeline with a value that will be closed when the pipeline is done, use submit(ClosingCallable, Executor) instead."
2703,util/concurrent,com.google.common.util.concurrent,Class ClosingFuture<V>,"@Deprecatedpublic static <C extends Object & AutoCloseable> ClosingFuture<C> eventuallyClosing(ListenableFuture<C> future, Executor closingExecutor)","Deprecated. Creating Futures of closeable types is dangerous in general because the underlying value may never be closed if the Future is canceled after its operation begins. Consider replacing code that creates ListenableFutures of closeable types, including those that pass them to this method, with submit(ClosingCallable, Executor) in order to ensure that resources do not leak. Or, to start a pipeline with a ListenableFuture that doesn't create values that should be closed, use from(com.google.common.util.concurrent.ListenableFuture<V>)."
2704,util/concurrent,com.google.common.util.concurrent,Class ClosingFuture<V>,public static ClosingFuture.Combiner whenAllComplete(Iterable<? extends ClosingFuture<?>> futures),Starts specifying how to combine ClosingFutures into a single pipeline.
2705,util/concurrent,com.google.common.util.concurrent,Class ClosingFuture<V>,"public static ClosingFuture.Combiner whenAllComplete(ClosingFuture<?> future1, ClosingFuture<?>... moreFutures)",Starts specifying how to combine ClosingFutures into a single pipeline.
2706,util/concurrent,com.google.common.util.concurrent,Class ClosingFuture<V>,public static ClosingFuture.Combiner whenAllSucceed(Iterable<? extends ClosingFuture<?>> futures),"Starts specifying how to combine ClosingFutures into a single pipeline, assuming they all succeed. If any fail, the resulting pipeline will fail."
2707,util/concurrent,com.google.common.util.concurrent,Class ClosingFuture<V>,"public static <V1,V2> ClosingFuture.Combiner2<V1,V2> whenAllSucceed(ClosingFuture<V1> future1, ClosingFuture<V2> future2)","Starts specifying how to combine two ClosingFutures into a single pipeline, assuming they all succeed. If any fail, the resulting pipeline will fail. Calling this method allows you to use lambdas or method references typed with the types of the input ClosingFutures."
2708,util/concurrent,com.google.common.util.concurrent,Class ClosingFuture<V>,"public static <V1,V2,V3> ClosingFuture.Combiner3<V1,V2,V3> whenAllSucceed(ClosingFuture<V1> future1, ClosingFuture<V2> future2, ClosingFuture<V3> future3)","Starts specifying how to combine three ClosingFutures into a single pipeline, assuming they all succeed. If any fail, the resulting pipeline will fail. Calling this method allows you to use lambdas or method references typed with the types of the input ClosingFutures."
2709,util/concurrent,com.google.common.util.concurrent,Class ClosingFuture<V>,"public static <V1,V2,V3,V4> ClosingFuture.Combiner4<V1,V2,V3,V4> whenAllSucceed(ClosingFuture<V1> future1, ClosingFuture<V2> future2, ClosingFuture<V3> future3, ClosingFuture<V4> future4)","Starts specifying how to combine four ClosingFutures into a single pipeline, assuming they all succeed. If any fail, the resulting pipeline will fail. Calling this method allows you to use lambdas or method references typed with the types of the input ClosingFutures."
2710,util/concurrent,com.google.common.util.concurrent,Class ClosingFuture<V>,"public static <V1,V2,V3,V4,V5> ClosingFuture.Combiner5<V1,V2,V3,V4,V5> whenAllSucceed(ClosingFuture<V1> future1, ClosingFuture<V2> future2, ClosingFuture<V3> future3, ClosingFuture<V4> future4, ClosingFuture<V5> future5)","Starts specifying how to combine five ClosingFutures into a single pipeline, assuming they all succeed. If any fail, the resulting pipeline will fail. Calling this method allows you to use lambdas or method references typed with the types of the input ClosingFutures."
2711,util/concurrent,com.google.common.util.concurrent,Class ClosingFuture<V>,"public static ClosingFuture.Combiner whenAllSucceed(ClosingFuture<?> future1, ClosingFuture<?> future2, ClosingFuture<?> future3, ClosingFuture<?> future4, ClosingFuture<?> future5, ClosingFuture<?> future6, ClosingFuture<?>... moreFutures)","Starts specifying how to combine ClosingFutures into a single pipeline, assuming they all succeed. If any fail, the resulting pipeline will fail."
2712,util/concurrent,com.google.common.util.concurrent,Class ClosingFuture<V>,public ListenableFuture<?> statusFuture(),Returns a future that finishes when this step does. Calling get() on the returned future returns null if the step is successful or throws the same exception that would be thrown by calling finishToFuture().get() if this were the last step. Calling cancel() on the returned future has no effect on the ClosingFuture pipeline. statusFuture differs from most methods on ClosingFuture: You can make calls to statusFuture in addition to the call you make to finishToFuture() or a derivation method on the same instance. This is important because calling statusFuture alone does not provide a way to close the pipeline.
2713,util/concurrent,com.google.common.util.concurrent,Class ClosingFuture<V>,"public <U> ClosingFuture<U> transform(ClosingFuture.ClosingFunction<? super V,U> function, Executor executor)","Returns a new ClosingFuture pipeline step derived from this one by applying a function to its value. The function can use a ClosingFuture.DeferredCloser to capture objects to be closed when the pipeline is done. If this ClosingFuture fails, the function will not be called, and the derived ClosingFuture will be equivalent to this one. If the function throws an exception, that exception is used as the result of the derived ClosingFuture. Example usage: ClosingFuture<List<Row>> rowsFuture = queryFuture.transform((closer, result) -> result.getRows(), executor); When selecting an executor, note that directExecutor is dangerous in some cases. See the discussion in the ListenableFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor) documentation. All its warnings about heavyweight listeners are also applicable to heavyweight functions passed to this method. After calling this method, you may not call finishToFuture(), finishToValueAndCloser(ValueAndCloserConsumer, Executor), or any other derivation method on this ClosingFuture."
2714,util/concurrent,com.google.common.util.concurrent,Class ClosingFuture<V>,"public <U> ClosingFuture<U> transformAsync(ClosingFuture.AsyncClosingFunction<? super V,U> function, Executor executor)","Returns a new ClosingFuture pipeline step derived from this one by applying a function that returns a ClosingFuture to its value. The function can use a ClosingFuture.DeferredCloser to capture objects to be closed when the pipeline is done (other than those captured by the returned ClosingFuture). If this ClosingFuture succeeds, the derived one will be equivalent to the one returned by the function. If this ClosingFuture fails, the function will not be called, and the derived ClosingFuture will be equivalent to this one. If the function throws an exception, that exception is used as the result of the derived ClosingFuture. But if the exception is thrown after the function creates a ClosingFuture, then none of the closeable objects in that ClosingFuture will be closed. Usage guidelines for this method: Use this method only when calling an API that returns a ListenableFuture or a ClosingFuture. If possible, prefer calling transform(ClosingFunction, Executor) instead, with a function that returns the next value directly. Call closer.eventuallyClose() for every closeable object this step creates in order to capture it for later closing. Return a ClosingFuture. To turn a ListenableFuture into a ClosingFuture call from(ListenableFuture). In case this step doesn't create new closeables, you can adapt an API that returns a ListenableFuture to return a ClosingFuture by wrapping it with a call to withoutCloser(AsyncFunction)Example usage: // Result.getRowsClosingFuture() returns a ClosingFuture. ClosingFuture<List<Row>> rowsFuture = queryFuture.transformAsync((closer, result) -> result.getRowsClosingFuture(), executor); // Result.writeRowsToOutputStreamFuture() returns a ListenableFuture that resolves to the // number of written rows. openOutputFile() returns a FileOutputStream (which implements // Closeable). ClosingFuture<Integer> rowsFuture2 = queryFuture.transformAsync( (closer, result) -> { FileOutputStream fos = closer.eventuallyClose(openOutputFile(), closingExecutor); return ClosingFuture.from(result.writeRowsToOutputStreamFuture(fos)); }, executor); // Result.getRowsFuture() returns a ListenableFuture (no new closeables are created). ClosingFuture<List<Row>> rowsFuture3 = queryFuture.transformAsync(withoutCloser(Result::getRowsFuture), executor); When selecting an executor, note that directExecutor is dangerous in some cases. See the discussion in the ListenableFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor) documentation. All its warnings about heavyweight listeners are also applicable to heavyweight functions passed to this method. (Specifically, directExecutor functions should avoid heavyweight operations inside AsyncClosingFunction.apply. Any heavyweight operations should occur in other threads responsible for completing the returned ClosingFuture.) After calling this method, you may not call finishToFuture(), finishToValueAndCloser(ValueAndCloserConsumer, Executor), or any other derivation method on this ClosingFuture."
2715,util/concurrent,com.google.common.util.concurrent,Class ClosingFuture<V>,"public static <V,U> ClosingFuture.AsyncClosingFunction<V,U> withoutCloser(AsyncFunction<V,U> function)","Returns an ClosingFuture.AsyncClosingFunction that applies an AsyncFunction to an input, ignoring the DeferredCloser and returning a ClosingFuture derived from the returned ListenableFuture. Use this method to pass a transformation to transformAsync(AsyncClosingFunction, Executor) or to catchingAsync(Class, AsyncClosingFunction, Executor) as long as it meets these conditions: It does not need to capture any Closeable objects by calling DeferredCloser#eventuallyClose(Closeable, Executor). It returns a ListenableFuture. Example usage: // Result.getRowsFuture() returns a ListenableFuture. ClosingFuture<List<Row>> rowsFuture = queryFuture.transformAsync(withoutCloser(Result::getRowsFuture), executor); "
2716,util/concurrent,com.google.common.util.concurrent,Class ClosingFuture<V>,"public <X extends Throwable> ClosingFuture<V> catching(Class<X> exceptionType, ClosingFuture.ClosingFunction<? super X,? extends V> fallback, Executor executor)","Returns a new ClosingFuture pipeline step derived from this one by applying a function to its exception if it is an instance of a given exception type. The function can use a ClosingFuture.DeferredCloser to capture objects to be closed when the pipeline is done. If this ClosingFuture succeeds or fails with a different exception type, the function will not be called, and the derived ClosingFuture will be equivalent to this one. If the function throws an exception, that exception is used as the result of the derived ClosingFuture. Example usage: ClosingFuture<QueryResult> queryFuture = queryFuture.catching( QueryException.class, (closer, x) -> Query.emptyQueryResult(), executor); When selecting an executor, note that directExecutor is dangerous in some cases. See the discussion in the ListenableFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor) documentation. All its warnings about heavyweight listeners are also applicable to heavyweight functions passed to this method. After calling this method, you may not call finishToFuture(), finishToValueAndCloser(ValueAndCloserConsumer, Executor), or any other derivation method on this ClosingFuture."
2717,util/concurrent,com.google.common.util.concurrent,Class ClosingFuture<V>,"public <X extends Throwable> ClosingFuture<V> catchingAsync(Class<X> exceptionType, ClosingFuture.AsyncClosingFunction<? super X,? extends V> fallback, Executor executor)","Returns a new ClosingFuture pipeline step derived from this one by applying a function that returns a ClosingFuture to its exception if it is an instance of a given exception type. The function can use a ClosingFuture.DeferredCloser to capture objects to be closed when the pipeline is done (other than those captured by the returned ClosingFuture). If this ClosingFuture fails with an exception of the given type, the derived ClosingFuture will be equivalent to the one returned by the function. If this ClosingFuture succeeds or fails with a different exception type, the function will not be called, and the derived ClosingFuture will be equivalent to this one. If the function throws an exception, that exception is used as the result of the derived ClosingFuture. But if the exception is thrown after the function creates a ClosingFuture, then none of the closeable objects in that ClosingFuture will be closed. Usage guidelines for this method: Use this method only when calling an API that returns a ListenableFuture or a ClosingFuture. If possible, prefer calling catching(Class, ClosingFunction, Executor) instead, with a function that returns the next value directly. Call closer.eventuallyClose() for every closeable object this step creates in order to capture it for later closing. Return a ClosingFuture. To turn a ListenableFuture into a ClosingFuture call from(ListenableFuture). In case this step doesn't create new closeables, you can adapt an API that returns a ListenableFuture to return a ClosingFuture by wrapping it with a call to withoutCloser(AsyncFunction)Example usage: // Fall back to a secondary input stream in case of IOException. ClosingFuture<InputStream> inputFuture = firstInputFuture.catchingAsync( IOException.class, (closer, x) -> secondaryInputStreamClosingFuture(), executor); }When selecting an executor, note that directExecutor is dangerous in some cases. See the discussion in the ListenableFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor) documentation. All its warnings about heavyweight listeners are also applicable to heavyweight functions passed to this method. (Specifically, directExecutor functions should avoid heavyweight operations inside AsyncClosingFunction.apply. Any heavyweight operations should occur in other threads responsible for completing the returned ClosingFuture.) After calling this method, you may not call finishToFuture(), finishToValueAndCloser(ValueAndCloserConsumer, Executor), or any other derivation method on this ClosingFuture."
2718,util/concurrent,com.google.common.util.concurrent,Class ClosingFuture<V>,public FluentFuture<V> finishToFuture(),"Marks this step as the last step in the ClosingFuture pipeline. When the returned Future is done, all objects captured for closing during the pipeline's computation will be closed. After calling this method, you may not call finishToValueAndCloser(ValueAndCloserConsumer, Executor), this method, or any other derivation method on this ClosingFuture."
2719,util/concurrent,com.google.common.util.concurrent,Class ClosingFuture<V>,"public void finishToValueAndCloser(ClosingFuture.ValueAndCloserConsumer<? super V> consumer, Executor executor)","Marks this step as the last step in the ClosingFuture pipeline. When this step is done, receiver will be called with an object that contains the result of the operation. The receiver can store the ClosingFuture.ValueAndCloser outside the receiver for later synchronous use. After calling this method, you may not call finishToFuture(), this method again, or any other derivation method on this ClosingFuture."
2720,util/concurrent,com.google.common.util.concurrent,Class ClosingFuture<V>,@CanIgnoreReturnValuepublic boolean cancel(boolean mayInterruptIfRunning),"Attempts to cancel execution of this step. This attempt will fail if the step has already completed, has already been cancelled, or could not be cancelled for some other reason. If successful, and this step has not started when cancel is called, this step should never run. If successful, causes the objects captured by this step (if already started) and its input step(s) for later closing to be closed on their respective Executors. If any such calls specified MoreExecutors.directExecutor(), those objects will be closed synchronously."
2721,util/concurrent,com.google.common.util.concurrent,Class ClosingFuture<V>,public String toString(),Description copied from class: java.lang.Object
2722,util/concurrent,com.google.common.util.concurrent,Class ClosingFuture.Combiner,"public <V> ClosingFuture<V> call(ClosingFuture.Combiner.CombiningCallable<V> combiningCallable, Executor executor)","Returns a new ClosingFuture pipeline step derived from the inputs by applying a combining function to their values. The function can use a ClosingFuture.DeferredCloser to capture objects to be closed when the pipeline is done. If this combiner was returned by a ClosingFuture.whenAllSucceed(java.lang.Iterable<? extends com.google.common.util.concurrent.ClosingFuture<?>>) method and any of the inputs fail, so will the returned step. If the combiningCallable throws a CancellationException, the pipeline will be cancelled. If the combiningCallable throws an ExecutionException, the cause of the thrown ExecutionException will be extracted and used as the failure of the derived step."
2723,util/concurrent,com.google.common.util.concurrent,"Class ClosingFuture.Combiner2<V1,V2>","public <U> ClosingFuture<U> call(ClosingFuture.Combiner2.ClosingFunction2<V1,V2,U> function, Executor executor)","Returns a new ClosingFuture pipeline step derived from the inputs by applying a combining function to their values. The function can use a ClosingFuture.DeferredCloser to capture objects to be closed when the pipeline is done. If this combiner was returned by ClosingFuture.whenAllSucceed(ClosingFuture, ClosingFuture) and any of the inputs fail, so will the returned step. If the function throws a CancellationException, the pipeline will be cancelled. If the function throws an ExecutionException, the cause of the thrown ExecutionException will be extracted and used as the failure of the derived step."
2724,util/concurrent,com.google.common.util.concurrent,"Class ClosingFuture.Combiner3<V1,V2,V3>","public <U> ClosingFuture<U> call(ClosingFuture.Combiner3.ClosingFunction3<V1,V2,V3,U> function, Executor executor)","Returns a new ClosingFuture pipeline step derived from the inputs by applying a combining function to their values. The function can use a ClosingFuture.DeferredCloser to capture objects to be closed when the pipeline is done. If this combiner was returned by ClosingFuture.whenAllSucceed(ClosingFuture, ClosingFuture, ClosingFuture) and any of the inputs fail, so will the returned step. If the function throws a CancellationException, the pipeline will be cancelled. If the function throws an ExecutionException, the cause of the thrown ExecutionException will be extracted and used as the failure of the derived step."
2725,util/concurrent,com.google.common.util.concurrent,"Class ClosingFuture.Combiner4<V1,V2,V3,V4>","public <U> ClosingFuture<U> call(ClosingFuture.Combiner4.ClosingFunction4<V1,V2,V3,V4,U> function, Executor executor)","Returns a new ClosingFuture pipeline step derived from the inputs by applying a combining function to their values. The function can use a ClosingFuture.DeferredCloser to capture objects to be closed when the pipeline is done. If this combiner was returned by ClosingFuture.whenAllSucceed(ClosingFuture, ClosingFuture, ClosingFuture, ClosingFuture) and any of the inputs fail, so will the returned step. If the function throws a CancellationException, the pipeline will be cancelled. If the function throws an ExecutionException, the cause of the thrown ExecutionException will be extracted and used as the failure of the derived step."
2726,util/concurrent,com.google.common.util.concurrent,"Class ClosingFuture.Combiner5<V1,V2,V3,V4,V5>","public <U> ClosingFuture<U> call(ClosingFuture.Combiner5.ClosingFunction5<V1,V2,V3,V4,V5,U> function, Executor executor)","Returns a new ClosingFuture pipeline step derived from the inputs by applying a combining function to their values. The function can use a ClosingFuture.DeferredCloser to capture objects to be closed when the pipeline is done. If this combiner was returned by ClosingFuture.whenAllSucceed(ClosingFuture, ClosingFuture, ClosingFuture, ClosingFuture, ClosingFuture) and any of the inputs fail, so will the returned step. If the function throws a CancellationException, the pipeline will be cancelled. If the function throws an ExecutionException, the cause of the thrown ExecutionException will be extracted and used as the failure of the derived step."
2727,util/concurrent,com.google.common.util.concurrent,Class ClosingFuture.ValueAndCloser<V>,public V get() throws ExecutionException,"Returns the final value of the associated ClosingFuture, or throws an exception as Future.get() would. Because the asynchronous operation has already completed, this method is synchronous and returns immediately."
2728,common/collect,com.google.common.collect,Class Collections2,"public static <E> Collection<E> filter(Collection<E> unfiltered, Predicate<? super E> predicate)","Returns the elements of unfiltered that satisfy a predicate. The returned collection is a live view of unfiltered; changes to one affect the other. The resulting collection's iterator does not support remove(), but all other collection methods are supported. When given an element that doesn't satisfy the predicate, the collection's add() and addAll() methods throw an IllegalArgumentException. When methods such as removeAll() and clear() are called on the filtered collection, only elements that satisfy the filter will be removed from the underlying collection. The returned collection isn't threadsafe or serializable, even if unfiltered is. Many of the filtered collection's methods, such as size(), iterate across every element in the underlying collection and determine which elements satisfy the filter. When a live view is not needed, it may be faster to copy Iterables.filter(unfiltered, predicate) and use the copy. Warning: predicate must be consistent with equals, as documented at Predicate.apply(T). Do not provide a predicate such as Predicates.instanceOf(ArrayList.class), which is inconsistent with equals. (See Iterables.filter(Iterable, Class) for related functionality.) Stream equivalent: Stream.filter."
2729,common/collect,com.google.common.collect,Class Collections2,"public static <F,T> Collection<T> transform(Collection<F> fromCollection, Function<? super F,T> function)","Returns a collection that applies function to each element of fromCollection. The returned collection is a live view of fromCollection; changes to one affect the other. The returned collection's add() and addAll() methods throw an UnsupportedOperationException. All other collection methods are supported, as long as fromCollection supports them. The returned collection isn't threadsafe or serializable, even if fromCollection is. When a live view is not needed, it may be faster to copy the transformed collection and use the copy. If the input Collection is known to be a List, consider Lists.transform(java.util.List<F>, com.google.common.base.Function<? super F, ? extends T>). If only an Iterable is available, use Iterables.transform(java.lang.Iterable<F>, com.google.common.base.Function<? super F, ? extends T>). Stream equivalent: Stream.map."
2730,common/collect,com.google.common.collect,Class Collections2,@Betapublic static <E extends Comparable<? super E>> Collection<List<E>> orderedPermutations(Iterable<E> elements),"Returns a Collection of all the permutations of the specified Iterable. Notes: This is an implementation of the algorithm for Lexicographical Permutations Generation, described in Knuth's The Art of Computer Programming, Volume 4, Chapter 7, Section 7.2.1.2. The iteration order follows the lexicographical order. This means that the first permutation will be in ascending order, and the last will be in descending order. Duplicate elements are considered equal. For example, the list [1, 1] will have only one permutation, instead of two. This is why the elements have to implement Comparable. An empty iterable has only one permutation, which is an empty list. This method is equivalent to Collections2.orderedPermutations(list, Ordering.natural())."
2731,common/collect,com.google.common.collect,Class Collections2,"@Betapublic static <E> Collection<List<E>> orderedPermutations(Iterable<E> elements, Comparator<? super E> comparator)","Returns a Collection of all the permutations of the specified Iterable using the specified Comparator for establishing the lexicographical ordering. Examples: for (List<String> perm : orderedPermutations(asList(b, c, a))) { println(perm); } // -> [a, b, c] // -> [a, c, b] // -> [b, a, c] // -> [b, c, a] // -> [c, a, b] // -> [c, b, a] for (List<Integer> perm : orderedPermutations(asList(1, 2, 2, 1))) { println(perm); } // -> [1, 1, 2, 2] // -> [1, 2, 1, 2] // -> [1, 2, 2, 1] // -> [2, 1, 1, 2] // -> [2, 1, 2, 1] // -> [2, 2, 1, 1] Notes: This is an implementation of the algorithm for Lexicographical Permutations Generation, described in Knuth's The Art of Computer Programming, Volume 4, Chapter 7, Section 7.2.1.2. The iteration order follows the lexicographical order. This means that the first permutation will be in ascending order, and the last will be in descending order. Elements that compare equal are considered equal and no new permutations are created by swapping them. An empty iterable has only one permutation, which is an empty list."
2732,common/collect,com.google.common.collect,Class Comparators,"@Betapublic static <T,S extends T> Comparator<Iterable<S>> lexicographical(Comparator<T> comparator)","Returns a new comparator which sorts iterables by comparing corresponding elements pairwise until a nonzero result is found; imposes dictionary order. If the end of one iterable is reached, but not the other, the shorter iterable is considered to be less than the longer one. For example, a lexicographical natural ordering over integers considers [] < [1] < [1, 1] < [1, 2] < [2]. Note that Collections.reverseOrder(lexicographical(comparator)) is not equivalent to lexicographical(Collections.reverseOrder(comparator)) (consider how each would order [1] and [1, 1])."
2733,common/collect,com.google.common.collect,Class Comparators,"@Betapublic static <T> boolean isInOrder(Iterable<? extends T> iterable, Comparator<T> comparator)","Returns true if each element in iterable after the first is greater than or equal to the element that preceded it, according to the specified comparator. Note that this is always true when the iterable has fewer than two elements."
2734,common/collect,com.google.common.collect,Class Comparators,"@Betapublic static <T> boolean isInStrictOrder(Iterable<? extends T> iterable, Comparator<T> comparator)","Returns true if each element in iterable after the first is strictly greater than the element that preceded it, according to the specified comparator. Note that this is always true when the iterable has fewer than two elements."
2735,common/collect,com.google.common.collect,Class Comparators,"public static <T> Collector<T,?,List<T>> least(int k, Comparator<? super T> comparator)","Returns a Collector that returns the k smallest (relative to the specified Comparator) input elements, in ascending order, as an unmodifiable List. Ties are broken arbitrarily. For example: Stream.of(foo, quux, banana, elephant) .collect(least(2, comparingInt(String::length))) // returns {foo, quux} This Collector uses O(k) memory and takes expected time O(n) (worst-case O(n log k)), as opposed to e.g. Stream.sorted(comparator).limit(k), which currently takes O(n log n) time and O(n) space."
2736,common/collect,com.google.common.collect,Class Comparators,"public static <T> Collector<T,?,List<T>> greatest(int k, Comparator<? super T> comparator)","Returns a Collector that returns the k greatest (relative to the specified Comparator) input elements, in descending order, as an unmodifiable List. Ties are broken arbitrarily. For example: Stream.of(foo, quux, banana, elephant) .collect(greatest(2, comparingInt(String::length))) // returns {elephant, banana} This Collector uses O(k) memory and takes expected time O(n) (worst-case O(n log k)), as opposed to e.g. Stream.sorted(comparator.reversed()).limit(k), which currently takes O(n log n) time and O(n) space."
2737,common/collect,com.google.common.collect,Class Comparators,@Betapublic static <T> Comparator<Optional<T>> emptiesFirst(Comparator<? super T> valueComparator),"Returns a comparator of Optional values which treats Optional.empty() as less than all other values, and orders the rest using valueComparator on the contained value."
2738,common/collect,com.google.common.collect,Class Comparators,@Betapublic static <T> Comparator<Optional<T>> emptiesLast(Comparator<? super T> valueComparator),"Returns a comparator of Optional values which treats Optional.empty() as greater than all other values, and orders the rest using valueComparator on the contained value."
2739,common/collect,com.google.common.collect,Class Comparators,"@Betapublic static <T extends Comparable<? super T>> T min(T a, T b)","Returns the minimum of the two values. If the values compare as 0, the first is returned. The recommended solution for finding the minimum of some values depends on the type of your data and the number of elements you have. Read more in the Guava User Guide article on Comparators."
2740,common/collect,com.google.common.collect,Class Comparators,"@Betapublic static <T> T min(T a, T b, Comparator<T> comparator)","Returns the minimum of the two values, according to the given comparator. If the values compare as equal, the first is returned. The recommended solution for finding the minimum of some values depends on the type of your data and the number of elements you have. Read more in the Guava User Guide article on Comparators."
2741,common/collect,com.google.common.collect,Class Comparators,"@Betapublic static <T extends Comparable<? super T>> T max(T a, T b)","Returns the maximum of the two values. If the values compare as 0, the first is returned. The recommended solution for finding the maximum of some values depends on the type of your data and the number of elements you have. Read more in the Guava User Guide article on Comparators."
2742,common/collect,com.google.common.collect,Class ComparisonChain,public static ComparisonChain start(),Begins a new chained comparison statement. See example in the class documentation.
2743,common/collect,com.google.common.collect,Class ComparisonChain,"public abstract ComparisonChain compare(Comparable<?> left, Comparable<?> right)","Compares two comparable objects as specified by Comparable.compareTo(T), if the result of this comparison chain has not already been determined."
2744,common/collect,com.google.common.collect,Class ComparisonChain,"public abstract <T> ComparisonChain compare(T left, T right, Comparator<T> comparator)","Compares two objects using a comparator, if the result of this comparison chain has not already been determined."
2745,common/collect,com.google.common.collect,Class ComparisonChain,"public abstract ComparisonChain compare(int left, int right)","Compares two int values as specified by Ints.compare(int, int), if the result of this comparison chain has not already been determined."
2746,common/collect,com.google.common.collect,Class ComparisonChain,"public abstract ComparisonChain compare(long left, long right)","Compares two long values as specified by Longs.compare(long, long), if the result of this comparison chain has not already been determined."
2747,common/collect,com.google.common.collect,Class ComparisonChain,"public abstract ComparisonChain compare(float left, float right)","Compares two float values as specified by Float.compare(float, float), if the result of this comparison chain has not already been determined."
2748,common/collect,com.google.common.collect,Class ComparisonChain,"public abstract ComparisonChain compare(double left, double right)","Compares two double values as specified by Double.compare(double, double), if the result of this comparison chain has not already been determined."
2749,common/collect,com.google.common.collect,Class ComparisonChain,"@Deprecatedpublic final ComparisonChain compare(Boolean left, Boolean right)","Deprecated. Use compareFalseFirst(boolean, boolean); or, if the parameters passed are being either negated or reversed, undo the negation or reversal and use compareTrueFirst(boolean, boolean)."
2750,common/collect,com.google.common.collect,Class ComparisonChain,"public abstract ComparisonChain compareTrueFirst(boolean left, boolean right)","Compares two boolean values, considering true to be less than false, if the result of this comparison chain has not already been determined."
2751,common/collect,com.google.common.collect,Class ComparisonChain,"public abstract ComparisonChain compareFalseFirst(boolean left, boolean right)","Compares two boolean values, considering false to be less than true, if the result of this comparison chain has not already been determined."
2752,common/collect,com.google.common.collect,Class ConcurrentHashMultiset<E>,public static <E> ConcurrentHashMultiset<E> create(),"Creates a new, empty ConcurrentHashMultiset using the default initial capacity, load factor, and concurrency settings."
2753,common/collect,com.google.common.collect,Class ConcurrentHashMultiset<E>,public static <E> ConcurrentHashMultiset<E> create(Iterable<? extends E> elements),"Creates a new ConcurrentHashMultiset containing the specified elements, using the default initial capacity, load factor, and concurrency settings. This implementation is highly efficient when elements is itself a Multiset."
2754,common/collect,com.google.common.collect,Class ConcurrentHashMultiset<E>,"@Betapublic static <E> ConcurrentHashMultiset<E> create(ConcurrentMap<E,AtomicInteger> countMap)","Creates a new, empty ConcurrentHashMultiset using countMap as the internal backing map. This instance will assume ownership of countMap, and other code should not maintain references to the map or modify it in any way. The returned multiset is serializable if the input map is."
2755,common/collect,com.google.common.collect,Class ConcurrentHashMultiset<E>,public int count(@Nullable Object element),Returns the number of occurrences of element in this multiset.
2756,common/collect,com.google.common.collect,Class ConcurrentHashMultiset<E>,public int size(),"Returns the number of elements in this collection. If this collection contains more than Integer.MAX_VALUE elements, returns Integer.MAX_VALUE. If the data in the multiset is modified by any other threads during this method, it is undefined which (if any) of these modifications will be reflected in the result."
2757,common/collect,com.google.common.collect,Class ConcurrentHashMultiset<E>,public Object[] toArray(),Description copied from class: java.util.AbstractCollection
2758,common/collect,com.google.common.collect,Class ConcurrentHashMultiset<E>,public <T> T[] toArray(T[] array),Description copied from class: java.util.AbstractCollection
2759,common/collect,com.google.common.collect,Class ConcurrentHashMultiset<E>,"@CanIgnoreReturnValuepublic int add(E element, int occurrences)",Adds a number of occurrences of the specified element to this multiset.
2760,common/collect,com.google.common.collect,Class ConcurrentHashMultiset<E>,"@CanIgnoreReturnValuepublic int remove(@Nullable Object element, int occurrences)","Removes a number of occurrences of the specified element from this multiset. If the multiset contains fewer than this number of occurrences to begin with, all occurrences will be removed."
2761,common/collect,com.google.common.collect,Class ConcurrentHashMultiset<E>,"@CanIgnoreReturnValuepublic boolean removeExactly(@Nullable Object element, int occurrences)","Removes exactly the specified number of occurrences of element, or makes no change if this is not possible. This method, in contrast to remove(Object, int), has no effect when the element count is smaller than occurrences."
2762,common/collect,com.google.common.collect,Class ConcurrentHashMultiset<E>,"@CanIgnoreReturnValuepublic int setCount(E element, int count)",Adds or removes occurrences of element such that the count(java.lang.Object) of the element becomes count.
2763,common/collect,com.google.common.collect,Class ConcurrentHashMultiset<E>,"@CanIgnoreReturnValuepublic boolean setCount(E element, int expectedOldCount, int newCount)","Sets the number of occurrences of element to newCount, but only if the count is currently expectedOldCount. If element does not appear in the multiset exactly expectedOldCount times, no changes will be made."
2764,common/collect,com.google.common.collect,Class ConcurrentHashMultiset<E>,@Deprecatedpublic Set<Multiset.Entry<E>> createEntrySet(),"Deprecated. Internal method, use entrySet()."
2765,common/collect,com.google.common.collect,Class ConcurrentHashMultiset<E>,public boolean isEmpty(),Description copied from class: java.util.AbstractCollection
2766,common/collect,com.google.common.collect,Class ConcurrentHashMultiset<E>,public Iterator<E> iterator(),Description copied from class: java.util.AbstractCollection
2767,common/collect,com.google.common.collect,Class ConcurrentHashMultiset<E>,public void clear(),Description copied from class: java.util.AbstractCollection
2768,common/collect,com.google.common.collect,Class ConcurrentHashMultiset<E>,public boolean contains(@Nullable Object element),Description copied from class: java.util.AbstractCollection
2769,common/collect,com.google.common.collect,Class ConcurrentHashMultiset<E>,@CanIgnoreReturnValuepublic final boolean add(E element),Description copied from class: java.util.AbstractCollection
2770,common/collect,com.google.common.collect,Class ConcurrentHashMultiset<E>,@CanIgnoreReturnValuepublic final boolean remove(@Nullable Object element),Description copied from class: java.util.AbstractCollection
2771,common/collect,com.google.common.collect,Class ConcurrentHashMultiset<E>,@CanIgnoreReturnValuepublic final boolean addAll(Collection<? extends E> elementsToAdd),"Adds all of the elements in the specified collection to this collection (optional operation). The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (This implies that the behavior of this call is undefined if the specified collection is this collection, and this collection is nonempty.) This implementation iterates over the specified collection, and adds each object returned by the iterator to this collection, in turn. Note that this implementation will throw an UnsupportedOperationException unless add is overridden (assuming the specified collection is non-empty). This implementation is highly efficient when elementsToAdd is itself a Multiset."
2772,common/collect,com.google.common.collect,Class ConcurrentHashMultiset<E>,@CanIgnoreReturnValuepublic final boolean removeAll(Collection<?> elementsToRemove),Description copied from class: java.util.AbstractCollection
2773,common/collect,com.google.common.collect,Class ConcurrentHashMultiset<E>,@CanIgnoreReturnValuepublic final boolean retainAll(Collection<?> elementsToRetain),Description copied from class: java.util.AbstractCollection
2774,common/collect,com.google.common.collect,Class ConcurrentHashMultiset<E>,public Set<E> elementSet(),Description copied from interface: Multiset
2775,common/collect,com.google.common.collect,Class ConcurrentHashMultiset<E>,public Set<Multiset.Entry<E>> entrySet(),Description copied from interface: Multiset
2776,common/collect,com.google.common.collect,Class ConcurrentHashMultiset<E>,public final boolean equals(@Nullable Object object),"Indicates whether some other object is equal to this one. The equals method implements an equivalence relation on non-null object references: It is reflexive: for any non-null reference value x, x.equals(x) should return true. It is symmetric: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is transitive: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is consistent: for any non-null reference values x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes. This implementation returns true if object is a multiset of the same size and if, for each element, the two multisets have the same count."
2777,common/collect,com.google.common.collect,Class ConcurrentHashMultiset<E>,public final int hashCode(),"Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by HashMap. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the Object.equals(java.lang.Object) method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java™ programming language.) This implementation returns the hash code of Multiset.entrySet()."
2778,common/collect,com.google.common.collect,Class ContiguousSet<C extends Comparable>,"public static <C extends Comparable> ContiguousSet<C> create(Range<C> range, DiscreteDomain<C> domain)",Returns a ContiguousSet containing the same values in the given domain contained by the range.
2779,common/collect,com.google.common.collect,Class ContiguousSet<C extends Comparable>,"@Betapublic static ContiguousSet<Integer> closed(int lower, int upper)","Returns a nonempty contiguous set containing all int values from lower (inclusive) to upper (inclusive). (These are the same values contained in Range.closed(lower, upper).)"
2780,common/collect,com.google.common.collect,Class ContiguousSet<C extends Comparable>,"@Betapublic static ContiguousSet<Long> closed(long lower, long upper)","Returns a nonempty contiguous set containing all long values from lower (inclusive) to upper (inclusive). (These are the same values contained in Range.closed(lower, upper).)"
2781,common/collect,com.google.common.collect,Class ContiguousSet<C extends Comparable>,"@Betapublic static ContiguousSet<Integer> closedOpen(int lower, int upper)","Returns a contiguous set containing all int values from lower (inclusive) to upper (exclusive). If the endpoints are equal, an empty set is returned. (These are the same values contained in Range.closedOpen(lower, upper).)"
2782,common/collect,com.google.common.collect,Class ContiguousSet<C extends Comparable>,"@Betapublic static ContiguousSet<Long> closedOpen(long lower, long upper)","Returns a contiguous set containing all long values from lower (inclusive) to upper (exclusive). If the endpoints are equal, an empty set is returned. (These are the same values contained in Range.closedOpen(lower, upper).)"
2783,common/collect,com.google.common.collect,Class ContiguousSet<C extends Comparable>,public ContiguousSet<C> headSet(C toElement),Description copied from class: ImmutableSortedSet
2784,common/collect,com.google.common.collect,Class ContiguousSet<C extends Comparable>,"@GwtIncompatiblepublic ContiguousSet<C> headSet(C toElement, boolean inclusive)",Description copied from interface: java.util.NavigableSet
2785,common/collect,com.google.common.collect,Class ContiguousSet<C extends Comparable>,"public ContiguousSet<C> subSet(C fromElement, C toElement)",Description copied from class: ImmutableSortedSet
2786,common/collect,com.google.common.collect,Class ContiguousSet<C extends Comparable>,"@GwtIncompatiblepublic ContiguousSet<C> subSet(C fromElement, boolean fromInclusive, C toElement, boolean toInclusive)",Description copied from interface: java.util.NavigableSet
2787,common/collect,com.google.common.collect,Class ContiguousSet<C extends Comparable>,public ContiguousSet<C> tailSet(C fromElement),Description copied from class: ImmutableSortedSet
2788,common/collect,com.google.common.collect,Class ContiguousSet<C extends Comparable>,"@GwtIncompatiblepublic ContiguousSet<C> tailSet(C fromElement, boolean inclusive)",Description copied from interface: java.util.NavigableSet
2789,common/collect,com.google.common.collect,Class ContiguousSet<C extends Comparable>,public abstract ContiguousSet<C> intersection(ContiguousSet<C> other),"Returns the set of values that are contained in both this set and the other. This method should always be used instead of Sets.intersection(java.util.Set<E>, java.util.Set<?>) for ContiguousSet instances."
2790,common/collect,com.google.common.collect,Class ContiguousSet<C extends Comparable>,public abstract Range<C> range(),"Returns a range, closed on both ends, whose endpoints are the minimum and maximum values contained in this set. This is equivalent to range(CLOSED, CLOSED)."
2791,common/collect,com.google.common.collect,Class ContiguousSet<C extends Comparable>,"public abstract Range<C> range(BoundType lowerBoundType, BoundType upperBoundType)","Returns the minimal range with the given boundary types for which all values in this set are contained within the range. Note that this method will return ranges with unbounded endpoints if BoundType.OPEN is requested for a domain minimum or maximum. For example, if set was created from the range [1..Integer.MAX_VALUE] then set.range(CLOSED, OPEN) must return [1..∞)."
2792,common/collect,com.google.common.collect,Class ContiguousSet<C extends Comparable>,public String toString(),Returns a short-hand representation of the contents such as [1..100].
2793,common/collect,com.google.common.collect,Class ContiguousSet<C extends Comparable>,@Deprecatedpublic static <E> ImmutableSortedSet.Builder<E> builder(),"Deprecated. Use create(com.google.common.collect.Range<C>, com.google.common.collect.DiscreteDomain<C>)."
2794,common/collect,com.google.common.collect,Class ContiguousSet<C extends Comparable>,"@Deprecatedpublic static <E> Collector<E,?,ImmutableSet<E>> toImmutableSet()",Deprecated. Use ImmutableSortedSet.toImmutableSortedSet(java.util.Comparator<? super E>).
2795,common/base,com.google.common.base,"Class Converter<A,B>",@ForOverrideprotected abstract B doForward(A a),"Returns a representation of a as an instance of type B. If a cannot be converted, an unchecked exception (such as IllegalArgumentException) should be thrown."
2796,common/base,com.google.common.base,"Class Converter<A,B>",@ForOverrideprotected abstract A doBackward(B b),"Returns a representation of b as an instance of type A. If b cannot be converted, an unchecked exception (such as IllegalArgumentException) should be thrown."
2797,common/base,com.google.common.base,"Class Converter<A,B>",@CanIgnoreReturnValuepublic final B convert(A a),Returns a representation of a as an instance of type B.
2798,common/base,com.google.common.base,"Class Converter<A,B>",@CanIgnoreReturnValuepublic Iterable<B> convertAll(Iterable<? extends A> fromIterable),"Returns an iterable that applies convert to each element of fromIterable. The conversion is done lazily. The returned iterable's iterator supports remove() if the input iterator does. After a successful remove() call, fromIterable no longer contains the corresponding element."
2799,common/base,com.google.common.base,"Class Converter<A,B>","@CanIgnoreReturnValuepublic Converter<B,A> reverse()","Returns the reversed view of this converter, which converts this.convert(a) back to a value roughly equivalent to a. The returned converter is serializable if this converter is. Note: you should not override this method. It is non-final for legacy reasons."
2800,common/base,com.google.common.base,"Class Converter<A,B>","public final <C> Converter<A,C> andThen(Converter<B,C> secondConverter)",Returns a converter whose convert method applies secondConverter to the result of this converter. Its reverse method applies the converters in reverse order. The returned converter is serializable if this converter and secondConverter are.
2801,common/base,com.google.common.base,"Class Converter<A,B>",@Deprecated @CanIgnoreReturnValuepublic final B apply(A a),Deprecated. Provided to satisfy the Function interface; use convert(A) instead.
2802,common/base,com.google.common.base,"Class Converter<A,B>",public boolean equals(@Nullable Object object),"Indicates whether another object is equal to this converter. Most implementations will have no reason to override the behavior of Object.equals(java.lang.Object). However, an implementation may also choose to return true whenever object is a Converter that it considers interchangeable with this one. Interchangeable typically means that Objects.equal(this.convert(a), that.convert(a)) is true for all a of type A (and similarly for reverse). Note that a false result from this method does not imply that the converters are known not to be interchangeable."
2803,common/base,com.google.common.base,"Class Converter<A,B>","public static <A,B> Converter<A,B> from(Function<? super A,? extends B> forwardFunction, Function<? super B,? extends A> backwardFunction)","Returns a converter based on separate forward and backward functions. This is useful if the function instances already exist, or so that you can supply lambda expressions. If those circumstances don't apply, you probably don't need to use this; subclass Converter and implement its doForward(A) and doBackward(B) methods directly. These functions will never be passed null and must not under any circumstances return null. If a value cannot be converted, the function should throw an unchecked exception (typically, but not necessarily, IllegalArgumentException). The returned converter is serializable if both provided functions are."
2804,common/io,com.google.common.io,Class CountingInputStream,public long getCount(),Returns the number of bytes read.
2805,common/io,com.google.common.io,Class CountingInputStream,public int read() throws IOException,Description copied from class: java.io.FilterInputStream
2806,common/io,com.google.common.io,Class CountingInputStream,"public int read(byte[] b, int off, int len) throws IOException",Description copied from class: java.io.FilterInputStream
2807,common/io,com.google.common.io,Class CountingInputStream,public long skip(long n) throws IOException,Description copied from class: java.io.FilterInputStream
2808,common/io,com.google.common.io,Class CountingInputStream,public void mark(int readlimit),Description copied from class: java.io.FilterInputStream
2809,common/io,com.google.common.io,Class CountingOutputStream,public long getCount(),Returns the number of bytes written.
2810,common/io,com.google.common.io,Class CountingOutputStream,"public void write(byte[] b, int off, int len) throws IOException",Description copied from class: java.io.FilterOutputStream
2811,common/io,com.google.common.io,Class CountingOutputStream,public void write(int b) throws IOException,Description copied from class: java.io.FilterOutputStream
2812,util/concurrent,com.google.common.util.concurrent,Class CycleDetectingLockFactory,public static CycleDetectingLockFactory newInstance(CycleDetectingLockFactory.Policy policy),Creates a new factory with the specified policy.
2813,util/concurrent,com.google.common.util.concurrent,Class CycleDetectingLockFactory,public ReentrantLock newReentrantLock(String lockName),"Equivalent to newReentrantLock(lockName, false)."
2814,util/concurrent,com.google.common.util.concurrent,Class CycleDetectingLockFactory,"public ReentrantLock newReentrantLock(String lockName, boolean fair)",Creates a ReentrantLock with the given fairness policy. The lockName is used in the warning or exception output to help identify the locks involved in the detected deadlock.
2815,util/concurrent,com.google.common.util.concurrent,Class CycleDetectingLockFactory,public ReentrantReadWriteLock newReentrantReadWriteLock(String lockName),"Equivalent to newReentrantReadWriteLock(lockName, false)."
2816,util/concurrent,com.google.common.util.concurrent,Class CycleDetectingLockFactory,"public ReentrantReadWriteLock newReentrantReadWriteLock(String lockName, boolean fair)",Creates a ReentrantReadWriteLock with the given fairness policy. The lockName is used in the warning or exception output to help identify the locks involved in the detected deadlock.
2817,util/concurrent,com.google.common.util.concurrent,Enum CycleDetectingLockFactory.Policies,public static final CycleDetectingLockFactory.Policies THROW,"When potential deadlock is detected, this policy results in the throwing of the PotentialDeadlockException indicating the potential deadlock, which includes stack traces illustrating the cycle in lock acquisition order."
2818,util/concurrent,com.google.common.util.concurrent,Enum CycleDetectingLockFactory.Policies,public static final CycleDetectingLockFactory.Policies WARN,"When potential deadlock is detected, this policy results in the logging of a Level.SEVERE message indicating the potential deadlock, which includes stack traces illustrating the cycle in lock acquisition order."
2819,util/concurrent,com.google.common.util.concurrent,Enum CycleDetectingLockFactory.Policies,public static CycleDetectingLockFactory.Policies[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (CycleDetectingLockFactory.Policies c : CycleDetectingLockFactory.Policies.values())  System.out.println(c);"
2820,util/concurrent,com.google.common.util.concurrent,Class CycleDetectingLockFactory.PotentialDeadlockException,public com.google.common.util.concurrent.CycleDetectingLockFactory.ExampleStackTrace getConflictingStackTrace(),
2821,util/concurrent,com.google.common.util.concurrent,Class CycleDetectingLockFactory.WithExplicitOrdering<E extends Enum<E>>,public ReentrantLock newReentrantLock(E rank),"Equivalent to newReentrantLock(rank, false)."
2822,util/concurrent,com.google.common.util.concurrent,Class CycleDetectingLockFactory.WithExplicitOrdering<E extends Enum<E>>,"public ReentrantLock newReentrantLock(E rank, boolean fair)",Creates a ReentrantLock with the given fairness policy and rank. The values returned by Enum.getDeclaringClass() and Enum.name() are used to describe the lock in warning or exception output.
2823,util/concurrent,com.google.common.util.concurrent,Class CycleDetectingLockFactory.WithExplicitOrdering<E extends Enum<E>>,public ReentrantReadWriteLock newReentrantReadWriteLock(E rank),"Equivalent to newReentrantReadWriteLock(rank, false)."
2824,common/eventbus,com.google.common.eventbus,Class DeadEvent,public Object getSource(),Returns the object that originated this event (not the object that originated the wrapped event). This is generally an EventBus.
2825,common/eventbus,com.google.common.eventbus,Class DeadEvent,public Object getEvent(),"Returns the wrapped, 'dead' event, which the system was unable to deliver to any registered subscriber."
2826,common/collect,com.google.common.collect,Class DiscreteDomain<C extends Comparable>,public static DiscreteDomain<Integer> integers(),Returns the discrete domain for values of type Integer.
2827,common/collect,com.google.common.collect,Class DiscreteDomain<C extends Comparable>,public static DiscreteDomain<Long> longs(),Returns the discrete domain for values of type Long.
2828,common/collect,com.google.common.collect,Class DiscreteDomain<C extends Comparable>,public static DiscreteDomain<BigInteger> bigIntegers(),Returns the discrete domain for values of type BigInteger.
2829,common/collect,com.google.common.collect,Class DiscreteDomain<C extends Comparable>,public abstract C next(C value),"Returns the unique least value of type C that is greater than value, or null if none exists. Inverse operation to previous(C)."
2830,common/collect,com.google.common.collect,Class DiscreteDomain<C extends Comparable>,public abstract C previous(C value),"Returns the unique greatest value of type C that is less than value, or null if none exists. Inverse operation to next(C)."
2831,common/collect,com.google.common.collect,Class DiscreteDomain<C extends Comparable>,"public abstract long distance(C start, C end)","Returns a signed value indicating how many nested invocations of next(C) (if positive) or previous(C) (if negative) are needed to reach end starting from start. For example, if end = next(next(next(start))), then distance(start, end) == 3 and distance(end, start) == -3. As well, distance(a, a) is always zero. Note that this function is necessarily well-defined for any discrete type."
2832,common/collect,com.google.common.collect,Class DiscreteDomain<C extends Comparable>,@CanIgnoreReturnValuepublic C minValue(),"Returns the minimum value of type C, if it has one. The minimum value is the unique value for which Comparable.compareTo(Object) never returns a positive value for any input of type C. The default implementation throws NoSuchElementException."
2833,common/math,com.google.common.math,Class DoubleMath,"@GwtIncompatiblepublic static int roundToInt(double x, RoundingMode mode)","Returns the int value that is equal to x rounded with the specified rounding mode, if possible."
2834,common/math,com.google.common.math,Class DoubleMath,"@GwtIncompatiblepublic static long roundToLong(double x, RoundingMode mode)","Returns the long value that is equal to x rounded with the specified rounding mode, if possible."
2835,common/math,com.google.common.math,Class DoubleMath,"@GwtIncompatiblepublic static BigInteger roundToBigInteger(double x, RoundingMode mode)","Returns the BigInteger value that is equal to x rounded with the specified rounding mode, if possible."
2836,common/math,com.google.common.math,Class DoubleMath,@GwtIncompatiblepublic static boolean isPowerOfTwo(double x),Returns true if x is exactly equal to 2^k for some finite integer k.
2837,common/math,com.google.common.math,Class DoubleMath,public static double log2(double x),"Returns the base 2 logarithm of a double value. Special cases: If x is NaN or less than zero, the result is NaN. If x is positive infinity, the result is positive infinity. If x is positive or negative zero, the result is negative infinity. The computed result is within 1 ulp of the exact result. If the result of this method will be immediately rounded to an int, log2(double, RoundingMode) is faster."
2838,common/math,com.google.common.math,Class DoubleMath,"@GwtIncompatiblepublic static int log2(double x, RoundingMode mode)","Returns the base 2 logarithm of a double value, rounded with the specified rounding mode to an int. Regardless of the rounding mode, this is faster than (int) log2(x)."
2839,common/math,com.google.common.math,Class DoubleMath,@GwtIncompatiblepublic static boolean isMathematicalInteger(double x),"Returns true if x represents a mathematical integer. This is equivalent to, but not necessarily implemented as, the expression !Double.isNaN(x) && !Double.isInfinite(x) && x == Math.rint(x)."
2840,common/math,com.google.common.math,Class DoubleMath,public static double factorial(int n),"Returns n!, that is, the product of the first n positive integers, 1 if n == 0, or n!, or Double.POSITIVE_INFINITY if n! > Double.MAX_VALUE. The result is within 1 ulp of the true value."
2841,common/math,com.google.common.math,Class DoubleMath,"public static boolean fuzzyEquals(double a, double b, double tolerance)","Returns true if a and b are within tolerance of each other. Technically speaking, this is equivalent to Math.abs(a - b) <= tolerance || Double.valueOf(a).equals(Double.valueOf(b)). Notable special cases include: All NaNs are fuzzily equal. If a == b, then a and b are always fuzzily equal. Positive and negative zero are always fuzzily equal. If tolerance is zero, and neither a nor b is NaN, then a and b are fuzzily equal if and only if a == b. With Double.POSITIVE_INFINITY tolerance, all non-NaN values are fuzzily equal. With finite tolerance, Double.POSITIVE_INFINITY and Double.NEGATIVE_INFINITY are fuzzily equal only to themselves. This is reflexive and symmetric, but not transitive, so it is not an equivalence relation and not suitable for use in Object.equals(java.lang.Object) implementations."
2842,common/math,com.google.common.math,Class DoubleMath,"public static int fuzzyCompare(double a, double b, double tolerance)","Compares a and b fuzzily, with a tolerance for nearly-equal values. This method is equivalent to fuzzyEquals(a, b, tolerance) ? 0 : Double.compare(a, b). In particular, like Double.compare(double, double), it treats all NaN values as equal and greater than all other values (including Double.POSITIVE_INFINITY). This is not a total ordering and is not suitable for use in Comparable.compareTo(T) implementations. In particular, it is not transitive."
2843,common/math,com.google.common.math,Class DoubleMath,@Deprecated @GwtIncompatiblepublic static double mean(double... values),"Deprecated. Use Stats.meanOf(java.lang.Iterable<? extends java.lang.Number>) instead, noting the less strict handling of non-finite values."
2844,common/math,com.google.common.math,Class DoubleMath,@Deprecatedpublic static double mean(int... values),"Deprecated. Use Stats.meanOf(java.lang.Iterable<? extends java.lang.Number>) instead, noting the less strict handling of non-finite values."
2845,common/math,com.google.common.math,Class DoubleMath,@Deprecatedpublic static double mean(long... values),"Deprecated. Use Stats.meanOf(java.lang.Iterable<? extends java.lang.Number>) instead, noting the less strict handling of non-finite values."
2846,common/math,com.google.common.math,Class DoubleMath,@Deprecated @GwtIncompatiblepublic static double mean(Iterable<? extends Number> values),"Deprecated. Use Stats.meanOf(java.lang.Iterable<? extends java.lang.Number>) instead, noting the less strict handling of non-finite values."
2847,common/primitives,com.google.common.primitives,Class Doubles,public static int hashCode(double value),Returns a hash code for value; equal to the result of invoking ((Double) value).hashCode(). Java 8 users: use Double.hashCode(double) instead.
2848,common/primitives,com.google.common.primitives,Class Doubles,"public static int compare(double a, double b)","Compares the two specified double values. The sign of the value returned is the same as that of ((Double) a).compareTo(b). As with that method, NaN is treated as greater than all other values, and 0.0 > -0.0. Note: this method simply delegates to the JDK method Double.compare(double, double). It is provided for consistency with the other primitive types, whose compare methods were not added to the JDK until JDK 7."
2849,common/primitives,com.google.common.primitives,Class Doubles,public static boolean isFinite(double value),"Returns true if value represents a real number. This is equivalent to, but not necessarily implemented as, !(Double.isInfinite(value) || Double.isNaN(value)). Java 8 users: use Double.isFinite(double) instead."
2850,common/primitives,com.google.common.primitives,Class Doubles,"public static boolean contains(double[] array, double target)",Returns true if target is present as an element anywhere in array. Note that this always returns false when target is NaN.
2851,common/primitives,com.google.common.primitives,Class Doubles,"public static int indexOf(double[] array, double target)",Returns the index of the first appearance of the value target in array. Note that this always returns -1 when target is NaN.
2852,common/primitives,com.google.common.primitives,Class Doubles,"public static int indexOf(double[] array, double[] target)","Returns the start position of the first occurrence of the specified target within array, or -1 if there is no such occurrence. More formally, returns the lowest index i such that Arrays.copyOfRange(array, i, i + target.length) contains exactly the same elements as target. Note that this always returns -1 when target contains NaN."
2853,common/primitives,com.google.common.primitives,Class Doubles,"public static int lastIndexOf(double[] array, double target)",Returns the index of the last appearance of the value target in array. Note that this always returns -1 when target is NaN.
2854,common/primitives,com.google.common.primitives,Class Doubles,"@GwtIncompatible(value=""Available in GWT! Annotation is to avoid conflict with GWT specialization of base class."")public static double min(double... array)","Returns the least value present in array, using the same rules of comparison as Math.min(double, double)."
2855,common/primitives,com.google.common.primitives,Class Doubles,"@GwtIncompatible(value=""Available in GWT! Annotation is to avoid conflict with GWT specialization of base class."")public static double max(double... array)","Returns the greatest value present in array, using the same rules of comparison as Math.max(double, double)."
2856,common/primitives,com.google.common.primitives,Class Doubles,"@Betapublic static double constrainToRange(double value, double min, double max)","Returns the value nearest to value which is within the closed range [min..max]. If value is within the range [min..max], value is returned unchanged. If value is less than min, min is returned, and if value is greater than max, max is returned."
2857,common/primitives,com.google.common.primitives,Class Doubles,public static double[] concat(double[]... arrays),"Returns the values from each provided array combined into a single array. For example, concat(new double[] {a, b}, new double[] {}, new double[] {c} returns the array {a, b, c}."
2858,common/primitives,com.google.common.primitives,Class Doubles,"@Betapublic static Converter<String,Double> stringConverter()",Returns a serializable converter object that converts between strings and doubles using Double.valueOf(java.lang.String) and Double.toString().
2859,common/primitives,com.google.common.primitives,Class Doubles,"public static double[] ensureCapacity(double[] array, int minLength, int padding)","Returns an array containing the same values as array, but guaranteed to be of a specified minimum length. If array already has a length of at least minLength, it is returned directly. Otherwise, a new array of size minLength + padding is returned, containing the values of array, and zeroes in the remaining places."
2860,common/primitives,com.google.common.primitives,Class Doubles,"public static String join(String separator, double... array)","Returns a string containing the supplied double values, converted to strings as specified by Double.toString(double), and separated by separator. For example, join(-, 1.0, 2.0, 3.0) returns the string 1.0-2.0-3.0. Note that Double.toString(double) formats double differently in GWT sometimes. In the previous example, it returns the string 1-2-3."
2861,common/primitives,com.google.common.primitives,Class Doubles,public static Comparator<double[]> lexicographicalComparator(),"Returns a comparator that compares two double arrays lexicographically. That is, it compares, using compare(double, double)), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example, [] < [1.0] < [1.0, 2.0] < [2.0]. The returned comparator is inconsistent with Object.equals(Object) (since arrays support only identity equality), but it is consistent with Arrays.equals(double[], double[])."
2862,common/primitives,com.google.common.primitives,Class Doubles,public static void sortDescending(double[] array),"Sorts the elements of array in descending order. Note that this method uses the total order imposed by Double.compare(double, double), which treats all NaN values as equal and 0.0 as greater than -0.0."
2863,common/primitives,com.google.common.primitives,Class Doubles,"public static void sortDescending(double[] array, int fromIndex, int toIndex)","Sorts the elements of array between fromIndex inclusive and toIndex exclusive in descending order. Note that this method uses the total order imposed by Double.compare(double, double), which treats all NaN values as equal and 0.0 as greater than -0.0."
2864,common/primitives,com.google.common.primitives,Class Doubles,public static void reverse(double[] array),"Reverses the elements of array. This is equivalent to Collections.reverse(Doubles.asList(array)), but is likely to be more efficient."
2865,common/primitives,com.google.common.primitives,Class Doubles,"public static void reverse(double[] array, int fromIndex, int toIndex)","Reverses the elements of array between fromIndex inclusive and toIndex exclusive. This is equivalent to Collections.reverse(Doubles.asList(array).subList(fromIndex, toIndex)), but is likely to be more efficient."
2866,common/primitives,com.google.common.primitives,Class Doubles,public static double[] toArray(Collection<? extends Number> collection),"Returns an array containing each value of collection, converted to a double value in the manner of Number.doubleValue(). Elements are copied from the argument collection as if by collection.toArray(). Calling this method is as thread-safe as calling that method."
2867,common/primitives,com.google.common.primitives,Class Doubles,public static List<Double> asList(double... backingArray),"Returns a fixed-size list backed by the specified array, similar to Arrays.asList(Object[]). The list supports List.set(int, Object), but any attempt to set a value to null will result in a NullPointerException. The returned list maintains the values, but not the identities, of Double objects written to or read from it. For example, whether list.get(0) == list.get(0) is true for the returned list is unspecified. The returned list may have unexpected behavior if it contains NaN, or if NaN is used as a parameter to any of its methods. Note: when possible, you should represent your data as an ImmutableDoubleArray instead, which has an asList view."
2868,common/graph,com.google.common.graph,Class ElementOrder<T>,public static <S> ElementOrder<S> unordered(),Returns an instance which specifies that no ordering is guaranteed.
2869,common/graph,com.google.common.graph,Class ElementOrder<T>,public static <S> ElementOrder<S> stable(),"Returns an instance which specifies that ordering is guaranteed to be always be the same across iterations, and across releases. Some methods may have stronger guarantees. This instance is only useful in combination with incidentEdgeOrder, e.g. graphBuilder.incidentEdgeOrder(ElementOrder.stable()). In combination with incidentEdgeOrderincidentEdgeOrder(ElementOrder.stable()) guarantees the ordering of the returned collections of the following methods: For Graph and ValueGraph: edges(): Stable order adjacentNodes(node): Connecting edge insertion order predecessors(node): Connecting edge insertion order successors(node): Connecting edge insertion order incidentEdges(node): Edge insertion order For Network: adjacentNodes(node): Stable order predecessors(node): Connecting edge insertion order successors(node): Connecting edge insertion order incidentEdges(node): Stable order inEdges(node): Edge insertion order outEdges(node): Edge insertion order adjacentEdges(edge): Stable order edgesConnecting(nodeU, nodeV): Edge insertion order "
2870,common/graph,com.google.common.graph,Class ElementOrder<T>,public static <S> ElementOrder<S> insertion(),Returns an instance which specifies that insertion ordering is guaranteed.
2871,common/graph,com.google.common.graph,Class ElementOrder<T>,public static <S extends Comparable<? super S>> ElementOrder<S> natural(),Returns an instance which specifies that the natural ordering of the elements is guaranteed.
2872,common/graph,com.google.common.graph,Class ElementOrder<T>,public static <S> ElementOrder<S> sorted(Comparator<S> comparator),Returns an instance which specifies that the ordering of the elements is guaranteed to be determined by comparator.
2873,common/graph,com.google.common.graph,Class ElementOrder<T>,public ElementOrder.Type type(),Returns the type of ordering used.
2874,common/graph,com.google.common.graph,Class ElementOrder<T>,public Comparator<T> comparator(),Returns the Comparator used.
2875,common/graph,com.google.common.graph,Class ElementOrder<T>,public boolean equals(@Nullable Object obj),Description copied from class: java.lang.Object
2876,common/graph,com.google.common.graph,Class ElementOrder<T>,public int hashCode(),Description copied from class: java.lang.Object
2877,common/graph,com.google.common.graph,Enum ElementOrder.Type,public static final ElementOrder.Type UNORDERED,
2878,common/graph,com.google.common.graph,Enum ElementOrder.Type,public static final ElementOrder.Type STABLE,
2879,common/graph,com.google.common.graph,Enum ElementOrder.Type,public static final ElementOrder.Type INSERTION,
2880,common/graph,com.google.common.graph,Enum ElementOrder.Type,public static ElementOrder.Type[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (ElementOrder.Type c : ElementOrder.Type.values())  System.out.println(c);"
2881,common/graph,com.google.common.graph,Class EndpointPair<N>,"public static <N> EndpointPair<N> ordered(N source, N target)",Returns an EndpointPair representing the endpoints of a directed edge.
2882,common/graph,com.google.common.graph,Class EndpointPair<N>,"public static <N> EndpointPair<N> unordered(N nodeU, N nodeV)",Returns an EndpointPair representing the endpoints of an undirected edge.
2883,common/graph,com.google.common.graph,Class EndpointPair<N>,public abstract N source(),"If this EndpointPair isOrdered(), returns the node which is the source."
2884,common/graph,com.google.common.graph,Class EndpointPair<N>,public abstract N target(),"If this EndpointPair isOrdered(), returns the node which is the target."
2885,common/graph,com.google.common.graph,Class EndpointPair<N>,public final N nodeU(),"If this EndpointPair isOrdered() returns the source(); otherwise, returns an arbitrary (but consistent) endpoint of the origin edge."
2886,common/graph,com.google.common.graph,Class EndpointPair<N>,public final N nodeV(),"Returns the node adjacent to nodeU() along the origin edge. If this EndpointPair isOrdered(), this is equal to target()."
2887,common/graph,com.google.common.graph,Class EndpointPair<N>,public final N adjacentNode(Object node),Returns the node that is adjacent to node along the origin edge.
2888,common/graph,com.google.common.graph,Class EndpointPair<N>,public abstract boolean isOrdered(),Returns true if this EndpointPair is an ordered pair (i.e. represents the endpoints of a directed edge).
2889,common/graph,com.google.common.graph,Class EndpointPair<N>,public final UnmodifiableIterator<N> iterator(),"Iterates in the order nodeU(), nodeV()."
2890,common/graph,com.google.common.graph,Class EndpointPair<N>,public abstract boolean equals(@Nullable Object obj),Two ordered EndpointPairs are equal if their source() and target() are equal. Two unordered EndpointPairs are equal if they contain the same nodes. An ordered EndpointPair is never equal to an unordered EndpointPair.
2891,common/collect,com.google.common.collect,"Class EnumBiMap<K extends Enum<K>,V extends Enum<V>>","public static <K extends Enum<K>,V extends Enum<V>> EnumBiMap<K,V> create(Class<K> keyType, Class<V> valueType)","Returns a new, empty EnumBiMap using the specified key and value types."
2892,common/collect,com.google.common.collect,"Class EnumBiMap<K extends Enum<K>,V extends Enum<V>>","public static <K extends Enum<K>,V extends Enum<V>> EnumBiMap<K,V> create(Map<K,V> map)","Returns a new bimap with the same mappings as the specified map. If the specified map is an EnumBiMap, the new bimap has the same types as the provided map. Otherwise, the specified map must contain at least one mapping, in order to determine the key and value types."
2893,common/collect,com.google.common.collect,"Class EnumBiMap<K extends Enum<K>,V extends Enum<V>>",public Class<K> keyType(),Returns the associated key type.
2894,common/collect,com.google.common.collect,"Class EnumBiMap<K extends Enum<K>,V extends Enum<V>>",public Class<V> valueType(),Returns the associated value type.
2895,common/collect,com.google.common.collect,"Class EnumBiMap<K extends Enum<K>,V extends Enum<V>>","protected Map<K,V> delegate()",Description copied from class: ForwardingObject
2896,common/collect,com.google.common.collect,"Class EnumBiMap<K extends Enum<K>,V extends Enum<V>>",public boolean containsValue(@Nullable Object value),Description copied from interface: java.util.Map
2897,common/collect,com.google.common.collect,"Class EnumBiMap<K extends Enum<K>,V extends Enum<V>>","@CanIgnoreReturnValuepublic V put(K key, V value)",Description copied from interface: java.util.Map
2898,common/collect,com.google.common.collect,"Class EnumBiMap<K extends Enum<K>,V extends Enum<V>>","@CanIgnoreReturnValuepublic V forcePut(K key, V value)",Description copied from interface: BiMap
2899,common/collect,com.google.common.collect,"Class EnumBiMap<K extends Enum<K>,V extends Enum<V>>",@CanIgnoreReturnValuepublic V remove(@Nullable Object key),Description copied from interface: java.util.Map
2900,common/collect,com.google.common.collect,"Class EnumBiMap<K extends Enum<K>,V extends Enum<V>>","public void putAll(Map<? extends K,? extends V> map)",Description copied from interface: java.util.Map
2901,common/collect,com.google.common.collect,"Class EnumBiMap<K extends Enum<K>,V extends Enum<V>>","public void replaceAll(BiFunction<? super K,? super V,? extends V> function)",Description copied from interface: java.util.Map
2902,common/collect,com.google.common.collect,"Class EnumBiMap<K extends Enum<K>,V extends Enum<V>>",public void clear(),Description copied from interface: java.util.Map
2903,common/collect,com.google.common.collect,"Class EnumBiMap<K extends Enum<K>,V extends Enum<V>>","public BiMap<V,K> inverse()",Description copied from interface: BiMap
2904,common/collect,com.google.common.collect,"Class EnumBiMap<K extends Enum<K>,V extends Enum<V>>",public Set<K> keySet(),Description copied from interface: java.util.Map
2905,common/collect,com.google.common.collect,"Class EnumBiMap<K extends Enum<K>,V extends Enum<V>>",public Set<V> values(),Description copied from interface: java.util.Map
2906,common/collect,com.google.common.collect,"Class EnumHashBiMap<K extends Enum<K>,V>","public static <K extends Enum<K>,V> EnumHashBiMap<K,V> create(Class<K> keyType)","Returns a new, empty EnumHashBiMap using the specified key type."
2907,common/collect,com.google.common.collect,"Class EnumHashBiMap<K extends Enum<K>,V>","public static <K extends Enum<K>,V> EnumHashBiMap<K,V> create(Map<K,? extends V> map)","Constructs a new bimap with the same mappings as the specified map. If the specified map is an EnumHashBiMap or an EnumBiMap, the new bimap has the same key type as the input bimap. Otherwise, the specified map must contain at least one mapping, in order to determine the key type."
2908,common/collect,com.google.common.collect,"Class EnumHashBiMap<K extends Enum<K>,V>","@CanIgnoreReturnValuepublic V put(K key, V value)",Description copied from interface: java.util.Map
2909,common/collect,com.google.common.collect,"Class EnumHashBiMap<K extends Enum<K>,V>","@CanIgnoreReturnValuepublic V forcePut(K key, V value)",Description copied from interface: BiMap
2910,common/collect,com.google.common.collect,"Class EnumHashBiMap<K extends Enum<K>,V>",public Class<K> keyType(),Returns the associated key type.
2911,common/collect,com.google.common.collect,"Class EnumHashBiMap<K extends Enum<K>,V>","protected Map<K,V> delegate()",Description copied from class: ForwardingObject
2912,common/collect,com.google.common.collect,"Class EnumHashBiMap<K extends Enum<K>,V>",public boolean containsValue(@Nullable Object value),Description copied from interface: java.util.Map
2913,common/collect,com.google.common.collect,"Class EnumHashBiMap<K extends Enum<K>,V>",@CanIgnoreReturnValuepublic V remove(@Nullable Object key),Description copied from interface: java.util.Map
2914,common/collect,com.google.common.collect,"Class EnumHashBiMap<K extends Enum<K>,V>","public void putAll(Map<? extends K,? extends V> map)",Description copied from interface: java.util.Map
2915,common/collect,com.google.common.collect,"Class EnumHashBiMap<K extends Enum<K>,V>","public void replaceAll(BiFunction<? super K,? super V,? extends V> function)",Description copied from interface: java.util.Map
2916,common/collect,com.google.common.collect,"Class EnumHashBiMap<K extends Enum<K>,V>",public void clear(),Description copied from interface: java.util.Map
2917,common/collect,com.google.common.collect,"Class EnumHashBiMap<K extends Enum<K>,V>","public BiMap<V,K> inverse()",Description copied from interface: BiMap
2918,common/collect,com.google.common.collect,"Class EnumHashBiMap<K extends Enum<K>,V>",public Set<K> keySet(),Description copied from interface: java.util.Map
2919,common/collect,com.google.common.collect,"Class EnumHashBiMap<K extends Enum<K>,V>",public Set<V> values(),Description copied from interface: java.util.Map
2920,common/collect,com.google.common.collect,Class EnumMultiset<E extends Enum<E>>,public static <E extends Enum<E>> EnumMultiset<E> create(Class<E> type),Creates an empty EnumMultiset.
2921,common/collect,com.google.common.collect,Class EnumMultiset<E extends Enum<E>>,public static <E extends Enum<E>> EnumMultiset<E> create(Iterable<E> elements),Creates a new EnumMultiset containing the specified elements. This implementation is highly efficient when elements is itself a Multiset.
2922,common/collect,com.google.common.collect,Class EnumMultiset<E extends Enum<E>>,"public static <E extends Enum<E>> EnumMultiset<E> create(Iterable<E> elements, Class<E> type)","Returns a new EnumMultiset instance containing the given elements. Unlike create(Iterable), this method does not produce an exception on an empty iterable."
2923,common/collect,com.google.common.collect,Class EnumMultiset<E extends Enum<E>>,public int size(),Description copied from interface: java.util.Collection
2924,common/collect,com.google.common.collect,Class EnumMultiset<E extends Enum<E>>,public int count(@Nullable Object element),Description copied from interface: Multiset
2925,common/collect,com.google.common.collect,Class EnumMultiset<E extends Enum<E>>,"@CanIgnoreReturnValuepublic int add(E element, int occurrences)",Description copied from interface: Multiset
2926,common/collect,com.google.common.collect,Class EnumMultiset<E extends Enum<E>>,"@CanIgnoreReturnValuepublic int remove(@Nullable Object element, int occurrences)",Description copied from interface: Multiset
2927,common/collect,com.google.common.collect,Class EnumMultiset<E extends Enum<E>>,"@CanIgnoreReturnValuepublic int setCount(E element, int count)",Description copied from interface: Multiset
2928,common/collect,com.google.common.collect,Class EnumMultiset<E extends Enum<E>>,public void clear(),Description copied from class: java.util.AbstractCollection
2929,common/collect,com.google.common.collect,Class EnumMultiset<E extends Enum<E>>,public void forEachEntry(ObjIntConsumer<? super E> action),Description copied from interface: Multiset
2930,common/collect,com.google.common.collect,Class EnumMultiset<E extends Enum<E>>,public Iterator<E> iterator(),Description copied from class: java.util.AbstractCollection
2931,common/collect,com.google.common.collect,Class EnumMultiset<E extends Enum<E>>,public boolean isEmpty(),Description copied from class: java.util.AbstractCollection
2932,common/collect,com.google.common.collect,Class EnumMultiset<E extends Enum<E>>,public boolean contains(@Nullable Object element),Description copied from class: java.util.AbstractCollection
2933,common/collect,com.google.common.collect,Class EnumMultiset<E extends Enum<E>>,@CanIgnoreReturnValuepublic final boolean add(E element),Description copied from class: java.util.AbstractCollection
2934,common/collect,com.google.common.collect,Class EnumMultiset<E extends Enum<E>>,@CanIgnoreReturnValuepublic final boolean remove(@Nullable Object element),Description copied from class: java.util.AbstractCollection
2935,common/collect,com.google.common.collect,Class EnumMultiset<E extends Enum<E>>,"@CanIgnoreReturnValuepublic boolean setCount(E element, int oldCount, int newCount)",Description copied from interface: Multiset
2936,common/collect,com.google.common.collect,Class EnumMultiset<E extends Enum<E>>,@CanIgnoreReturnValuepublic final boolean addAll(Collection<? extends E> elementsToAdd),"Adds all of the elements in the specified collection to this collection (optional operation). The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (This implies that the behavior of this call is undefined if the specified collection is this collection, and this collection is nonempty.) This implementation iterates over the specified collection, and adds each object returned by the iterator to this collection, in turn. Note that this implementation will throw an UnsupportedOperationException unless add is overridden (assuming the specified collection is non-empty). This implementation is highly efficient when elementsToAdd is itself a Multiset."
2937,common/collect,com.google.common.collect,Class EnumMultiset<E extends Enum<E>>,@CanIgnoreReturnValuepublic final boolean removeAll(Collection<?> elementsToRemove),Description copied from class: java.util.AbstractCollection
2938,common/collect,com.google.common.collect,Class EnumMultiset<E extends Enum<E>>,@CanIgnoreReturnValuepublic final boolean retainAll(Collection<?> elementsToRetain),Description copied from class: java.util.AbstractCollection
2939,common/collect,com.google.common.collect,Class EnumMultiset<E extends Enum<E>>,public Set<E> elementSet(),Description copied from interface: Multiset
2940,common/collect,com.google.common.collect,Class EnumMultiset<E extends Enum<E>>,public Set<Multiset.Entry<E>> entrySet(),Description copied from interface: Multiset
2941,common/collect,com.google.common.collect,Class EnumMultiset<E extends Enum<E>>,public final boolean equals(@Nullable Object object),"Indicates whether some other object is equal to this one. The equals method implements an equivalence relation on non-null object references: It is reflexive: for any non-null reference value x, x.equals(x) should return true. It is symmetric: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is transitive: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is consistent: for any non-null reference values x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes. This implementation returns true if object is a multiset of the same size and if, for each element, the two multisets have the same count."
2942,common/collect,com.google.common.collect,Class EnumMultiset<E extends Enum<E>>,public final int hashCode(),"Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by HashMap. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the Object.equals(java.lang.Object) method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java™ programming language.) This implementation returns the hash code of Multiset.entrySet()."
2943,common/base,com.google.common.base,Class Enums,@GwtIncompatiblepublic static Field getField(Enum<?> enumValue),"Returns the Field in which enumValue is defined. For example, to get the Description annotation on the GOLF constant of enum Sport, use Enums.getField(Sport.GOLF).getAnnotation(Description.class)."
2944,common/base,com.google.common.base,Class Enums,"public static <T extends Enum<T>> Optional<T> getIfPresent(Class<T> enumClass, String value)","Returns an optional enum constant for the given type, using Enum.valueOf(java.lang.Class<T>, java.lang.String). If the constant does not exist, Optional.absent() is returned. A common use case is for parsing user input or falling back to a default enum constant. For example, Enums.getIfPresent(Country.class, countryInput).or(Country.DEFAULT);"
2945,common/base,com.google.common.base,Class Equivalence<T>,"public final boolean equivalent(T a, T b)","Returns true if the given objects are considered equivalent. This method describes an equivalence relation on object references, meaning that for all references x, y, and z (any of which may be null): equivalent(x, x) is true (reflexive property) equivalent(x, y) and equivalent(y, x) each return the same result (symmetric property) If equivalent(x, y) and equivalent(y, z) are both true, then equivalent(x, z) is also true (transitive property) Note that all calls to equivalent(x, y) are expected to return the same result as long as neither x nor y is modified."
2946,common/base,com.google.common.base,Class Equivalence<T>,"@Deprecatedpublic final boolean test(T t, T u)","Deprecated. Provided only to satisfy the BiPredicate interface; use equivalent(T, T) instead."
2947,common/base,com.google.common.base,Class Equivalence<T>,"@ForOverrideprotected abstract boolean doEquivalent(T a, T b)","Implemented by the user to determine whether a and b are considered equivalent, subject to the requirements specified in equivalent(T, T). This method should not be called except by equivalent(T, T). When equivalent(T, T) calls this method, a and b are guaranteed to be distinct, non-null instances."
2948,common/base,com.google.common.base,Class Equivalence<T>,public final int hash(T t),"Returns a hash code for t. The hash has the following properties: It is consistent: for any reference x, multiple invocations of hash(x} consistently return the same value provided x remains unchanged according to the definition of the equivalence. The hash need not remain consistent from one execution of an application to another execution of the same application. It is distributable across equivalence: for any references x and y, if equivalent(x, y), then hash(x) == hash(y). It is not necessary that the hash be distributable across inequivalence. If equivalence(x, y) is false, hash(x) == hash(y) may still be true. hash(null) is 0. "
2949,common/base,com.google.common.base,Class Equivalence<T>,@ForOverrideprotected abstract int doHash(T t),"Implemented by the user to return a hash code for t, subject to the requirements specified in hash(T). This method should not be called except by hash(T). When hash(T) calls this method, t is guaranteed to be non-null."
2950,common/base,com.google.common.base,Class Equivalence<T>,"public final <F> Equivalence<F> onResultOf(Function<F,? extends T> function)","Returns a new equivalence relation for F which evaluates equivalence by first applying function to the argument, then evaluating using this. That is, for any pair of non-null objects x and y, equivalence.onResultOf(function).equivalent(a, b) is true if and only if equivalence.equivalent(function.apply(a), function.apply(b)) is true. For example: Equivalence<Person> SAME_AGE = Equivalence.equals().onResultOf(GET_PERSON_AGE); function will never be invoked with a null value. Note that function must be consistent according to this equivalence relation. That is, invoking Function.apply(F) multiple times for a given value must return equivalent results. For example, Equivalence.identity().onResultOf(Functions.toStringFunction()) is broken because it's not guaranteed that Object.toString()) always returns the same string instance."
2951,common/base,com.google.common.base,Class Equivalence<T>,public final <S extends T> Equivalence.Wrapper<S> wrap(S reference),"Returns a wrapper of reference that implements Object.equals() such that wrap(a).equals(wrap(b)) if and only if equivalent(a, b)."
2952,common/base,com.google.common.base,Class Equivalence<T>,@GwtCompatible(serializable=true)public final <S extends T> Equivalence<Iterable<S>> pairwise(),"Returns an equivalence over iterables based on the equivalence of their elements. More specifically, two iterables are considered equivalent if they both contain the same number of elements, and each pair of corresponding elements is equivalent according to this. Null iterables are equivalent to one another. Note that this method performs a similar function for equivalences as Ordering.lexicographical() does for orderings."
2953,common/base,com.google.common.base,Class Equivalence<T>,public final Predicate<T> equivalentTo(T target),Returns a predicate that evaluates to true if and only if the input is equivalent to target according to this equivalence relation.
2954,common/base,com.google.common.base,Class Equivalence<T>,public static Equivalence<Object> equals(),"Returns an equivalence that delegates to Object.equals(java.lang.Object) and Object.hashCode(). equivalent(T, T) returns true if both values are null, or if neither value is null and Object.equals(java.lang.Object) returns true. hash(T) returns 0 if passed a null value."
2955,common/base,com.google.common.base,Class Equivalence.Wrapper<T>,public T get(),Returns the (possibly null) reference wrapped by this instance.
2956,common/base,com.google.common.base,Class Equivalence.Wrapper<T>,public boolean equals(@Nullable Object obj),"Returns true if Equivalence.equivalent(Object, Object) applied to the wrapped references is true and both wrappers use the same equivalence."
2957,common/base,com.google.common.base,Class Equivalence.Wrapper<T>,public int hashCode(),Returns the result of Equivalence.hash(Object) applied to the wrapped reference.
2958,common/escape,com.google.common.escape,Class Escaper,public abstract String escape(String string),"Returns the escaped form of a given literal string. Note that this method may treat input characters differently depending on the specific escaper implementation. UnicodeEscaper handles UTF-16 correctly, including surrogate character pairs. If the input is badly formed the escaper should throw IllegalArgumentException. CharEscaper handles Java characters independently and does not verify the input for well formed characters. A CharEscaper should not be used in situations where input is not guaranteed to be restricted to the Basic Multilingual Plane (BMP). "
2959,common/escape,com.google.common.escape,Class Escapers,public static Escaper nullEscaper(),"Returns an Escaper that does no escaping, passing all character data through unchanged."
2960,common/escape,com.google.common.escape,Class Escapers,public static Escapers.Builder builder(),"Returns a builder for creating simple, fast escapers. A builder instance can be reused and each escaper that is created will be a snapshot of the current builder state. Builders are not thread safe. The initial state of the builder is such that: There are no replacement mappings safeMin == Character.MIN_VALUEsafeMax == Character.MAX_VALUEunsafeReplacement == nullFor performance reasons escapers created by this builder are not Unicode aware and will not validate the well-formedness of their input."
2961,common/escape,com.google.common.escape,Class Escapers,"public static String computeReplacement(CharEscaper escaper, char c)","Returns a string that would replace the given character in the specified escaper, or null if no replacement should be made. This method is intended for use in tests through the EscaperAsserts class; production users of CharEscaper should limit themselves to its public interface."
2962,common/escape,com.google.common.escape,Class Escapers.Builder,"@CanIgnoreReturnValuepublic Escapers.Builder setSafeRange(char safeMin, char safeMax)",Sets the safe range of characters for the escaper. Characters in this range that have no explicit replacement are considered 'safe' and remain unescaped in the output. If safeMax < safeMin then the safe range is empty.
2963,common/escape,com.google.common.escape,Class Escapers.Builder,@CanIgnoreReturnValuepublic Escapers.Builder setUnsafeReplacement(@Nullable String unsafeReplacement),"Sets the replacement string for any characters outside the 'safe' range that have no explicit replacement. If unsafeReplacement is null then no replacement will occur, if it is  then the unsafe characters are removed from the output."
2964,common/escape,com.google.common.escape,Class Escapers.Builder,"@CanIgnoreReturnValuepublic Escapers.Builder addEscape(char c, String replacement)","Adds a replacement string for the given input character. The specified character will be replaced by the given string whenever it occurs in the input, irrespective of whether it lies inside or outside the 'safe' range."
2965,common/eventbus,com.google.common.eventbus,Class EventBus,public EventBus(),Creates a new EventBus named default.
2966,common/eventbus,com.google.common.eventbus,Class EventBus,public EventBus(String identifier),Creates a new EventBus with the given identifier.
2967,common/eventbus,com.google.common.eventbus,Class EventBus,public final String identifier(),Returns the identifier for this event bus.
2968,common/eventbus,com.google.common.eventbus,Class EventBus,public void register(Object object),Registers all subscriber methods on object to receive events.
2969,common/eventbus,com.google.common.eventbus,Class EventBus,public void unregister(Object object),Unregisters all subscriber methods on a registered object.
2970,common/eventbus,com.google.common.eventbus,Class EventBus,public void post(Object event),"Posts an event to all registered subscribers. This method will return successfully after the event has been posted to all subscribers, and regardless of any exceptions thrown by subscribers. If no subscribers have been subscribed for event's class, and event is not already a DeadEvent, it will be wrapped in a DeadEvent and reposted."
2971,common/collect,com.google.common.collect,Class EvictingQueue<E>,public static <E> EvictingQueue<E> create(int maxSize),"Creates and returns a new evicting queue that will hold up to maxSize elements. When maxSize is zero, elements will be evicted immediately after being added to the queue."
2972,common/collect,com.google.common.collect,Class EvictingQueue<E>,public int remainingCapacity(),Returns the number of additional elements that this queue can accept without evicting; zero if the queue is currently full.
2973,common/collect,com.google.common.collect,Class EvictingQueue<E>,protected Queue<E> delegate(),Description copied from class: ForwardingObject
2974,common/collect,com.google.common.collect,Class EvictingQueue<E>,@CanIgnoreReturnValuepublic boolean offer(E e),"Adds the given element to this queue. If the queue is currently full, the element at the head of the queue is evicted to make room."
2975,common/collect,com.google.common.collect,Class EvictingQueue<E>,@CanIgnoreReturnValuepublic boolean add(E e),"Adds the given element to this queue. If the queue is currently full, the element at the head of the queue is evicted to make room."
2976,common/collect,com.google.common.collect,Class EvictingQueue<E>,@CanIgnoreReturnValuepublic boolean addAll(Collection<? extends E> collection),Description copied from interface: java.util.Collection
2977,common/collect,com.google.common.collect,Class EvictingQueue<E>,public boolean contains(Object object),Description copied from interface: java.util.Collection
2978,util/concurrent,com.google.common.util.concurrent,Class ExecutionError,protected ExecutionError(),Creates a new instance with null as its detail message.
2979,util/concurrent,com.google.common.util.concurrent,Class ExecutionError,protected ExecutionError(@Nullable String message),Creates a new instance with the given detail message.
2980,util/concurrent,com.google.common.util.concurrent,Class ExecutionError,"public ExecutionError(@Nullable String message, @Nullable Error cause)",Creates a new instance with the given detail message and cause.
2981,util/concurrent,com.google.common.util.concurrent,Class ExecutionList,"public void add(Runnable runnable, Executor executor)","Adds the Runnable and accompanying Executor to the list of listeners to execute. If execution has already begun, the listener is executed immediately. When selecting an executor, note that directExecutor is dangerous in some cases. See the discussion in the ListenableFuture.addListener documentation."
2982,util/concurrent,com.google.common.util.concurrent,Class ExecutionSequencer,public static ExecutionSequencer create(),Creates a new instance.
2983,util/concurrent,com.google.common.util.concurrent,Class ExecutionSequencer,"public <T> ListenableFuture<T> submit(Callable<T> callable, Executor executor)","Enqueues a task to run when the previous task (if any) completes. Cancellation does not propagate from the output future to a callable that has begun to execute, but if the output future is cancelled before Callable.call() is invoked, Callable.call() will not be invoked."
2984,util/concurrent,com.google.common.util.concurrent,Class FakeTimeLimiter,"public <T> T newProxy(T target, Class<T> interfaceType, long timeoutDuration, TimeUnit timeoutUnit)",Description copied from interface: TimeLimiter
2985,util/concurrent,com.google.common.util.concurrent,Class FakeTimeLimiter,"public <T> T callWithTimeout(Callable<T> callable, long timeoutDuration, TimeUnit timeoutUnit) throws ExecutionException",Description copied from interface: TimeLimiter
2986,util/concurrent,com.google.common.util.concurrent,Class FakeTimeLimiter,"public <T> T callUninterruptiblyWithTimeout(Callable<T> callable, long timeoutDuration, TimeUnit timeoutUnit) throws ExecutionException",Description copied from interface: TimeLimiter
2987,util/concurrent,com.google.common.util.concurrent,Class FakeTimeLimiter,"public void runWithTimeout(Runnable runnable, long timeoutDuration, TimeUnit timeoutUnit)",Description copied from interface: TimeLimiter
2988,common/io,com.google.common.io,Class FileBackedOutputStream,public FileBackedOutputStream(int fileThreshold),"Creates a new instance that uses the given file threshold, and does not reset the data when the ByteSource returned by asByteSource() is finalized."
2989,common/io,com.google.common.io,Class FileBackedOutputStream,public ByteSource asByteSource(),Returns a readable ByteSource view of the data that has been written to this stream.
2990,common/io,com.google.common.io,Class FileBackedOutputStream,public void reset() throws IOException,"Calls close() if not already closed, and then resets this object back to its initial state, for reuse. If data was buffered to a file, it will be deleted."
2991,common/io,com.google.common.io,Class FileBackedOutputStream,public void write(int b) throws IOException,Description copied from class: java.io.OutputStream
2992,common/io,com.google.common.io,Class FileBackedOutputStream,public void write(byte[] b) throws IOException,Description copied from class: java.io.OutputStream
2993,common/io,com.google.common.io,Class FileBackedOutputStream,"public void write(byte[] b, int off, int len) throws IOException",Description copied from class: java.io.OutputStream
2994,common/io,com.google.common.io,Class FileBackedOutputStream,public void close() throws IOException,Description copied from class: java.io.OutputStream
2995,common/io,com.google.common.io,Class Files,"@Betapublic static BufferedReader newReader(File file, Charset charset) throws FileNotFoundException","Returns a buffered reader that reads from a file using the given character set. Path equivalent: Files.newBufferedReader(java.nio.file.Path, Charset)."
2996,common/io,com.google.common.io,Class Files,"@Betapublic static BufferedWriter newWriter(File file, Charset charset) throws FileNotFoundException","Returns a buffered writer that writes to a file using the given character set. Path equivalent: Files.newBufferedWriter(java.nio.file.Path, Charset, java.nio.file.OpenOption...)."
2997,common/io,com.google.common.io,Class Files,public static ByteSource asByteSource(File file),Returns a new ByteSource for reading bytes from the given file.
2998,common/io,com.google.common.io,Class Files,"public static ByteSink asByteSink(File file, FileWriteMode... modes)","Returns a new ByteSink for writing bytes to the given file. The given modes control how the file is opened for writing. When no mode is provided, the file will be truncated before writing. When the APPEND mode is provided, writes will append to the end of the file without truncating it."
2999,common/io,com.google.common.io,Class Files,"public static CharSource asCharSource(File file, Charset charset)",Returns a new CharSource for reading character data from the given file using the given character set.
3000,common/io,com.google.common.io,Class Files,"public static CharSink asCharSink(File file, Charset charset, FileWriteMode... modes)","Returns a new CharSink for writing character data to the given file using the given character set. The given modes control how the file is opened for writing. When no mode is provided, the file will be truncated before writing. When the APPEND mode is provided, writes will append to the end of the file without truncating it."
3001,common/io,com.google.common.io,Class Files,@Betapublic static byte[] toByteArray(File file) throws IOException,Reads all bytes from a file into a byte array. Path equivalent: Files.readAllBytes(java.nio.file.Path).
3002,common/io,com.google.common.io,Class Files,"@Beta @Deprecatedpublic static String toString(File file, Charset charset) throws IOException","Deprecated. Prefer asCharSource(file, charset).read(). This method is scheduled to be removed in October 2019."
3003,common/io,com.google.common.io,Class Files,"@Betapublic static void write(byte[] from, File to) throws IOException","Overwrites a file with the contents of a byte array. Path equivalent: Files.write(java.nio.file.Path, byte[], java.nio.file.OpenOption...)."
3004,common/io,com.google.common.io,Class Files,"@Beta @Deprecatedpublic static void write(CharSequence from, File to, Charset charset) throws IOException","Deprecated. Prefer asCharSink(to, charset).write(from). This method is scheduled to be removed in October 2019."
3005,common/io,com.google.common.io,Class Files,"@Betapublic static void copy(File from, OutputStream to) throws IOException","Copies all bytes from a file to an output stream. Path equivalent: Files.copy(java.nio.file.Path, OutputStream)."
3006,common/io,com.google.common.io,Class Files,"@Betapublic static void copy(File from, File to) throws IOException","Copies all the bytes from one file to another. Copying is not an atomic operation - in the case of an I/O error, power loss, process termination, or other problems, to may not be a complete copy of from. If you need to guard against those conditions, you should employ other file-level synchronization. Warning: If to represents an existing file, that file will be overwritten with the contents of from. If to and from refer to the same file, the contents of that file will be deleted. Path equivalent: Files.copy(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...)."
3007,common/io,com.google.common.io,Class Files,"@Beta @Deprecatedpublic static void copy(File from, Charset charset, Appendable to) throws IOException","Deprecated. Prefer asCharSource(from, charset).copyTo(to). This method is scheduled to be removed in October 2019."
3008,common/io,com.google.common.io,Class Files,"@Beta @Deprecatedpublic static void append(CharSequence from, File to, Charset charset) throws IOException","Deprecated. Prefer asCharSink(to, charset, FileWriteMode.APPEND).write(from). This method is scheduled to be removed in October 2019."
3009,common/io,com.google.common.io,Class Files,"@Betapublic static boolean equal(File file1, File file2) throws IOException","Returns true if the given files exist, are not directories, and contain the same bytes."
3010,common/io,com.google.common.io,Class Files,@Beta @Deprecatedpublic static File createTempDir(),"Deprecated. For Android users, see the Data and File Storage overview to select an appropriate temporary directory (perhaps context.getCacheDir()). For developers on Java 7 or later, use Files.createTempDirectory(java.nio.file.Path, java.lang.String, java.nio.file.attribute.FileAttribute<?>...), transforming it to a File using toFile() if needed."
3011,common/io,com.google.common.io,Class Files,@Betapublic static void touch(File file) throws IOException,Creates an empty file or updates the last updated timestamp on the same as the unix command of the same name.
3012,common/io,com.google.common.io,Class Files,@Betapublic static void createParentDirs(File file) throws IOException,Creates any necessary but nonexistent parent directories of the specified file. Note that if this operation fails it may have succeeded in creating some (but not all) of the necessary parent directories.
3013,common/io,com.google.common.io,Class Files,"@Betapublic static void move(File from, File to) throws IOException","Moves a file from one path to another. This method can rename a file and/or move it to a different directory. In either case to must be the target path for the file itself; not just the new name for the file or the path to the new parent directory. Path equivalent: Files.move(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...)."
3014,common/io,com.google.common.io,Class Files,"@Beta @Deprecatedpublic static String readFirstLine(File file, Charset charset) throws IOException","Deprecated. Prefer asCharSource(file, charset).readFirstLine(). This method is scheduled to be removed in October 2019."
3015,common/io,com.google.common.io,Class Files,"@Betapublic static List<String> readLines(File file, Charset charset) throws IOException","Reads all of the lines from a file. The lines do not include line-termination characters, but do include other leading and trailing whitespace. This method returns a mutable List. For an ImmutableList, use Files.asCharSource(file, charset).readLines(). Path equivalent: Files.readAllLines(java.nio.file.Path, Charset)."
3016,common/io,com.google.common.io,Class Files,"@Beta @Deprecated @CanIgnoreReturnValuepublic static <T> T readLines(File file, Charset charset, LineProcessor<T> callback) throws IOException","Deprecated. Prefer asCharSource(file, charset).readLines(callback). This method is scheduled to be removed in October 2019."
3017,common/io,com.google.common.io,Class Files,"@Beta @Deprecated @CanIgnoreReturnValuepublic static <T> T readBytes(File file, ByteProcessor<T> processor) throws IOException",Deprecated. Prefer asByteSource(file).read(processor). This method is scheduled to be removed in October 2019.
3018,common/io,com.google.common.io,Class Files,"@Beta @Deprecatedpublic static HashCode hash(File file, HashFunction hashFunction) throws IOException",Deprecated. Prefer asByteSource(file).hash(hashFunction). This method is scheduled to be removed in October 2019.
3019,common/io,com.google.common.io,Class Files,@Betapublic static MappedByteBuffer map(File file) throws IOException,"Fully maps a file read-only in to memory as per FileChannel.map(java.nio.channels.FileChannel.MapMode, long, long). Files are mapped from offset 0 to its length. This only works for files ≤ Integer.MAX_VALUE bytes."
3020,common/io,com.google.common.io,Class Files,"@Betapublic static MappedByteBuffer map(File file, FileChannel.MapMode mode) throws IOException","Fully maps a file in to memory as per FileChannel.map(java.nio.channels.FileChannel.MapMode, long, long) using the requested FileChannel.MapMode. Files are mapped from offset 0 to its length. This only works for files ≤ Integer.MAX_VALUE bytes."
3021,common/io,com.google.common.io,Class Files,"@Betapublic static MappedByteBuffer map(File file, FileChannel.MapMode mode, long size) throws IOException","Maps a file in to memory as per FileChannel.map(java.nio.channels.FileChannel.MapMode, long, long) using the requested FileChannel.MapMode. Files are mapped from offset 0 to size. If the mode is FileChannel.MapMode.READ_WRITE and the file does not exist, it will be created with the requested size. Thus this method is useful for creating memory mapped files which do not yet exist. This only works for files ≤ Integer.MAX_VALUE bytes."
3022,common/io,com.google.common.io,Class Files,@Betapublic static String simplifyPath(String pathname),"Returns the lexically cleaned form of the path name, usually (but not always) equivalent to the original. The following heuristics are used: empty string becomes . . stays as . fold out ./ fold out ../ when possible collapse multiple slashes delete trailing slashes (unless the path is just /) These heuristics do not always match the behavior of the filesystem. In particular, consider the path a/../b, which simplifyPath will change to b. If a is a symlink to x, a/../b may refer to a sibling of x, rather than the sibling of a referred to by b."
3023,common/io,com.google.common.io,Class Files,@Betapublic static String getFileExtension(String fullName),"Returns the file extension for the given file name, or the empty string if the file has no extension. The result does not include the '.'. Note: This method simply returns everything after the last '.' in the file's name as determined by File.getName(). It does not account for any filesystem-specific behavior that the File API does not already account for. For example, on NTFS it will report txt as the extension for the filename foo.exe:.txt even though NTFS will drop the :.txt part of the name when the file is actually created on the filesystem due to NTFS's Alternate Data Streams."
3024,common/io,com.google.common.io,Class Files,@Betapublic static String getNameWithoutExtension(String file),Returns the file name without its file extension or path. This is similar to the basename unix command. The result does not include the '.'.
3025,common/io,com.google.common.io,Class Files,@Betapublic static Traverser<File> fileTraverser(),"Returns a Traverser instance for the file and directory tree. The returned traverser starts from a File and will return all files and directories it encounters. Warning: File provides no support for symbolic links, and as such there is no way to ensure that a symbolic link to a directory is not followed when traversing the tree. In this case, iterables created by this traverser could contain files that are outside of the given directory or even be infinite if there is a symbolic link loop. If available, consider using MoreFiles.fileTraverser() instead. It behaves the same except that it doesn't follow symbolic links and returns Path instances. If the File passed to one of the Traverser methods does not exist or is not a directory, no exception will be thrown and the returned Iterable will contain a single element: that file. Example: Files.fileTraverser().depthFirstPreOrder(new File(/)) may return files with the following paths: [/, /etc, /etc/config.txt, /etc/fonts, /home, /home/alice, ...]"
3026,common/io,com.google.common.io,Class Files,@Betapublic static Predicate<File> isDirectory(),Returns a predicate that returns the result of File.isDirectory() on input files.
3027,common/io,com.google.common.io,Enum FileWriteMode,public static FileWriteMode[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (FileWriteMode c : FileWriteMode.values())  System.out.println(c);"
3028,common/primitives,com.google.common.primitives,Class Floats,public static int hashCode(float value),Returns a hash code for value; equal to the result of invoking ((Float) value).hashCode(). Java 8 users: use Float.hashCode(float) instead.
3029,common/primitives,com.google.common.primitives,Class Floats,"public static int compare(float a, float b)","Compares the two specified float values using Float.compare(float, float). You may prefer to invoke that method directly; this method exists only for consistency with the other utilities in this package. Note: this method simply delegates to the JDK method Float.compare(float, float). It is provided for consistency with the other primitive types, whose compare methods were not added to the JDK until JDK 7."
3030,common/primitives,com.google.common.primitives,Class Floats,public static boolean isFinite(float value),"Returns true if value represents a real number. This is equivalent to, but not necessarily implemented as, !(Float.isInfinite(value) || Float.isNaN(value)). Java 8 users: use Float.isFinite(float) instead."
3031,common/primitives,com.google.common.primitives,Class Floats,"public static boolean contains(float[] array, float target)",Returns true if target is present as an element anywhere in array. Note that this always returns false when target is NaN.
3032,common/primitives,com.google.common.primitives,Class Floats,"public static int indexOf(float[] array, float target)",Returns the index of the first appearance of the value target in array. Note that this always returns -1 when target is NaN.
3033,common/primitives,com.google.common.primitives,Class Floats,"public static int indexOf(float[] array, float[] target)","Returns the start position of the first occurrence of the specified target within array, or -1 if there is no such occurrence. More formally, returns the lowest index i such that Arrays.copyOfRange(array, i, i + target.length) contains exactly the same elements as target. Note that this always returns -1 when target contains NaN."
3034,common/primitives,com.google.common.primitives,Class Floats,"public static int lastIndexOf(float[] array, float target)",Returns the index of the last appearance of the value target in array. Note that this always returns -1 when target is NaN.
3035,common/primitives,com.google.common.primitives,Class Floats,"@GwtIncompatible(value=""Available in GWT! Annotation is to avoid conflict with GWT specialization of base class."")public static float min(float... array)","Returns the least value present in array, using the same rules of comparison as Math.min(float, float)."
3036,common/primitives,com.google.common.primitives,Class Floats,"@GwtIncompatible(value=""Available in GWT! Annotation is to avoid conflict with GWT specialization of base class."")public static float max(float... array)","Returns the greatest value present in array, using the same rules of comparison as Math.max(float, float)."
3037,common/primitives,com.google.common.primitives,Class Floats,"@Betapublic static float constrainToRange(float value, float min, float max)","Returns the value nearest to value which is within the closed range [min..max]. If value is within the range [min..max], value is returned unchanged. If value is less than min, min is returned, and if value is greater than max, max is returned."
3038,common/primitives,com.google.common.primitives,Class Floats,public static float[] concat(float[]... arrays),"Returns the values from each provided array combined into a single array. For example, concat(new float[] {a, b}, new float[] {}, new float[] {c} returns the array {a, b, c}."
3039,common/primitives,com.google.common.primitives,Class Floats,"@Betapublic static Converter<String,Float> stringConverter()",Returns a serializable converter object that converts between strings and floats using Float.valueOf(java.lang.String) and Float.toString().
3040,common/primitives,com.google.common.primitives,Class Floats,"public static float[] ensureCapacity(float[] array, int minLength, int padding)","Returns an array containing the same values as array, but guaranteed to be of a specified minimum length. If array already has a length of at least minLength, it is returned directly. Otherwise, a new array of size minLength + padding is returned, containing the values of array, and zeroes in the remaining places."
3041,common/primitives,com.google.common.primitives,Class Floats,"public static String join(String separator, float... array)","Returns a string containing the supplied float values, converted to strings as specified by Float.toString(float), and separated by separator. For example, join(-, 1.0f, 2.0f, 3.0f) returns the string 1.0-2.0-3.0. Note that Float.toString(float) formats float differently in GWT. In the previous example, it returns the string 1-2-3."
3042,common/primitives,com.google.common.primitives,Class Floats,public static Comparator<float[]> lexicographicalComparator(),"Returns a comparator that compares two float arrays lexicographically. That is, it compares, using compare(float, float)), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example, [] < [1.0f] < [1.0f, 2.0f] < [2.0f]. The returned comparator is inconsistent with Object.equals(Object) (since arrays support only identity equality), but it is consistent with Arrays.equals(float[], float[])."
3043,common/primitives,com.google.common.primitives,Class Floats,public static void sortDescending(float[] array),"Sorts the elements of array in descending order. Note that this method uses the total order imposed by Float.compare(float, float), which treats all NaN values as equal and 0.0 as greater than -0.0."
3044,common/primitives,com.google.common.primitives,Class Floats,"public static void sortDescending(float[] array, int fromIndex, int toIndex)","Sorts the elements of array between fromIndex inclusive and toIndex exclusive in descending order. Note that this method uses the total order imposed by Float.compare(float, float), which treats all NaN values as equal and 0.0 as greater than -0.0."
3045,common/primitives,com.google.common.primitives,Class Floats,public static void reverse(float[] array),"Reverses the elements of array. This is equivalent to Collections.reverse(Floats.asList(array)), but is likely to be more efficient."
3046,common/primitives,com.google.common.primitives,Class Floats,"public static void reverse(float[] array, int fromIndex, int toIndex)","Reverses the elements of array between fromIndex inclusive and toIndex exclusive. This is equivalent to Collections.reverse(Floats.asList(array).subList(fromIndex, toIndex)), but is likely to be more efficient."
3047,common/primitives,com.google.common.primitives,Class Floats,public static float[] toArray(Collection<? extends Number> collection),"Returns an array containing each value of collection, converted to a float value in the manner of Number.floatValue(). Elements are copied from the argument collection as if by collection.toArray(). Calling this method is as thread-safe as calling that method."
3048,common/primitives,com.google.common.primitives,Class Floats,public static List<Float> asList(float... backingArray),"Returns a fixed-size list backed by the specified array, similar to Arrays.asList(Object[]). The list supports List.set(int, Object), but any attempt to set a value to null will result in a NullPointerException. The returned list maintains the values, but not the identities, of Float objects written to or read from it. For example, whether list.get(0) == list.get(0) is true for the returned list is unspecified. The returned list may have unexpected behavior if it contains NaN, or if NaN is used as a parameter to any of its methods."
3049,util/concurrent,com.google.common.util.concurrent,Class FluentFuture<V>,public static <V> FluentFuture<V> from(ListenableFuture<V> future),"Converts the given ListenableFuture to an equivalent FluentFuture. If the given ListenableFuture is already a FluentFuture, it is returned directly. If not, it is wrapped in a FluentFuture that delegates all calls to the original ListenableFuture."
3050,util/concurrent,com.google.common.util.concurrent,Class FluentFuture<V>,@Deprecatedpublic static <V> FluentFuture<V> from(FluentFuture<V> future),Deprecated. no need to use this
3051,util/concurrent,com.google.common.util.concurrent,Class FluentFuture<V>,"@Partially.GwtIncompatible(value=""AVAILABLE but requires exceptionType to be Throwable.class"")public final <X extends Throwable> FluentFuture<V> catching(Class<X> exceptionType, Function<? super X,? extends V> fallback, Executor executor)","Returns a Future whose result is taken from this Future or, if this Future fails with the given exceptionType, from the result provided by the fallback. Function.apply(F) is not invoked until the primary input has failed, so if the primary input succeeds, it is never invoked. If, during the invocation of fallback, an exception is thrown, this exception is used as the result of the output Future. Usage example: // Falling back to a zero counter in case an exception happens when processing the RPC to fetch // counters. ListenableFuture<Integer> faultTolerantFuture = fetchCounters().catching(FetchException.class, x -> 0, directExecutor()); When selecting an executor, note that directExecutor is dangerous in some cases. See the discussion in the AbstractFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor) documentation. All its warnings about heavyweight listeners are also applicable to heavyweight functions passed to this method. This method is similar to CompletableFuture.exceptionally(java.util.function.Function<java.lang.Throwable, ? extends T>). It can also serve some of the use cases of CompletableFuture.handle(java.util.function.BiFunction<? super T, java.lang.Throwable, ? extends U>) and CompletableFuture.handleAsync(java.util.function.BiFunction<? super T, java.lang.Throwable, ? extends U>) when used along with transform(com.google.common.base.Function<? super V, T>, java.util.concurrent.Executor)."
3052,util/concurrent,com.google.common.util.concurrent,Class FluentFuture<V>,"@Partially.GwtIncompatible(value=""AVAILABLE but requires exceptionType to be Throwable.class"")public final <X extends Throwable> FluentFuture<V> catchingAsync(Class<X> exceptionType, AsyncFunction<? super X,? extends V> fallback, Executor executor)","Returns a Future whose result is taken from this Future or, if this Future fails with the given exceptionType, from the result provided by the fallback. AsyncFunction.apply(I) is not invoked until the primary input has failed, so if the primary input succeeds, it is never invoked. If, during the invocation of fallback, an exception is thrown, this exception is used as the result of the output Future. Usage examples: // Falling back to a zero counter in case an exception happens when processing the RPC to fetch // counters. ListenableFuture<Integer> faultTolerantFuture = fetchCounters().catchingAsync( FetchException.class, x -> immediateFuture(0), directExecutor()); The fallback can also choose to propagate the original exception when desired: // Falling back to a zero counter only in case the exception was a // TimeoutException. ListenableFuture<Integer> faultTolerantFuture = fetchCounters().catchingAsync( FetchException.class, e -> { if (omitDataOnFetchFailure) { return immediateFuture(0); } throw e; }, directExecutor()); When selecting an executor, note that directExecutor is dangerous in some cases. See the discussion in the AbstractFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor) documentation. All its warnings about heavyweight listeners are also applicable to heavyweight functions passed to this method. (Specifically, directExecutor functions should avoid heavyweight operations inside AsyncFunction.apply. Any heavyweight operations should occur in other threads responsible for completing the returned Future.) This method is similar to CompletableFuture.exceptionally(java.util.function.Function<java.lang.Throwable, ? extends T>). It can also serve some of the use cases of CompletableFuture.handle(java.util.function.BiFunction<? super T, java.lang.Throwable, ? extends U>) and CompletableFuture.handleAsync(java.util.function.BiFunction<? super T, java.lang.Throwable, ? extends U>) when used along with transform(com.google.common.base.Function<? super V, T>, java.util.concurrent.Executor)."
3053,util/concurrent,com.google.common.util.concurrent,Class FluentFuture<V>,"@GwtIncompatiblepublic final FluentFuture<V> withTimeout(Duration timeout, ScheduledExecutorService scheduledExecutor)","Returns a future that delegates to this future but will finish early (via a TimeoutException wrapped in an ExecutionException) if the specified timeout expires. If the timeout expires, not only will the output future finish, but also the input future (this) will be cancelled and interrupted."
3054,util/concurrent,com.google.common.util.concurrent,Class FluentFuture<V>,"@GwtIncompatiblepublic final FluentFuture<V> withTimeout(long timeout, TimeUnit unit, ScheduledExecutorService scheduledExecutor)","Returns a future that delegates to this future but will finish early (via a TimeoutException wrapped in an ExecutionException) if the specified timeout expires. If the timeout expires, not only will the output future finish, but also the input future (this) will be cancelled and interrupted."
3055,util/concurrent,com.google.common.util.concurrent,Class FluentFuture<V>,"public final <T> FluentFuture<T> transformAsync(AsyncFunction<? super V,T> function, Executor executor)","Returns a new Future whose result is asynchronously derived from the result of this Future. If the input Future fails, the returned Future fails with the same exception (and the function is not invoked). More precisely, the returned Future takes its result from a Future produced by applying the given AsyncFunction to the result of the original Future. Example usage: FluentFuture<RowKey> rowKeyFuture = FluentFuture.from(indexService.lookUp(query)); ListenableFuture<QueryResult> queryFuture = rowKeyFuture.transformAsync(dataService::readFuture, executor); When selecting an executor, note that directExecutor is dangerous in some cases. See the discussion in the AbstractFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor) documentation. All its warnings about heavyweight listeners are also applicable to heavyweight functions passed to this method. (Specifically, directExecutor functions should avoid heavyweight operations inside AsyncFunction.apply. Any heavyweight operations should occur in other threads responsible for completing the returned Future.) The returned Future attempts to keep its cancellation state in sync with that of the input future and that of the future returned by the chain function. That is, if the returned Future is cancelled, it will attempt to cancel the other two, and if either of the other two is cancelled, the returned Future will receive a callback in which it will attempt to cancel itself. This method is similar to CompletableFuture.thenCompose(java.util.function.Function<? super T, ? extends java.util.concurrent.CompletionStage<U>>) and CompletableFuture.thenComposeAsync(java.util.function.Function<? super T, ? extends java.util.concurrent.CompletionStage<U>>). It can also serve some of the use cases of CompletableFuture.handle(java.util.function.BiFunction<? super T, java.lang.Throwable, ? extends U>) and CompletableFuture.handleAsync(java.util.function.BiFunction<? super T, java.lang.Throwable, ? extends U>) when used along with catching(java.lang.Class<X>, com.google.common.base.Function<? super X, ? extends V>, java.util.concurrent.Executor)."
3056,util/concurrent,com.google.common.util.concurrent,Class FluentFuture<V>,"public final <T> FluentFuture<T> transform(Function<? super V,T> function, Executor executor)","Returns a new Future whose result is derived from the result of this Future. If this input Future fails, the returned Future fails with the same exception (and the function is not invoked). Example usage: ListenableFuture<List<Row>> rowsFuture = queryFuture.transform(QueryResult::getRows, executor); When selecting an executor, note that directExecutor is dangerous in some cases. See the discussion in the AbstractFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor) documentation. All its warnings about heavyweight listeners are also applicable to heavyweight functions passed to this method. The returned Future attempts to keep its cancellation state in sync with that of the input future. That is, if the returned Future is cancelled, it will attempt to cancel the input, and if the input is cancelled, the returned Future will receive a callback in which it will attempt to cancel itself. An example use of this method is to convert a serializable object returned from an RPC into a POJO. This method is similar to CompletableFuture.thenApply(java.util.function.Function<? super T, ? extends U>) and CompletableFuture.thenApplyAsync(java.util.function.Function<? super T, ? extends U>). It can also serve some of the use cases of CompletableFuture.handle(java.util.function.BiFunction<? super T, java.lang.Throwable, ? extends U>) and CompletableFuture.handleAsync(java.util.function.BiFunction<? super T, java.lang.Throwable, ? extends U>) when used along with catching(java.lang.Class<X>, com.google.common.base.Function<? super X, ? extends V>, java.util.concurrent.Executor)."
3057,common/collect,com.google.common.collect,Class FluentIterable<E>,public static <E> FluentIterable<E> from(Iterable<E> iterable),"Returns a fluent iterable that wraps iterable, or iterable itself if it is already a FluentIterable. Stream equivalent: Collection.stream() if iterable is a Collection; Streams.stream(Iterable) otherwise."
3058,common/collect,com.google.common.collect,Class FluentIterable<E>,@Betapublic static <E> FluentIterable<E> from(E[] elements),Returns a fluent iterable containing elements in the specified order. The returned iterable is an unmodifiable view of the input array. Stream equivalent: Stream.of(T...).
3059,common/collect,com.google.common.collect,Class FluentIterable<E>,@Deprecatedpublic static <E> FluentIterable<E> from(FluentIterable<E> iterable),Deprecated. instances of FluentIterable don't need to be converted to FluentIterable
3060,common/collect,com.google.common.collect,Class FluentIterable<E>,"@Betapublic static <T> FluentIterable<T> concat(Iterable<? extends T> a, Iterable<? extends T> b)","Returns a fluent iterable that combines two iterables. The returned iterable has an iterator that traverses the elements in a, followed by the elements in b. The source iterators are not polled until necessary. The returned iterable's iterator supports remove() when the corresponding input iterator supports it. Stream equivalent: Stream.concat(java.util.stream.Stream<? extends T>, java.util.stream.Stream<? extends T>)."
3061,common/collect,com.google.common.collect,Class FluentIterable<E>,"@Betapublic static <T> FluentIterable<T> concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c)","Returns a fluent iterable that combines three iterables. The returned iterable has an iterator that traverses the elements in a, followed by the elements in b, followed by the elements in c. The source iterators are not polled until necessary. The returned iterable's iterator supports remove() when the corresponding input iterator supports it. Stream equivalent: use nested calls to Stream.concat(java.util.stream.Stream<? extends T>, java.util.stream.Stream<? extends T>), or see the advice in concat(Iterable...)."
3062,common/collect,com.google.common.collect,Class FluentIterable<E>,"@Betapublic static <T> FluentIterable<T> concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c, Iterable<? extends T> d)","Returns a fluent iterable that combines four iterables. The returned iterable has an iterator that traverses the elements in a, followed by the elements in b, followed by the elements in c, followed by the elements in d. The source iterators are not polled until necessary. The returned iterable's iterator supports remove() when the corresponding input iterator supports it. Stream equivalent: use nested calls to Stream.concat(java.util.stream.Stream<? extends T>, java.util.stream.Stream<? extends T>), or see the advice in concat(Iterable...)."
3063,common/collect,com.google.common.collect,Class FluentIterable<E>,@Betapublic static <T> FluentIterable<T> concat(Iterable<? extends T>... inputs),"Returns a fluent iterable that combines several iterables. The returned iterable has an iterator that traverses the elements of each iterable in inputs. The input iterators are not polled until necessary. The returned iterable's iterator supports remove() when the corresponding input iterator supports it. Stream equivalent: to concatenate an arbitrary number of streams, use Stream.of(stream1, stream2, ...).flatMap(s -> s). If the sources are iterables, use Stream.of(iter1, iter2, ...).flatMap(Streams::stream)."
3064,common/collect,com.google.common.collect,Class FluentIterable<E>,@Betapublic static <T> FluentIterable<T> concat(Iterable<? extends Iterable<? extends T>> inputs),Returns a fluent iterable that combines several iterables. The returned iterable has an iterator that traverses the elements of each iterable in inputs. The input iterators are not polled until necessary. The returned iterable's iterator supports remove() when the corresponding input iterator supports it. The methods of the returned iterable may throw NullPointerException if any of the input iterators is null. Stream equivalent: streamOfStreams.flatMap(s -> s) or streamOfIterables.flatMap(Streams::stream). (See Streams.stream(java.lang.Iterable<T>).)
3065,common/collect,com.google.common.collect,Class FluentIterable<E>,@Betapublic static <E> FluentIterable<E> of(),Returns a fluent iterable containing no elements. Stream equivalent: Stream.empty().
3066,common/collect,com.google.common.collect,Class FluentIterable<E>,"@Betapublic static <E> FluentIterable<E> of(E element, E... elements)",Returns a fluent iterable containing the specified elements in order. Stream equivalent: Stream.of(T...).
3067,common/collect,com.google.common.collect,Class FluentIterable<E>,public String toString(),"Returns a string representation of this fluent iterable, with the format [e1, e2, ..., en]. Stream equivalent: stream.collect(Collectors.joining(, , [, ])) or (less efficiently) stream.collect(Collectors.toList()).toString()."
3068,common/collect,com.google.common.collect,Class FluentIterable<E>,public final int size(),Returns the number of elements in this fluent iterable. Stream equivalent: Stream.count().
3069,common/collect,com.google.common.collect,Class FluentIterable<E>,public final boolean contains(@Nullable Object target),Returns true if this fluent iterable contains any object for which equals(target) is true. Stream equivalent: stream.anyMatch(Predicate.isEqual(target)).
3070,common/collect,com.google.common.collect,Class FluentIterable<E>,public final FluentIterable<E> cycle(),"Returns a fluent iterable whose Iterator cycles indefinitely over the elements of this fluent iterable. That iterator supports remove() if iterable.iterator() does. After remove() is called, subsequent cycles omit the removed element, which is no longer in this fluent iterable. The iterator's hasNext() method returns true until this fluent iterable is empty. Warning: Typical uses of the resulting iterator may produce an infinite loop. You should use an explicit break or be certain that you will eventually remove all the elements. Stream equivalent: if the source iterable has only a single element e, use Stream.generate(() -> e). Otherwise, collect your stream into a collection and use Stream.generate(() -> collection).flatMap(Collection::stream)."
3071,common/collect,com.google.common.collect,Class FluentIterable<E>,@Betapublic final FluentIterable<E> append(Iterable<? extends E> other),"Returns a fluent iterable whose iterators traverse first the elements of this fluent iterable, followed by those of other. The iterators are not polled until necessary. The returned iterable's Iterator supports remove() when the corresponding Iterator supports it. Stream equivalent: Stream.concat(java.util.stream.Stream<? extends T>, java.util.stream.Stream<? extends T>)."
3072,common/collect,com.google.common.collect,Class FluentIterable<E>,@Betapublic final FluentIterable<E> append(E... elements),"Returns a fluent iterable whose iterators traverse first the elements of this fluent iterable, followed by elements. Stream equivalent: Stream.concat(thisStream, Stream.of(elements))."
3073,common/collect,com.google.common.collect,Class FluentIterable<E>,public final FluentIterable<E> filter(Predicate<? super E> predicate),Returns the elements from this fluent iterable that satisfy a predicate. The resulting fluent iterable's iterator does not support remove(). Stream equivalent: Stream.filter(java.util.function.Predicate<? super T>) (same).
3074,common/collect,com.google.common.collect,Class FluentIterable<E>,@GwtIncompatiblepublic final <T> FluentIterable<T> filter(Class<T> type),"Returns the elements from this fluent iterable that are instances of class type. Stream equivalent: stream.filter(type::isInstance).map(type::cast). This does perform a little more work than necessary, so another option is to insert an unchecked cast at some later point: @SuppressWarnings(unchecked) // safe because of ::isInstance check ImmutableList<NewType> result = (ImmutableList) stream.filter(NewType.class::isInstance).collect(toImmutableList()); "
3075,common/collect,com.google.common.collect,Class FluentIterable<E>,public final boolean anyMatch(Predicate<? super E> predicate),Returns true if any element in this fluent iterable satisfies the predicate. Stream equivalent: Stream.anyMatch(java.util.function.Predicate<? super T>) (same).
3076,common/collect,com.google.common.collect,Class FluentIterable<E>,public final boolean allMatch(Predicate<? super E> predicate),"Returns true if every element in this fluent iterable satisfies the predicate. If this fluent iterable is empty, true is returned. Stream equivalent: Stream.allMatch(java.util.function.Predicate<? super T>) (same)."
3077,common/collect,com.google.common.collect,Class FluentIterable<E>,public final Optional<E> firstMatch(Predicate<? super E> predicate),"Returns an Optional containing the first element in this fluent iterable that satisfies the given predicate, if such an element exists. Warning: avoid using a predicate that matches null. If null is matched in this fluent iterable, a NullPointerException will be thrown. Stream equivalent: stream.filter(predicate).findFirst()."
3078,common/collect,com.google.common.collect,Class FluentIterable<E>,"public final <T> FluentIterable<T> transform(Function<? super E,T> function)","Returns a fluent iterable that applies function to each element of this fluent iterable. The returned fluent iterable's iterator supports remove() if this iterable's iterator does. After a successful remove() call, this fluent iterable no longer contains the corresponding element. Stream equivalent: Stream.map(java.util.function.Function<? super T, ? extends R>)."
3079,common/collect,com.google.common.collect,Class FluentIterable<E>,"public <T> FluentIterable<T> transformAndConcat(Function<? super E,? extends Iterable<? extends T>> function)","Applies function to each element of this fluent iterable and returns a fluent iterable with the concatenated combination of results. function returns an Iterable of results. The returned fluent iterable's iterator supports remove() if this function-returned iterables' iterator does. After a successful remove() call, the returned fluent iterable no longer contains the corresponding element. Stream equivalent: Stream.flatMap(java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends R>>) (using a function that produces streams, not iterables)."
3080,common/collect,com.google.common.collect,Class FluentIterable<E>,public final Optional<E> first(),"Returns an Optional containing the first element in this fluent iterable. If the iterable is empty, Optional.absent() is returned. Stream equivalent: if the goal is to obtain any element, Stream.findAny(); if it must specifically be the first element, Stream#findFirst."
3081,common/collect,com.google.common.collect,Class FluentIterable<E>,public final Optional<E> last(),"Returns an Optional containing the last element in this fluent iterable. If the iterable is empty, Optional.absent() is returned. If the underlying iterable is a List with RandomAccess support, then this operation is guaranteed to be O(1). Stream equivalent: stream.reduce((a, b) -> b)."
3082,common/collect,com.google.common.collect,Class FluentIterable<E>,public final FluentIterable<E> skip(int numberToSkip),"Returns a view of this fluent iterable that skips its first numberToSkip elements. If this fluent iterable contains fewer than numberToSkip elements, the returned fluent iterable skips all of its elements. Modifications to this fluent iterable before a call to iterator() are reflected in the returned fluent iterable. That is, the its iterator skips the first numberToSkip elements that exist when the iterator is created, not when skip() is called. The returned fluent iterable's iterator supports remove() if the Iterator of this fluent iterable supports it. Note that it is not possible to delete the last skipped element by immediately calling remove() on the returned fluent iterable's iterator, as the Iterator contract states that a call to * remove() before a call to next() will throw an IllegalStateException. Stream equivalent: Stream.skip(long) (same)."
3083,common/collect,com.google.common.collect,Class FluentIterable<E>,public final FluentIterable<E> limit(int maxSize),"Creates a fluent iterable with the first size elements of this fluent iterable. If this fluent iterable does not contain that many elements, the returned fluent iterable will have the same behavior as this fluent iterable. The returned fluent iterable's iterator supports remove() if this fluent iterable's iterator does. Stream equivalent: Stream.limit(long) (same)."
3084,common/collect,com.google.common.collect,Class FluentIterable<E>,public final boolean isEmpty(),Determines whether this fluent iterable is empty. Stream equivalent: !stream.findAny().isPresent().
3085,common/collect,com.google.common.collect,Class FluentIterable<E>,public final ImmutableList<E> toList(),Returns an ImmutableList containing all of the elements from this fluent iterable in proper sequence. Stream equivalent: pass ImmutableList.toImmutableList() to stream.collect().
3086,common/collect,com.google.common.collect,Class FluentIterable<E>,public final ImmutableList<E> toSortedList(Comparator<? super E> comparator),"Returns an ImmutableList containing all of the elements from this FluentIterable in the order specified by comparator. To produce an ImmutableList sorted by its natural ordering, use toSortedList(Ordering.natural()). Stream equivalent: pass ImmutableList.toImmutableList() to stream.sorted(comparator).collect()."
3087,common/collect,com.google.common.collect,Class FluentIterable<E>,public final ImmutableSet<E> toSet(),Returns an ImmutableSet containing all of the elements from this fluent iterable with duplicates removed. Stream equivalent: pass ImmutableSet.toImmutableSet() to stream.collect().
3088,common/collect,com.google.common.collect,Class FluentIterable<E>,public final ImmutableSortedSet<E> toSortedSet(Comparator<? super E> comparator),"Returns an ImmutableSortedSet containing all of the elements from this FluentIterable in the order specified by comparator, with duplicates (determined by comparator.compare(x, y) == 0) removed. To produce an ImmutableSortedSet sorted by its natural ordering, use toSortedSet(Ordering.natural()). Stream equivalent: pass ImmutableSortedSet.toImmutableSortedSet(java.util.Comparator<? super E>) to stream.collect()."
3089,common/collect,com.google.common.collect,Class FluentIterable<E>,public final ImmutableMultiset<E> toMultiset(),Returns an ImmutableMultiset containing all of the elements from this fluent iterable. Stream equivalent: pass ImmutableMultiset.toImmutableMultiset() to stream.collect().
3090,common/collect,com.google.common.collect,Class FluentIterable<E>,"public final <V> ImmutableMap<E,V> toMap(Function<? super E,V> valueFunction)","Returns an immutable map whose keys are the distinct elements of this FluentIterable and whose value for each key was computed by valueFunction. The map's iteration order is the order of the first appearance of each key in this iterable. When there are multiple instances of a key in this iterable, it is unspecified whether valueFunction will be applied to more than one instance of that key and, if it is, which result will be mapped to that key in the returned map. Stream equivalent: stream.collect(ImmutableMap.toImmutableMap(k -> k, valueFunction))."
3091,common/collect,com.google.common.collect,Class FluentIterable<E>,"public final <K> ImmutableListMultimap<K,E> index(Function<? super E,K> keyFunction)","Creates an index ImmutableListMultimap that contains the results of applying a specified function to each item in this FluentIterable of values. Each element of this iterable will be stored as a value in the resulting multimap, yielding a multimap with the same size as this iterable. The key used to store that value in the multimap will be the result of calling the function on that value. The resulting multimap is created as an immutable snapshot. In the returned multimap, keys appear in the order they are first encountered, and the values corresponding to each key appear in the same order as they are encountered. Stream equivalent: stream.collect(Collectors.groupingBy(keyFunction)) behaves similarly, but returns a mutable Map<K, List<E>> instead, and may not preserve the order of entries)."
3092,common/collect,com.google.common.collect,Class FluentIterable<E>,"public final <K> ImmutableMap<K,E> uniqueIndex(Function<? super E,K> keyFunction)","Returns a map with the contents of this FluentIterable as its values, indexed by keys derived from those values. In other words, each input value produces an entry in the map whose key is the result of applying keyFunction to that value. These entries appear in the same order as they appeared in this fluent iterable. Example usage: Color red = new Color(red, 255, 0, 0); ... FluentIterable<Color> allColors = FluentIterable.from(ImmutableSet.of(red, green, blue)); Map<String, Color> colorForName = allColors.uniqueIndex(toStringFunction()); assertThat(colorForName).containsEntry(red, red); If your index may associate multiple values with each key, use index. Stream equivalent: stream.collect(ImmutableMap.toImmutableMap(keyFunction, v -> v))."
3093,common/collect,com.google.common.collect,Class FluentIterable<E>,@GwtIncompatiblepublic final E[] toArray(Class<E> type),"Returns an array containing all of the elements from this fluent iterable in iteration order. Stream equivalent: if an object array is acceptable, use stream.toArray(); if type is a class literal such as MyType.class, use stream.toArray(MyType[]::new). Otherwise use stream.toArray( len -> (E[]) Array.newInstance(type, len))."
3094,common/collect,com.google.common.collect,Class FluentIterable<E>,@CanIgnoreReturnValuepublic final <C extends Collection<? super E>> C copyInto(C collection),"Copies all the elements from this fluent iterable to collection. This is equivalent to calling Iterables.addAll(collection, this). Stream equivalent: stream.forEachOrdered(collection::add) or stream.forEach(collection::add)."
3095,common/collect,com.google.common.collect,Class FluentIterable<E>,@Betapublic final String join(Joiner joiner),"Returns a String containing all of the elements of this fluent iterable joined with joiner. Stream equivalent: joiner.join(stream.iterator()), or, if you are not using any optional Joiner features, stream.collect(Collectors.joining(delimiter)."
3096,common/collect,com.google.common.collect,Class FluentIterable<E>,public final E get(int position),"Returns the element at the specified position in this fluent iterable. Stream equivalent: stream.skip(position).findFirst().get() (but note that this throws different exception types, and throws an exception if null would be returned)."
3097,common/io,com.google.common.io,Class Flushables,"public static void flush(Flushable flushable, boolean swallowIOException) throws IOException","Flush a Flushable, with control over whether an IOException may be thrown. If swallowIOException is true, then we don't rethrow IOException, but merely log it."
3098,common/collect,com.google.common.collect,Class ForwardingBlockingDeque<E>,protected abstract BlockingDeque<E> delegate(),Deprecated. 
3099,common/collect,com.google.common.collect,Class ForwardingBlockingDeque<E>,public int remainingCapacity(),Deprecated. 
3100,common/collect,com.google.common.collect,Class ForwardingBlockingDeque<E>,public void putFirst(E e) throws InterruptedException,Deprecated. 
3101,common/collect,com.google.common.collect,Class ForwardingBlockingDeque<E>,public void putLast(E e) throws InterruptedException,Deprecated. 
3102,common/collect,com.google.common.collect,Class ForwardingBlockingDeque<E>,"public boolean offerFirst(E e, long timeout, TimeUnit unit) throws InterruptedException",Deprecated. 
3103,common/collect,com.google.common.collect,Class ForwardingBlockingDeque<E>,"public boolean offerLast(E e, long timeout, TimeUnit unit) throws InterruptedException",Deprecated. 
3104,common/collect,com.google.common.collect,Class ForwardingBlockingDeque<E>,public E takeFirst() throws InterruptedException,Deprecated. 
3105,common/collect,com.google.common.collect,Class ForwardingBlockingDeque<E>,public E takeLast() throws InterruptedException,Deprecated. 
3106,common/collect,com.google.common.collect,Class ForwardingBlockingDeque<E>,"public E pollFirst(long timeout, TimeUnit unit) throws InterruptedException",Deprecated. 
3107,common/collect,com.google.common.collect,Class ForwardingBlockingDeque<E>,"public E pollLast(long timeout, TimeUnit unit) throws InterruptedException",Deprecated. 
3108,common/collect,com.google.common.collect,Class ForwardingBlockingDeque<E>,public void put(E e) throws InterruptedException,Deprecated. 
3109,common/collect,com.google.common.collect,Class ForwardingBlockingDeque<E>,"public boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException",Deprecated. 
3110,common/collect,com.google.common.collect,Class ForwardingBlockingDeque<E>,public E take() throws InterruptedException,Deprecated. 
3111,common/collect,com.google.common.collect,Class ForwardingBlockingDeque<E>,"public E poll(long timeout, TimeUnit unit) throws InterruptedException",Deprecated. 
3112,common/collect,com.google.common.collect,Class ForwardingBlockingDeque<E>,public int drainTo(Collection<? super E> c),Deprecated. 
3113,util/concurrent,com.google.common.util.concurrent,Class ForwardingBlockingDeque<E>,protected abstract BlockingDeque<E> delegate(),Description copied from class: ForwardingObject
3114,util/concurrent,com.google.common.util.concurrent,Class ForwardingBlockingDeque<E>,public int remainingCapacity(),Description copied from interface: java.util.concurrent.BlockingQueue
3115,util/concurrent,com.google.common.util.concurrent,Class ForwardingBlockingDeque<E>,public void putFirst(E e) throws InterruptedException,Description copied from interface: java.util.concurrent.BlockingDeque
3116,util/concurrent,com.google.common.util.concurrent,Class ForwardingBlockingDeque<E>,public void putLast(E e) throws InterruptedException,Description copied from interface: java.util.concurrent.BlockingDeque
3117,util/concurrent,com.google.common.util.concurrent,Class ForwardingBlockingDeque<E>,"public boolean offerFirst(E e, long timeout, TimeUnit unit) throws InterruptedException",Description copied from interface: java.util.concurrent.BlockingDeque
3118,util/concurrent,com.google.common.util.concurrent,Class ForwardingBlockingDeque<E>,"public boolean offerLast(E e, long timeout, TimeUnit unit) throws InterruptedException",Description copied from interface: java.util.concurrent.BlockingDeque
3119,util/concurrent,com.google.common.util.concurrent,Class ForwardingBlockingDeque<E>,public E takeFirst() throws InterruptedException,Description copied from interface: java.util.concurrent.BlockingDeque
3120,util/concurrent,com.google.common.util.concurrent,Class ForwardingBlockingDeque<E>,public E takeLast() throws InterruptedException,Description copied from interface: java.util.concurrent.BlockingDeque
3121,util/concurrent,com.google.common.util.concurrent,Class ForwardingBlockingDeque<E>,"public E pollFirst(long timeout, TimeUnit unit) throws InterruptedException",Description copied from interface: java.util.concurrent.BlockingDeque
3122,util/concurrent,com.google.common.util.concurrent,Class ForwardingBlockingDeque<E>,"public E pollLast(long timeout, TimeUnit unit) throws InterruptedException",Description copied from interface: java.util.concurrent.BlockingDeque
3123,util/concurrent,com.google.common.util.concurrent,Class ForwardingBlockingDeque<E>,public void put(E e) throws InterruptedException,Description copied from interface: java.util.concurrent.BlockingDeque
3124,util/concurrent,com.google.common.util.concurrent,Class ForwardingBlockingDeque<E>,"public boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException",Description copied from interface: java.util.concurrent.BlockingDeque
3125,util/concurrent,com.google.common.util.concurrent,Class ForwardingBlockingDeque<E>,public E take() throws InterruptedException,Description copied from interface: java.util.concurrent.BlockingDeque
3126,util/concurrent,com.google.common.util.concurrent,Class ForwardingBlockingDeque<E>,"public E poll(long timeout, TimeUnit unit) throws InterruptedException",Description copied from interface: java.util.concurrent.BlockingDeque
3127,util/concurrent,com.google.common.util.concurrent,Class ForwardingBlockingDeque<E>,public int drainTo(Collection<? super E> c),Description copied from interface: java.util.concurrent.BlockingQueue
3128,util/concurrent,com.google.common.util.concurrent,Class ForwardingBlockingQueue<E>,protected abstract BlockingQueue<E> delegate(),Description copied from class: ForwardingObject
3129,util/concurrent,com.google.common.util.concurrent,Class ForwardingBlockingQueue<E>,"public int drainTo(Collection<? super E> c, int maxElements)",Description copied from interface: java.util.concurrent.BlockingQueue
3130,util/concurrent,com.google.common.util.concurrent,Class ForwardingBlockingQueue<E>,public int drainTo(Collection<? super E> c),Description copied from interface: java.util.concurrent.BlockingQueue
3131,util/concurrent,com.google.common.util.concurrent,Class ForwardingBlockingQueue<E>,"public boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException",Description copied from interface: java.util.concurrent.BlockingQueue
3132,util/concurrent,com.google.common.util.concurrent,Class ForwardingBlockingQueue<E>,"public E poll(long timeout, TimeUnit unit) throws InterruptedException",Description copied from interface: java.util.concurrent.BlockingQueue
3133,util/concurrent,com.google.common.util.concurrent,Class ForwardingBlockingQueue<E>,public void put(E e) throws InterruptedException,Description copied from interface: java.util.concurrent.BlockingQueue
3134,util/concurrent,com.google.common.util.concurrent,Class ForwardingBlockingQueue<E>,public int remainingCapacity(),Description copied from interface: java.util.concurrent.BlockingQueue
3135,common/cache,com.google.common.cache,"Class ForwardingCache<K,V>","protected abstract Cache<K,V> delegate()",Description copied from class: ForwardingObject
3136,common/cache,com.google.common.cache,"Class ForwardingCache<K,V>",public V getIfPresent(Object key),Description copied from interface: Cache
3137,common/cache,com.google.common.cache,"Class ForwardingCache<K,V>","public V get(K key, Callable<? extends V> valueLoader) throws ExecutionException",Description copied from interface: Cache
3138,common/cache,com.google.common.cache,"Class ForwardingCache<K,V>","public ImmutableMap<K,V> getAllPresent(Iterable<?> keys)",Description copied from interface: Cache
3139,common/cache,com.google.common.cache,"Class ForwardingCache<K,V>","public void put(K key, V value)",Description copied from interface: Cache
3140,common/cache,com.google.common.cache,"Class ForwardingCache<K,V>","public void putAll(Map<? extends K,? extends V> m)",Description copied from interface: Cache
3141,common/cache,com.google.common.cache,"Class ForwardingCache<K,V>",public void invalidate(Object key),Description copied from interface: Cache
3142,common/cache,com.google.common.cache,"Class ForwardingCache<K,V>",public void invalidateAll(Iterable<?> keys),Description copied from interface: Cache
3143,common/cache,com.google.common.cache,"Class ForwardingCache<K,V>",public void invalidateAll(),Description copied from interface: Cache
3144,common/cache,com.google.common.cache,"Class ForwardingCache<K,V>",public long size(),Description copied from interface: Cache
3145,common/cache,com.google.common.cache,"Class ForwardingCache<K,V>",public CacheStats stats(),Description copied from interface: Cache
3146,common/cache,com.google.common.cache,"Class ForwardingCache<K,V>","public ConcurrentMap<K,V> asMap()",Description copied from interface: Cache
3147,common/collect,com.google.common.collect,Class ForwardingCollection<E>,protected abstract Collection<E> delegate(),Description copied from class: ForwardingObject
3148,common/collect,com.google.common.collect,Class ForwardingCollection<E>,public Iterator<E> iterator(),Description copied from interface: java.util.Collection
3149,common/collect,com.google.common.collect,Class ForwardingCollection<E>,public int size(),Description copied from interface: java.util.Collection
3150,common/collect,com.google.common.collect,Class ForwardingCollection<E>,@CanIgnoreReturnValuepublic boolean removeAll(Collection<?> collection),Description copied from interface: java.util.Collection
3151,common/collect,com.google.common.collect,Class ForwardingCollection<E>,public boolean isEmpty(),Description copied from interface: java.util.Collection
3152,common/collect,com.google.common.collect,Class ForwardingCollection<E>,public boolean contains(Object object),Description copied from interface: java.util.Collection
3153,common/collect,com.google.common.collect,Class ForwardingCollection<E>,@CanIgnoreReturnValuepublic boolean add(E element),Description copied from interface: java.util.Collection
3154,common/collect,com.google.common.collect,Class ForwardingCollection<E>,@CanIgnoreReturnValuepublic boolean remove(Object object),Description copied from interface: java.util.Collection
3155,common/collect,com.google.common.collect,Class ForwardingCollection<E>,public boolean containsAll(Collection<?> collection),Description copied from interface: java.util.Collection
3156,common/collect,com.google.common.collect,Class ForwardingCollection<E>,@CanIgnoreReturnValuepublic boolean addAll(Collection<? extends E> collection),Description copied from interface: java.util.Collection
3157,common/collect,com.google.common.collect,Class ForwardingCollection<E>,@CanIgnoreReturnValuepublic boolean retainAll(Collection<?> collection),Description copied from interface: java.util.Collection
3158,common/collect,com.google.common.collect,Class ForwardingCollection<E>,public void clear(),Description copied from interface: java.util.Collection
3159,common/collect,com.google.common.collect,Class ForwardingCollection<E>,public Object[] toArray(),Description copied from interface: java.util.Collection
3160,common/collect,com.google.common.collect,Class ForwardingCollection<E>,@CanIgnoreReturnValuepublic <T> T[] toArray(T[] array),Description copied from interface: java.util.Collection
3161,common/collect,com.google.common.collect,Class ForwardingCollection<E>,protected boolean standardContains(@Nullable Object object),"A sensible definition of contains(java.lang.Object) in terms of iterator(). If you override iterator(), you may wish to override contains(java.lang.Object) to forward to this implementation."
3162,common/collect,com.google.common.collect,Class ForwardingCollection<E>,protected boolean standardContainsAll(Collection<?> collection),"A sensible definition of containsAll(java.util.Collection<?>) in terms of contains(java.lang.Object) . If you override contains(java.lang.Object), you may wish to override containsAll(java.util.Collection<?>) to forward to this implementation."
3163,common/collect,com.google.common.collect,Class ForwardingCollection<E>,protected boolean standardAddAll(Collection<? extends E> collection),"A sensible definition of addAll(java.util.Collection<? extends E>) in terms of add(E). If you override add(E), you may wish to override addAll(java.util.Collection<? extends E>) to forward to this implementation."
3164,common/collect,com.google.common.collect,Class ForwardingCollection<E>,protected boolean standardRemove(@Nullable Object object),"A sensible definition of remove(java.lang.Object) in terms of iterator(), using the iterator's remove method. If you override iterator(), you may wish to override remove(java.lang.Object) to forward to this implementation."
3165,common/collect,com.google.common.collect,Class ForwardingCollection<E>,protected boolean standardRemoveAll(Collection<?> collection),"A sensible definition of removeAll(java.util.Collection<?>) in terms of iterator(), using the iterator's remove method. If you override iterator(), you may wish to override removeAll(java.util.Collection<?>) to forward to this implementation."
3166,common/collect,com.google.common.collect,Class ForwardingCollection<E>,protected boolean standardRetainAll(Collection<?> collection),"A sensible definition of retainAll(java.util.Collection<?>) in terms of iterator(), using the iterator's remove method. If you override iterator(), you may wish to override retainAll(java.util.Collection<?>) to forward to this implementation."
3167,common/collect,com.google.common.collect,Class ForwardingCollection<E>,protected void standardClear(),"A sensible definition of clear() in terms of iterator(), using the iterator's remove method. If you override iterator(), you may wish to override clear() to forward to this implementation."
3168,common/collect,com.google.common.collect,Class ForwardingCollection<E>,protected boolean standardIsEmpty(),"A sensible definition of isEmpty() as !iterator().hasNext. If you override isEmpty(), you may wish to override isEmpty() to forward to this implementation. Alternately, it may be more efficient to implement isEmpty as size() == 0."
3169,common/collect,com.google.common.collect,Class ForwardingCollection<E>,protected String standardToString(),"A sensible definition of ForwardingObject.toString() in terms of iterator(). If you override iterator(), you may wish to override ForwardingObject.toString() to forward to this implementation."
3170,common/collect,com.google.common.collect,Class ForwardingCollection<E>,protected Object[] standardToArray(),"A sensible definition of toArray() in terms of toArray(Object[]). If you override toArray(Object[]), you may wish to override toArray() to forward to this implementation."
3171,common/collect,com.google.common.collect,"Class ForwardingConcurrentMap<K,V>","protected abstract ConcurrentMap<K,V> delegate()",Description copied from class: ForwardingObject
3172,common/collect,com.google.common.collect,"Class ForwardingConcurrentMap<K,V>","@CanIgnoreReturnValuepublic V putIfAbsent(K key, V value)",Description copied from interface: java.util.concurrent.ConcurrentMap
3173,common/collect,com.google.common.collect,"Class ForwardingConcurrentMap<K,V>","@CanIgnoreReturnValuepublic boolean remove(Object key, Object value)",Description copied from interface: java.util.concurrent.ConcurrentMap
3174,common/collect,com.google.common.collect,"Class ForwardingConcurrentMap<K,V>","@CanIgnoreReturnValuepublic V replace(K key, V value)",Description copied from interface: java.util.concurrent.ConcurrentMap
3175,common/collect,com.google.common.collect,Class ForwardingDeque<E>,protected abstract Deque<E> delegate(),Description copied from class: ForwardingObject
3176,common/collect,com.google.common.collect,Class ForwardingDeque<E>,public void addFirst(E e),Description copied from interface: java.util.Deque
3177,common/collect,com.google.common.collect,Class ForwardingDeque<E>,public void addLast(E e),Description copied from interface: java.util.Deque
3178,common/collect,com.google.common.collect,Class ForwardingDeque<E>,public Iterator<E> descendingIterator(),Description copied from interface: java.util.Deque
3179,common/collect,com.google.common.collect,Class ForwardingDeque<E>,public E getFirst(),Description copied from interface: java.util.Deque
3180,common/collect,com.google.common.collect,Class ForwardingDeque<E>,public E getLast(),Description copied from interface: java.util.Deque
3181,common/collect,com.google.common.collect,Class ForwardingDeque<E>,@CanIgnoreReturnValuepublic boolean offerFirst(E e),Description copied from interface: java.util.Deque
3182,common/collect,com.google.common.collect,Class ForwardingDeque<E>,@CanIgnoreReturnValuepublic boolean offerLast(E e),Description copied from interface: java.util.Deque
3183,common/collect,com.google.common.collect,Class ForwardingDeque<E>,public E peekFirst(),Description copied from interface: java.util.Deque
3184,common/collect,com.google.common.collect,Class ForwardingDeque<E>,public E peekLast(),Description copied from interface: java.util.Deque
3185,common/collect,com.google.common.collect,Class ForwardingDeque<E>,@CanIgnoreReturnValuepublic E pollFirst(),Description copied from interface: java.util.Deque
3186,common/collect,com.google.common.collect,Class ForwardingDeque<E>,@CanIgnoreReturnValuepublic E pollLast(),Description copied from interface: java.util.Deque
3187,common/collect,com.google.common.collect,Class ForwardingDeque<E>,@CanIgnoreReturnValuepublic E pop(),Description copied from interface: java.util.Deque
3188,common/collect,com.google.common.collect,Class ForwardingDeque<E>,public void push(E e),Description copied from interface: java.util.Deque
3189,common/collect,com.google.common.collect,Class ForwardingDeque<E>,@CanIgnoreReturnValuepublic E removeFirst(),Description copied from interface: java.util.Deque
3190,common/collect,com.google.common.collect,Class ForwardingDeque<E>,@CanIgnoreReturnValuepublic E removeLast(),Description copied from interface: java.util.Deque
3191,common/collect,com.google.common.collect,Class ForwardingDeque<E>,@CanIgnoreReturnValuepublic boolean removeFirstOccurrence(Object o),Description copied from interface: java.util.Deque
3192,util/concurrent,com.google.common.util.concurrent,Class ForwardingExecutorService,protected abstract ExecutorService delegate(),Description copied from class: ForwardingObject
3193,util/concurrent,com.google.common.util.concurrent,Class ForwardingExecutorService,"public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException",Description copied from interface: java.util.concurrent.ExecutorService
3194,util/concurrent,com.google.common.util.concurrent,Class ForwardingExecutorService,public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) throws InterruptedException,Description copied from interface: java.util.concurrent.ExecutorService
3195,util/concurrent,com.google.common.util.concurrent,Class ForwardingExecutorService,"public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) throws InterruptedException",Description copied from interface: java.util.concurrent.ExecutorService
3196,util/concurrent,com.google.common.util.concurrent,Class ForwardingExecutorService,"public <T> T invokeAny(Collection<? extends Callable<T>> tasks) throws InterruptedException, ExecutionException",Description copied from interface: java.util.concurrent.ExecutorService
3197,util/concurrent,com.google.common.util.concurrent,Class ForwardingExecutorService,"public <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException",Description copied from interface: java.util.concurrent.ExecutorService
3198,util/concurrent,com.google.common.util.concurrent,Class ForwardingExecutorService,public boolean isShutdown(),Description copied from interface: java.util.concurrent.ExecutorService
3199,util/concurrent,com.google.common.util.concurrent,Class ForwardingExecutorService,public boolean isTerminated(),Description copied from interface: java.util.concurrent.ExecutorService
3200,util/concurrent,com.google.common.util.concurrent,Class ForwardingExecutorService,public void shutdown(),Description copied from interface: java.util.concurrent.ExecutorService
3201,util/concurrent,com.google.common.util.concurrent,Class ForwardingExecutorService,public List<Runnable> shutdownNow(),Description copied from interface: java.util.concurrent.ExecutorService
3202,util/concurrent,com.google.common.util.concurrent,Class ForwardingExecutorService,public void execute(Runnable command),Description copied from interface: java.util.concurrent.Executor
3203,util/concurrent,com.google.common.util.concurrent,Class ForwardingExecutorService,public <T> Future<T> submit(Callable<T> task),Description copied from interface: java.util.concurrent.ExecutorService
3204,util/concurrent,com.google.common.util.concurrent,Class ForwardingExecutorService,public Future<?> submit(Runnable task),Description copied from interface: java.util.concurrent.ExecutorService
3205,util/concurrent,com.google.common.util.concurrent,Class ForwardingFuture<V>,protected abstract Future<? extends V> delegate(),Description copied from class: ForwardingObject
3206,util/concurrent,com.google.common.util.concurrent,Class ForwardingFuture<V>,public boolean cancel(boolean mayInterruptIfRunning),Description copied from interface: java.util.concurrent.Future
3207,util/concurrent,com.google.common.util.concurrent,Class ForwardingFuture<V>,public boolean isCancelled(),Description copied from interface: java.util.concurrent.Future
3208,util/concurrent,com.google.common.util.concurrent,Class ForwardingFuture<V>,public boolean isDone(),Description copied from interface: java.util.concurrent.Future
3209,util/concurrent,com.google.common.util.concurrent,Class ForwardingFuture<V>,"public V get() throws InterruptedException, ExecutionException",Description copied from interface: java.util.concurrent.Future
3210,common/collect,com.google.common.collect,Class ForwardingIterator<T>,protected abstract Iterator<T> delegate(),Description copied from class: ForwardingObject
3211,common/collect,com.google.common.collect,Class ForwardingIterator<T>,public boolean hasNext(),Description copied from interface: java.util.Iterator
3212,common/collect,com.google.common.collect,Class ForwardingIterator<T>,@CanIgnoreReturnValuepublic T next(),Description copied from interface: java.util.Iterator
3213,common/collect,com.google.common.collect,Class ForwardingList<E>,protected abstract List<E> delegate(),Description copied from class: ForwardingObject
3214,common/collect,com.google.common.collect,Class ForwardingList<E>,"public void add(int index, E element)",Description copied from interface: java.util.List
3215,common/collect,com.google.common.collect,Class ForwardingList<E>,"@CanIgnoreReturnValuepublic boolean addAll(int index, Collection<? extends E> elements)",Description copied from interface: java.util.List
3216,common/collect,com.google.common.collect,Class ForwardingList<E>,public E get(int index),Description copied from interface: java.util.List
3217,common/collect,com.google.common.collect,Class ForwardingList<E>,public int indexOf(Object element),Description copied from interface: java.util.List
3218,common/collect,com.google.common.collect,Class ForwardingList<E>,public int lastIndexOf(Object element),Description copied from interface: java.util.List
3219,common/collect,com.google.common.collect,Class ForwardingList<E>,public ListIterator<E> listIterator(),Description copied from interface: java.util.List
3220,common/collect,com.google.common.collect,Class ForwardingList<E>,public ListIterator<E> listIterator(int index),Description copied from interface: java.util.List
3221,common/collect,com.google.common.collect,Class ForwardingList<E>,@CanIgnoreReturnValuepublic E remove(int index),Description copied from interface: java.util.List
3222,common/collect,com.google.common.collect,Class ForwardingList<E>,"@CanIgnoreReturnValuepublic E set(int index, E element)",Description copied from interface: java.util.List
3223,common/collect,com.google.common.collect,Class ForwardingList<E>,"public List<E> subList(int fromIndex, int toIndex)",Description copied from interface: java.util.List
3224,common/collect,com.google.common.collect,Class ForwardingList<E>,public boolean equals(@Nullable Object object),Description copied from class: java.lang.Object
3225,common/collect,com.google.common.collect,Class ForwardingList<E>,public int hashCode(),Description copied from class: java.lang.Object
3226,common/collect,com.google.common.collect,Class ForwardingList<E>,protected boolean standardAdd(E element),"A sensible default implementation of ForwardingCollection.add(Object), in terms of add(int, Object). If you override add(int, Object), you may wish to override ForwardingCollection.add(Object) to forward to this implementation."
3227,common/collect,com.google.common.collect,Class ForwardingList<E>,"protected boolean standardAddAll(int index, Iterable<? extends E> elements)","A sensible default implementation of addAll(int, Collection), in terms of the add method of listIterator(int). If you override listIterator(int), you may wish to override addAll(int, Collection) to forward to this implementation."
3228,common/collect,com.google.common.collect,Class ForwardingList<E>,protected int standardIndexOf(@Nullable Object element),"A sensible default implementation of indexOf(java.lang.Object), in terms of listIterator(). If you override listIterator(), you may wish to override indexOf(java.lang.Object) to forward to this implementation."
3229,common/collect,com.google.common.collect,Class ForwardingList<E>,protected int standardLastIndexOf(@Nullable Object element),"A sensible default implementation of lastIndexOf(java.lang.Object), in terms of listIterator(int). If you override listIterator(int), you may wish to override lastIndexOf(java.lang.Object) to forward to this implementation."
3230,common/collect,com.google.common.collect,Class ForwardingList<E>,protected Iterator<E> standardIterator(),"A sensible default implementation of ForwardingCollection.iterator(), in terms of listIterator(). If you override listIterator(), you may wish to override ForwardingCollection.iterator() to forward to this implementation."
3231,common/collect,com.google.common.collect,Class ForwardingList<E>,protected ListIterator<E> standardListIterator(),"A sensible default implementation of listIterator(), in terms of listIterator(int). If you override listIterator(int), you may wish to override listIterator() to forward to this implementation."
3232,common/collect,com.google.common.collect,Class ForwardingList<E>,@Betaprotected ListIterator<E> standardListIterator(int start),"A sensible default implementation of listIterator(int), in terms of ForwardingCollection.size(), get(int), set(int, Object), add(int, Object), and remove(int). If you override any of these methods, you may wish to override listIterator(int) to forward to this implementation."
3233,common/collect,com.google.common.collect,Class ForwardingList<E>,"@Betaprotected List<E> standardSubList(int fromIndex, int toIndex)","A sensible default implementation of subList(int, int). If you override any other methods, you may wish to override subList(int, int) to forward to this implementation."
3234,common/collect,com.google.common.collect,Class ForwardingList<E>,@Betaprotected boolean standardEquals(@Nullable Object object),"A sensible definition of equals(Object) in terms of ForwardingCollection.size() and ForwardingCollection.iterator(). If you override either of those methods, you may wish to override equals(Object) to forward to this implementation."
3235,util/concurrent,com.google.common.util.concurrent,Class ForwardingListenableFuture<V>,protected abstract ListenableFuture<? extends V> delegate(),Description copied from class: ForwardingObject
3236,util/concurrent,com.google.common.util.concurrent,Class ForwardingListeningExecutorService,protected abstract ListeningExecutorService delegate(),Description copied from class: ForwardingObject
3237,util/concurrent,com.google.common.util.concurrent,Class ForwardingListeningExecutorService,public <T> ListenableFuture<T> submit(Callable<T> task),Description copied from interface: java.util.concurrent.ExecutorService
3238,util/concurrent,com.google.common.util.concurrent,Class ForwardingListeningExecutorService,public ListenableFuture<?> submit(Runnable task),Description copied from interface: java.util.concurrent.ExecutorService
3239,common/collect,com.google.common.collect,Class ForwardingListIterator<E>,protected abstract ListIterator<E> delegate(),Description copied from class: ForwardingObject
3240,common/collect,com.google.common.collect,Class ForwardingListIterator<E>,public void add(E element),Description copied from interface: java.util.ListIterator
3241,common/collect,com.google.common.collect,Class ForwardingListIterator<E>,public boolean hasPrevious(),Description copied from interface: java.util.ListIterator
3242,common/collect,com.google.common.collect,Class ForwardingListIterator<E>,public int nextIndex(),Description copied from interface: java.util.ListIterator
3243,common/collect,com.google.common.collect,Class ForwardingListIterator<E>,@CanIgnoreReturnValuepublic E previous(),Description copied from interface: java.util.ListIterator
3244,common/collect,com.google.common.collect,Class ForwardingListIterator<E>,public int previousIndex(),Description copied from interface: java.util.ListIterator
3245,common/collect,com.google.common.collect,"Class ForwardingListMultimap<K,V>","protected abstract ListMultimap<K,V> delegate()",Description copied from class: ForwardingObject
3246,common/collect,com.google.common.collect,"Class ForwardingListMultimap<K,V>",public List<V> get(K key),Description copied from interface: Multimap
3247,common/collect,com.google.common.collect,"Class ForwardingListMultimap<K,V>",@CanIgnoreReturnValuepublic List<V> removeAll(@Nullable Object key),Description copied from interface: Multimap
3248,common/cache,com.google.common.cache,"Class ForwardingLoadingCache<K,V>","protected abstract LoadingCache<K,V> delegate()",Description copied from class: ForwardingObject
3249,common/cache,com.google.common.cache,"Class ForwardingLoadingCache<K,V>",public V get(K key) throws ExecutionException,Description copied from interface: LoadingCache
3250,common/cache,com.google.common.cache,"Class ForwardingLoadingCache<K,V>",public V getUnchecked(K key),Description copied from interface: LoadingCache
3251,common/cache,com.google.common.cache,"Class ForwardingLoadingCache<K,V>","public ImmutableMap<K,V> getAll(Iterable<? extends K> keys) throws ExecutionException",Description copied from interface: LoadingCache
3252,common/cache,com.google.common.cache,"Class ForwardingLoadingCache<K,V>",public V apply(K key),Description copied from interface: java.util.function.Function
3253,common/collect,com.google.common.collect,"Class ForwardingMap<K,V>","protected abstract Map<K,V> delegate()",Description copied from class: ForwardingObject
3254,common/collect,com.google.common.collect,"Class ForwardingMap<K,V>",public int size(),Description copied from interface: java.util.Map
3255,common/collect,com.google.common.collect,"Class ForwardingMap<K,V>",public boolean isEmpty(),Description copied from interface: java.util.Map
3256,common/collect,com.google.common.collect,"Class ForwardingMap<K,V>",@CanIgnoreReturnValuepublic V remove(Object key),Description copied from interface: java.util.Map
3257,common/collect,com.google.common.collect,"Class ForwardingMap<K,V>",public void clear(),Description copied from interface: java.util.Map
3258,common/collect,com.google.common.collect,"Class ForwardingMap<K,V>",public boolean containsKey(@Nullable Object key),Description copied from interface: java.util.Map
3259,common/collect,com.google.common.collect,"Class ForwardingMap<K,V>",public boolean containsValue(@Nullable Object value),Description copied from interface: java.util.Map
3260,common/collect,com.google.common.collect,"Class ForwardingMap<K,V>",public V get(@Nullable Object key),Description copied from interface: java.util.Map
3261,common/collect,com.google.common.collect,"Class ForwardingMap<K,V>","@CanIgnoreReturnValuepublic V put(K key, V value)",Description copied from interface: java.util.Map
3262,common/collect,com.google.common.collect,"Class ForwardingMap<K,V>","public void putAll(Map<? extends K,? extends V> map)",Description copied from interface: java.util.Map
3263,common/collect,com.google.common.collect,"Class ForwardingMap<K,V>",public Set<K> keySet(),Description copied from interface: java.util.Map
3264,common/collect,com.google.common.collect,"Class ForwardingMap<K,V>",public Collection<V> values(),Description copied from interface: java.util.Map
3265,common/collect,com.google.common.collect,"Class ForwardingMap<K,V>","public Set<Map.Entry<K,V>> entrySet()",Description copied from interface: java.util.Map
3266,common/collect,com.google.common.collect,"Class ForwardingMap<K,V>",public boolean equals(@Nullable Object object),Description copied from class: java.lang.Object
3267,common/collect,com.google.common.collect,"Class ForwardingMap<K,V>",public int hashCode(),Description copied from class: java.lang.Object
3268,common/collect,com.google.common.collect,"Class ForwardingMap<K,V>","protected void standardPutAll(Map<? extends K,? extends V> map)","A sensible definition of putAll(Map) in terms of put(Object, Object). If you override put(Object, Object), you may wish to override putAll(Map) to forward to this implementation."
3269,common/collect,com.google.common.collect,"Class ForwardingMap<K,V>",@Betaprotected V standardRemove(@Nullable Object key),"A sensible, albeit inefficient, definition of remove(java.lang.Object) in terms of the iterator method of entrySet(). If you override entrySet(), you may wish to override remove(java.lang.Object) to forward to this implementation. Alternately, you may wish to override remove(java.lang.Object) with keySet().remove, assuming that approach would not lead to an infinite loop."
3270,common/collect,com.google.common.collect,"Class ForwardingMap<K,V>",protected void standardClear(),"A sensible definition of clear() in terms of the iterator method of entrySet(). In many cases, you may wish to override clear() to forward to this implementation."
3271,common/collect,com.google.common.collect,"Class ForwardingMap<K,V>",@Betaprotected boolean standardContainsKey(@Nullable Object key),"A sensible, albeit inefficient, definition of containsKey(java.lang.Object) in terms of the iterator method of entrySet(). If you override entrySet(), you may wish to override containsKey(java.lang.Object) to forward to this implementation."
3272,common/collect,com.google.common.collect,"Class ForwardingMap<K,V>",protected boolean standardContainsValue(@Nullable Object value),"A sensible definition of containsValue(java.lang.Object) in terms of the iterator method of entrySet(). If you override entrySet(), you may wish to override containsValue(java.lang.Object) to forward to this implementation."
3273,common/collect,com.google.common.collect,"Class ForwardingMap<K,V>",protected boolean standardIsEmpty(),"A sensible definition of isEmpty() in terms of the iterator method of entrySet(). If you override entrySet(), you may wish to override isEmpty() to forward to this implementation."
3274,common/collect,com.google.common.collect,"Class ForwardingMap<K,V>",protected boolean standardEquals(@Nullable Object object),"A sensible definition of equals(java.lang.Object) in terms of the equals method of entrySet(). If you override entrySet(), you may wish to override equals(java.lang.Object) to forward to this implementation."
3275,common/collect,com.google.common.collect,"Class ForwardingMap<K,V>",protected int standardHashCode(),"A sensible definition of hashCode() in terms of the iterator method of entrySet(). If you override entrySet(), you may wish to override hashCode() to forward to this implementation."
3276,common/collect,com.google.common.collect,"Class ForwardingMapEntry<K,V>","protected abstract Map.Entry<K,V> delegate()",Description copied from class: ForwardingObject
3277,common/collect,com.google.common.collect,"Class ForwardingMapEntry<K,V>",public K getKey(),Description copied from interface: java.util.Map.Entry
3278,common/collect,com.google.common.collect,"Class ForwardingMapEntry<K,V>",public V getValue(),Description copied from interface: java.util.Map.Entry
3279,common/collect,com.google.common.collect,"Class ForwardingMapEntry<K,V>",public V setValue(V value),Description copied from interface: java.util.Map.Entry
3280,common/collect,com.google.common.collect,"Class ForwardingMapEntry<K,V>",public boolean equals(@Nullable Object object),Description copied from class: java.lang.Object
3281,common/collect,com.google.common.collect,"Class ForwardingMapEntry<K,V>",public int hashCode(),Description copied from class: java.lang.Object
3282,common/collect,com.google.common.collect,"Class ForwardingMapEntry<K,V>",protected boolean standardEquals(@Nullable Object object),"A sensible definition of equals(Object) in terms of getKey() and getValue(). If you override either of these methods, you may wish to override equals(Object) to forward to this implementation."
3283,common/collect,com.google.common.collect,"Class ForwardingMapEntry<K,V>",protected int standardHashCode(),"A sensible definition of hashCode() in terms of getKey() and getValue(). If you override either of these methods, you may wish to override hashCode() to forward to this implementation."
3284,common/collect,com.google.common.collect,"Class ForwardingMultimap<K,V>","protected abstract Multimap<K,V> delegate()",Description copied from class: ForwardingObject
3285,common/collect,com.google.common.collect,"Class ForwardingMultimap<K,V>","public Map<K,Collection<V>> asMap()",Description copied from interface: Multimap
3286,common/collect,com.google.common.collect,"Class ForwardingMultimap<K,V>",public void clear(),Description copied from interface: Multimap
3287,common/collect,com.google.common.collect,"Class ForwardingMultimap<K,V>","public boolean containsEntry(@Nullable Object key, @Nullable Object value)",Description copied from interface: Multimap
3288,common/collect,com.google.common.collect,"Class ForwardingMultimap<K,V>",public boolean containsKey(@Nullable Object key),Description copied from interface: Multimap
3289,common/collect,com.google.common.collect,"Class ForwardingMultimap<K,V>",public boolean containsValue(@Nullable Object value),Description copied from interface: Multimap
3290,common/collect,com.google.common.collect,"Class ForwardingMultimap<K,V>","public Collection<Map.Entry<K,V>> entries()",Description copied from interface: Multimap
3291,common/collect,com.google.common.collect,"Class ForwardingMultimap<K,V>",public Collection<V> get(K key),Description copied from interface: Multimap
3292,common/collect,com.google.common.collect,"Class ForwardingMultimap<K,V>",public boolean isEmpty(),Description copied from interface: Multimap
3293,common/collect,com.google.common.collect,"Class ForwardingMultimap<K,V>",public Multiset<K> keys(),Description copied from interface: Multimap
3294,common/collect,com.google.common.collect,"Class ForwardingMultimap<K,V>",public Set<K> keySet(),Description copied from interface: Multimap
3295,common/collect,com.google.common.collect,"Class ForwardingMultimap<K,V>","@CanIgnoreReturnValuepublic boolean put(K key, V value)",Description copied from interface: Multimap
3296,common/collect,com.google.common.collect,"Class ForwardingMultimap<K,V>","@CanIgnoreReturnValuepublic boolean putAll(K key, Iterable<? extends V> values)",Description copied from interface: Multimap
3297,common/collect,com.google.common.collect,"Class ForwardingMultimap<K,V>","@CanIgnoreReturnValuepublic boolean putAll(Multimap<? extends K,? extends V> multimap)",Description copied from interface: Multimap
3298,common/collect,com.google.common.collect,"Class ForwardingMultimap<K,V>","@CanIgnoreReturnValuepublic boolean remove(@Nullable Object key, @Nullable Object value)",Description copied from interface: Multimap
3299,common/collect,com.google.common.collect,"Class ForwardingMultimap<K,V>",@CanIgnoreReturnValuepublic Collection<V> removeAll(@Nullable Object key),Description copied from interface: Multimap
3300,common/collect,com.google.common.collect,"Class ForwardingMultimap<K,V>","@CanIgnoreReturnValuepublic Collection<V> replaceValues(K key, Iterable<? extends V> values)",Description copied from interface: Multimap
3301,common/collect,com.google.common.collect,"Class ForwardingMultimap<K,V>",public int size(),Description copied from interface: Multimap
3302,common/collect,com.google.common.collect,"Class ForwardingMultimap<K,V>",public Collection<V> values(),Description copied from interface: Multimap
3303,common/collect,com.google.common.collect,"Class ForwardingMultimap<K,V>",public boolean equals(@Nullable Object object),Description copied from class: java.lang.Object
3304,common/collect,com.google.common.collect,Class ForwardingMultiset<E>,protected abstract Multiset<E> delegate(),Description copied from class: ForwardingObject
3305,common/collect,com.google.common.collect,Class ForwardingMultiset<E>,public int count(Object element),Description copied from interface: Multiset
3306,common/collect,com.google.common.collect,Class ForwardingMultiset<E>,"@CanIgnoreReturnValuepublic int add(E element, int occurrences)",Description copied from interface: Multiset
3307,common/collect,com.google.common.collect,Class ForwardingMultiset<E>,"@CanIgnoreReturnValuepublic int remove(Object element, int occurrences)",Description copied from interface: Multiset
3308,common/collect,com.google.common.collect,Class ForwardingMultiset<E>,public Set<E> elementSet(),Description copied from interface: Multiset
3309,common/collect,com.google.common.collect,Class ForwardingMultiset<E>,public Set<Multiset.Entry<E>> entrySet(),Description copied from interface: Multiset
3310,common/collect,com.google.common.collect,Class ForwardingMultiset<E>,public boolean equals(@Nullable Object object),Description copied from class: java.lang.Object
3311,common/collect,com.google.common.collect,Class ForwardingMultiset<E>,public int hashCode(),Description copied from class: java.lang.Object
3312,common/collect,com.google.common.collect,Class ForwardingMultiset<E>,"@CanIgnoreReturnValuepublic int setCount(E element, int count)",Description copied from interface: Multiset
3313,common/collect,com.google.common.collect,Class ForwardingMultiset<E>,"@CanIgnoreReturnValuepublic boolean setCount(E element, int oldCount, int newCount)",Description copied from interface: Multiset
3314,common/collect,com.google.common.collect,Class ForwardingMultiset<E>,protected boolean standardContains(@Nullable Object object),"A sensible definition of ForwardingCollection.contains(java.lang.Object) in terms of count(java.lang.Object). If you override count(java.lang.Object), you may wish to override ForwardingCollection.contains(java.lang.Object) to forward to this implementation."
3315,common/collect,com.google.common.collect,Class ForwardingMultiset<E>,protected void standardClear(),"A sensible definition of ForwardingCollection.clear() in terms of the iterator method of entrySet(). If you override entrySet(), you may wish to override ForwardingCollection.clear() to forward to this implementation."
3316,common/collect,com.google.common.collect,Class ForwardingMultiset<E>,@Betaprotected int standardCount(@Nullable Object object),"A sensible, albeit inefficient, definition of count(java.lang.Object) in terms of entrySet(). If you override entrySet(), you may wish to override count(java.lang.Object) to forward to this implementation."
3317,common/collect,com.google.common.collect,Class ForwardingMultiset<E>,protected boolean standardAdd(E element),"A sensible definition of ForwardingCollection.add(Object) in terms of add(Object, int). If you override add(Object, int), you may wish to override ForwardingCollection.add(Object) to forward to this implementation."
3318,common/collect,com.google.common.collect,Class ForwardingMultiset<E>,@Betaprotected boolean standardAddAll(Collection<? extends E> elementsToAdd),"A sensible definition of ForwardingCollection.addAll(Collection) in terms of ForwardingCollection.add(Object) and add(Object, int). If you override either of these methods, you may wish to override ForwardingCollection.addAll(Collection) to forward to this implementation."
3319,common/collect,com.google.common.collect,Class ForwardingMultiset<E>,protected boolean standardRemove(Object element),"A sensible definition of ForwardingCollection.remove(Object) in terms of remove(Object, int). If you override remove(Object, int), you may wish to override ForwardingCollection.remove(Object) to forward to this implementation."
3320,common/collect,com.google.common.collect,Class ForwardingMultiset<E>,protected boolean standardRemoveAll(Collection<?> elementsToRemove),"A sensible definition of ForwardingCollection.removeAll(java.util.Collection<?>) in terms of the removeAll method of elementSet(). If you override elementSet(), you may wish to override ForwardingCollection.removeAll(java.util.Collection<?>) to forward to this implementation."
3321,common/collect,com.google.common.collect,Class ForwardingMultiset<E>,protected boolean standardRetainAll(Collection<?> elementsToRetain),"A sensible definition of ForwardingCollection.retainAll(java.util.Collection<?>) in terms of the retainAll method of elementSet(). If you override elementSet(), you may wish to override ForwardingCollection.retainAll(java.util.Collection<?>) to forward to this implementation."
3322,common/collect,com.google.common.collect,Class ForwardingMultiset<E>,"protected int standardSetCount(E element, int count)","A sensible definition of setCount(Object, int) in terms of count(Object), add(Object, int), and remove(Object, int). entrySet(). If you override any of these methods, you may wish to override setCount(Object, int) to forward to this implementation."
3323,common/collect,com.google.common.collect,Class ForwardingMultiset<E>,"protected boolean standardSetCount(E element, int oldCount, int newCount)","A sensible definition of setCount(Object, int, int) in terms of count(Object) and setCount(Object, int). If you override either of these methods, you may wish to override setCount(Object, int, int) to forward to this implementation."
3324,common/collect,com.google.common.collect,Class ForwardingMultiset<E>,protected Iterator<E> standardIterator(),"A sensible definition of ForwardingCollection.iterator() in terms of entrySet() and ForwardingCollection.remove(Object). If you override either of these methods, you may wish to override ForwardingCollection.iterator() to forward to this implementation."
3325,common/collect,com.google.common.collect,Class ForwardingMultiset<E>,protected int standardSize(),"A sensible, albeit inefficient, definition of ForwardingCollection.size() in terms of entrySet(). If you override entrySet(), you may wish to override ForwardingCollection.size() to forward to this implementation."
3326,common/collect,com.google.common.collect,Class ForwardingMultiset<E>,protected boolean standardEquals(@Nullable Object object),"A sensible, albeit inefficient, definition of equals(java.lang.Object) in terms of entrySet().size() and count(java.lang.Object). If you override either of these methods, you may wish to override equals(java.lang.Object) to forward to this implementation."
3327,common/collect,com.google.common.collect,Class ForwardingMultiset<E>,protected int standardHashCode(),"A sensible definition of hashCode() as entrySet().hashCode() . If you override entrySet(), you may wish to override hashCode() to forward to this implementation."
3328,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>","protected abstract NavigableMap<K,V> delegate()",Description copied from class: ForwardingObject
3329,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>","public Map.Entry<K,V> lowerEntry(K key)",Description copied from interface: java.util.NavigableMap
3330,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>","protected Map.Entry<K,V> standardLowerEntry(K key)","A sensible definition of lowerEntry(K) in terms of the lastEntry() of headMap(Object, boolean). If you override headMap, you may wish to override lowerEntry to forward to this implementation."
3331,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>",public K lowerKey(K key),Description copied from interface: java.util.NavigableMap
3332,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>",protected K standardLowerKey(K key),"A sensible definition of lowerKey(K) in terms of lowerEntry. If you override lowerEntry(K), you may wish to override lowerKey to forward to this implementation."
3333,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>","public Map.Entry<K,V> floorEntry(K key)",Description copied from interface: java.util.NavigableMap
3334,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>","protected Map.Entry<K,V> standardFloorEntry(K key)","A sensible definition of floorEntry(K) in terms of the lastEntry() of headMap(Object, boolean). If you override headMap, you may wish to override floorEntry to forward to this implementation."
3335,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>",public K floorKey(K key),Description copied from interface: java.util.NavigableMap
3336,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>",protected K standardFloorKey(K key),"A sensible definition of floorKey(K) in terms of floorEntry. If you override floorEntry, you may wish to override floorKey to forward to this implementation."
3337,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>","public Map.Entry<K,V> ceilingEntry(K key)",Description copied from interface: java.util.NavigableMap
3338,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>","protected Map.Entry<K,V> standardCeilingEntry(K key)","A sensible definition of ceilingEntry(K) in terms of the firstEntry() of tailMap(Object, boolean). If you override tailMap, you may wish to override ceilingEntry to forward to this implementation."
3339,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>",public K ceilingKey(K key),Description copied from interface: java.util.NavigableMap
3340,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>",protected K standardCeilingKey(K key),"A sensible definition of ceilingKey(K) in terms of ceilingEntry. If you override ceilingEntry, you may wish to override ceilingKey to forward to this implementation."
3341,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>","public Map.Entry<K,V> higherEntry(K key)",Description copied from interface: java.util.NavigableMap
3342,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>","protected Map.Entry<K,V> standardHigherEntry(K key)","A sensible definition of higherEntry(K) in terms of the firstEntry() of tailMap(Object, boolean). If you override tailMap, you may wish to override higherEntry to forward to this implementation."
3343,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>",public K higherKey(K key),Description copied from interface: java.util.NavigableMap
3344,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>",protected K standardHigherKey(K key),"A sensible definition of higherKey(K) in terms of higherEntry. If you override higherEntry, you may wish to override higherKey to forward to this implementation."
3345,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>","public Map.Entry<K,V> firstEntry()",Description copied from interface: java.util.NavigableMap
3346,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>","protected Map.Entry<K,V> standardFirstEntry()","A sensible definition of firstEntry() in terms of the iterator() of ForwardingMap.entrySet(). If you override entrySet, you may wish to override firstEntry to forward to this implementation."
3347,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>",protected K standardFirstKey(),"A sensible definition of ForwardingSortedMap.firstKey() in terms of firstEntry. If you override firstEntry, you may wish to override firstKey to forward to this implementation."
3348,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>","public Map.Entry<K,V> lastEntry()",Description copied from interface: java.util.NavigableMap
3349,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>","protected Map.Entry<K,V> standardLastEntry()","A sensible definition of lastEntry() in terms of the iterator() of the ForwardingMap.entrySet() of descendingMap(). If you override descendingMap, you may wish to override lastEntry to forward to this implementation."
3350,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>",protected K standardLastKey(),"A sensible definition of ForwardingSortedMap.lastKey() in terms of lastEntry. If you override lastEntry, you may wish to override lastKey to forward to this implementation."
3351,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>","public Map.Entry<K,V> pollFirstEntry()",Description copied from interface: java.util.NavigableMap
3352,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>","protected Map.Entry<K,V> standardPollFirstEntry()","A sensible definition of pollFirstEntry() in terms of the iterator of entrySet. If you override entrySet, you may wish to override pollFirstEntry to forward to this implementation."
3353,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>","public Map.Entry<K,V> pollLastEntry()",Description copied from interface: java.util.NavigableMap
3354,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>","protected Map.Entry<K,V> standardPollLastEntry()","A sensible definition of pollFirstEntry() in terms of the iterator of the entrySet of descendingMap. If you override descendingMap, you may wish to override pollFirstEntry to forward to this implementation."
3355,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>","public NavigableMap<K,V> descendingMap()",Description copied from interface: java.util.NavigableMap
3356,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>",public NavigableSet<K> navigableKeySet(),Description copied from interface: java.util.NavigableMap
3357,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>",public NavigableSet<K> descendingKeySet(),Description copied from interface: java.util.NavigableMap
3358,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>",@Betaprotected NavigableSet<K> standardDescendingKeySet(),"A sensible definition of descendingKeySet() as the navigableKeySet of descendingMap(). (The ForwardingNavigableMap.StandardDescendingMap implementation implements navigableKeySet on its own, so as not to cause an infinite loop.) If you override descendingMap, you may wish to override descendingKeySet to forward to this implementation."
3359,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>","protected SortedMap<K,V> standardSubMap(K fromKey, K toKey)","A sensible definition of ForwardingSortedMap.subMap(Object, Object) in terms of subMap(Object, boolean, Object, boolean). If you override subMap(K, boolean, K, boolean), you may wish to override subMap to forward to this implementation."
3360,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>","public NavigableMap<K,V> subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)",Description copied from interface: java.util.NavigableMap
3361,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>","public NavigableMap<K,V> headMap(K toKey, boolean inclusive)",Description copied from interface: java.util.NavigableMap
3362,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>","public NavigableMap<K,V> tailMap(K fromKey, boolean inclusive)",Description copied from interface: java.util.NavigableMap
3363,common/collect,com.google.common.collect,"Class ForwardingNavigableMap<K,V>","protected SortedMap<K,V> standardHeadMap(K toKey)","A sensible definition of ForwardingSortedMap.headMap(Object) in terms of headMap(Object, boolean). If you override headMap(K, boolean), you may wish to override headMap to forward to this implementation."
3364,common/collect,com.google.common.collect,Class ForwardingNavigableSet<E>,protected abstract NavigableSet<E> delegate(),Description copied from class: ForwardingObject
3365,common/collect,com.google.common.collect,Class ForwardingNavigableSet<E>,public E lower(E e),Description copied from interface: java.util.NavigableSet
3366,common/collect,com.google.common.collect,Class ForwardingNavigableSet<E>,protected E standardLower(E e),"A sensible definition of lower(E) in terms of the descendingIterator method of headSet(Object, boolean). If you override headSet(Object, boolean), you may wish to override lower(E) to forward to this implementation."
3367,common/collect,com.google.common.collect,Class ForwardingNavigableSet<E>,public E floor(E e),Description copied from interface: java.util.NavigableSet
3368,common/collect,com.google.common.collect,Class ForwardingNavigableSet<E>,protected E standardFloor(E e),"A sensible definition of floor(E) in terms of the descendingIterator method of headSet(Object, boolean). If you override headSet(Object, boolean), you may wish to override floor(E) to forward to this implementation."
3369,common/collect,com.google.common.collect,Class ForwardingNavigableSet<E>,public E ceiling(E e),Description copied from interface: java.util.NavigableSet
3370,common/collect,com.google.common.collect,Class ForwardingNavigableSet<E>,protected E standardCeiling(E e),"A sensible definition of ceiling(E) in terms of the iterator method of tailSet(Object, boolean). If you override tailSet(Object, boolean), you may wish to override ceiling(E) to forward to this implementation."
3371,common/collect,com.google.common.collect,Class ForwardingNavigableSet<E>,public E higher(E e),Description copied from interface: java.util.NavigableSet
3372,common/collect,com.google.common.collect,Class ForwardingNavigableSet<E>,protected E standardHigher(E e),"A sensible definition of higher(E) in terms of the iterator method of tailSet(Object, boolean). If you override tailSet(Object, boolean), you may wish to override higher(E) to forward to this implementation."
3373,common/collect,com.google.common.collect,Class ForwardingNavigableSet<E>,public E pollFirst(),Description copied from interface: java.util.NavigableSet
3374,common/collect,com.google.common.collect,Class ForwardingNavigableSet<E>,protected E standardPollFirst(),A sensible definition of pollFirst() in terms of the iterator method. If you override ForwardingCollection.iterator() you may wish to override pollFirst() to forward to this implementation.
3375,common/collect,com.google.common.collect,Class ForwardingNavigableSet<E>,public E pollLast(),Description copied from interface: java.util.NavigableSet
3376,common/collect,com.google.common.collect,Class ForwardingNavigableSet<E>,protected E standardPollLast(),A sensible definition of pollLast() in terms of the descendingIterator method. If you override descendingIterator() you may wish to override pollLast() to forward to this implementation.
3377,common/collect,com.google.common.collect,Class ForwardingNavigableSet<E>,protected E standardFirst(),
3378,common/collect,com.google.common.collect,Class ForwardingNavigableSet<E>,protected E standardLast(),
3379,common/collect,com.google.common.collect,Class ForwardingNavigableSet<E>,public NavigableSet<E> descendingSet(),Description copied from interface: java.util.NavigableSet
3380,common/collect,com.google.common.collect,Class ForwardingNavigableSet<E>,public Iterator<E> descendingIterator(),Description copied from interface: java.util.NavigableSet
3381,common/collect,com.google.common.collect,Class ForwardingNavigableSet<E>,"public NavigableSet<E> subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)",Description copied from interface: java.util.NavigableSet
3382,common/collect,com.google.common.collect,Class ForwardingNavigableSet<E>,"@Betaprotected NavigableSet<E> standardSubSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)","A sensible definition of subSet(Object, boolean, Object, boolean) in terms of the headSet and tailSet methods. In many cases, you may wish to override subSet(Object, boolean, Object, boolean) to forward to this implementation."
3383,common/collect,com.google.common.collect,Class ForwardingNavigableSet<E>,"protected SortedSet<E> standardSubSet(E fromElement, E toElement)","A sensible definition of ForwardingSortedSet.subSet(Object, Object) in terms of the subSet(Object, boolean, Object, boolean) method. If you override subSet(Object, boolean, Object, boolean), you may wish to override ForwardingSortedSet.subSet(Object, Object) to forward to this implementation."
3384,common/collect,com.google.common.collect,Class ForwardingNavigableSet<E>,"public NavigableSet<E> headSet(E toElement, boolean inclusive)",Description copied from interface: java.util.NavigableSet
3385,common/collect,com.google.common.collect,Class ForwardingNavigableSet<E>,protected SortedSet<E> standardHeadSet(E toElement),"A sensible definition of ForwardingSortedSet.headSet(Object) in terms of the headSet(Object, boolean) method. If you override headSet(Object, boolean), you may wish to override ForwardingSortedSet.headSet(Object) to forward to this implementation."
3386,common/collect,com.google.common.collect,Class ForwardingNavigableSet<E>,"public NavigableSet<E> tailSet(E fromElement, boolean inclusive)",Description copied from interface: java.util.NavigableSet
3387,common/collect,com.google.common.collect,Class ForwardingObject,protected abstract Object delegate(),"Returns the backing delegate instance that methods are forwarded to. Abstract subclasses generally override this method with an abstract method that has a more specific return type, such as ForwardingSet.delegate(). Concrete subclasses override this method to supply the instance being decorated."
3388,common/collect,com.google.common.collect,Class ForwardingQueue<E>,protected abstract Queue<E> delegate(),Description copied from class: ForwardingObject
3389,common/collect,com.google.common.collect,Class ForwardingQueue<E>,@CanIgnoreReturnValuepublic boolean offer(E o),Description copied from interface: java.util.Queue
3390,common/collect,com.google.common.collect,Class ForwardingQueue<E>,@CanIgnoreReturnValuepublic E poll(),Description copied from interface: java.util.Queue
3391,common/collect,com.google.common.collect,Class ForwardingQueue<E>,@CanIgnoreReturnValuepublic E remove(),Description copied from interface: java.util.Queue
3392,common/collect,com.google.common.collect,Class ForwardingQueue<E>,public E peek(),Description copied from interface: java.util.Queue
3393,common/collect,com.google.common.collect,Class ForwardingQueue<E>,public E element(),Description copied from interface: java.util.Queue
3394,common/collect,com.google.common.collect,Class ForwardingQueue<E>,protected boolean standardOffer(E e),"A sensible definition of offer(E) in terms of ForwardingCollection.add(E). If you override ForwardingCollection.add(E), you may wish to override offer(E) to forward to this implementation."
3395,common/collect,com.google.common.collect,Class ForwardingQueue<E>,protected E standardPeek(),"A sensible definition of peek() in terms of element(). If you override element(), you may wish to override peek() to forward to this implementation."
3396,common/collect,com.google.common.collect,Class ForwardingSet<E>,protected abstract Set<E> delegate(),Description copied from class: ForwardingObject
3397,common/collect,com.google.common.collect,Class ForwardingSet<E>,public boolean equals(@Nullable Object object),Description copied from class: java.lang.Object
3398,common/collect,com.google.common.collect,Class ForwardingSet<E>,public int hashCode(),Description copied from class: java.lang.Object
3399,common/collect,com.google.common.collect,Class ForwardingSet<E>,protected boolean standardRemoveAll(Collection<?> collection),"A sensible definition of ForwardingCollection.removeAll(java.util.Collection<?>) in terms of ForwardingCollection.iterator() and ForwardingCollection.remove(java.lang.Object). If you override iterator or remove, you may wish to override ForwardingCollection.removeAll(java.util.Collection<?>) to forward to this implementation."
3400,common/collect,com.google.common.collect,Class ForwardingSet<E>,protected boolean standardEquals(@Nullable Object object),"A sensible definition of equals(java.lang.Object) in terms of ForwardingCollection.size() and ForwardingCollection.containsAll(java.util.Collection<?>). If you override either of those methods, you may wish to override equals(java.lang.Object) to forward to this implementation."
3401,common/collect,com.google.common.collect,"Class ForwardingSetMultimap<K,V>","protected abstract SetMultimap<K,V> delegate()",Description copied from class: ForwardingObject
3402,common/collect,com.google.common.collect,"Class ForwardingSetMultimap<K,V>","public Set<Map.Entry<K,V>> entries()",Description copied from interface: Multimap
3403,common/collect,com.google.common.collect,"Class ForwardingSetMultimap<K,V>",public Set<V> get(K key),Description copied from interface: Multimap
3404,common/collect,com.google.common.collect,"Class ForwardingSetMultimap<K,V>",@CanIgnoreReturnValuepublic Set<V> removeAll(@Nullable Object key),Description copied from interface: Multimap
3405,common/collect,com.google.common.collect,"Class ForwardingSortedMap<K,V>","protected abstract SortedMap<K,V> delegate()",Description copied from class: ForwardingObject
3406,common/collect,com.google.common.collect,"Class ForwardingSortedMap<K,V>",public Comparator<? super K> comparator(),Description copied from interface: java.util.SortedMap
3407,common/collect,com.google.common.collect,"Class ForwardingSortedMap<K,V>",public K firstKey(),Description copied from interface: java.util.SortedMap
3408,common/collect,com.google.common.collect,"Class ForwardingSortedMap<K,V>","public SortedMap<K,V> headMap(K toKey)",Description copied from interface: java.util.SortedMap
3409,common/collect,com.google.common.collect,"Class ForwardingSortedMap<K,V>",public K lastKey(),Description copied from interface: java.util.SortedMap
3410,common/collect,com.google.common.collect,"Class ForwardingSortedMap<K,V>","public SortedMap<K,V> subMap(K fromKey, K toKey)",Description copied from interface: java.util.SortedMap
3411,common/collect,com.google.common.collect,"Class ForwardingSortedMap<K,V>","public SortedMap<K,V> tailMap(K fromKey)",Description copied from interface: java.util.SortedMap
3412,common/collect,com.google.common.collect,"Class ForwardingSortedMap<K,V>",@Betaprotected boolean standardContainsKey(@Nullable Object key),"A sensible definition of ForwardingMap.containsKey(java.lang.Object) in terms of the firstKey() method of tailMap(K). If you override tailMap(K), you may wish to override ForwardingMap.containsKey(java.lang.Object) to forward to this implementation."
3413,common/collect,com.google.common.collect,Class ForwardingSortedMultiset<E>,protected abstract SortedMultiset<E> delegate(),Description copied from class: ForwardingObject
3414,common/collect,com.google.common.collect,Class ForwardingSortedMultiset<E>,public NavigableSet<E> elementSet(),Description copied from interface: Multiset
3415,common/collect,com.google.common.collect,Class ForwardingSortedMultiset<E>,public Comparator<? super E> comparator(),Description copied from interface: SortedMultiset
3416,common/collect,com.google.common.collect,Class ForwardingSortedMultiset<E>,public SortedMultiset<E> descendingMultiset(),Description copied from interface: SortedMultiset
3417,common/collect,com.google.common.collect,Class ForwardingSortedMultiset<E>,public Multiset.Entry<E> firstEntry(),Description copied from interface: SortedMultiset
3418,common/collect,com.google.common.collect,Class ForwardingSortedMultiset<E>,protected Multiset.Entry<E> standardFirstEntry(),"A sensible definition of firstEntry() in terms of entrySet().iterator(). If you override ForwardingMultiset.entrySet(), you may wish to override firstEntry() to forward to this implementation."
3419,common/collect,com.google.common.collect,Class ForwardingSortedMultiset<E>,public Multiset.Entry<E> lastEntry(),Description copied from interface: SortedMultiset
3420,common/collect,com.google.common.collect,Class ForwardingSortedMultiset<E>,protected Multiset.Entry<E> standardLastEntry(),"A sensible definition of lastEntry() in terms of descendingMultiset().entrySet().iterator(). If you override descendingMultiset() or ForwardingMultiset.entrySet(), you may wish to override firstEntry() to forward to this implementation."
3421,common/collect,com.google.common.collect,Class ForwardingSortedMultiset<E>,public Multiset.Entry<E> pollFirstEntry(),Description copied from interface: SortedMultiset
3422,common/collect,com.google.common.collect,Class ForwardingSortedMultiset<E>,protected Multiset.Entry<E> standardPollFirstEntry(),"A sensible definition of pollFirstEntry() in terms of entrySet().iterator(). If you override ForwardingMultiset.entrySet(), you may wish to override pollFirstEntry() to forward to this implementation."
3423,common/collect,com.google.common.collect,Class ForwardingSortedMultiset<E>,public Multiset.Entry<E> pollLastEntry(),Description copied from interface: SortedMultiset
3424,common/collect,com.google.common.collect,Class ForwardingSortedMultiset<E>,protected Multiset.Entry<E> standardPollLastEntry(),"A sensible definition of pollLastEntry() in terms of descendingMultiset().entrySet().iterator(). If you override descendingMultiset() or ForwardingMultiset.entrySet(), you may wish to override pollLastEntry() to forward to this implementation."
3425,common/collect,com.google.common.collect,Class ForwardingSortedMultiset<E>,"public SortedMultiset<E> headMultiset(E upperBound, BoundType boundType)",Description copied from interface: SortedMultiset
3426,common/collect,com.google.common.collect,Class ForwardingSortedMultiset<E>,"public SortedMultiset<E> subMultiset(E lowerBound, BoundType lowerBoundType, E upperBound, BoundType upperBoundType)",Description copied from interface: SortedMultiset
3427,common/collect,com.google.common.collect,Class ForwardingSortedMultiset<E>,"protected SortedMultiset<E> standardSubMultiset(E lowerBound, BoundType lowerBoundType, E upperBound, BoundType upperBoundType)","A sensible definition of subMultiset(Object, BoundType, Object, BoundType) in terms of headMultiset and tailMultiset. If you override either of these methods, you may wish to override subMultiset(Object, BoundType, Object, BoundType) to forward to this implementation."
3428,common/collect,com.google.common.collect,Class ForwardingSortedSet<E>,protected abstract SortedSet<E> delegate(),Description copied from class: ForwardingObject
3429,common/collect,com.google.common.collect,Class ForwardingSortedSet<E>,public Comparator<? super E> comparator(),Description copied from interface: java.util.SortedSet
3430,common/collect,com.google.common.collect,Class ForwardingSortedSet<E>,public E first(),Description copied from interface: java.util.SortedSet
3431,common/collect,com.google.common.collect,Class ForwardingSortedSet<E>,public SortedSet<E> headSet(E toElement),Description copied from interface: java.util.SortedSet
3432,common/collect,com.google.common.collect,Class ForwardingSortedSet<E>,public E last(),Description copied from interface: java.util.SortedSet
3433,common/collect,com.google.common.collect,Class ForwardingSortedSet<E>,"public SortedSet<E> subSet(E fromElement, E toElement)",Description copied from interface: java.util.SortedSet
3434,common/collect,com.google.common.collect,Class ForwardingSortedSet<E>,public SortedSet<E> tailSet(E fromElement),Description copied from interface: java.util.SortedSet
3435,common/collect,com.google.common.collect,Class ForwardingSortedSet<E>,@Betaprotected boolean standardContains(@Nullable Object object),"A sensible definition of ForwardingCollection.contains(java.lang.Object) in terms of the first() method of tailSet(E). If you override tailSet(E), you may wish to override ForwardingCollection.contains(java.lang.Object) to forward to this implementation."
3436,common/collect,com.google.common.collect,Class ForwardingSortedSet<E>,@Betaprotected boolean standardRemove(@Nullable Object object),"A sensible definition of ForwardingCollection.remove(java.lang.Object) in terms of the iterator() method of tailSet(E). If you override tailSet(E), you may wish to override ForwardingCollection.remove(java.lang.Object) to forward to this implementation."
3437,common/collect,com.google.common.collect,"Class ForwardingSortedSetMultimap<K,V>","protected abstract SortedSetMultimap<K,V> delegate()",Description copied from class: ForwardingObject
3438,common/collect,com.google.common.collect,"Class ForwardingSortedSetMultimap<K,V>",public SortedSet<V> get(K key),Description copied from interface: Multimap
3439,common/collect,com.google.common.collect,"Class ForwardingSortedSetMultimap<K,V>",public SortedSet<V> removeAll(@Nullable Object key),Description copied from interface: Multimap
3440,common/collect,com.google.common.collect,"Class ForwardingSortedSetMultimap<K,V>","public SortedSet<V> replaceValues(K key, Iterable<? extends V> values)",Description copied from interface: Multimap
3441,common/collect,com.google.common.collect,"Class ForwardingTable<R,C,V>","protected abstract Table<R,C,V> delegate()",Description copied from class: ForwardingObject
3442,common/collect,com.google.common.collect,"Class ForwardingTable<R,C,V>","public Set<Table.Cell<R,C,V>> cellSet()",Description copied from interface: Table
3443,common/collect,com.google.common.collect,"Class ForwardingTable<R,C,V>",public void clear(),Description copied from interface: Table
3444,common/collect,com.google.common.collect,"Class ForwardingTable<R,C,V>","public Map<R,V> column(C columnKey)",Description copied from interface: Table
3445,common/collect,com.google.common.collect,"Class ForwardingTable<R,C,V>",public Set<C> columnKeySet(),Description copied from interface: Table
3446,common/collect,com.google.common.collect,"Class ForwardingTable<R,C,V>","public Map<C,Map<R,V>> columnMap()",Description copied from interface: Table
3447,common/collect,com.google.common.collect,"Class ForwardingTable<R,C,V>","public boolean contains(Object rowKey, Object columnKey)",Description copied from interface: Table
3448,common/collect,com.google.common.collect,"Class ForwardingTable<R,C,V>",public boolean containsColumn(Object columnKey),Description copied from interface: Table
3449,common/collect,com.google.common.collect,"Class ForwardingTable<R,C,V>",public boolean containsRow(Object rowKey),Description copied from interface: Table
3450,common/collect,com.google.common.collect,"Class ForwardingTable<R,C,V>",public boolean containsValue(Object value),Description copied from interface: Table
3451,common/collect,com.google.common.collect,"Class ForwardingTable<R,C,V>","public V get(Object rowKey, Object columnKey)",Description copied from interface: Table
3452,common/collect,com.google.common.collect,"Class ForwardingTable<R,C,V>",public boolean isEmpty(),Description copied from interface: Table
3453,common/collect,com.google.common.collect,"Class ForwardingTable<R,C,V>","@CanIgnoreReturnValuepublic V put(R rowKey, C columnKey, V value)",Description copied from interface: Table
3454,common/collect,com.google.common.collect,"Class ForwardingTable<R,C,V>","public void putAll(Table<? extends R,? extends C,? extends V> table)",Description copied from interface: Table
3455,common/collect,com.google.common.collect,"Class ForwardingTable<R,C,V>","@CanIgnoreReturnValuepublic V remove(Object rowKey, Object columnKey)",Description copied from interface: Table
3456,common/collect,com.google.common.collect,"Class ForwardingTable<R,C,V>","public Map<C,V> row(R rowKey)",Description copied from interface: Table
3457,common/collect,com.google.common.collect,"Class ForwardingTable<R,C,V>",public Set<R> rowKeySet(),Description copied from interface: Table
3458,common/collect,com.google.common.collect,"Class ForwardingTable<R,C,V>","public Map<R,Map<C,V>> rowMap()",Description copied from interface: Table
3459,common/collect,com.google.common.collect,"Class ForwardingTable<R,C,V>",public int size(),Description copied from interface: Table
3460,common/collect,com.google.common.collect,"Class ForwardingTable<R,C,V>",public Collection<V> values(),Description copied from interface: Table
3461,common/collect,com.google.common.collect,"Class ForwardingTable<R,C,V>",public boolean equals(Object obj),Description copied from class: java.lang.Object
3462,common/base,com.google.common.base,"Interface Function<F,T>",@CanIgnoreReturnValueT apply(F input),Description copied from interface: java.util.function.Function
3463,common/base,com.google.common.base,Class Functions,"public static Function<Object,String> toStringFunction()","A function equivalent to the method reference Object::toString, for users not yet using Java 8. The function simply invokes toString on its argument and returns the result. It throws a NullPointerException on null input. Warning: The returned function may not be consistent with equals (as documented at Function.apply(F)). For example, this function yields different results for the two equal instances ImmutableSet.of(1, 2) and ImmutableSet.of(2, 1). Warning: as with all function types in this package, avoid depending on the specific equals, hashCode or toString behavior of the returned function. A future migration to java.util.function will not preserve this behavior. For Java 8 users: use the method reference Object::toString instead. In the future, when this class requires Java 8, this method will be deprecated. See Function for more important information about the Java 8 transition."
3464,common/base,com.google.common.base,Class Functions,"public static <E> Function<E,E> identity()",Returns the identity function.
3465,common/base,com.google.common.base,Class Functions,"public static <K,V> Function<K,V> forMap(Map<K,V> map)","Returns a function which performs a map lookup. The returned function throws an IllegalArgumentException if given a key that does not exist in the map. See also forMap(Map, Object), which returns a default value in this case. Note: if map is a BiMap (or can be one), you can use Maps.asConverter instead to get a function that also supports reverse conversion. Java 8 users: if you are okay with null being returned for an unrecognized key (instead of an exception being thrown), you can use the method reference map::get instead."
3466,common/base,com.google.common.base,Class Functions,"public static <K,V> Function<K,V> forMap(Map<K,? extends V> map, V defaultValue)","Returns a function which performs a map lookup with a default value. The function created by this method returns defaultValue for all inputs that do not belong to the map's key set. See also forMap(Map), which throws an exception in this case. Java 8 users: you can just write the lambda expression k -> map.getOrDefault(k, defaultValue) instead."
3467,common/base,com.google.common.base,Class Functions,"public static <A,B,C> Function<A,C> compose(Function<B,C> g, Function<A,? extends B> f)","Returns the composition of two functions. For f: A->B and g: B->C, composition is defined as the function h such that h(a) == g(f(a)) for each a. Java 8 users: use g.compose(f) or (probably clearer) f.andThen(g) instead."
3468,common/base,com.google.common.base,Class Functions,"public static <T> Function<T,Boolean> forPredicate(Predicate<T> predicate)",Creates a function that returns the same boolean output as the given predicate for all inputs. The returned function is consistent with equals (as documented at Function.apply(F)) if and only if predicate is itself consistent with equals. Java 8 users: use the method reference predicate::test instead.
3469,common/base,com.google.common.base,Class Functions,"public static <E> Function<Object,E> constant(E value)",Returns a function that ignores its input and always returns value. Java 8 users: use the lambda expression o -> value instead.
3470,common/hash,com.google.common.hash,Class Funnels,public static Funnel<byte[]> byteArrayFunnel(),Returns a funnel that extracts the bytes from a byte array.
3471,common/hash,com.google.common.hash,Class Funnels,public static Funnel<CharSequence> unencodedCharsFunnel(),"Returns a funnel that extracts the characters from a CharSequence, a character at a time, without performing any encoding. If you need to use a specific encoding, use stringFunnel(Charset) instead."
3472,common/hash,com.google.common.hash,Class Funnels,public static Funnel<CharSequence> stringFunnel(Charset charset),Returns a funnel that encodes the characters of a CharSequence with the specified Charset.
3473,common/hash,com.google.common.hash,Class Funnels,public static Funnel<Integer> integerFunnel(),Returns a funnel for integers.
3474,common/hash,com.google.common.hash,Class Funnels,public static <E> Funnel<Iterable<? extends E>> sequentialFunnel(Funnel<E> elementFunnel),Returns a funnel that processes an Iterable by funneling its elements in iteration order with the specified funnel. No separators are added between the elements.
3475,common/hash,com.google.common.hash,Class Funnels,public static Funnel<Long> longFunnel(),Returns a funnel for longs.
3476,util/concurrent,com.google.common.util.concurrent,Interface FutureCallback<V>,void onSuccess(V result),Invoked with the result of the Future computation when it is successful.
3477,util/concurrent,com.google.common.util.concurrent,Class Futures,public static <V> ListenableFuture<V> immediateFuture(V value),Creates a ListenableFuture which has its value set immediately upon construction. The getters just return the value. This Future can't be canceled or timed out and its isDone() method always returns true.
3478,util/concurrent,com.google.common.util.concurrent,Class Futures,public static ListenableFuture<Void> immediateVoidFuture(),Returns a successful ListenableFuture<Void>. This method is equivalent to immediateFuture(null) except that it is restricted to produce futures of type Void.
3479,util/concurrent,com.google.common.util.concurrent,Class Futures,public static <V> ListenableFuture<V> immediateFailedFuture(Throwable throwable),"Returns a ListenableFuture which has an exception set immediately upon construction. The returned Future can't be cancelled, and its isDone() method always returns true. Calling get() will immediately throw the provided Throwable wrapped in an ExecutionException."
3480,util/concurrent,com.google.common.util.concurrent,Class Futures,public static <V> ListenableFuture<V> immediateCancelledFuture(),"Creates a ListenableFuture which is cancelled immediately upon construction, so that isCancelled() always returns true."
3481,util/concurrent,com.google.common.util.concurrent,Class Futures,"@Betapublic static <O> ListenableFuture<O> submit(Callable<O> callable, Executor executor)","Executes callable on the specified executor, returning a Future."
3482,util/concurrent,com.google.common.util.concurrent,Class Futures,"@Betapublic static ListenableFuture<Void> submit(Runnable runnable, Executor executor)","Executes runnable on the specified executor, returning a Future that will complete after execution."
3483,util/concurrent,com.google.common.util.concurrent,Class Futures,"@Betapublic static <O> ListenableFuture<O> submitAsync(AsyncCallable<O> callable, Executor executor)","Executes callable on the specified executor, returning a Future."
3484,util/concurrent,com.google.common.util.concurrent,Class Futures,"@Beta @GwtIncompatiblepublic static <O> ListenableFuture<O> scheduleAsync(AsyncCallable<O> callable, Duration delay, ScheduledExecutorService executorService)","Schedules callable on the specified executor, returning a Future."
3485,util/concurrent,com.google.common.util.concurrent,Class Futures,"@Beta @GwtIncompatiblepublic static <O> ListenableFuture<O> scheduleAsync(AsyncCallable<O> callable, long delay, TimeUnit timeUnit, ScheduledExecutorService executorService)","Schedules callable on the specified executor, returning a Future."
3486,util/concurrent,com.google.common.util.concurrent,Class Futures,"@Beta @Partially.GwtIncompatible(value=""AVAILABLE but requires exceptionType to be Throwable.class"")public static <V,X extends Throwable> ListenableFuture<V> catching(ListenableFuture<? extends V> input, Class<X> exceptionType, Function<? super X,? extends V> fallback, Executor executor)","Returns a Future whose result is taken from the given primary input or, if the primary input fails with the given exceptionType, from the result provided by the fallback. Function.apply(F) is not invoked until the primary input has failed, so if the primary input succeeds, it is never invoked. If, during the invocation of fallback, an exception is thrown, this exception is used as the result of the output Future. Usage example: ListenableFuture<Integer> fetchCounterFuture = ...; // Falling back to a zero counter in case an exception happens when // processing the RPC to fetch counters. ListenableFuture<Integer> faultTolerantFuture = Futures.catching( fetchCounterFuture, FetchException.class, x -> 0, directExecutor()); When selecting an executor, note that directExecutor is dangerous in some cases. See the warnings the MoreExecutors.directExecutor() documentation."
3487,util/concurrent,com.google.common.util.concurrent,Class Futures,"@Beta @Partially.GwtIncompatible(value=""AVAILABLE but requires exceptionType to be Throwable.class"")public static <V,X extends Throwable> ListenableFuture<V> catchingAsync(ListenableFuture<? extends V> input, Class<X> exceptionType, AsyncFunction<? super X,? extends V> fallback, Executor executor)","Returns a Future whose result is taken from the given primary input or, if the primary input fails with the given exceptionType, from the result provided by the fallback. AsyncFunction.apply(I) is not invoked until the primary input has failed, so if the primary input succeeds, it is never invoked. If, during the invocation of fallback, an exception is thrown, this exception is used as the result of the output Future. Usage examples: ListenableFuture<Integer> fetchCounterFuture = ...; // Falling back to a zero counter in case an exception happens when // processing the RPC to fetch counters. ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync( fetchCounterFuture, FetchException.class, x -> immediateFuture(0), directExecutor()); The fallback can also choose to propagate the original exception when desired: ListenableFuture<Integer> fetchCounterFuture = ...; // Falling back to a zero counter only in case the exception was a // TimeoutException. ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync( fetchCounterFuture, FetchException.class, e -> { if (omitDataOnFetchFailure) { return immediateFuture(0); } throw e; }, directExecutor()); When selecting an executor, note that directExecutor is dangerous in some cases. See the warnings the MoreExecutors.directExecutor() documentation."
3488,util/concurrent,com.google.common.util.concurrent,Class Futures,"@Beta @GwtIncompatiblepublic static <V> ListenableFuture<V> withTimeout(ListenableFuture<V> delegate, Duration time, ScheduledExecutorService scheduledExecutor)",Returns a future that delegates to another but will finish early (via a TimeoutException wrapped in an ExecutionException) if the specified duration expires. The delegate future is interrupted and cancelled if it times out.
3489,util/concurrent,com.google.common.util.concurrent,Class Futures,"@Beta @GwtIncompatiblepublic static <V> ListenableFuture<V> withTimeout(ListenableFuture<V> delegate, long time, TimeUnit unit, ScheduledExecutorService scheduledExecutor)",Returns a future that delegates to another but will finish early (via a TimeoutException wrapped in an ExecutionException) if the specified duration expires. The delegate future is interrupted and cancelled if it times out.
3490,util/concurrent,com.google.common.util.concurrent,Class Futures,"@Betapublic static <I,O> ListenableFuture<O> transformAsync(ListenableFuture<I> input, AsyncFunction<? super I,? extends O> function, Executor executor)","Returns a new Future whose result is asynchronously derived from the result of the given Future. If the given Future fails, the returned Future fails with the same exception (and the function is not invoked). More precisely, the returned Future takes its result from a Future produced by applying the given AsyncFunction to the result of the original Future. Example usage: ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query); ListenableFuture<QueryResult> queryFuture = transformAsync(rowKeyFuture, dataService::readFuture, executor); When selecting an executor, note that directExecutor is dangerous in some cases. See the warnings the MoreExecutors.directExecutor() documentation. The returned Future attempts to keep its cancellation state in sync with that of the input future and that of the future returned by the chain function. That is, if the returned Future is cancelled, it will attempt to cancel the other two, and if either of the other two is cancelled, the returned Future will receive a callback in which it will attempt to cancel itself."
3491,util/concurrent,com.google.common.util.concurrent,Class Futures,"@Betapublic static <I,O> ListenableFuture<O> transform(ListenableFuture<I> input, Function<? super I,? extends O> function, Executor executor)","Returns a new Future whose result is derived from the result of the given Future. If input fails, the returned Future fails with the same exception (and the function is not invoked). Example usage: ListenableFuture<QueryResult> queryFuture = ...; ListenableFuture<List<Row>> rowsFuture = transform(queryFuture, QueryResult::getRows, executor); When selecting an executor, note that directExecutor is dangerous in some cases. See the warnings the MoreExecutors.directExecutor() documentation. The returned Future attempts to keep its cancellation state in sync with that of the input future. That is, if the returned Future is cancelled, it will attempt to cancel the input, and if the input is cancelled, the returned Future will receive a callback in which it will attempt to cancel itself. An example use of this method is to convert a serializable object returned from an RPC into a POJO."
3492,util/concurrent,com.google.common.util.concurrent,Class Futures,"@Beta @GwtIncompatiblepublic static <I,O> Future<O> lazyTransform(Future<I> input, Function<? super I,? extends O> function)","Like transform(ListenableFuture, Function, Executor) except that the transformation function is invoked on each call to get() on the returned future. The returned Future reflects the input's cancellation state directly, and any attempt to cancel the returned Future is likewise passed through to the input Future. Note that calls to timed get only apply the timeout to the execution of the underlying Future, not to the execution of the transformation function. The primary audience of this method is callers of transform who don't have a ListenableFuture available and do not mind repeated, lazy function evaluation."
3493,util/concurrent,com.google.common.util.concurrent,Class Futures,@Beta @SafeVarargspublic static <V> ListenableFuture<List<V>> allAsList(ListenableFuture<? extends V>... futures),"Creates a new ListenableFuture whose value is a list containing the values of all its input futures, if all succeed. The list of results is in the same order as the input list. This differs from successfulAsList(ListenableFuture[]) in that it will return a failed future if any of the items fails. Canceling this future will attempt to cancel all the component futures, and if any of the provided futures fails or is canceled, this one is, too."
3494,util/concurrent,com.google.common.util.concurrent,Class Futures,@Betapublic static <V> ListenableFuture<List<V>> allAsList(Iterable<? extends ListenableFuture<? extends V>> futures),"Creates a new ListenableFuture whose value is a list containing the values of all its input futures, if all succeed. The list of results is in the same order as the input list. This differs from successfulAsList(Iterable) in that it will return a failed future if any of the items fails. Canceling this future will attempt to cancel all the component futures, and if any of the provided futures fails or is canceled, this one is, too."
3495,util/concurrent,com.google.common.util.concurrent,Class Futures,@Beta @SafeVarargspublic static <V> Futures.FutureCombiner<V> whenAllComplete(ListenableFuture<? extends V>... futures),Creates a Futures.FutureCombiner that processes the completed futures whether or not they're successful. Any failures from the input futures will not be propagated to the returned future.
3496,util/concurrent,com.google.common.util.concurrent,Class Futures,@Betapublic static <V> Futures.FutureCombiner<V> whenAllComplete(Iterable<? extends ListenableFuture<? extends V>> futures),Creates a Futures.FutureCombiner that processes the completed futures whether or not they're successful. Any failures from the input futures will not be propagated to the returned future.
3497,util/concurrent,com.google.common.util.concurrent,Class Futures,@Beta @SafeVarargspublic static <V> Futures.FutureCombiner<V> whenAllSucceed(ListenableFuture<? extends V>... futures),"Creates a Futures.FutureCombiner requiring that all passed in futures are successful. If any input fails, the returned future fails immediately."
3498,util/concurrent,com.google.common.util.concurrent,Class Futures,@Betapublic static <V> Futures.FutureCombiner<V> whenAllSucceed(Iterable<? extends ListenableFuture<? extends V>> futures),"Creates a Futures.FutureCombiner requiring that all passed in futures are successful. If any input fails, the returned future fails immediately."
3499,util/concurrent,com.google.common.util.concurrent,Class Futures,@Betapublic static <V> ListenableFuture<V> nonCancellationPropagating(ListenableFuture<V> future),"Returns a ListenableFuture whose result is set from the supplied future when it completes. Cancelling the supplied future will also cancel the returned future, but cancelling the returned future will have no effect on the supplied future."
3500,util/concurrent,com.google.common.util.concurrent,Class Futures,@Beta @SafeVarargspublic static <V> ListenableFuture<List<V>> successfulAsList(ListenableFuture<? extends V>... futures),"Creates a new ListenableFuture whose value is a list containing the values of all its successful input futures. The list of results is in the same order as the input list, and if any of the provided futures fails or is canceled, its corresponding position will contain null (which is indistinguishable from the future having a successful value of null). The list of results is in the same order as the input list. This differs from allAsList(ListenableFuture[]) in that it's tolerant of failed futures for any of the items, representing them as null in the result list. Canceling this future will attempt to cancel all the component futures."
3501,util/concurrent,com.google.common.util.concurrent,Class Futures,@Betapublic static <V> ListenableFuture<List<V>> successfulAsList(Iterable<? extends ListenableFuture<? extends V>> futures),"Creates a new ListenableFuture whose value is a list containing the values of all its successful input futures. The list of results is in the same order as the input list, and if any of the provided futures fails or is canceled, its corresponding position will contain null (which is indistinguishable from the future having a successful value of null). The list of results is in the same order as the input list. This differs from allAsList(Iterable) in that it's tolerant of failed futures for any of the items, representing them as null in the result list. Canceling this future will attempt to cancel all the component futures."
3502,util/concurrent,com.google.common.util.concurrent,Class Futures,@Betapublic static <T> ImmutableList<ListenableFuture<T>> inCompletionOrder(Iterable<? extends ListenableFuture<? extends T>> futures),"Returns a list of delegate futures that correspond to the futures received in the order that they complete. Delegate futures return the same value or throw the same exception as the corresponding input future returns/throws. In the order that they complete means, for practical purposes, about what you would expect, but there are some subtleties. First, we do guarantee that, if the output future at index n is done, the output future at index n-1 is also done. (But as usual with futures, some listeners for future n may complete before some for future n-1.) However, it is possible, if one input completes with result X and another later with result Y, for Y to come before X in the output future list. (Such races are impossible to solve without global synchronization of all future completions. And they should have little practical impact.) Cancelling a delegate future propagates to input futures once all the delegates complete, either from cancellation or because an input future has completed. If N futures are passed in, and M delegates are cancelled, the remaining M input futures will be cancelled once N - M of the input futures complete. If all the delegates are cancelled, all the input futures will be too."
3503,util/concurrent,com.google.common.util.concurrent,Class Futures,"public static <V> void addCallback(ListenableFuture<V> future, FutureCallback<? super V> callback, Executor executor)","Registers separate success and failure callbacks to be run when the Future's computation is complete or, if the computation is already complete, immediately. The callback is run on executor. There is no guaranteed ordering of execution of callbacks, but any callback added through this method is guaranteed to be called once the computation is complete. Exceptions thrown by a callback will be propagated up to the executor. Any exception thrown during Executor.execute (e.g., a RejectedExecutionException or an exception thrown by direct execution) will be caught and logged. Example: ListenableFuture<QueryResult> future = ...; Executor e = ... addCallback(future, new FutureCallback<QueryResult>() { public void onSuccess(QueryResult result) { storeInCache(result); } public void onFailure(Throwable t) { reportError(t); } }, e); When selecting an executor, note that directExecutor is dangerous in some cases. See the warnings the MoreExecutors.directExecutor() documentation. For a more general interface to attach a completion listener to a Future, see addListener."
3504,util/concurrent,com.google.common.util.concurrent,Class Futures,@CanIgnoreReturnValuepublic static <V> V getDone(Future<V> future) throws ExecutionException,"Returns the result of the input Future, which must have already completed. The benefits of this method are twofold. First, the name getDone suggests to readers that the Future is already done. Second, if buggy code calls getDone on a Future that is still pending, the program will throw instead of block. This can be important for APIs like whenAllComplete(...).call(...), where it is easy to use a new input from the call implementation but forget to add it to the arguments of whenAllComplete. If you are looking for a method to determine whether a given Future is done, use the instance method Future.isDone()."
3505,util/concurrent,com.google.common.util.concurrent,Class Futures,"@Beta @CanIgnoreReturnValue @GwtIncompatiblepublic static <V,X extends Exception> V getChecked(Future<V> future, Class<X> exceptionClass) throws X extends Exception","Returns the result of Future.get(), converting most exceptions to a new instance of the given checked exception type. This reduces boilerplate for a common use of Future in which it is unnecessary to programmatically distinguish between exception types or to extract other information from the exception instance. Exceptions from Future.get are treated as follows: Any ExecutionException has its cause wrapped in an X if the cause is a checked exception, an UncheckedExecutionException if the cause is a RuntimeException, or an ExecutionError if the cause is an Error. Any InterruptedException is wrapped in an X (after restoring the interrupt). Any CancellationException is propagated untouched, as is any other RuntimeException (though get implementations are discouraged from throwing such exceptions). The overall principle is to continue to treat every checked exception as a checked exception, every unchecked exception as an unchecked exception, and every error as an error. In addition, the cause of any ExecutionException is wrapped in order to ensure that the new stack trace matches that of the current thread. Instances of exceptionClass are created by choosing an arbitrary public constructor that accepts zero or more arguments, all of type String or Throwable (preferring constructors with at least one String) and calling the constructor via reflection. If the exception did not already have a cause, one is set by calling Throwable.initCause(Throwable) on it. If no such constructor exists, an IllegalArgumentException is thrown."
3506,util/concurrent,com.google.common.util.concurrent,Class Futures,"@Beta @CanIgnoreReturnValue @GwtIncompatiblepublic static <V,X extends Exception> V getChecked(Future<V> future, Class<X> exceptionClass, Duration timeout) throws X extends Exception","Returns the result of Future.get(long, TimeUnit), converting most exceptions to a new instance of the given checked exception type. This reduces boilerplate for a common use of Future in which it is unnecessary to programmatically distinguish between exception types or to extract other information from the exception instance. Exceptions from Future.get are treated as follows: Any ExecutionException has its cause wrapped in an X if the cause is a checked exception, an UncheckedExecutionException if the cause is a RuntimeException, or an ExecutionError if the cause is an Error. Any InterruptedException is wrapped in an X (after restoring the interrupt). Any TimeoutException is wrapped in an X. Any CancellationException is propagated untouched, as is any other RuntimeException (though get implementations are discouraged from throwing such exceptions). The overall principle is to continue to treat every checked exception as a checked exception, every unchecked exception as an unchecked exception, and every error as an error. In addition, the cause of any ExecutionException is wrapped in order to ensure that the new stack trace matches that of the current thread. Instances of exceptionClass are created by choosing an arbitrary public constructor that accepts zero or more arguments, all of type String or Throwable (preferring constructors with at least one String) and calling the constructor via reflection. If the exception did not already have a cause, one is set by calling Throwable.initCause(Throwable) on it. If no such constructor exists, an IllegalArgumentException is thrown."
3507,util/concurrent,com.google.common.util.concurrent,Class Futures,"@Beta @CanIgnoreReturnValue @GwtIncompatiblepublic static <V,X extends Exception> V getChecked(Future<V> future, Class<X> exceptionClass, long timeout, TimeUnit unit) throws X extends Exception","Returns the result of Future.get(long, TimeUnit), converting most exceptions to a new instance of the given checked exception type. This reduces boilerplate for a common use of Future in which it is unnecessary to programmatically distinguish between exception types or to extract other information from the exception instance. Exceptions from Future.get are treated as follows: Any ExecutionException has its cause wrapped in an X if the cause is a checked exception, an UncheckedExecutionException if the cause is a RuntimeException, or an ExecutionError if the cause is an Error. Any InterruptedException is wrapped in an X (after restoring the interrupt). Any TimeoutException is wrapped in an X. Any CancellationException is propagated untouched, as is any other RuntimeException (though get implementations are discouraged from throwing such exceptions). The overall principle is to continue to treat every checked exception as a checked exception, every unchecked exception as an unchecked exception, and every error as an error. In addition, the cause of any ExecutionException is wrapped in order to ensure that the new stack trace matches that of the current thread. Instances of exceptionClass are created by choosing an arbitrary public constructor that accepts zero or more arguments, all of type String or Throwable (preferring constructors with at least one String) and calling the constructor via reflection. If the exception did not already have a cause, one is set by calling Throwable.initCause(Throwable) on it. If no such constructor exists, an IllegalArgumentException is thrown."
3508,util/concurrent,com.google.common.util.concurrent,Class Futures.FutureCombiner<V>,"public <C> ListenableFuture<C> callAsync(AsyncCallable<C> combiner, Executor executor)","Creates the ListenableFuture which will return the result of calling AsyncCallable.call() in combiner when all futures complete, using the specified executor. If the combiner throws a CancellationException, the returned future will be cancelled. If the combiner throws an ExecutionException, the cause of the thrown ExecutionException will be extracted and returned as the cause of the new ExecutionException that gets thrown by the returned combined future. Canceling this future will attempt to cancel all the component futures."
3509,util/concurrent,com.google.common.util.concurrent,Class Futures.FutureCombiner<V>,"@CanIgnoreReturnValuepublic <C> ListenableFuture<C> call(Callable<C> combiner, Executor executor)","Creates the ListenableFuture which will return the result of calling Callable.call() in combiner when all futures complete, using the specified executor. If the combiner throws a CancellationException, the returned future will be cancelled. If the combiner throws an ExecutionException, the cause of the thrown ExecutionException will be extracted and returned as the cause of the new ExecutionException that gets thrown by the returned combined future. Canceling this future will attempt to cancel all the component futures."
3510,common/graph,com.google.common.graph,Interface Graph<N>,Set<N> nodes(),"Returns all nodes in this graph, in the order specified by nodeOrder()."
3511,common/graph,com.google.common.graph,Interface Graph<N>,Set<EndpointPair<N>> edges(),Returns all edges in this graph.
3512,common/graph,com.google.common.graph,Interface Graph<N>,boolean isDirected(),"Returns true if the edges in this graph are directed. Directed edges connect a source node to a target node, while undirected edges connect a pair of nodes to each other."
3513,common/graph,com.google.common.graph,Interface Graph<N>,boolean allowsSelfLoops(),Returns true if this graph allows self-loops (edges that connect a node to itself). Attempting to add a self-loop to a graph that does not allow them will throw an IllegalArgumentException.
3514,common/graph,com.google.common.graph,Interface Graph<N>,ElementOrder<N> nodeOrder(),Returns the order of iteration for the elements of nodes().
3515,common/graph,com.google.common.graph,Interface Graph<N>,ElementOrder<N> incidentEdgeOrder(),"Returns an ElementOrder that specifies the order of iteration for the elements of edges(), adjacentNodes(Object), predecessors(Object), successors(Object) and incidentEdges(Object)."
3516,common/graph,com.google.common.graph,Interface Graph<N>,Set<N> adjacentNodes(N node),Returns the nodes which have an incident edge in common with node in this graph. This is equal to the union of predecessors(Object) and successors(Object).
3517,common/graph,com.google.common.graph,Interface Graph<N>,Set<N> predecessors(N node),"Returns all nodes in this graph adjacent to node which can be reached by traversing node's incoming edges against the direction (if any) of the edge. In an undirected graph, this is equivalent to adjacentNodes(Object)."
3518,common/graph,com.google.common.graph,Interface Graph<N>,Set<N> successors(N node),"Returns all nodes in this graph adjacent to node which can be reached by traversing node's outgoing edges in the direction (if any) of the edge. In an undirected graph, this is equivalent to adjacentNodes(Object). This is not the same as all nodes reachable from node by following outgoing edges. For that functionality, see Graphs.reachableNodes(Graph, Object)."
3519,common/graph,com.google.common.graph,Interface Graph<N>,Set<EndpointPair<N>> incidentEdges(N node),Returns the edges in this graph whose endpoints include node. This is equal to the union of incoming and outgoing edges.
3520,common/graph,com.google.common.graph,Interface Graph<N>,int degree(N node),"Returns the count of node's incident edges, counting self-loops twice (equivalently, the number of times an edge touches node). For directed graphs, this is equal to inDegree(node) + outDegree(node). For undirected graphs, this is equal to incidentEdges(node).size() + (number of self-loops incident to node). If the count is greater than Integer.MAX_VALUE, returns Integer.MAX_VALUE."
3521,common/graph,com.google.common.graph,Interface Graph<N>,int inDegree(N node),"Returns the count of node's incoming edges (equal to predecessors(node).size()) in a directed graph. In an undirected graph, returns the degree(Object). If the count is greater than Integer.MAX_VALUE, returns Integer.MAX_VALUE."
3522,common/graph,com.google.common.graph,Interface Graph<N>,int outDegree(N node),"Returns the count of node's outgoing edges (equal to successors(node).size()) in a directed graph. In an undirected graph, returns the degree(Object). If the count is greater than Integer.MAX_VALUE, returns Integer.MAX_VALUE."
3523,common/graph,com.google.common.graph,Interface Graph<N>,"boolean hasEdgeConnecting(N nodeU, N nodeV)","Returns true if there is an edge that directly connects nodeU to nodeV. This is equivalent to nodes().contains(nodeU) && successors(nodeU).contains(nodeV). In an undirected graph, this is equal to hasEdgeConnecting(nodeV, nodeU)."
3524,common/graph,com.google.common.graph,Interface Graph<N>,boolean hasEdgeConnecting(EndpointPair<N> endpoints),"Returns true if there is an edge that directly connects endpoints (in the order, if any, specified by endpoints). This is equivalent to edges().contains(endpoints). Unlike the other EndpointPair-accepting methods, this method does not throw if the endpoints are unordered and the graph is directed; it simply returns false. This is for consistency with the behavior of Collection.contains(Object) (which does not generally throw if the object cannot be present in the collection), and the desire to have this method's behavior be compatible with edges().contains(endpoints)."
3525,common/graph,com.google.common.graph,Interface Graph<N>,boolean equals(@Nullable Object object),"Returns true iff object is a Graph that has the same elements and the same structural relationships as those in this graph. Thus, two graphs A and B are equal if all of the following are true: A and B have equal directedness. A and B have equal node sets. A and B have equal edge sets. Graph properties besides directedness do not affect equality. For example, two graphs may be considered equal even if one allows self-loops and the other doesn't. Additionally, the order in which nodes or edges are added to the graph, and the order in which they are iterated over, are irrelevant. A reference implementation of this is provided by AbstractGraph.equals(Object)."
3526,common/graph,com.google.common.graph,Class GraphBuilder<N>,public static GraphBuilder<Object> directed(),Returns a GraphBuilder for building directed graphs.
3527,common/graph,com.google.common.graph,Class GraphBuilder<N>,public static GraphBuilder<Object> undirected(),Returns a GraphBuilder for building undirected graphs.
3528,common/graph,com.google.common.graph,Class GraphBuilder<N>,public static <N> GraphBuilder<N> from(Graph<N> graph),"Returns a GraphBuilder initialized with all properties queryable from graph. The queryable properties are those that are exposed through the Graph interface, such as Graph.isDirected(). Other properties, such as expectedNodeCount(int), are not set in the new builder."
3529,common/graph,com.google.common.graph,Class GraphBuilder<N>,public <N1 extends N> ImmutableGraph.Builder<N1> immutable(),"Returns an ImmutableGraph.Builder with the properties of this GraphBuilder. The returned builder can be used for populating an ImmutableGraph. Note that the returned builder will always have incidentEdgeOrder(com.google.common.graph.ElementOrder<N1>) set to ElementOrder.stable(), regardless of the value that was set in this builder."
3530,common/graph,com.google.common.graph,Class GraphBuilder<N>,public GraphBuilder<N> allowsSelfLoops(boolean allowsSelfLoops),Specifies whether the graph will allow self-loops (edges that connect a node to itself). Attempting to add a self-loop to a graph that does not allow them will throw an UnsupportedOperationException. The default value is false.
3531,common/graph,com.google.common.graph,Class GraphBuilder<N>,public GraphBuilder<N> expectedNodeCount(int expectedNodeCount),Specifies the expected number of nodes in the graph.
3532,common/graph,com.google.common.graph,Class GraphBuilder<N>,public <N1 extends N> GraphBuilder<N1> nodeOrder(ElementOrder<N1> nodeOrder),Specifies the order of iteration for the elements of Graph.nodes(). The default value is insertion order.
3533,common/graph,com.google.common.graph,Class GraphBuilder<N>,public <N1 extends N> GraphBuilder<N1> incidentEdgeOrder(ElementOrder<N1> incidentEdgeOrder),"Specifies the order of iteration for the elements of Graph.edges(), Graph.adjacentNodes(Object), Graph.predecessors(Object), Graph.successors(Object) and Graph.incidentEdges(Object). The default value is unordered for mutable graphs. For immutable graphs, this value is ignored; they always have a stable order."
3534,common/graph,com.google.common.graph,Class Graphs,public static <N> boolean hasCycle(Graph<N> graph),"Returns true if graph has at least one cycle. A cycle is defined as a non-empty subset of edges in a graph arranged to form a path (a sequence of adjacent outgoing edges) starting and ending with the same node. This method will detect any non-empty cycle, including self-loops (a cycle of length 1)."
3535,common/graph,com.google.common.graph,Class Graphs,"public static boolean hasCycle(Network<?,?> network)","Returns true if network has at least one cycle. A cycle is defined as a non-empty subset of edges in a graph arranged to form a path (a sequence of adjacent outgoing edges) starting and ending with the same node. This method will detect any non-empty cycle, including self-loops (a cycle of length 1)."
3536,common/graph,com.google.common.graph,Class Graphs,public static <N> Graph<N> transitiveClosure(Graph<N> graph),"Returns the transitive closure of graph. The transitive closure of a graph is another graph with an edge connecting node A to node B if node B is reachable from node A. This is a snapshot based on the current topology of graph, rather than a live view of the transitive closure of graph. In other words, the returned Graph will not be updated after modifications to graph."
3537,common/graph,com.google.common.graph,Class Graphs,"public static <N> Set<N> reachableNodes(Graph<N> graph, N node)","Returns the set of nodes that are reachable from node. Node B is defined as reachable from node A if there exists a path (a sequence of adjacent outgoing edges) starting at node A and ending at node B. Note that a node is always reachable from itself via a zero-length path. This is a snapshot based on the current topology of graph, rather than a live view of the set of nodes reachable from node. In other words, the returned Set will not be updated after modifications to graph."
3538,common/graph,com.google.common.graph,Class Graphs,public static <N> Graph<N> transpose(Graph<N> graph),"Returns a view of graph with the direction (if any) of every edge reversed. All other properties remain intact, and further updates to graph will be reflected in the view."
3539,common/graph,com.google.common.graph,Class Graphs,"public static <N,V> ValueGraph<N,V> transpose(ValueGraph<N,V> graph)","Returns a view of graph with the direction (if any) of every edge reversed. All other properties remain intact, and further updates to graph will be reflected in the view."
3540,common/graph,com.google.common.graph,Class Graphs,"public static <N,E> Network<N,E> transpose(Network<N,E> network)","Returns a view of network with the direction (if any) of every edge reversed. All other properties remain intact, and further updates to network will be reflected in the view."
3541,common/graph,com.google.common.graph,Class Graphs,"public static <N> MutableGraph<N> inducedSubgraph(Graph<N> graph, Iterable<? extends N> nodes)","Returns the subgraph of graph induced by nodes. This subgraph is a new graph that contains all of the nodes in nodes, and all of the edges from graph for which both nodes are contained by nodes."
3542,common/graph,com.google.common.graph,Class Graphs,"public static <N,V> MutableValueGraph<N,V> inducedSubgraph(ValueGraph<N,V> graph, Iterable<? extends N> nodes)","Returns the subgraph of graph induced by nodes. This subgraph is a new graph that contains all of the nodes in nodes, and all of the edges (and associated edge values) from graph for which both nodes are contained by nodes."
3543,common/graph,com.google.common.graph,Class Graphs,"public static <N,E> MutableNetwork<N,E> inducedSubgraph(Network<N,E> network, Iterable<? extends N> nodes)","Returns the subgraph of network induced by nodes. This subgraph is a new graph that contains all of the nodes in nodes, and all of the edges from network for which the incident nodes are both contained by nodes."
3544,common/graph,com.google.common.graph,Class Graphs,public static <N> MutableGraph<N> copyOf(Graph<N> graph),Creates a mutable copy of graph with the same nodes and edges.
3545,common/graph,com.google.common.graph,Class Graphs,"public static <N,V> MutableValueGraph<N,V> copyOf(ValueGraph<N,V> graph)","Creates a mutable copy of graph with the same nodes, edges, and edge values."
3546,common/annotations,com.google.common.annotations,Annotation Type GwtCompatible,public abstract boolean serializable,"When true, the annotated type or the type of the method return value is GWT serializable."
3547,common/collect,com.google.common.collect,"Class HashBasedTable<R,C,V>","public static <R,C,V> HashBasedTable<R,C,V> create()",Creates an empty HashBasedTable.
3548,common/collect,com.google.common.collect,"Class HashBasedTable<R,C,V>","public static <R,C,V> HashBasedTable<R,C,V> create(int expectedRows, int expectedCellsPerRow)",Creates an empty HashBasedTable with the specified map sizes.
3549,common/collect,com.google.common.collect,"Class HashBasedTable<R,C,V>","public static <R,C,V> HashBasedTable<R,C,V> create(Table<? extends R,? extends C,? extends V> table)",Creates a HashBasedTable with the same mappings as the specified table.
3550,common/collect,com.google.common.collect,"Class HashBasedTable<R,C,V>","public boolean contains(@Nullable Object rowKey, @Nullable Object columnKey)",Description copied from interface: Table
3551,common/collect,com.google.common.collect,"Class HashBasedTable<R,C,V>",public boolean containsColumn(@Nullable Object columnKey),Description copied from interface: Table
3552,common/collect,com.google.common.collect,"Class HashBasedTable<R,C,V>",public boolean containsRow(@Nullable Object rowKey),Description copied from interface: Table
3553,common/collect,com.google.common.collect,"Class HashBasedTable<R,C,V>",public boolean containsValue(@Nullable Object value),Description copied from interface: Table
3554,common/collect,com.google.common.collect,"Class HashBasedTable<R,C,V>","public V get(@Nullable Object rowKey, @Nullable Object columnKey)",Description copied from interface: Table
3555,common/collect,com.google.common.collect,"Class HashBasedTable<R,C,V>",public boolean equals(@Nullable Object obj),Description copied from class: java.lang.Object
3556,common/collect,com.google.common.collect,"Class HashBasedTable<R,C,V>","@CanIgnoreReturnValuepublic V remove(@Nullable Object rowKey, @Nullable Object columnKey)",Description copied from interface: Table
3557,common/collect,com.google.common.collect,"Class HashBasedTable<R,C,V>",public boolean isEmpty(),Description copied from interface: Table
3558,common/collect,com.google.common.collect,"Class HashBasedTable<R,C,V>",public int size(),Description copied from interface: Table
3559,common/collect,com.google.common.collect,"Class HashBasedTable<R,C,V>",public void clear(),Description copied from interface: Table
3560,common/collect,com.google.common.collect,"Class HashBasedTable<R,C,V>","@CanIgnoreReturnValuepublic V put(R rowKey, C columnKey, V value)",Description copied from interface: Table
3561,common/collect,com.google.common.collect,"Class HashBasedTable<R,C,V>","public Set<Table.Cell<R,C,V>> cellSet()","Returns a set of all row key / column key / value triplets. Changes to the returned set will update the underlying table, and vice versa. The cell set does not support the add or addAll methods. The set's iterator traverses the mappings for the first row, the mappings for the second row, and so on. Each cell is an immutable snapshot of a row key / column key / value mapping, taken at the time the cell is returned by a method call to the set or its iterator."
3562,common/collect,com.google.common.collect,"Class HashBasedTable<R,C,V>","public Map<C,V> row(R rowKey)",Description copied from interface: Table
3563,common/collect,com.google.common.collect,"Class HashBasedTable<R,C,V>","public Map<R,V> column(C columnKey)","Returns a view of all mappings that have the given column key. For each row key / column key / value mapping in the table with that column key, the returned map associates the row key with the value. If no mappings in the table have the provided column key, an empty map is returned. Changes to the returned map will update the underlying table, and vice versa. The returned map's views have iterators that don't support remove()."
3564,common/collect,com.google.common.collect,"Class HashBasedTable<R,C,V>",public Set<R> rowKeySet(),Description copied from interface: Table
3565,common/collect,com.google.common.collect,"Class HashBasedTable<R,C,V>",public Set<C> columnKeySet(),"Returns a set of column keys that have one or more values in the table. Changes to the set will update the underlying table, and vice versa. The returned set has an iterator that does not support remove(). The set's iterator traverses the columns of the first row, the columns of the second row, etc., skipping any columns that have appeared previously."
3566,common/collect,com.google.common.collect,"Class HashBasedTable<R,C,V>",public Collection<V> values(),"Returns a collection of all values, which may contain duplicates. Changes to the returned collection will update the underlying table, and vice versa. The collection's iterator traverses the values for the first row, the values for the second row, and so on."
3567,common/collect,com.google.common.collect,"Class HashBasedTable<R,C,V>","public Map<R,Map<C,V>> rowMap()",Description copied from interface: Table
3568,common/collect,com.google.common.collect,"Class HashBasedTable<R,C,V>","public Map<C,Map<R,V>> columnMap()",Description copied from interface: Table
3569,common/collect,com.google.common.collect,"Class HashBasedTable<R,C,V>","public void putAll(Table<? extends R,? extends C,? extends V> table)",Description copied from interface: Table
3570,common/collect,com.google.common.collect,"Class HashBasedTable<R,C,V>",public int hashCode(),Description copied from class: java.lang.Object
3571,common/collect,com.google.common.collect,"Class HashBiMap<K,V>","public static <K,V> HashBiMap<K,V> create()","Returns a new, empty HashBiMap with the default initial capacity (16)."
3572,common/collect,com.google.common.collect,"Class HashBiMap<K,V>","public static <K,V> HashBiMap<K,V> create(int expectedSize)","Constructs a new, empty bimap with the specified expected size."
3573,common/collect,com.google.common.collect,"Class HashBiMap<K,V>","public static <K,V> HashBiMap<K,V> create(Map<? extends K,? extends V> map)",Constructs a new bimap containing initial values from map. The bimap is created with an initial capacity sufficient to hold the mappings in the specified map.
3574,common/collect,com.google.common.collect,"Class HashBiMap<K,V>",public boolean containsKey(@Nullable Object key),Description copied from class: java.util.AbstractMap
3575,common/collect,com.google.common.collect,"Class HashBiMap<K,V>",public boolean containsValue(@Nullable Object value),"Returns true if this BiMap contains an entry whose value is equal to value (or, equivalently, if this inverse view contains a key that is equal to value). Due to the property that values in a BiMap are unique, this will tend to execute in faster-than-linear time."
3576,common/collect,com.google.common.collect,"Class HashBiMap<K,V>",public V get(@Nullable Object key),Description copied from class: java.util.AbstractMap
3577,common/collect,com.google.common.collect,"Class HashBiMap<K,V>","@CanIgnoreReturnValuepublic V put(K key, V value)",Description copied from class: java.util.AbstractMap
3578,common/collect,com.google.common.collect,"Class HashBiMap<K,V>","@CanIgnoreReturnValuepublic V forcePut(K key, V value)",Description copied from interface: BiMap
3579,common/collect,com.google.common.collect,"Class HashBiMap<K,V>",@CanIgnoreReturnValuepublic V remove(@Nullable Object key),Description copied from class: java.util.AbstractMap
3580,common/collect,com.google.common.collect,"Class HashBiMap<K,V>",public void clear(),Description copied from class: java.util.AbstractMap
3581,common/collect,com.google.common.collect,"Class HashBiMap<K,V>",public int size(),Description copied from class: java.util.AbstractMap
3582,common/collect,com.google.common.collect,"Class HashBiMap<K,V>",public Set<K> keySet(),Description copied from class: java.util.AbstractMap
3583,common/collect,com.google.common.collect,"Class HashBiMap<K,V>",public Set<V> values(),Description copied from class: java.util.AbstractMap
3584,common/collect,com.google.common.collect,"Class HashBiMap<K,V>","public void forEach(BiConsumer<? super K,? super V> action)",Description copied from interface: java.util.Map
3585,common/collect,com.google.common.collect,"Class HashBiMap<K,V>","public void replaceAll(BiFunction<? super K,? super V,? extends V> function)",Description copied from interface: java.util.Map
3586,common/collect,com.google.common.collect,"Class HashBiMap<K,V>","public BiMap<V,K> inverse()",Description copied from interface: BiMap
3587,common/hash,com.google.common.hash,Class HashCode,public abstract int bits(),Returns the number of bits in this hash code; a positive multiple of 8.
3588,common/hash,com.google.common.hash,Class HashCode,public abstract int asInt(),"Returns the first four bytes of this hashcode's bytes, converted to an int value in little-endian order."
3589,common/hash,com.google.common.hash,Class HashCode,public abstract long asLong(),"Returns the first eight bytes of this hashcode's bytes, converted to a long value in little-endian order."
3590,common/hash,com.google.common.hash,Class HashCode,public abstract long padToLong(),"If this hashcode has enough bits, returns asLong(), otherwise returns a long value with asBytes() as the least-significant bytes and 0x00 as the remaining most-significant bytes."
3591,common/hash,com.google.common.hash,Class HashCode,public abstract byte[] asBytes(),Returns the value of this hash code as a byte array. The caller may modify the byte array; changes to it will not be reflected in this HashCode object or any other arrays returned by this method.
3592,common/hash,com.google.common.hash,Class HashCode,"@CanIgnoreReturnValuepublic int writeBytesTo(byte[] dest, int offset, int maxLength)",Copies bytes from this hash code into dest.
3593,common/hash,com.google.common.hash,Class HashCode,public static HashCode fromInt(int hash),Creates a 32-bit HashCode representation of the given int value. The underlying bytes are interpreted in little endian order.
3594,common/hash,com.google.common.hash,Class HashCode,public static HashCode fromLong(long hash),Creates a 64-bit HashCode representation of the given long value. The underlying bytes are interpreted in little endian order.
3595,common/hash,com.google.common.hash,Class HashCode,public static HashCode fromBytes(byte[] bytes),Creates a HashCode from a byte array. The array is defensively copied to preserve the immutability contract of HashCode. The array cannot be empty.
3596,common/hash,com.google.common.hash,Class HashCode,public static HashCode fromString(String string),"Creates a HashCode from a hexadecimal (base 16) encoded string. The string must be at least 2 characters long, and contain only valid, lower-cased hexadecimal characters. This method accepts the exact format generated by toString(). If you require more lenient base 16 decoding, please use BaseEncoding.decode(java.lang.CharSequence) (and pass the result to fromBytes(byte[]))."
3597,common/hash,com.google.common.hash,Class HashCode,public final boolean equals(@Nullable Object object),Returns true if object is a HashCode instance with the identical byte representation to this hash code. Security note: this method uses a constant-time (not short-circuiting) implementation to protect against timing attacks.
3598,common/hash,com.google.common.hash,Class HashCode,public final int hashCode(),"Returns a Java hash code for this HashCode instance; this is well-defined (so, for example, you can safely put HashCode instances into a HashSet) but is otherwise probably not what you want to use."
3599,common/hash,com.google.common.hash,Interface Hasher,Hasher putByte(byte b),Description copied from interface: PrimitiveSink
3600,common/hash,com.google.common.hash,Interface Hasher,Hasher putBytes(byte[] bytes),Description copied from interface: PrimitiveSink
3601,common/hash,com.google.common.hash,Interface Hasher,"Hasher putBytes(byte[] bytes, int off, int len)",Description copied from interface: PrimitiveSink
3602,common/hash,com.google.common.hash,Interface Hasher,Hasher putBytes(ByteBuffer bytes),Description copied from interface: PrimitiveSink
3603,common/hash,com.google.common.hash,Interface Hasher,Hasher putShort(short s),Description copied from interface: PrimitiveSink
3604,common/hash,com.google.common.hash,Interface Hasher,Hasher putInt(int i),Description copied from interface: PrimitiveSink
3605,common/hash,com.google.common.hash,Interface Hasher,Hasher putLong(long l),Description copied from interface: PrimitiveSink
3606,common/hash,com.google.common.hash,Interface Hasher,Hasher putFloat(float f),Equivalent to putInt(Float.floatToRawIntBits(f)).
3607,common/hash,com.google.common.hash,Interface Hasher,Hasher putDouble(double d),Equivalent to putLong(Double.doubleToRawLongBits(d)).
3608,common/hash,com.google.common.hash,Interface Hasher,Hasher putBoolean(boolean b),Equivalent to putByte(b ? (byte) 1 : (byte) 0).
3609,common/hash,com.google.common.hash,Interface Hasher,Hasher putChar(char c),Description copied from interface: PrimitiveSink
3610,common/hash,com.google.common.hash,Interface Hasher,Hasher putUnencodedChars(CharSequence charSequence),"Equivalent to processing each char value in the CharSequence, in order. In other words, no character encoding is performed; the low byte and high byte of each char are hashed directly (in that order). The input must not be updated while this method is in progress. Warning: This method will produce different output than most other languages do when running the same hash function on the equivalent input. For cross-language compatibility, use putString(java.lang.CharSequence, java.nio.charset.Charset), usually with a charset of UTF-8. For other use cases, use putUnencodedChars."
3611,common/hash,com.google.common.hash,Interface Hasher,"Hasher putString(CharSequence charSequence, Charset charset)","Equivalent to putBytes(charSequence.toString().getBytes(charset)). Warning: This method, which reencodes the input before hashing it, is useful only for cross-language compatibility. For other use cases, prefer putUnencodedChars(java.lang.CharSequence), which is faster, produces the same output across Java releases, and hashes every char in the input, even if some are invalid."
3612,common/hash,com.google.common.hash,Interface Hasher,"<T> Hasher putObject(T instance, Funnel<? super T> funnel)","A simple convenience for funnel.funnel(object, this)."
3613,common/hash,com.google.common.hash,Interface Hasher,HashCode hash(),Computes a hash code based on the data that have been provided to this hasher. The result is unspecified if this method is called more than once on the same instance.
3614,common/hash,com.google.common.hash,Interface HashFunction,Hasher newHasher(),"Begins a new hash code computation by returning an initialized, stateful Hasher instance that is ready to receive data. Example: HashFunction hf = Hashing.md5(); HashCode hc = hf.newHasher() .putLong(id) .putBoolean(isActive) .hash(); "
3615,common/hash,com.google.common.hash,Interface HashFunction,Hasher newHasher(int expectedInputSize),"Begins a new hash code computation as newHasher(), but provides a hint of the expected size of the input (in bytes). This is only important for non-streaming hash functions (hash functions that need to buffer their whole input before processing any of it)."
3616,common/hash,com.google.common.hash,Interface HashFunction,HashCode hashInt(int input),"Shortcut for newHasher().putInt(input).hash(); returns the hash code for the given int value, interpreted in little-endian byte order. The implementation might perform better than its longhand equivalent, but should not perform worse."
3617,common/hash,com.google.common.hash,Interface HashFunction,HashCode hashLong(long input),"Shortcut for newHasher().putLong(input).hash(); returns the hash code for the given long value, interpreted in little-endian byte order. The implementation might perform better than its longhand equivalent, but should not perform worse."
3618,common/hash,com.google.common.hash,Interface HashFunction,HashCode hashBytes(byte[] input),"Shortcut for newHasher().putBytes(input).hash(). The implementation might perform better than its longhand equivalent, but should not perform worse."
3619,common/hash,com.google.common.hash,Interface HashFunction,"HashCode hashBytes(byte[] input, int off, int len)","Shortcut for newHasher().putBytes(input, off, len).hash(). The implementation might perform better than its longhand equivalent, but should not perform worse."
3620,common/hash,com.google.common.hash,Interface HashFunction,HashCode hashBytes(ByteBuffer input),"Shortcut for newHasher().putBytes(input).hash(). The implementation might perform better than its longhand equivalent, but should not perform worse."
3621,common/hash,com.google.common.hash,Interface HashFunction,HashCode hashUnencodedChars(CharSequence input),"Shortcut for newHasher().putUnencodedChars(input).hash(). The implementation might perform better than its longhand equivalent, but should not perform worse. Note that no character encoding is performed; the low byte and high byte of each char are hashed directly (in that order). Warning: This method will produce different output than most other languages do when running the same hash function on the equivalent input. For cross-language compatibility, use hashString(java.lang.CharSequence, java.nio.charset.Charset), usually with a charset of UTF-8. For other use cases, use hashUnencodedChars."
3622,common/hash,com.google.common.hash,Interface HashFunction,"HashCode hashString(CharSequence input, Charset charset)","Shortcut for newHasher().putString(input, charset).hash(). Characters are encoded using the given Charset. The implementation might perform better than its longhand equivalent, but should not perform worse. Warning: This method, which reencodes the input before hashing it, is useful only for cross-language compatibility. For other use cases, prefer hashUnencodedChars(java.lang.CharSequence), which is faster, produces the same output across Java releases, and hashes every char in the input, even if some are invalid."
3623,common/hash,com.google.common.hash,Interface HashFunction,"<T> HashCode hashObject(T instance, Funnel<? super T> funnel)","Shortcut for newHasher().putObject(instance, funnel).hash(). The implementation might perform better than its longhand equivalent, but should not perform worse."
3624,common/hash,com.google.common.hash,Class Hashing,public static HashFunction goodFastHash(int minimumBits),"Returns a general-purpose, temporary-use, non-cryptographic hash function. The algorithm the returned function implements is unspecified and subject to change without notice. Warning: a new random seed for these functions is chosen each time the Hashing class is loaded. Do not use this method if hash codes may escape the current process in any way, for example being sent over RPC, or saved to disk. For a general-purpose, non-cryptographic hash function that will never change behavior, we suggest murmur3_128(int). Repeated calls to this method on the same loaded Hashing class, using the same value for minimumBits, will return identically-behaving HashFunction instances."
3625,common/hash,com.google.common.hash,Class Hashing,public static HashFunction murmur3_32(int seed),"Returns a hash function implementing the 32-bit murmur3 algorithm, x86 variant (little-endian variant), using the given seed value. The exact C++ equivalent is the MurmurHash3_x86_32 function (Murmur3A)."
3626,common/hash,com.google.common.hash,Class Hashing,public static HashFunction murmur3_32(),"Returns a hash function implementing the 32-bit murmur3 algorithm, x86 variant (little-endian variant), using a seed value of zero. The exact C++ equivalent is the MurmurHash3_x86_32 function (Murmur3A)."
3627,common/hash,com.google.common.hash,Class Hashing,public static HashFunction murmur3_128(int seed),"Returns a hash function implementing the 128-bit murmur3 algorithm, x64 variant (little-endian variant), using the given seed value. The exact C++ equivalent is the MurmurHash3_x64_128 function (Murmur3F)."
3628,common/hash,com.google.common.hash,Class Hashing,public static HashFunction murmur3_128(),"Returns a hash function implementing the 128-bit murmur3 algorithm, x64 variant (little-endian variant), using a seed value of zero. The exact C++ equivalent is the MurmurHash3_x64_128 function (Murmur3F)."
3629,common/hash,com.google.common.hash,Class Hashing,public static HashFunction sipHash24(),Returns a hash function implementing the 64-bit SipHash-2-4 algorithm using a seed value of k = 00 01 02 ....
3630,common/hash,com.google.common.hash,Class Hashing,"public static HashFunction sipHash24(long k0, long k1)",Returns a hash function implementing the 64-bit SipHash-2-4 algorithm using the given seed.
3631,common/hash,com.google.common.hash,Class Hashing,@Deprecatedpublic static HashFunction md5(),"Deprecated. If you must interoperate with a system that requires MD5, then use this method, despite its deprecation. But if you can choose your hash function, avoid MD5, which is neither fast nor secure. As of January 2017, we suggest: For security: sha256() or a higher-level API. For speed: goodFastHash(int), though see its docs for caveats. "
3632,common/hash,com.google.common.hash,Class Hashing,@Deprecatedpublic static HashFunction sha1(),"Deprecated. If you must interoperate with a system that requires SHA-1, then use this method, despite its deprecation. But if you can choose your hash function, avoid SHA-1, which is neither fast nor secure. As of January 2017, we suggest: For security: sha256() or a higher-level API. For speed: goodFastHash(int), though see its docs for caveats. "
3633,common/hash,com.google.common.hash,Class Hashing,public static HashFunction sha256(),Returns a hash function implementing the SHA-256 algorithm (256 hash bits).
3634,common/hash,com.google.common.hash,Class Hashing,public static HashFunction sha384(),Returns a hash function implementing the SHA-384 algorithm (384 hash bits).
3635,common/hash,com.google.common.hash,Class Hashing,public static HashFunction sha512(),Returns a hash function implementing the SHA-512 algorithm (512 hash bits).
3636,common/hash,com.google.common.hash,Class Hashing,public static HashFunction hmacMd5(Key key),"Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the MD5 (128 hash bits) hash function and the given secret key."
3637,common/hash,com.google.common.hash,Class Hashing,public static HashFunction hmacMd5(byte[] key),"Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the MD5 (128 hash bits) hash function and a SecretKeySpec created from the given byte array and the MD5 algorithm."
3638,common/hash,com.google.common.hash,Class Hashing,public static HashFunction hmacSha1(Key key),"Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the SHA-1 (160 hash bits) hash function and the given secret key."
3639,common/hash,com.google.common.hash,Class Hashing,public static HashFunction hmacSha1(byte[] key),"Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the SHA-1 (160 hash bits) hash function and a SecretKeySpec created from the given byte array and the SHA-1 algorithm."
3640,common/hash,com.google.common.hash,Class Hashing,public static HashFunction hmacSha256(Key key),"Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the SHA-256 (256 hash bits) hash function and the given secret key."
3641,common/hash,com.google.common.hash,Class Hashing,public static HashFunction hmacSha256(byte[] key),"Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the SHA-256 (256 hash bits) hash function and a SecretKeySpec created from the given byte array and the SHA-256 algorithm."
3642,common/hash,com.google.common.hash,Class Hashing,public static HashFunction hmacSha512(Key key),"Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the SHA-512 (512 hash bits) hash function and the given secret key."
3643,common/hash,com.google.common.hash,Class Hashing,public static HashFunction hmacSha512(byte[] key),"Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the SHA-512 (512 hash bits) hash function and a SecretKeySpec created from the given byte array and the SHA-512 algorithm."
3644,common/hash,com.google.common.hash,Class Hashing,public static HashFunction crc32c(),"Returns a hash function implementing the CRC32C checksum algorithm (32 hash bits) as described by RFC 3720, Section 12.1. This function is best understood as a checksum rather than a true hash function."
3645,common/hash,com.google.common.hash,Class Hashing,public static HashFunction crc32(),"Returns a hash function implementing the CRC-32 checksum algorithm (32 hash bits). To get the long value equivalent to Checksum.getValue() for a HashCode produced by this function, use HashCode.padToLong(). This function is best understood as a checksum rather than a true hash function."
3646,common/hash,com.google.common.hash,Class Hashing,public static HashFunction adler32(),"Returns a hash function implementing the Adler-32 checksum algorithm (32 hash bits). To get the long value equivalent to Checksum.getValue() for a HashCode produced by this function, use HashCode.padToLong(). This function is best understood as a checksum rather than a true hash function."
3647,common/hash,com.google.common.hash,Class Hashing,public static HashFunction farmHashFingerprint64(),"Returns a hash function implementing FarmHash's Fingerprint64, an open-source algorithm. This is designed for generating persistent fingerprints of strings. It isn't cryptographically secure, but it produces a high-quality hash with fewer collisions than some alternatives we've used in the past. FarmHash fingerprints are encoded by HashCode.asBytes() in little-endian order. This means HashCode.asLong() is guaranteed to return the same value that farmhash::Fingerprint64() would for the same input (when compared using UnsignedLongs's encoding of 64-bit unsigned numbers). This function is best understood as a fingerprint rather than a true hash function."
3648,common/hash,com.google.common.hash,Class Hashing,"public static int consistentHash(HashCode hashCode, int buckets)","Assigns to hashCode a bucket in the range [0, buckets), in a uniform manner that minimizes the need for remapping as buckets grows. That is, consistentHash(h, n) equals: n - 1, with approximate probability 1/nconsistentHash(h, n - 1), otherwise (probability 1 - 1/n) This method is suitable for the common use case of dividing work among buckets that meet the following conditions: You want to assign the same fraction of inputs to each bucket. When you reduce the number of buckets, you can accept that the most recently added buckets will be removed first. More concretely, if you are dividing traffic among tasks, you can decrease the number of tasks from 15 and 10, killing off the final 5 tasks, and consistentHash will handle it. If, however, you are dividing traffic among servers alpha, bravo, and charlie and you occasionally need to take each of the servers offline, consistentHash will be a poor fit: It provides no way for you to specify which of the three buckets is disappearing. Thus, if your buckets change from [alpha, bravo, charlie] to [bravo, charlie], it will assign all the old alpha traffic to bravo and all the old bravo traffic to charlie, rather than letting bravo keep its traffic. See the Wikipedia article on consistent hashing for more information."
3649,common/hash,com.google.common.hash,Class Hashing,"public static int consistentHash(long input, int buckets)","Assigns to input a bucket in the range [0, buckets), in a uniform manner that minimizes the need for remapping as buckets grows. That is, consistentHash(h, n) equals: n - 1, with approximate probability 1/nconsistentHash(h, n - 1), otherwise (probability 1 - 1/n) This method is suitable for the common use case of dividing work among buckets that meet the following conditions: You want to assign the same fraction of inputs to each bucket. When you reduce the number of buckets, you can accept that the most recently added buckets will be removed first. More concretely, if you are dividing traffic among tasks, you can decrease the number of tasks from 15 and 10, killing off the final 5 tasks, and consistentHash will handle it. If, however, you are dividing traffic among servers alpha, bravo, and charlie and you occasionally need to take each of the servers offline, consistentHash will be a poor fit: It provides no way for you to specify which of the three buckets is disappearing. Thus, if your buckets change from [alpha, bravo, charlie] to [bravo, charlie], it will assign all the old alpha traffic to bravo and all the old bravo traffic to charlie, rather than letting bravo keep its traffic. See the Wikipedia article on consistent hashing for more information."
3650,common/hash,com.google.common.hash,Class Hashing,public static HashCode combineOrdered(Iterable<HashCode> hashCodes),"Returns a hash code, having the same bit length as each of the input hash codes, that combines the information of these hash codes in an ordered fashion. That is, whenever two equal hash codes are produced by two calls to this method, it is as likely as possible that each was computed from the same input hash codes in the same order."
3651,common/hash,com.google.common.hash,Class Hashing,public static HashCode combineUnordered(Iterable<HashCode> hashCodes),"Returns a hash code, having the same bit length as each of the input hash codes, that combines the information of these hash codes in an unordered fashion. That is, whenever two equal hash codes are produced by two calls to this method, it is as likely as possible that each was computed from the same input hash codes in some order."
3652,common/hash,com.google.common.hash,Class Hashing,"public static HashFunction concatenating(HashFunction first, HashFunction second, HashFunction... rest)","Returns a hash function which computes its hash code by concatenating the hash codes of the underlying hash functions together. This can be useful if you need to generate hash codes of a specific length. For example, if you need 1024-bit hash codes, you could join two sha512() hash functions together: Hashing.concatenating(Hashing.sha512(), Hashing.sha512())."
3653,common/hash,com.google.common.hash,Class HashingInputStream,@CanIgnoreReturnValuepublic int read() throws IOException,Reads the next byte of data from the underlying input stream and updates the hasher with the byte read.
3654,common/hash,com.google.common.hash,Class HashingInputStream,"@CanIgnoreReturnValuepublic int read(byte[] bytes, int off, int len) throws IOException",Reads the specified bytes of data from the underlying input stream and updates the hasher with the bytes read.
3655,common/hash,com.google.common.hash,Class HashingInputStream,public boolean markSupported(),mark() is not supported for HashingInputStream
3656,common/hash,com.google.common.hash,Class HashingInputStream,public void mark(int readlimit),mark() is not supported for HashingInputStream
3657,common/hash,com.google.common.hash,Class HashingInputStream,public void reset() throws IOException,reset() is not supported for HashingInputStream.
3658,common/hash,com.google.common.hash,Class HashingOutputStream,public void write(int b) throws IOException,Description copied from class: java.io.FilterOutputStream
3659,common/hash,com.google.common.hash,Class HashingOutputStream,"public void write(byte[] bytes, int off, int len) throws IOException",Description copied from class: java.io.FilterOutputStream
3660,common/hash,com.google.common.hash,Class HashingOutputStream,public HashCode hash(),Returns the HashCode based on the data written to this stream. The result is unspecified if this method is called more than once on the same instance.
3661,common/collect,com.google.common.collect,"Class HashMultimap<K,V>","public static <K,V> HashMultimap<K,V> create()","Creates a new, empty HashMultimap with the default initial capacities. This method will soon be deprecated in favor of MultimapBuilder.hashKeys().hashSetValues().build()."
3662,common/collect,com.google.common.collect,"Class HashMultimap<K,V>","public static <K,V> HashMultimap<K,V> create(int expectedKeys, int expectedValuesPerKey)",Constructs an empty HashMultimap with enough capacity to hold the specified numbers of keys and values without rehashing. This method will soon be deprecated in favor of MultimapBuilder.hashKeys(expectedKeys).hashSetValues(expectedValuesPerKey).build().
3663,common/collect,com.google.common.collect,"Class HashMultimap<K,V>","public static <K,V> HashMultimap<K,V> create(Multimap<? extends K,? extends V> multimap)","Constructs a HashMultimap with the same mappings as the specified multimap. If a key-value mapping appears multiple times in the input multimap, it only appears once in the constructed multimap. This method will soon be deprecated in favor of MultimapBuilder.hashKeys().hashSetValues().build(multimap)."
3664,common/collect,com.google.common.collect,"Class HashMultimap<K,V>",public Set<V> get(K key),"Returns a view collection of the values associated with key in this multimap, if any. Note that when containsKey(key) is false, this returns an empty collection, not null. Changes to the returned collection will update the underlying multimap, and vice versa. The returned collection is not serializable. Because a SetMultimap has unique values for a given key, this method returns a Set, instead of the Collection specified in the Multimap interface."
3665,common/collect,com.google.common.collect,"Class HashMultimap<K,V>","public Set<Map.Entry<K,V>> entries()","Returns a view collection of all key-value pairs contained in this multimap, as Map.Entry instances. Changes to the returned collection or the entries it contains will update the underlying multimap, and vice versa. However, adding to the returned collection is not possible. The iterator generated by the returned collection traverses the values for one key, followed by the values of a second key, and so on. Each entry is an immutable snapshot of a key-value mapping in the multimap, taken at the time the entry is returned by a method call to the collection or its iterator. Because a SetMultimap has unique values for a given key, this method returns a Set, instead of the Collection specified in the Multimap interface."
3666,common/collect,com.google.common.collect,"Class HashMultimap<K,V>",@CanIgnoreReturnValuepublic Set<V> removeAll(@Nullable Object key),"Removes all values associated with the key key. Once this method returns, key will not be mapped to any values, so it will not appear in Multimap.keySet(), Multimap.asMap(), or any other views. The returned collection is immutable. Because a SetMultimap has unique values for a given key, this method returns a Set, instead of the Collection specified in the Multimap interface."
3667,common/collect,com.google.common.collect,"Class HashMultimap<K,V>","@CanIgnoreReturnValuepublic Set<V> replaceValues(K key, Iterable<? extends V> values)","Stores a collection of values with the same key, replacing any existing values for that key. If values is empty, this is equivalent to removeAll(key). The returned collection is immutable. Because a SetMultimap has unique values for a given key, this method returns a Set, instead of the Collection specified in the Multimap interface. Any duplicates in values will be stored in the multimap once."
3668,common/collect,com.google.common.collect,"Class HashMultimap<K,V>","public Map<K,Collection<V>> asMap()","Returns a view of this multimap as a Map from each distinct key to the nonempty collection of that key's associated values. Note that this.asMap().get(k) is equivalent to this.get(k) only when k is a key contained in the multimap; otherwise it returns null as opposed to an empty collection. Changes to the returned map or the collections that serve as its values will update the underlying multimap, and vice versa. The map does not support put or putAll, nor do its entries support setValue. Though the method signature doesn't say so explicitly, the returned map has Set values."
3669,common/collect,com.google.common.collect,"Class HashMultimap<K,V>","@CanIgnoreReturnValuepublic boolean put(K key, V value)",Stores a key-value pair in the multimap.
3670,common/collect,com.google.common.collect,"Class HashMultimap<K,V>",public boolean equals(@Nullable Object object),"Compares the specified object to this multimap for equality. Two SetMultimap instances are equal if, for each key, they contain the same values. Equality does not depend on the ordering of keys or values."
3671,common/collect,com.google.common.collect,"Class HashMultimap<K,V>",public int size(),Description copied from interface: Multimap
3672,common/collect,com.google.common.collect,"Class HashMultimap<K,V>",public boolean containsKey(@Nullable Object key),Description copied from interface: Multimap
3673,common/collect,com.google.common.collect,"Class HashMultimap<K,V>",public void clear(),Description copied from interface: Multimap
3674,common/collect,com.google.common.collect,"Class HashMultimap<K,V>",public Collection<V> values(),"Returns a view collection containing the value from each key-value pair contained in this multimap, without collapsing duplicates (so values().size() == size()). Changes to the returned collection will update the underlying multimap, and vice versa. However, adding to the returned collection is not possible. The iterator generated by the returned collection traverses the values for one key, followed by the values of a second key, and so on."
3675,common/collect,com.google.common.collect,"Class HashMultimap<K,V>","public void forEach(BiConsumer<? super K,? super V> action)",Description copied from interface: Multimap
3676,common/collect,com.google.common.collect,"Class HashMultimap<K,V>",public boolean isEmpty(),Description copied from interface: Multimap
3677,common/collect,com.google.common.collect,"Class HashMultimap<K,V>",public boolean containsValue(@Nullable Object value),Description copied from interface: Multimap
3678,common/collect,com.google.common.collect,"Class HashMultimap<K,V>","public boolean containsEntry(@Nullable Object key, @Nullable Object value)",Description copied from interface: Multimap
3679,common/collect,com.google.common.collect,"Class HashMultimap<K,V>","@CanIgnoreReturnValuepublic boolean remove(@Nullable Object key, @Nullable Object value)",Description copied from interface: Multimap
3680,common/collect,com.google.common.collect,"Class HashMultimap<K,V>","@CanIgnoreReturnValuepublic boolean putAll(K key, Iterable<? extends V> values)",Description copied from interface: Multimap
3681,common/collect,com.google.common.collect,"Class HashMultimap<K,V>","@CanIgnoreReturnValuepublic boolean putAll(Multimap<? extends K,? extends V> multimap)",Description copied from interface: Multimap
3682,common/collect,com.google.common.collect,"Class HashMultimap<K,V>",public Set<K> keySet(),Description copied from interface: Multimap
3683,common/collect,com.google.common.collect,"Class HashMultimap<K,V>",public Multiset<K> keys(),Description copied from interface: Multimap
3684,common/collect,com.google.common.collect,"Class HashMultimap<K,V>",public int hashCode(),"Returns the hash code for this multimap. The hash code of a multimap is defined as the hash code of the map view, as returned by Multimap.asMap()."
3685,common/collect,com.google.common.collect,Class HashMultiset<E>,public static <E> HashMultiset<E> create(),"Creates a new, empty HashMultiset using the default initial capacity."
3686,common/collect,com.google.common.collect,Class HashMultiset<E>,public static <E> HashMultiset<E> create(int distinctElements),"Creates a new, empty HashMultiset with the specified expected number of distinct elements."
3687,common/collect,com.google.common.collect,Class HashMultiset<E>,public static <E> HashMultiset<E> create(Iterable<? extends E> elements),Creates a new HashMultiset containing the specified elements. This implementation is highly efficient when elements is itself a Multiset.
3688,common/collect,com.google.common.collect,Class HashMultiset<E>,public Set<Multiset.Entry<E>> entrySet(),"Returns a view of the contents of this multiset, grouped into Multiset.Entry instances, each providing an element of the multiset and the count of that element. This set contains exactly one entry for each distinct element in the multiset (thus it always has the same size as the Multiset.elementSet()). The order of the elements in the element set is unspecified. The entry set is backed by the same data as the multiset, so any change to either is immediately reflected in the other. However, multiset changes may or may not be reflected in any Entry instances already retrieved from the entry set (this is implementation-dependent). Furthermore, implementations are not required to support modifications to the entry set at all, and the Entry instances themselves don't even have methods for modification. See the specific implementation class for more details on how its entry set handles modifications. Invoking Multiset.Entry.getCount() on an entry in the returned set always returns the current count of that element in the multiset, as opposed to the count at the time the entry was retrieved."
3689,common/collect,com.google.common.collect,Class HashMultiset<E>,public void forEachEntry(ObjIntConsumer<? super E> action),Description copied from interface: Multiset
3690,common/collect,com.google.common.collect,Class HashMultiset<E>,public void clear(),Description copied from class: java.util.AbstractCollection
3691,common/collect,com.google.common.collect,Class HashMultiset<E>,public int size(),Description copied from interface: java.util.Collection
3692,common/collect,com.google.common.collect,Class HashMultiset<E>,public Iterator<E> iterator(),Description copied from class: java.util.AbstractCollection
3693,common/collect,com.google.common.collect,Class HashMultiset<E>,public int count(@Nullable Object element),Description copied from interface: Multiset
3694,common/collect,com.google.common.collect,Class HashMultiset<E>,"@CanIgnoreReturnValuepublic int add(E element, int occurrences)","Adds a number of occurrences of an element to this multiset. Note that if occurrences == 1, this method has the identical effect to Multiset.add(Object). This method is functionally equivalent (except in the case of overflow) to the call addAll(Collections.nCopies(element, occurrences)), which would presumably perform much more poorly."
3695,common/collect,com.google.common.collect,Class HashMultiset<E>,"@CanIgnoreReturnValuepublic int remove(@Nullable Object element, int occurrences)",Description copied from interface: Multiset
3696,common/collect,com.google.common.collect,Class HashMultiset<E>,"@CanIgnoreReturnValuepublic int setCount(E element, int count)",Description copied from interface: Multiset
3697,common/collect,com.google.common.collect,Class HashMultiset<E>,public boolean isEmpty(),Description copied from class: java.util.AbstractCollection
3698,common/collect,com.google.common.collect,Class HashMultiset<E>,public boolean contains(@Nullable Object element),Description copied from class: java.util.AbstractCollection
3699,common/collect,com.google.common.collect,Class HashMultiset<E>,@CanIgnoreReturnValuepublic final boolean add(E element),Description copied from class: java.util.AbstractCollection
3700,common/collect,com.google.common.collect,Class HashMultiset<E>,@CanIgnoreReturnValuepublic final boolean remove(@Nullable Object element),Description copied from class: java.util.AbstractCollection
3701,common/collect,com.google.common.collect,Class HashMultiset<E>,"@CanIgnoreReturnValuepublic boolean setCount(E element, int oldCount, int newCount)",Description copied from interface: Multiset
3702,common/collect,com.google.common.collect,Class HashMultiset<E>,@CanIgnoreReturnValuepublic final boolean addAll(Collection<? extends E> elementsToAdd),"Adds all of the elements in the specified collection to this collection (optional operation). The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (This implies that the behavior of this call is undefined if the specified collection is this collection, and this collection is nonempty.) This implementation iterates over the specified collection, and adds each object returned by the iterator to this collection, in turn. Note that this implementation will throw an UnsupportedOperationException unless add is overridden (assuming the specified collection is non-empty). This implementation is highly efficient when elementsToAdd is itself a Multiset."
3703,common/collect,com.google.common.collect,Class HashMultiset<E>,@CanIgnoreReturnValuepublic final boolean removeAll(Collection<?> elementsToRemove),Description copied from class: java.util.AbstractCollection
3704,common/collect,com.google.common.collect,Class HashMultiset<E>,@CanIgnoreReturnValuepublic final boolean retainAll(Collection<?> elementsToRetain),Description copied from class: java.util.AbstractCollection
3705,common/collect,com.google.common.collect,Class HashMultiset<E>,public Set<E> elementSet(),Description copied from interface: Multiset
3706,common/collect,com.google.common.collect,Class HashMultiset<E>,public final boolean equals(@Nullable Object object),"Indicates whether some other object is equal to this one. The equals method implements an equivalence relation on non-null object references: It is reflexive: for any non-null reference value x, x.equals(x) should return true. It is symmetric: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is transitive: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is consistent: for any non-null reference values x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes. This implementation returns true if object is a multiset of the same size and if, for each element, the two multisets have the same count."
3707,common/collect,com.google.common.collect,Class HashMultiset<E>,public final int hashCode(),"Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by HashMap. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the Object.equals(java.lang.Object) method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java™ programming language.) This implementation returns the hash code of Multiset.entrySet()."
3708,common/net,com.google.common.net,Class HostAndPort,public String getHost(),"Returns the portion of this HostAndPort instance that should represent the hostname or IPv4/IPv6 literal. A successful parse does not imply any degree of sanity in this field. For additional validation, see the HostSpecifier class."
3709,common/net,com.google.common.net,Class HostAndPort,public boolean hasPort(),Return true if this instance has a defined port.
3710,common/net,com.google.common.net,Class HostAndPort,public int getPort(),"Get the current port number, failing if no port is defined."
3711,common/net,com.google.common.net,Class HostAndPort,public int getPortOrDefault(int defaultPort),"Returns the current port number, with a default if no port is defined."
3712,common/net,com.google.common.net,Class HostAndPort,"public static HostAndPort fromParts(String host, int port)",Build a HostAndPort instance from separate host and port values. Note: Non-bracketed IPv6 literals are allowed. Use requireBracketsForIPv6() to prohibit these.
3713,common/net,com.google.common.net,Class HostAndPort,public static HostAndPort fromHost(String host),Build a HostAndPort instance from a host only. Note: Non-bracketed IPv6 literals are allowed. Use requireBracketsForIPv6() to prohibit these.
3714,common/net,com.google.common.net,Class HostAndPort,public static HostAndPort fromString(String hostPortString),"Split a freeform string into a host and port, without strict validation. Note that the host-only formats will leave the port field undefined. You can use withDefaultPort(int) to patch in a default value."
3715,common/net,com.google.common.net,Class HostAndPort,public HostAndPort withDefaultPort(int defaultPort),"Provide a default port if the parsed string contained only a host. You can chain this after fromString(String) to include a port in case the port was omitted from the input string. If a port was already provided, then this method is a no-op."
3716,common/net,com.google.common.net,Class HostAndPort,public HostAndPort requireBracketsForIPv6(),"Generate an error if the host might be a non-bracketed IPv6 literal. URI formatting requires that IPv6 literals be surrounded by brackets, like [2001:db8::1]. Chain this call after fromString(String) to increase the strictness of the parser, and disallow IPv6 literals that don't contain these brackets. Note that this parser identifies IPv6 literals solely based on the presence of a colon. To perform actual validation of IP addresses, see the InetAddresses.forString(String) method."
3717,common/net,com.google.common.net,Class HostAndPort,public boolean equals(@Nullable Object other),Description copied from class: java.lang.Object
3718,common/net,com.google.common.net,Class HostAndPort,public int hashCode(),Description copied from class: java.lang.Object
3719,common/net,com.google.common.net,Class HostSpecifier,public static HostSpecifier fromValid(String specifier),"Returns a HostSpecifier built from the provided specifier, which is already known to be valid. If the specifier might be invalid, use from(String) instead. The specifier must be in one of these formats: A domain name, like google.comA IPv4 address string, like 127.0.0.1An IPv6 address string with or without brackets, like [2001:db8::1] or 2001:db8::1"
3720,common/net,com.google.common.net,Class HostSpecifier,public static HostSpecifier from(String specifier) throws ParseException,"Attempts to return a HostSpecifier for the given string, throwing an exception if parsing fails. Always use this method in preference to fromValid(String) for a specifier that is not already known to be valid."
3721,common/net,com.google.common.net,Class HostSpecifier,public static boolean isValid(String specifier),Determines whether specifier represents a valid HostSpecifier as described in the documentation for fromValid(String).
3722,common/net,com.google.common.net,Class HostSpecifier,public boolean equals(@Nullable Object other),Description copied from class: java.lang.Object
3723,common/net,com.google.common.net,Class HostSpecifier,public int hashCode(),Description copied from class: java.lang.Object
3724,common/net,com.google.common.net,Class HttpHeaders,public static final String CACHE_CONTROL,The HTTP Cache-Control header field name.
3725,common/net,com.google.common.net,Class HttpHeaders,public static final String CONTENT_LENGTH,The HTTP Content-Length header field name.
3726,common/net,com.google.common.net,Class HttpHeaders,public static final String CONTENT_TYPE,The HTTP Content-Type header field name.
3727,common/net,com.google.common.net,Class HttpHeaders,public static final String DATE,The HTTP Date header field name.
3728,common/net,com.google.common.net,Class HttpHeaders,public static final String PRAGMA,The HTTP Pragma header field name.
3729,common/net,com.google.common.net,Class HttpHeaders,public static final String VIA,The HTTP Via header field name.
3730,common/net,com.google.common.net,Class HttpHeaders,public static final String WARNING,The HTTP Warning header field name.
3731,common/net,com.google.common.net,Class HttpHeaders,public static final String ACCEPT,The HTTP Accept header field name.
3732,common/net,com.google.common.net,Class HttpHeaders,public static final String ACCEPT_CHARSET,The HTTP Accept-Charset header field name.
3733,common/net,com.google.common.net,Class HttpHeaders,public static final String ACCEPT_ENCODING,The HTTP Accept-Encoding header field name.
3734,common/net,com.google.common.net,Class HttpHeaders,public static final String ACCEPT_LANGUAGE,The HTTP Accept-Language header field name.
3735,common/net,com.google.common.net,Class HttpHeaders,public static final String ACCESS_CONTROL_REQUEST_HEADERS,The HTTP Access-Control-Request-Headers header field name.
3736,common/net,com.google.common.net,Class HttpHeaders,public static final String ACCESS_CONTROL_REQUEST_METHOD,The HTTP Access-Control-Request-Method header field name.
3737,common/net,com.google.common.net,Class HttpHeaders,public static final String AUTHORIZATION,The HTTP Authorization header field name.
3738,common/net,com.google.common.net,Class HttpHeaders,public static final String CONNECTION,The HTTP Connection header field name.
3739,common/net,com.google.common.net,Class HttpHeaders,public static final String COOKIE,The HTTP Cookie header field name.
3740,common/net,com.google.common.net,Class HttpHeaders,public static final String CROSS_ORIGIN_RESOURCE_POLICY,The HTTP Cross-Origin-Resource-Policy header field name.
3741,common/net,com.google.common.net,Class HttpHeaders,public static final String EARLY_DATA,The HTTP Early-Data header field name.
3742,common/net,com.google.common.net,Class HttpHeaders,public static final String EXPECT,The HTTP Expect header field name.
3743,common/net,com.google.common.net,Class HttpHeaders,public static final String FROM,The HTTP From header field name.
3744,common/net,com.google.common.net,Class HttpHeaders,public static final String FORWARDED,The HTTP Forwarded header field name.
3745,common/net,com.google.common.net,Class HttpHeaders,@Betapublic static final String FOLLOW_ONLY_WHEN_PRERENDER_SHOWN,The HTTP Follow-Only-When-Prerender-Shown header field name.
3746,common/net,com.google.common.net,Class HttpHeaders,public static final String HOST,The HTTP Host header field name.
3747,common/net,com.google.common.net,Class HttpHeaders,public static final String HTTP2_SETTINGS,The HTTP HTTP2-Settings header field name.
3748,common/net,com.google.common.net,Class HttpHeaders,public static final String IF_MATCH,The HTTP If-Match header field name.
3749,common/net,com.google.common.net,Class HttpHeaders,public static final String IF_MODIFIED_SINCE,The HTTP If-Modified-Since header field name.
3750,common/net,com.google.common.net,Class HttpHeaders,public static final String IF_NONE_MATCH,The HTTP If-None-Match header field name.
3751,common/net,com.google.common.net,Class HttpHeaders,public static final String IF_RANGE,The HTTP If-Range header field name.
3752,common/net,com.google.common.net,Class HttpHeaders,public static final String IF_UNMODIFIED_SINCE,The HTTP If-Unmodified-Since header field name.
3753,common/net,com.google.common.net,Class HttpHeaders,public static final String LAST_EVENT_ID,The HTTP Last-Event-ID header field name.
3754,common/net,com.google.common.net,Class HttpHeaders,public static final String MAX_FORWARDS,The HTTP Max-Forwards header field name.
3755,common/net,com.google.common.net,Class HttpHeaders,public static final String ORIGIN,The HTTP Origin header field name.
3756,common/net,com.google.common.net,Class HttpHeaders,public static final String ORIGIN_ISOLATION,The HTTP Origin-Isolation header field name.
3757,common/net,com.google.common.net,Class HttpHeaders,public static final String PROXY_AUTHORIZATION,The HTTP Proxy-Authorization header field name.
3758,common/net,com.google.common.net,Class HttpHeaders,public static final String RANGE,The HTTP Range header field name.
3759,common/net,com.google.common.net,Class HttpHeaders,public static final String REFERER,The HTTP Referer header field name.
3760,common/net,com.google.common.net,Class HttpHeaders,public static final String REFERRER_POLICY,The HTTP Referrer-Policy header field name.
3761,common/net,com.google.common.net,Class HttpHeaders,public static final String SERVICE_WORKER,The HTTP Service-Worker header field name.
3762,common/net,com.google.common.net,Class HttpHeaders,public static final String TE,The HTTP TE header field name.
3763,common/net,com.google.common.net,Class HttpHeaders,public static final String UPGRADE,The HTTP Upgrade header field name.
3764,common/net,com.google.common.net,Class HttpHeaders,public static final String UPGRADE_INSECURE_REQUESTS,The HTTP Upgrade-Insecure-Requests header field name.
3765,common/net,com.google.common.net,Class HttpHeaders,public static final String USER_AGENT,The HTTP User-Agent header field name.
3766,common/net,com.google.common.net,Class HttpHeaders,public static final String ACCEPT_RANGES,The HTTP Accept-Ranges header field name.
3767,common/net,com.google.common.net,Class HttpHeaders,public static final String ACCESS_CONTROL_ALLOW_HEADERS,The HTTP Access-Control-Allow-Headers header field name.
3768,common/net,com.google.common.net,Class HttpHeaders,public static final String ACCESS_CONTROL_ALLOW_METHODS,The HTTP Access-Control-Allow-Methods header field name.
3769,common/net,com.google.common.net,Class HttpHeaders,public static final String ACCESS_CONTROL_ALLOW_ORIGIN,The HTTP Access-Control-Allow-Origin header field name.
3770,common/net,com.google.common.net,Class HttpHeaders,public static final String ACCESS_CONTROL_ALLOW_CREDENTIALS,The HTTP Access-Control-Allow-Credentials header field name.
3771,common/net,com.google.common.net,Class HttpHeaders,public static final String ACCESS_CONTROL_EXPOSE_HEADERS,The HTTP Access-Control-Expose-Headers header field name.
3772,common/net,com.google.common.net,Class HttpHeaders,public static final String ACCESS_CONTROL_MAX_AGE,The HTTP Access-Control-Max-Age header field name.
3773,common/net,com.google.common.net,Class HttpHeaders,public static final String AGE,The HTTP Age header field name.
3774,common/net,com.google.common.net,Class HttpHeaders,public static final String ALLOW,The HTTP Allow header field name.
3775,common/net,com.google.common.net,Class HttpHeaders,public static final String CONTENT_DISPOSITION,The HTTP Content-Disposition header field name.
3776,common/net,com.google.common.net,Class HttpHeaders,public static final String CONTENT_ENCODING,The HTTP Content-Encoding header field name.
3777,common/net,com.google.common.net,Class HttpHeaders,public static final String CONTENT_LANGUAGE,The HTTP Content-Language header field name.
3778,common/net,com.google.common.net,Class HttpHeaders,public static final String CONTENT_LOCATION,The HTTP Content-Location header field name.
3779,common/net,com.google.common.net,Class HttpHeaders,public static final String CONTENT_MD5,The HTTP Content-MD5 header field name.
3780,common/net,com.google.common.net,Class HttpHeaders,public static final String CONTENT_RANGE,The HTTP Content-Range header field name.
3781,common/net,com.google.common.net,Class HttpHeaders,public static final String CONTENT_SECURITY_POLICY,The HTTP Content-Security-Policy header field name.
3782,common/net,com.google.common.net,Class HttpHeaders,public static final String CONTENT_SECURITY_POLICY_REPORT_ONLY,The HTTP Content-Security-Policy-Report-Only header field name.
3783,common/net,com.google.common.net,Class HttpHeaders,public static final String X_CONTENT_SECURITY_POLICY,"The HTTP nonstandard X-Content-Security-Policy header field name. It was introduced in CSP v.1 and used by the Firefox until version 23 and the Internet Explorer version 10. Please, use CONTENT_SECURITY_POLICY to pass the CSP."
3784,common/net,com.google.common.net,Class HttpHeaders,public static final String X_CONTENT_SECURITY_POLICY_REPORT_ONLY,"The HTTP nonstandard X-Content-Security-Policy-Report-Only header field name. It was introduced in CSP v.1 and used by the Firefox until version 23 and the Internet Explorer version 10. Please, use CONTENT_SECURITY_POLICY_REPORT_ONLY to pass the CSP."
3785,common/net,com.google.common.net,Class HttpHeaders,public static final String X_WEBKIT_CSP,"The HTTP nonstandard X-WebKit-CSP header field name. It was introduced in CSP v.1 and used by the Chrome until version 25. Please, use CONTENT_SECURITY_POLICY to pass the CSP."
3786,common/net,com.google.common.net,Class HttpHeaders,public static final String X_WEBKIT_CSP_REPORT_ONLY,"The HTTP nonstandard X-WebKit-CSP-Report-Only header field name. It was introduced in CSP v.1 and used by the Chrome until version 25. Please, use CONTENT_SECURITY_POLICY_REPORT_ONLY to pass the CSP."
3787,common/net,com.google.common.net,Class HttpHeaders,public static final String CROSS_ORIGIN_EMBEDDER_POLICY,The HTTP Cross-Origin-Embedder-Policy header field name.
3788,common/net,com.google.common.net,Class HttpHeaders,public static final String CROSS_ORIGIN_EMBEDDER_POLICY_REPORT_ONLY,The HTTP Cross-Origin-Embedder-Policy-Report-Only header field name.
3789,common/net,com.google.common.net,Class HttpHeaders,public static final String CROSS_ORIGIN_OPENER_POLICY,The HTTP Cross-Origin-Opener-Policy header field name.
3790,common/net,com.google.common.net,Class HttpHeaders,public static final String ETAG,The HTTP ETag header field name.
3791,common/net,com.google.common.net,Class HttpHeaders,public static final String EXPIRES,The HTTP Expires header field name.
3792,common/net,com.google.common.net,Class HttpHeaders,public static final String LAST_MODIFIED,The HTTP Last-Modified header field name.
3793,common/net,com.google.common.net,Class HttpHeaders,public static final String LINK,The HTTP Link header field name.
3794,common/net,com.google.common.net,Class HttpHeaders,public static final String LOCATION,The HTTP Location header field name.
3795,common/net,com.google.common.net,Class HttpHeaders,public static final String ORIGIN_TRIAL,The HTTP Origin-Trial header field name.
3796,common/net,com.google.common.net,Class HttpHeaders,public static final String P3P,The HTTP P3P header field name. Limited browser support.
3797,common/net,com.google.common.net,Class HttpHeaders,public static final String PROXY_AUTHENTICATE,The HTTP Proxy-Authenticate header field name.
3798,common/net,com.google.common.net,Class HttpHeaders,public static final String REFRESH,The HTTP Refresh header field name. Non-standard header supported by most browsers.
3799,common/net,com.google.common.net,Class HttpHeaders,public static final String REPORT_TO,The HTTP Report-To header field name.
3800,common/net,com.google.common.net,Class HttpHeaders,public static final String RETRY_AFTER,The HTTP Retry-After header field name.
3801,common/net,com.google.common.net,Class HttpHeaders,public static final String SERVER,The HTTP Server header field name.
3802,common/net,com.google.common.net,Class HttpHeaders,public static final String SERVER_TIMING,The HTTP Server-Timing header field name.
3803,common/net,com.google.common.net,Class HttpHeaders,public static final String SERVICE_WORKER_ALLOWED,The HTTP Service-Worker-Allowed header field name.
3804,common/net,com.google.common.net,Class HttpHeaders,public static final String SET_COOKIE,The HTTP Set-Cookie header field name.
3805,common/net,com.google.common.net,Class HttpHeaders,public static final String SET_COOKIE2,The HTTP Set-Cookie2 header field name.
3806,common/net,com.google.common.net,Class HttpHeaders,@Betapublic static final String SOURCE_MAP,The HTTP SourceMap header field name.
3807,common/net,com.google.common.net,Class HttpHeaders,public static final String STRICT_TRANSPORT_SECURITY,The HTTP Strict-Transport-Security header field name.
3808,common/net,com.google.common.net,Class HttpHeaders,public static final String TIMING_ALLOW_ORIGIN,The HTTP Timing-Allow-Origin header field name.
3809,common/net,com.google.common.net,Class HttpHeaders,public static final String TRAILER,The HTTP Trailer header field name.
3810,common/net,com.google.common.net,Class HttpHeaders,public static final String TRANSFER_ENCODING,The HTTP Transfer-Encoding header field name.
3811,common/net,com.google.common.net,Class HttpHeaders,public static final String VARY,The HTTP Vary header field name.
3812,common/net,com.google.common.net,Class HttpHeaders,public static final String WWW_AUTHENTICATE,The HTTP WWW-Authenticate header field name.
3813,common/net,com.google.common.net,Class HttpHeaders,public static final String DNT,The HTTP DNT header field name.
3814,common/net,com.google.common.net,Class HttpHeaders,public static final String X_CONTENT_TYPE_OPTIONS,The HTTP X-Content-Type-Options header field name.
3815,common/net,com.google.common.net,Class HttpHeaders,public static final String X_DO_NOT_TRACK,The HTTP X-Do-Not-Track header field name.
3816,common/net,com.google.common.net,Class HttpHeaders,public static final String X_FORWARDED_FOR,The HTTP X-Forwarded-For header field name (superseded by Forwarded).
3817,common/net,com.google.common.net,Class HttpHeaders,public static final String X_FORWARDED_PROTO,The HTTP X-Forwarded-Proto header field name.
3818,common/net,com.google.common.net,Class HttpHeaders,public static final String X_FORWARDED_HOST,The HTTP X-Forwarded-Host header field name.
3819,common/net,com.google.common.net,Class HttpHeaders,public static final String X_FORWARDED_PORT,The HTTP X-Forwarded-Port header field name.
3820,common/net,com.google.common.net,Class HttpHeaders,public static final String X_FRAME_OPTIONS,The HTTP X-Frame-Options header field name.
3821,common/net,com.google.common.net,Class HttpHeaders,public static final String X_POWERED_BY,The HTTP X-Powered-By header field name.
3822,common/net,com.google.common.net,Class HttpHeaders,@Betapublic static final String PUBLIC_KEY_PINS,The HTTP Public-Key-Pins header field name.
3823,common/net,com.google.common.net,Class HttpHeaders,@Betapublic static final String PUBLIC_KEY_PINS_REPORT_ONLY,The HTTP Public-Key-Pins-Report-Only header field name.
3824,common/net,com.google.common.net,Class HttpHeaders,public static final String X_REQUEST_ID,The HTTP X-Request-ID header field name.
3825,common/net,com.google.common.net,Class HttpHeaders,public static final String X_REQUESTED_WITH,The HTTP X-Requested-With header field name.
3826,common/net,com.google.common.net,Class HttpHeaders,public static final String X_USER_IP,The HTTP X-User-IP header field name.
3827,common/net,com.google.common.net,Class HttpHeaders,@Betapublic static final String X_DOWNLOAD_OPTIONS,"The HTTP X-Download-Options header field name. When the new X-Download-Options header is present with the value noopen, the user is prevented from opening a file download directly; instead, they must first save the file locally."
3828,common/net,com.google.common.net,Class HttpHeaders,public static final String X_XSS_PROTECTION,The HTTP X-XSS-Protection header field name.
3829,common/net,com.google.common.net,Class HttpHeaders,public static final String X_DNS_PREFETCH_CONTROL,"The HTTP X-DNS-Prefetch-Control header controls DNS prefetch behavior. Value can be on or off. By default, DNS prefetching is on for HTTP pages and off for HTTPS pages."
3830,common/net,com.google.common.net,Class HttpHeaders,public static final String PING_FROM,The HTTP Ping-From header field name.
3831,common/net,com.google.common.net,Class HttpHeaders,public static final String PING_TO,The HTTP Ping-To header field name.
3832,common/net,com.google.common.net,Class HttpHeaders,public static final String PURPOSE,The HTTP Purpose header field name.
3833,common/net,com.google.common.net,Class HttpHeaders,public static final String X_PURPOSE,The HTTP X-Purpose header field name.
3834,common/net,com.google.common.net,Class HttpHeaders,public static final String X_MOZ,The HTTP X-Moz header field name.
3835,common/net,com.google.common.net,Class HttpHeaders,public static final String SEC_CH_UA,The HTTP Sec-CH-UA header field name.
3836,common/net,com.google.common.net,Class HttpHeaders,public static final String SEC_CH_UA_ARCH,The HTTP Sec-CH-UA-Arch header field name.
3837,common/net,com.google.common.net,Class HttpHeaders,public static final String SEC_CH_UA_MODEL,The HTTP Sec-CH-UA-Model header field name.
3838,common/net,com.google.common.net,Class HttpHeaders,public static final String SEC_CH_UA_PLATFORM,The HTTP Sec-CH-UA-Platform header field name.
3839,common/net,com.google.common.net,Class HttpHeaders,public static final String SEC_CH_UA_PLATFORM_VERSION,The HTTP Sec-CH-UA-Platform-Version header field name.
3840,common/net,com.google.common.net,Class HttpHeaders,public static final String SEC_CH_UA_FULL_VERSION,The HTTP Sec-CH-UA-Full-Version header field name.
3841,common/net,com.google.common.net,Class HttpHeaders,public static final String SEC_CH_UA_MOBILE,The HTTP Sec-CH-UA-Mobile header field name.
3842,common/net,com.google.common.net,Class HttpHeaders,public static final String SEC_FETCH_DEST,The HTTP Sec-Fetch-Dest header field name.
3843,common/net,com.google.common.net,Class HttpHeaders,public static final String SEC_FETCH_MODE,The HTTP Sec-Fetch-Mode header field name.
3844,common/net,com.google.common.net,Class HttpHeaders,public static final String SEC_FETCH_SITE,The HTTP Sec-Fetch-Site header field name.
3845,common/net,com.google.common.net,Class HttpHeaders,public static final String SEC_FETCH_USER,The HTTP Sec-Fetch-User header field name.
3846,common/net,com.google.common.net,Class HttpHeaders,public static final String SEC_METADATA,The HTTP Sec-Metadata header field name.
3847,common/net,com.google.common.net,Class HttpHeaders,public static final String SEC_TOKEN_BINDING,The HTTP Sec-Token-Binding header field name.
3848,common/net,com.google.common.net,Class HttpHeaders,public static final String SEC_PROVIDED_TOKEN_BINDING_ID,The HTTP Sec-Provided-Token-Binding-ID header field name.
3849,common/net,com.google.common.net,Class HttpHeaders,public static final String SEC_REFERRED_TOKEN_BINDING_ID,The HTTP Sec-Referred-Token-Binding-ID header field name.
3850,common/net,com.google.common.net,Class HttpHeaders,public static final String SEC_WEBSOCKET_ACCEPT,The HTTP Sec-WebSocket-Accept header field name.
3851,common/net,com.google.common.net,Class HttpHeaders,public static final String SEC_WEBSOCKET_EXTENSIONS,The HTTP Sec-WebSocket-Extensions header field name.
3852,common/net,com.google.common.net,Class HttpHeaders,public static final String SEC_WEBSOCKET_KEY,The HTTP Sec-WebSocket-Key header field name.
3853,common/net,com.google.common.net,Class HttpHeaders,public static final String SEC_WEBSOCKET_PROTOCOL,The HTTP Sec-WebSocket-Protocol header field name.
3854,common/net,com.google.common.net,Class HttpHeaders,public static final String SEC_WEBSOCKET_VERSION,The HTTP Sec-WebSocket-Version header field name.
3855,common/net,com.google.common.net,Class HttpHeaders.ReferrerPolicyValues,public static final String NO_REFERRER,
3856,common/net,com.google.common.net,Class HttpHeaders.ReferrerPolicyValues,public static final String NO_REFFERER_WHEN_DOWNGRADE,
3857,common/net,com.google.common.net,Class HttpHeaders.ReferrerPolicyValues,public static final String SAME_ORIGIN,
3858,common/net,com.google.common.net,Class HttpHeaders.ReferrerPolicyValues,public static final String ORIGIN,
3859,common/net,com.google.common.net,Class HttpHeaders.ReferrerPolicyValues,public static final String STRICT_ORIGIN,
3860,common/net,com.google.common.net,Class HttpHeaders.ReferrerPolicyValues,public static final String ORIGIN_WHEN_CROSS_ORIGIN,
3861,common/net,com.google.common.net,Class HttpHeaders.ReferrerPolicyValues,public static final String STRICT_ORIGIN_WHEN_CROSS_ORIGIN,
3862,common/collect,com.google.common.collect,"Class ImmutableBiMap<K,V>","public static <T,K,V> Collector<T,?,ImmutableBiMap<K,V>> toImmutableBiMap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction)","Returns a Collector that accumulates elements into an ImmutableBiMap whose keys and values are the result of applying the provided mapping functions to the input elements. Entries appear in the result ImmutableBiMap in encounter order. If the mapped keys or values contain duplicates (according to Object.equals(Object), an IllegalArgumentException is thrown when the collection operation is performed. (This differs from the Collector returned by Collectors.toMap(Function, Function), which throws an IllegalStateException.)"
3863,common/collect,com.google.common.collect,"Class ImmutableBiMap<K,V>","public static <K,V> ImmutableBiMap<K,V> of()",Returns the empty bimap.
3864,common/collect,com.google.common.collect,"Class ImmutableBiMap<K,V>","public static <K,V> ImmutableBiMap<K,V> of(K k1, V v1)",Returns an immutable bimap containing a single entry.
3865,common/collect,com.google.common.collect,"Class ImmutableBiMap<K,V>","public static <K,V> ImmutableBiMap<K,V> of(K k1, V v1, K k2, V v2)","Returns an immutable map containing the given entries, in order."
3866,common/collect,com.google.common.collect,"Class ImmutableBiMap<K,V>","public static <K,V> ImmutableBiMap<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3)","Returns an immutable map containing the given entries, in order."
3867,common/collect,com.google.common.collect,"Class ImmutableBiMap<K,V>","public static <K,V> ImmutableBiMap<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)","Returns an immutable map containing the given entries, in order."
3868,common/collect,com.google.common.collect,"Class ImmutableBiMap<K,V>","public static <K,V> ImmutableBiMap<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)","Returns an immutable map containing the given entries, in order."
3869,common/collect,com.google.common.collect,"Class ImmutableBiMap<K,V>","public static <K,V> ImmutableBiMap.Builder<K,V> builder()",Returns a new builder. The generated builder is equivalent to the builder created by the ImmutableBiMap.Builder constructor.
3870,common/collect,com.google.common.collect,"Class ImmutableBiMap<K,V>","@Betapublic static <K,V> ImmutableBiMap.Builder<K,V> builderWithExpectedSize(int expectedSize)","Returns a new builder, expecting the specified number of entries to be added. If expectedSize is exactly the number of entries added to the builder before ImmutableBiMap.Builder.build() is called, the builder is likely to perform better than an unsized builder() would have. It is not specified if any performance benefits apply if expectedSize is close to, but not exactly, the number of entries added to the builder."
3871,common/collect,com.google.common.collect,"Class ImmutableBiMap<K,V>","public static <K,V> ImmutableBiMap<K,V> copyOf(Map<? extends K,? extends V> map)","Returns an immutable bimap containing the same entries as map. If map somehow contains entries with duplicate keys (for example, if it is a SortedMap whose comparator is not consistent with equals), the results of this method are undefined. The returned BiMap iterates over entries in the same order as the entrySet of the original map. Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change."
3872,common/collect,com.google.common.collect,"Class ImmutableBiMap<K,V>","@Betapublic static <K,V> ImmutableBiMap<K,V> copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)",Returns an immutable bimap containing the given entries. The returned bimap iterates over entries in the same order as the original iterable.
3873,common/collect,com.google.common.collect,"Class ImmutableBiMap<K,V>","public abstract ImmutableBiMap<V,K> inverse()","Returns the inverse view of this bimap, which maps each of this bimap's values to its associated key. The two bimaps are backed by the same data; any changes to one will appear in the other. Note:There is no guaranteed correspondence between the iteration order of a bimap and that of its inverse. The inverse of an ImmutableBiMap is another ImmutableBiMap."
3874,common/collect,com.google.common.collect,"Class ImmutableBiMap<K,V>",public ImmutableSet<V> values(),"Returns an immutable set of the values in this map, in the same order they appear in ImmutableMap.entrySet."
3875,common/collect,com.google.common.collect,"Class ImmutableBiMap<K,V>","@CanIgnoreReturnValue @Deprecatedpublic V forcePut(K key, V value)",Deprecated. Unsupported operation.
3876,common/collect,com.google.common.collect,"Class ImmutableBiMap<K,V>","@Deprecatedpublic static <T,K,V> Collector<T,?,ImmutableMap<K,V>> toImmutableMap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction)","Deprecated. Use toImmutableBiMap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>)."
3877,common/collect,com.google.common.collect,"Class ImmutableBiMap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableBiMap.Builder<K,V> put(K key, V value)","Associates key with value in the built bimap. Duplicate keys or values are not allowed, and will cause build() to fail."
3878,common/collect,com.google.common.collect,"Class ImmutableBiMap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableBiMap.Builder<K,V> put(Map.Entry<? extends K,? extends V> entry)","Adds the given entry to the bimap. Duplicate keys or values are not allowed, and will cause build() to fail."
3879,common/collect,com.google.common.collect,"Class ImmutableBiMap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableBiMap.Builder<K,V> putAll(Map<? extends K,? extends V> map)","Associates all of the given map's keys and values in the built bimap. Duplicate keys or values are not allowed, and will cause build() to fail."
3880,common/collect,com.google.common.collect,"Class ImmutableBiMap.Builder<K,V>","@CanIgnoreReturnValue @Betapublic ImmutableBiMap.Builder<K,V> putAll(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)","Adds all of the given entries to the built bimap. Duplicate keys or values are not allowed, and will cause build() to fail."
3881,common/collect,com.google.common.collect,"Class ImmutableBiMap.Builder<K,V>","@CanIgnoreReturnValue @Betapublic ImmutableBiMap.Builder<K,V> orderEntriesByValue(Comparator<? super V> valueComparator)","Configures this Builder to order entries by value according to the specified comparator. The sort order is stable, that is, if two entries have values that compare as equivalent, the entry that was inserted first will be first in the built map's iteration order."
3882,common/collect,com.google.common.collect,Class ImmutableClassToInstanceMap<B>,public static <B> ImmutableClassToInstanceMap<B> of(),Returns an empty ImmutableClassToInstanceMap.
3883,common/collect,com.google.common.collect,Class ImmutableClassToInstanceMap<B>,"public static <B,T extends B> ImmutableClassToInstanceMap<B> of(Class<T> type, T value)",Returns an ImmutableClassToInstanceMap containing a single entry.
3884,common/collect,com.google.common.collect,Class ImmutableClassToInstanceMap<B>,public static <B> ImmutableClassToInstanceMap.Builder<B> builder(),Returns a new builder. The generated builder is equivalent to the builder created by the ImmutableClassToInstanceMap.Builder constructor.
3885,common/collect,com.google.common.collect,Class ImmutableClassToInstanceMap<B>,"public static <B,S extends B> ImmutableClassToInstanceMap<B> copyOf(Map<? extends Class<? extends S>,? extends S> map)","Returns an immutable map containing the same entries as map. If map somehow contains entries with duplicate keys (for example, if it is a SortedMap whose comparator is not consistent with equals), the results of this method are undefined. Note: Despite what the method name suggests, if map is an ImmutableClassToInstanceMap, no copy will actually be performed."
3886,common/collect,com.google.common.collect,Class ImmutableClassToInstanceMap<B>,"protected Map<Class<? extends B>,B> delegate()",Description copied from class: ForwardingObject
3887,common/collect,com.google.common.collect,Class ImmutableClassToInstanceMap<B>,public <T extends B> T getInstance(Class<T> type),Description copied from interface: ClassToInstanceMap
3888,common/collect,com.google.common.collect,Class ImmutableClassToInstanceMap.Builder<B>,"@CanIgnoreReturnValuepublic <T extends B> ImmutableClassToInstanceMap.Builder<B> put(Class<T> key, T value)","Associates key with value in the built map. Duplicate keys are not allowed, and will cause build() to fail."
3889,common/collect,com.google.common.collect,Class ImmutableClassToInstanceMap.Builder<B>,"@CanIgnoreReturnValuepublic <T extends B> ImmutableClassToInstanceMap.Builder<B> putAll(Map<? extends Class<? extends T>,? extends T> map)","Associates all of map's keys and values in the built map. Duplicate keys are not allowed, and will cause build() to fail."
3890,common/collect,com.google.common.collect,Class ImmutableCollection<E>,public abstract UnmodifiableIterator<E> iterator(),Returns an unmodifiable iterator across the elements in this collection.
3891,common/collect,com.google.common.collect,Class ImmutableCollection<E>,public Spliterator<E> spliterator(),Description copied from interface: java.util.Collection
3892,common/collect,com.google.common.collect,Class ImmutableCollection<E>,public final Object[] toArray(),Description copied from class: java.util.AbstractCollection
3893,common/collect,com.google.common.collect,Class ImmutableCollection<E>,@CanIgnoreReturnValuepublic final <T> T[] toArray(T[] other),Description copied from class: java.util.AbstractCollection
3894,common/collect,com.google.common.collect,Class ImmutableCollection<E>,public abstract boolean contains(@Nullable Object object),Description copied from class: java.util.AbstractCollection
3895,common/collect,com.google.common.collect,Class ImmutableCollection<E>,@CanIgnoreReturnValue @Deprecatedpublic final boolean add(E e),Deprecated. Unsupported operation.
3896,common/collect,com.google.common.collect,Class ImmutableCollection<E>,@CanIgnoreReturnValue @Deprecatedpublic final boolean remove(Object object),Deprecated. Unsupported operation.
3897,common/collect,com.google.common.collect,Class ImmutableCollection<E>,@CanIgnoreReturnValue @Deprecatedpublic final boolean addAll(Collection<? extends E> newElements),Deprecated. Unsupported operation.
3898,common/collect,com.google.common.collect,Class ImmutableCollection<E>,@CanIgnoreReturnValue @Deprecatedpublic final boolean removeAll(Collection<?> oldElements),Deprecated. Unsupported operation.
3899,common/collect,com.google.common.collect,Class ImmutableCollection<E>,@CanIgnoreReturnValue @Deprecatedpublic final boolean removeIf(Predicate<? super E> filter),Deprecated. Unsupported operation.
3900,common/collect,com.google.common.collect,Class ImmutableCollection<E>,@Deprecatedpublic final boolean retainAll(Collection<?> elementsToKeep),Deprecated. Unsupported operation.
3901,common/collect,com.google.common.collect,Class ImmutableCollection<E>,@Deprecatedpublic final void clear(),Deprecated. Unsupported operation.
3902,common/collect,com.google.common.collect,Class ImmutableCollection.Builder<E>,@CanIgnoreReturnValuepublic abstract ImmutableCollection.Builder<E> add(E element),Adds element to the ImmutableCollection being built. Note that each builder class covariantly returns its own type from this method.
3903,common/collect,com.google.common.collect,Class ImmutableCollection.Builder<E>,@CanIgnoreReturnValuepublic ImmutableCollection.Builder<E> add(E... elements),Adds each element of elements to the ImmutableCollection being built. Note that each builder class overrides this method in order to covariantly return its own type.
3904,common/collect,com.google.common.collect,Class ImmutableCollection.Builder<E>,@CanIgnoreReturnValuepublic ImmutableCollection.Builder<E> addAll(Iterable<? extends E> elements),Adds each element of elements to the ImmutableCollection being built. Note that each builder class overrides this method in order to covariantly return its own type.
3905,common/collect,com.google.common.collect,Class ImmutableCollection.Builder<E>,@CanIgnoreReturnValuepublic ImmutableCollection.Builder<E> addAll(Iterator<? extends E> elements),Adds each element of elements to the ImmutableCollection being built. Note that each builder class overrides this method in order to covariantly return its own type.
3906,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray,public static ImmutableDoubleArray of(),Returns the empty array.
3907,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray,public static ImmutableDoubleArray of(double e0),Returns an immutable array containing a single value.
3908,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray,"public static ImmutableDoubleArray of(double e0, double e1)","Returns an immutable array containing the given values, in order."
3909,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray,"public static ImmutableDoubleArray of(double e0, double e1, double e2)","Returns an immutable array containing the given values, in order."
3910,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray,"public static ImmutableDoubleArray of(double e0, double e1, double e2, double e3)","Returns an immutable array containing the given values, in order."
3911,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray,"public static ImmutableDoubleArray of(double e0, double e1, double e2, double e3, double e4)","Returns an immutable array containing the given values, in order."
3912,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray,"public static ImmutableDoubleArray of(double e0, double e1, double e2, double e3, double e4, double e5)","Returns an immutable array containing the given values, in order."
3913,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray,"public static ImmutableDoubleArray of(double first, double... rest)","Returns an immutable array containing the given values, in order. The array rest must not be longer than Integer.MAX_VALUE - 1."
3914,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray,public static ImmutableDoubleArray copyOf(double[] values),"Returns an immutable array containing the given values, in order."
3915,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray,public static ImmutableDoubleArray copyOf(Collection<Double> values),"Returns an immutable array containing the given values, in order."
3916,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray,public static ImmutableDoubleArray copyOf(Iterable<Double> values),"Returns an immutable array containing the given values, in order. Performance note: this method delegates to copyOf(Collection) if values is a Collection. Otherwise it creates a builder(int) and uses ImmutableDoubleArray.Builder.addAll(Iterable), with all the performance implications associated with that."
3917,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray,public static ImmutableDoubleArray copyOf(DoubleStream stream),"Returns an immutable array containing all the values from stream, in order."
3918,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray,public static ImmutableDoubleArray.Builder builder(int initialCapacity),"Returns a new, empty builder for ImmutableDoubleArray instances, sized to hold up to initialCapacity values without resizing. The returned builder is not thread-safe. Performance note: When feasible, initialCapacity should be the exact number of values that will be added, if that knowledge is readily available. It is better to guess a value slightly too high than slightly too low. If the value is not exact, the ImmutableDoubleArray that is built will very likely occupy more memory than strictly necessary; to trim memory usage, build using builder.build().trimmed()."
3919,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray,public static ImmutableDoubleArray.Builder builder(),"Returns a new, empty builder for ImmutableDoubleArray instances, with a default initial capacity. The returned builder is not thread-safe. Performance note: The ImmutableDoubleArray that is built will very likely occupy more memory than necessary; to trim memory usage, build using builder.build().trimmed()."
3920,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray,public int length(),Returns the number of values in this array.
3921,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray,public boolean isEmpty(),Returns true if there are no values in this array (length() is zero).
3922,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray,public double get(int index),Returns the double value present at the given index.
3923,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray,public int indexOf(double target),"Returns the smallest index for which get(int) returns target, or -1 if no such index exists. Values are compared as if by Double.equals(java.lang.Object). Equivalent to asList().indexOf(target)."
3924,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray,public int lastIndexOf(double target),"Returns the largest index for which get(int) returns target, or -1 if no such index exists. Values are compared as if by Double.equals(java.lang.Object). Equivalent to asList().lastIndexOf(target)."
3925,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray,public boolean contains(double target),Returns true if target is present at any index in this array. Values are compared as if by Double.equals(java.lang.Object). Equivalent to asList().contains(target).
3926,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray,public void forEach(DoubleConsumer consumer),"Invokes consumer for each value contained in this array, in order."
3927,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray,public DoubleStream stream(),"Returns a stream over the values in this array, in order."
3928,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray,public double[] toArray(),"Returns a new, mutable copy of this array's values, as a primitive double[]."
3929,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray,"public ImmutableDoubleArray subArray(int startIndex, int endIndex)","Returns a new immutable array containing the values in the specified range. Performance note: The returned array has the same full memory footprint as this one does (no actual copying is performed). To reduce memory usage, use subArray(start, end).trimmed()."
3930,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray,public List<Double> asList(),"Returns an immutable view of this array's values as a List; note that double values are boxed into Double instances on demand, which can be very expensive. The returned list should be used once and discarded. For any usages beyond that, pass the returned list to ImmutableList.copyOf and use that list instead."
3931,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray,public boolean equals(@Nullable Object object),"Returns true if object is an ImmutableDoubleArray containing the same values as this one, in the same order. Values are compared as if by Double.equals(java.lang.Object)."
3932,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray,public int hashCode(),Returns an unspecified hash code for the contents of this immutable array.
3933,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray,public String toString(),"Returns a string representation of this array in the same form as Arrays.toString(double[]), for example [1, 2, 3]."
3934,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray.Builder,public ImmutableDoubleArray.Builder add(double value),Appends value to the end of the values the built ImmutableDoubleArray will contain.
3935,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray.Builder,public ImmutableDoubleArray.Builder addAll(double[] values),"Appends values, in order, to the end of the values the built ImmutableDoubleArray will contain."
3936,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray.Builder,public ImmutableDoubleArray.Builder addAll(Iterable<Double> values),"Appends values, in order, to the end of the values the built ImmutableDoubleArray will contain."
3937,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray.Builder,public ImmutableDoubleArray.Builder addAll(Collection<Double> values),"Appends values, in order, to the end of the values the built ImmutableDoubleArray will contain."
3938,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray.Builder,public ImmutableDoubleArray.Builder addAll(DoubleStream stream),"Appends all values from stream, in order, to the end of the values the built ImmutableDoubleArray will contain."
3939,common/primitives,com.google.common.primitives,Class ImmutableDoubleArray.Builder,public ImmutableDoubleArray.Builder addAll(ImmutableDoubleArray values),"Appends values, in order, to the end of the values the built ImmutableDoubleArray will contain."
3940,common/graph,com.google.common.graph,Class ImmutableGraph<N>,public static <N> ImmutableGraph<N> copyOf(Graph<N> graph),Returns an immutable copy of graph.
3941,common/graph,com.google.common.graph,Class ImmutableGraph<N>,@Deprecatedpublic static <N> ImmutableGraph<N> copyOf(ImmutableGraph<N> graph),Deprecated. no need to use this
3942,common/graph,com.google.common.graph,Class ImmutableGraph<N>,public ElementOrder<N> incidentEdgeOrder(),"Returns an ElementOrder that specifies the order of iteration for the elements of edges(), adjacentNodes(Object), predecessors(Object), successors(Object) and incidentEdges(Object)."
3943,common/graph,com.google.common.graph,Class ImmutableGraph<N>,protected com.google.common.graph.BaseGraph<N> delegate(),
3944,common/graph,com.google.common.graph,Class ImmutableGraph<N>,public Set<N> nodes(),Description copied from interface: Graph
3945,common/graph,com.google.common.graph,Class ImmutableGraph<N>,protected long edgeCount(),Defer to AbstractBaseGraph.edges() (based on successors(Object)) for full edges() implementation.
3946,common/graph,com.google.common.graph,Class ImmutableGraph<N>,public boolean isDirected(),Description copied from interface: Graph
3947,common/graph,com.google.common.graph,Class ImmutableGraph<N>,public boolean allowsSelfLoops(),Description copied from interface: Graph
3948,common/graph,com.google.common.graph,Class ImmutableGraph<N>,public ElementOrder<N> nodeOrder(),Description copied from interface: Graph
3949,common/graph,com.google.common.graph,Class ImmutableGraph<N>,public Set<N> adjacentNodes(N node),Description copied from interface: Graph
3950,common/graph,com.google.common.graph,Class ImmutableGraph<N>,public Set<N> predecessors(N node),Description copied from interface: Graph
3951,common/graph,com.google.common.graph,Class ImmutableGraph<N>,public Set<N> successors(N node),Description copied from interface: Graph
3952,common/graph,com.google.common.graph,Class ImmutableGraph<N>,public Set<EndpointPair<N>> incidentEdges(N node),Returns the edges in this graph whose endpoints include node. This is equal to the union of incoming and outgoing edges.
3953,common/graph,com.google.common.graph,Class ImmutableGraph<N>,public int degree(N node),"Returns the count of node's incident edges, counting self-loops twice (equivalently, the number of times an edge touches node). For directed graphs, this is equal to inDegree(node) + outDegree(node). For undirected graphs, this is equal to incidentEdges(node).size() + (number of self-loops incident to node). If the count is greater than Integer.MAX_VALUE, returns Integer.MAX_VALUE."
3954,common/graph,com.google.common.graph,Class ImmutableGraph<N>,public int inDegree(N node),"Returns the count of node's incoming edges (equal to predecessors(node).size()) in a directed graph. In an undirected graph, returns the degree(Object). If the count is greater than Integer.MAX_VALUE, returns Integer.MAX_VALUE."
3955,common/graph,com.google.common.graph,Class ImmutableGraph<N>,public int outDegree(N node),"Returns the count of node's outgoing edges (equal to successors(node).size()) in a directed graph. In an undirected graph, returns the degree(Object). If the count is greater than Integer.MAX_VALUE, returns Integer.MAX_VALUE."
3956,common/graph,com.google.common.graph,Class ImmutableGraph<N>,"public boolean hasEdgeConnecting(N nodeU, N nodeV)","Returns true if there is an edge that directly connects nodeU to nodeV. This is equivalent to nodes().contains(nodeU) && successors(nodeU).contains(nodeV). In an undirected graph, this is equal to hasEdgeConnecting(nodeV, nodeU)."
3957,common/graph,com.google.common.graph,Class ImmutableGraph<N>,public boolean hasEdgeConnecting(EndpointPair<N> endpoints),"Returns true if there is an edge that directly connects endpoints (in the order, if any, specified by endpoints). This is equivalent to edges().contains(endpoints). Unlike the other EndpointPair-accepting methods, this method does not throw if the endpoints are unordered; it simply returns false. This is for consistency with the behavior of Collection#contains(Object) (which does not generally throw if the object cannot be present in the collection), and the desire to have this method's behavior be compatible with edges().contains(endpoints)."
3958,common/graph,com.google.common.graph,Class ImmutableGraph<N>,public Set<EndpointPair<N>> edges(),An implementation of BaseGraph.edges() defined in terms of nodes() and successors(Object).
3959,common/graph,com.google.common.graph,Class ImmutableGraph<N>,protected final void validateEndpoints(EndpointPair<?> endpoints),Throws IllegalArgumentException if the ordering of endpoints is not compatible with the directionality of this graph.
3960,common/graph,com.google.common.graph,Class ImmutableGraph.Builder<N>,@CanIgnoreReturnValuepublic ImmutableGraph.Builder<N> addNode(N node),"Adds node if it is not already present. Nodes must be unique, just as Map keys must be. They must also be non-null."
3961,common/graph,com.google.common.graph,Class ImmutableGraph.Builder<N>,"@CanIgnoreReturnValuepublic ImmutableGraph.Builder<N> putEdge(N nodeU, N nodeV)","Adds an edge connecting nodeU to nodeV if one is not already present. If the graph is directed, the resultant edge will be directed; otherwise, it will be undirected. If nodeU and nodeV are not already present in this graph, this method will silently add nodeU and nodeV to the graph."
3962,common/graph,com.google.common.graph,Class ImmutableGraph.Builder<N>,@CanIgnoreReturnValuepublic ImmutableGraph.Builder<N> putEdge(EndpointPair<N> endpoints),"Adds an edge connecting endpoints (in the order, if any, specified by endpoints) if one is not already present. If this graph is directed, endpoints must be ordered and the added edge will be directed; if it is undirected, the added edge will be undirected. If this graph is directed, endpoints must be ordered. If either or both endpoints are not already present in this graph, this method will silently add each missing endpoint to the graph."
3963,common/primitives,com.google.common.primitives,Class ImmutableIntArray,public static ImmutableIntArray of(),Returns the empty array.
3964,common/primitives,com.google.common.primitives,Class ImmutableIntArray,public static ImmutableIntArray of(int e0),Returns an immutable array containing a single value.
3965,common/primitives,com.google.common.primitives,Class ImmutableIntArray,"public static ImmutableIntArray of(int e0, int e1)","Returns an immutable array containing the given values, in order."
3966,common/primitives,com.google.common.primitives,Class ImmutableIntArray,"public static ImmutableIntArray of(int e0, int e1, int e2)","Returns an immutable array containing the given values, in order."
3967,common/primitives,com.google.common.primitives,Class ImmutableIntArray,"public static ImmutableIntArray of(int e0, int e1, int e2, int e3)","Returns an immutable array containing the given values, in order."
3968,common/primitives,com.google.common.primitives,Class ImmutableIntArray,"public static ImmutableIntArray of(int e0, int e1, int e2, int e3, int e4)","Returns an immutable array containing the given values, in order."
3969,common/primitives,com.google.common.primitives,Class ImmutableIntArray,"public static ImmutableIntArray of(int e0, int e1, int e2, int e3, int e4, int e5)","Returns an immutable array containing the given values, in order."
3970,common/primitives,com.google.common.primitives,Class ImmutableIntArray,"public static ImmutableIntArray of(int first, int... rest)","Returns an immutable array containing the given values, in order. The array rest must not be longer than Integer.MAX_VALUE - 1."
3971,common/primitives,com.google.common.primitives,Class ImmutableIntArray,public static ImmutableIntArray copyOf(int[] values),"Returns an immutable array containing the given values, in order."
3972,common/primitives,com.google.common.primitives,Class ImmutableIntArray,public static ImmutableIntArray copyOf(Collection<Integer> values),"Returns an immutable array containing the given values, in order."
3973,common/primitives,com.google.common.primitives,Class ImmutableIntArray,public static ImmutableIntArray copyOf(Iterable<Integer> values),"Returns an immutable array containing the given values, in order. Performance note: this method delegates to copyOf(Collection) if values is a Collection. Otherwise it creates a builder(int) and uses ImmutableIntArray.Builder.addAll(Iterable), with all the performance implications associated with that."
3974,common/primitives,com.google.common.primitives,Class ImmutableIntArray,public static ImmutableIntArray copyOf(IntStream stream),"Returns an immutable array containing all the values from stream, in order."
3975,common/primitives,com.google.common.primitives,Class ImmutableIntArray,public static ImmutableIntArray.Builder builder(int initialCapacity),"Returns a new, empty builder for ImmutableIntArray instances, sized to hold up to initialCapacity values without resizing. The returned builder is not thread-safe. Performance note: When feasible, initialCapacity should be the exact number of values that will be added, if that knowledge is readily available. It is better to guess a value slightly too high than slightly too low. If the value is not exact, the ImmutableIntArray that is built will very likely occupy more memory than strictly necessary; to trim memory usage, build using builder.build().trimmed()."
3976,common/primitives,com.google.common.primitives,Class ImmutableIntArray,public static ImmutableIntArray.Builder builder(),"Returns a new, empty builder for ImmutableIntArray instances, with a default initial capacity. The returned builder is not thread-safe. Performance note: The ImmutableIntArray that is built will very likely occupy more memory than necessary; to trim memory usage, build using builder.build().trimmed()."
3977,common/primitives,com.google.common.primitives,Class ImmutableIntArray,public int length(),Returns the number of values in this array.
3978,common/primitives,com.google.common.primitives,Class ImmutableIntArray,public boolean isEmpty(),Returns true if there are no values in this array (length() is zero).
3979,common/primitives,com.google.common.primitives,Class ImmutableIntArray,public int get(int index),Returns the int value present at the given index.
3980,common/primitives,com.google.common.primitives,Class ImmutableIntArray,public int indexOf(int target),"Returns the smallest index for which get(int) returns target, or -1 if no such index exists. Equivalent to asList().indexOf(target)."
3981,common/primitives,com.google.common.primitives,Class ImmutableIntArray,public int lastIndexOf(int target),"Returns the largest index for which get(int) returns target, or -1 if no such index exists. Equivalent to asList().lastIndexOf(target)."
3982,common/primitives,com.google.common.primitives,Class ImmutableIntArray,public boolean contains(int target),Returns true if target is present at any index in this array. Equivalent to asList().contains(target).
3983,common/primitives,com.google.common.primitives,Class ImmutableIntArray,public void forEach(IntConsumer consumer),"Invokes consumer for each value contained in this array, in order."
3984,common/primitives,com.google.common.primitives,Class ImmutableIntArray,public IntStream stream(),"Returns a stream over the values in this array, in order."
3985,common/primitives,com.google.common.primitives,Class ImmutableIntArray,public int[] toArray(),"Returns a new, mutable copy of this array's values, as a primitive int[]."
3986,common/primitives,com.google.common.primitives,Class ImmutableIntArray,"public ImmutableIntArray subArray(int startIndex, int endIndex)","Returns a new immutable array containing the values in the specified range. Performance note: The returned array has the same full memory footprint as this one does (no actual copying is performed). To reduce memory usage, use subArray(start, end).trimmed()."
3987,common/primitives,com.google.common.primitives,Class ImmutableIntArray,public List<Integer> asList(),"Returns an immutable view of this array's values as a List; note that int values are boxed into Integer instances on demand, which can be very expensive. The returned list should be used once and discarded. For any usages beyond that, pass the returned list to ImmutableList.copyOf and use that list instead."
3988,common/primitives,com.google.common.primitives,Class ImmutableIntArray,public boolean equals(@Nullable Object object),"Returns true if object is an ImmutableIntArray containing the same values as this one, in the same order."
3989,common/primitives,com.google.common.primitives,Class ImmutableIntArray,public int hashCode(),Returns an unspecified hash code for the contents of this immutable array.
3990,common/primitives,com.google.common.primitives,Class ImmutableIntArray,public String toString(),"Returns a string representation of this array in the same form as Arrays.toString(int[]), for example [1, 2, 3]."
3991,common/primitives,com.google.common.primitives,Class ImmutableIntArray.Builder,public ImmutableIntArray.Builder add(int value),Appends value to the end of the values the built ImmutableIntArray will contain.
3992,common/primitives,com.google.common.primitives,Class ImmutableIntArray.Builder,public ImmutableIntArray.Builder addAll(int[] values),"Appends values, in order, to the end of the values the built ImmutableIntArray will contain."
3993,common/primitives,com.google.common.primitives,Class ImmutableIntArray.Builder,public ImmutableIntArray.Builder addAll(Iterable<Integer> values),"Appends values, in order, to the end of the values the built ImmutableIntArray will contain."
3994,common/primitives,com.google.common.primitives,Class ImmutableIntArray.Builder,public ImmutableIntArray.Builder addAll(Collection<Integer> values),"Appends values, in order, to the end of the values the built ImmutableIntArray will contain."
3995,common/primitives,com.google.common.primitives,Class ImmutableIntArray.Builder,public ImmutableIntArray.Builder addAll(IntStream stream),"Appends all values from stream, in order, to the end of the values the built ImmutableIntArray will contain."
3996,common/primitives,com.google.common.primitives,Class ImmutableIntArray.Builder,public ImmutableIntArray.Builder addAll(ImmutableIntArray values),"Appends values, in order, to the end of the values the built ImmutableIntArray will contain."
3997,common/collect,com.google.common.collect,Class ImmutableList<E>,"public static <E> Collector<E,?,ImmutableList<E>> toImmutableList()","Returns a Collector that accumulates the input elements into a new ImmutableList, in encounter order."
3998,common/collect,com.google.common.collect,Class ImmutableList<E>,public static <E> ImmutableList<E> of(),"Returns the empty immutable list. This list behaves and performs comparably to Collections.emptyList(), and is preferable mainly for consistency and maintainability of your code."
3999,common/collect,com.google.common.collect,Class ImmutableList<E>,public static <E> ImmutableList<E> of(E element),"Returns an immutable list containing a single element. This list behaves and performs comparably to Collections.singletonList(T), but will not accept a null element. It is preferable mainly for consistency and maintainability of your code."
4000,common/collect,com.google.common.collect,Class ImmutableList<E>,"public static <E> ImmutableList<E> of(E e1, E e2)","Returns an immutable list containing the given elements, in order."
4001,common/collect,com.google.common.collect,Class ImmutableList<E>,"public static <E> ImmutableList<E> of(E e1, E e2, E e3)","Returns an immutable list containing the given elements, in order."
4002,common/collect,com.google.common.collect,Class ImmutableList<E>,"public static <E> ImmutableList<E> of(E e1, E e2, E e3, E e4)","Returns an immutable list containing the given elements, in order."
4003,common/collect,com.google.common.collect,Class ImmutableList<E>,"public static <E> ImmutableList<E> of(E e1, E e2, E e3, E e4, E e5)","Returns an immutable list containing the given elements, in order."
4004,common/collect,com.google.common.collect,Class ImmutableList<E>,"public static <E> ImmutableList<E> of(E e1, E e2, E e3, E e4, E e5, E e6)","Returns an immutable list containing the given elements, in order."
4005,common/collect,com.google.common.collect,Class ImmutableList<E>,"public static <E> ImmutableList<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7)","Returns an immutable list containing the given elements, in order."
4006,common/collect,com.google.common.collect,Class ImmutableList<E>,"public static <E> ImmutableList<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8)","Returns an immutable list containing the given elements, in order."
4007,common/collect,com.google.common.collect,Class ImmutableList<E>,"public static <E> ImmutableList<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9)","Returns an immutable list containing the given elements, in order."
4008,common/collect,com.google.common.collect,Class ImmutableList<E>,"public static <E> ImmutableList<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10)","Returns an immutable list containing the given elements, in order."
4009,common/collect,com.google.common.collect,Class ImmutableList<E>,"public static <E> ImmutableList<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10, E e11)","Returns an immutable list containing the given elements, in order."
4010,common/collect,com.google.common.collect,Class ImmutableList<E>,"@SafeVarargspublic static <E> ImmutableList<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10, E e11, E e12, E... others)","Returns an immutable list containing the given elements, in order. The array others must not be longer than Integer.MAX_VALUE - 12."
4011,common/collect,com.google.common.collect,Class ImmutableList<E>,public static <E> ImmutableList<E> copyOf(Iterable<? extends E> elements),"Returns an immutable list containing the given elements, in order. If elements is a Collection, this method behaves exactly as copyOf(Collection); otherwise, it behaves exactly as copyOf(elements.iterator()."
4012,common/collect,com.google.common.collect,Class ImmutableList<E>,public static <E> ImmutableList<E> copyOf(Collection<? extends E> elements),"Returns an immutable list containing the given elements, in order. Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. Note that if list is a List<String>, then ImmutableList.copyOf(list) returns an ImmutableList<String> containing each of the strings in list, while ImmutableList.of(list)} returns an ImmutableList<List<String>> containing one element (the given list itself). This method is safe to use even when elements is a synchronized or concurrent collection that is currently being modified by another thread."
4013,common/collect,com.google.common.collect,Class ImmutableList<E>,public static <E> ImmutableList<E> copyOf(Iterator<? extends E> elements),"Returns an immutable list containing the given elements, in order."
4014,common/collect,com.google.common.collect,Class ImmutableList<E>,public static <E> ImmutableList<E> copyOf(E[] elements),"Returns an immutable list containing the given elements, in order."
4015,common/collect,com.google.common.collect,Class ImmutableList<E>,public static <E extends Comparable<? super E>> ImmutableList<E> sortedCopyOf(Iterable<? extends E> elements),"Returns an immutable list containing the given elements, sorted according to their natural order. The sorting algorithm used is stable, so elements that compare as equal will stay in the order in which they appear in the input. If your data has no duplicates, or you wish to deduplicate elements, use ImmutableSortedSet.copyOf(elements); if you want a List you can use its asList() view. Java 8 users: If you want to convert a Stream to a sorted ImmutableList, use stream.sorted().collect(toImmutableList())."
4016,common/collect,com.google.common.collect,Class ImmutableList<E>,"public static <E> ImmutableList<E> sortedCopyOf(Comparator<? super E> comparator, Iterable<? extends E> elements)","Returns an immutable list containing the given elements, in sorted order relative to the specified comparator. The sorting algorithm used is stable, so elements that compare as equal will stay in the order in which they appear in the input. If your data has no duplicates, or you wish to deduplicate elements, use ImmutableSortedSet.copyOf(comparator, elements); if you want a List you can use its asList() view. Java 8 users: If you want to convert a Stream to a sorted ImmutableList, use stream.sorted(comparator).collect(toImmutableList())."
4017,common/collect,com.google.common.collect,Class ImmutableList<E>,public UnmodifiableIterator<E> iterator(),Description copied from class: ImmutableCollection
4018,common/collect,com.google.common.collect,Class ImmutableList<E>,public UnmodifiableListIterator<E> listIterator(),Description copied from interface: java.util.List
4019,common/collect,com.google.common.collect,Class ImmutableList<E>,public UnmodifiableListIterator<E> listIterator(int index),Description copied from interface: java.util.List
4020,common/collect,com.google.common.collect,Class ImmutableList<E>,public void forEach(Consumer<? super E> consumer),Description copied from interface: java.lang.Iterable
4021,common/collect,com.google.common.collect,Class ImmutableList<E>,public int indexOf(@Nullable Object object),Description copied from interface: java.util.List
4022,common/collect,com.google.common.collect,Class ImmutableList<E>,public int lastIndexOf(@Nullable Object object),Description copied from interface: java.util.List
4023,common/collect,com.google.common.collect,Class ImmutableList<E>,public boolean contains(@Nullable Object object),Description copied from class: java.util.AbstractCollection
4024,common/collect,com.google.common.collect,Class ImmutableList<E>,"public ImmutableList<E> subList(int fromIndex, int toIndex)","Returns an immutable list of the elements between the specified fromIndex, inclusive, and toIndex, exclusive. (If fromIndex and toIndex are equal, the empty immutable list is returned.)"
4025,common/collect,com.google.common.collect,Class ImmutableList<E>,"@CanIgnoreReturnValue @Deprecatedpublic final boolean addAll(int index, Collection<? extends E> newElements)",Deprecated. Unsupported operation.
4026,common/collect,com.google.common.collect,Class ImmutableList<E>,"@CanIgnoreReturnValue @Deprecatedpublic final E set(int index, E element)",Deprecated. Unsupported operation.
4027,common/collect,com.google.common.collect,Class ImmutableList<E>,"@Deprecatedpublic final void add(int index, E element)",Deprecated. Unsupported operation.
4028,common/collect,com.google.common.collect,Class ImmutableList<E>,@CanIgnoreReturnValue @Deprecatedpublic final E remove(int index),Deprecated. Unsupported operation.
4029,common/collect,com.google.common.collect,Class ImmutableList<E>,@Deprecatedpublic final void replaceAll(UnaryOperator<E> operator),Deprecated. Unsupported operation.
4030,common/collect,com.google.common.collect,Class ImmutableList<E>,@Deprecatedpublic final void sort(Comparator<? super E> c),Deprecated. Unsupported operation.
4031,common/collect,com.google.common.collect,Class ImmutableList<E>,public final ImmutableList<E> asList(),Returns this list instance.
4032,common/collect,com.google.common.collect,Class ImmutableList<E>,public Spliterator<E> spliterator(),Description copied from interface: java.util.Collection
4033,common/collect,com.google.common.collect,Class ImmutableList<E>,public ImmutableList<E> reverse(),"Returns a view of this immutable list in reverse order. For example, ImmutableList.of(1, 2, 3).reverse() is equivalent to ImmutableList.of(3, 2, 1)."
4034,common/collect,com.google.common.collect,Class ImmutableList<E>,public boolean equals(@Nullable Object obj),Description copied from class: java.lang.Object
4035,common/collect,com.google.common.collect,Class ImmutableList<E>,public int hashCode(),Description copied from class: java.lang.Object
4036,common/collect,com.google.common.collect,Class ImmutableList<E>,public static <E> ImmutableList.Builder<E> builder(),Returns a new builder. The generated builder is equivalent to the builder created by the ImmutableList.Builder constructor.
4037,common/collect,com.google.common.collect,Class ImmutableList.Builder<E>,@CanIgnoreReturnValuepublic ImmutableList.Builder<E> add(E element),Adds element to the ImmutableList.
4038,common/collect,com.google.common.collect,Class ImmutableList.Builder<E>,@CanIgnoreReturnValuepublic ImmutableList.Builder<E> add(E... elements),Adds each element of elements to the ImmutableList.
4039,common/collect,com.google.common.collect,Class ImmutableList.Builder<E>,@CanIgnoreReturnValuepublic ImmutableList.Builder<E> addAll(Iterable<? extends E> elements),Adds each element of elements to the ImmutableList.
4040,common/collect,com.google.common.collect,Class ImmutableList.Builder<E>,@CanIgnoreReturnValuepublic ImmutableList.Builder<E> addAll(Iterator<? extends E> elements),Adds each element of elements to the ImmutableList.
4041,common/collect,com.google.common.collect,"Class ImmutableListMultimap<K,V>","public static <T,K,V> Collector<T,?,ImmutableListMultimap<K,V>> toImmutableListMultimap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction)","Returns a Collector that accumulates elements into an ImmutableListMultimap whose keys and values are the result of applying the provided mapping functions to the input elements. For streams with defined encounter order (as defined in the Ordering section of the java.util.stream Javadoc), that order is preserved, but entries are grouped by key. Example: static final Multimap<Character, String> FIRST_LETTER_MULTIMAP = Stream.of(banana, apple, carrot, asparagus, cherry) .collect(toImmutableListMultimap(str -> str.charAt(0), str -> str.substring(1))); // is equivalent to static final Multimap<Character, String> FIRST_LETTER_MULTIMAP = new ImmutableListMultimap.Builder<Character, String>() .put('b', anana) .putAll('a', pple, sparagus) .putAll('c', arrot, herry) .build(); "
4042,common/collect,com.google.common.collect,"Class ImmutableListMultimap<K,V>","public static <T,K,V> Collector<T,?,ImmutableListMultimap<K,V>> flatteningToImmutableListMultimap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends Stream<? extends V>> valuesFunction)","Returns a Collector accumulating entries into an ImmutableListMultimap. Each input element is mapped to a key and a stream of values, each of which are put into the resulting Multimap, in the encounter order of the stream and the encounter order of the streams of values. Example: static final ImmutableListMultimap<Character, Character> FIRST_LETTER_MULTIMAP = Stream.of(banana, apple, carrot, asparagus, cherry) .collect( flatteningToImmutableListMultimap( str -> str.charAt(0), str -> str.substring(1).chars().mapToObj(c -> (char) c)); // is equivalent to static final ImmutableListMultimap<Character, Character> FIRST_LETTER_MULTIMAP = ImmutableListMultimap.<Character, Character>builder() .putAll('b', Arrays.asList('a', 'n', 'a', 'n', 'a')) .putAll('a', Arrays.asList('p', 'p', 'l', 'e')) .putAll('c', Arrays.asList('a', 'r', 'r', 'o', 't')) .putAll('a', Arrays.asList('s', 'p', 'a', 'r', 'a', 'g', 'u', 's')) .putAll('c', Arrays.asList('h', 'e', 'r', 'r', 'y')) .build(); }"
4043,common/collect,com.google.common.collect,"Class ImmutableListMultimap<K,V>","public static <K,V> ImmutableListMultimap<K,V> of()",Returns the empty multimap.
4044,common/collect,com.google.common.collect,"Class ImmutableListMultimap<K,V>","public static <K,V> ImmutableListMultimap<K,V> of(K k1, V v1)",Returns an immutable multimap containing a single entry.
4045,common/collect,com.google.common.collect,"Class ImmutableListMultimap<K,V>","public static <K,V> ImmutableListMultimap<K,V> of(K k1, V v1, K k2, V v2)","Returns an immutable multimap containing the given entries, in order."
4046,common/collect,com.google.common.collect,"Class ImmutableListMultimap<K,V>","public static <K,V> ImmutableListMultimap<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3)","Returns an immutable multimap containing the given entries, in order."
4047,common/collect,com.google.common.collect,"Class ImmutableListMultimap<K,V>","public static <K,V> ImmutableListMultimap<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)","Returns an immutable multimap containing the given entries, in order."
4048,common/collect,com.google.common.collect,"Class ImmutableListMultimap<K,V>","public static <K,V> ImmutableListMultimap<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)","Returns an immutable multimap containing the given entries, in order."
4049,common/collect,com.google.common.collect,"Class ImmutableListMultimap<K,V>","public static <K,V> ImmutableListMultimap.Builder<K,V> builder()",Returns a new builder. The generated builder is equivalent to the builder created by the ImmutableListMultimap.Builder constructor.
4050,common/collect,com.google.common.collect,"Class ImmutableListMultimap<K,V>","public static <K,V> ImmutableListMultimap<K,V> copyOf(Multimap<? extends K,? extends V> multimap)","Returns an immutable multimap containing the same mappings as multimap. The generated multimap's key and value orderings correspond to the iteration ordering of the multimap.asMap() view. Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change."
4051,common/collect,com.google.common.collect,"Class ImmutableListMultimap<K,V>","@Betapublic static <K,V> ImmutableListMultimap<K,V> copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)","Returns an immutable multimap containing the specified entries. The returned multimap iterates over keys in the order they were first encountered in the input, and the values for each key are iterated in the order they were encountered."
4052,common/collect,com.google.common.collect,"Class ImmutableListMultimap<K,V>",public ImmutableList<V> get(K key),"Returns an immutable list of the values for the given key. If no mappings in the multimap have the provided key, an empty immutable list is returned. The values are in the same order as the parameters used to build this multimap."
4053,common/collect,com.google.common.collect,"Class ImmutableListMultimap<K,V>","public ImmutableListMultimap<V,K> inverse()","Returns an immutable multimap which is the inverse of this one. For every key-value mapping in the original, the result will have a mapping with key and value reversed. Because an inverse of a list multimap can contain multiple pairs with the same key and value, this method returns an ImmutableListMultimap rather than the ImmutableMultimap specified in the ImmutableMultimap class."
4054,common/collect,com.google.common.collect,"Class ImmutableListMultimap<K,V>",@CanIgnoreReturnValue @Deprecatedpublic ImmutableList<V> removeAll(Object key),Deprecated. Unsupported operation.
4055,common/collect,com.google.common.collect,"Class ImmutableListMultimap<K,V>","@CanIgnoreReturnValue @Deprecatedpublic ImmutableList<V> replaceValues(K key, Iterable<? extends V> values)",Deprecated. Unsupported operation.
4056,common/collect,com.google.common.collect,"Class ImmutableListMultimap<K,V>",public boolean isEmpty(),Description copied from interface: Multimap
4057,common/collect,com.google.common.collect,"Class ImmutableListMultimap<K,V>","public boolean containsEntry(@Nullable Object key, @Nullable Object value)",Description copied from interface: Multimap
4058,common/collect,com.google.common.collect,"Class ImmutableListMultimap<K,V>",public boolean equals(@Nullable Object object),Description copied from class: java.lang.Object
4059,common/collect,com.google.common.collect,"Class ImmutableListMultimap<K,V>",public int hashCode(),"Returns the hash code for this multimap. The hash code of a multimap is defined as the hash code of the map view, as returned by Multimap.asMap()."
4060,common/collect,com.google.common.collect,"Class ImmutableListMultimap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableListMultimap.Builder<K,V> put(K key, V value)",Description copied from class: ImmutableMultimap.Builder
4061,common/collect,com.google.common.collect,"Class ImmutableListMultimap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableListMultimap.Builder<K,V> put(Map.Entry<? extends K,? extends V> entry)",Adds an entry to the built multimap.
4062,common/collect,com.google.common.collect,"Class ImmutableListMultimap.Builder<K,V>","@CanIgnoreReturnValue @Betapublic ImmutableListMultimap.Builder<K,V> putAll(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)",Adds entries to the built multimap.
4063,common/collect,com.google.common.collect,"Class ImmutableListMultimap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableListMultimap.Builder<K,V> putAll(K key, Iterable<? extends V> values)",Description copied from class: ImmutableMultimap.Builder
4064,common/collect,com.google.common.collect,"Class ImmutableListMultimap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableListMultimap.Builder<K,V> putAll(K key, V... values)",Description copied from class: ImmutableMultimap.Builder
4065,common/collect,com.google.common.collect,"Class ImmutableListMultimap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableListMultimap.Builder<K,V> putAll(Multimap<? extends K,? extends V> multimap)",Description copied from class: ImmutableMultimap.Builder
4066,common/collect,com.google.common.collect,"Class ImmutableListMultimap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableListMultimap.Builder<K,V> orderKeysBy(Comparator<? super K> keyComparator)",Specifies the ordering of the generated multimap's keys.
4067,common/collect,com.google.common.collect,"Class ImmutableListMultimap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableListMultimap.Builder<K,V> orderValuesBy(Comparator<? super V> valueComparator)",Specifies the ordering of the generated multimap's values for each key.
4068,common/primitives,com.google.common.primitives,Class ImmutableLongArray,public static ImmutableLongArray of(),Returns the empty array.
4069,common/primitives,com.google.common.primitives,Class ImmutableLongArray,public static ImmutableLongArray of(long e0),Returns an immutable array containing a single value.
4070,common/primitives,com.google.common.primitives,Class ImmutableLongArray,"public static ImmutableLongArray of(long e0, long e1)","Returns an immutable array containing the given values, in order."
4071,common/primitives,com.google.common.primitives,Class ImmutableLongArray,"public static ImmutableLongArray of(long e0, long e1, long e2)","Returns an immutable array containing the given values, in order."
4072,common/primitives,com.google.common.primitives,Class ImmutableLongArray,"public static ImmutableLongArray of(long e0, long e1, long e2, long e3)","Returns an immutable array containing the given values, in order."
4073,common/primitives,com.google.common.primitives,Class ImmutableLongArray,"public static ImmutableLongArray of(long e0, long e1, long e2, long e3, long e4)","Returns an immutable array containing the given values, in order."
4074,common/primitives,com.google.common.primitives,Class ImmutableLongArray,"public static ImmutableLongArray of(long e0, long e1, long e2, long e3, long e4, long e5)","Returns an immutable array containing the given values, in order."
4075,common/primitives,com.google.common.primitives,Class ImmutableLongArray,"public static ImmutableLongArray of(long first, long... rest)","Returns an immutable array containing the given values, in order. The array rest must not be longer than Integer.MAX_VALUE - 1."
4076,common/primitives,com.google.common.primitives,Class ImmutableLongArray,public static ImmutableLongArray copyOf(long[] values),"Returns an immutable array containing the given values, in order."
4077,common/primitives,com.google.common.primitives,Class ImmutableLongArray,public static ImmutableLongArray copyOf(Collection<Long> values),"Returns an immutable array containing the given values, in order."
4078,common/primitives,com.google.common.primitives,Class ImmutableLongArray,public static ImmutableLongArray copyOf(Iterable<Long> values),"Returns an immutable array containing the given values, in order. Performance note: this method delegates to copyOf(Collection) if values is a Collection. Otherwise it creates a builder(int) and uses ImmutableLongArray.Builder.addAll(Iterable), with all the performance implications associated with that."
4079,common/primitives,com.google.common.primitives,Class ImmutableLongArray,public static ImmutableLongArray copyOf(LongStream stream),"Returns an immutable array containing all the values from stream, in order."
4080,common/primitives,com.google.common.primitives,Class ImmutableLongArray,public static ImmutableLongArray.Builder builder(int initialCapacity),"Returns a new, empty builder for ImmutableLongArray instances, sized to hold up to initialCapacity values without resizing. The returned builder is not thread-safe. Performance note: When feasible, initialCapacity should be the exact number of values that will be added, if that knowledge is readily available. It is better to guess a value slightly too high than slightly too low. If the value is not exact, the ImmutableLongArray that is built will very likely occupy more memory than strictly necessary; to trim memory usage, build using builder.build().trimmed()."
4081,common/primitives,com.google.common.primitives,Class ImmutableLongArray,public static ImmutableLongArray.Builder builder(),"Returns a new, empty builder for ImmutableLongArray instances, with a default initial capacity. The returned builder is not thread-safe. Performance note: The ImmutableLongArray that is built will very likely occupy more memory than necessary; to trim memory usage, build using builder.build().trimmed()."
4082,common/primitives,com.google.common.primitives,Class ImmutableLongArray,public int length(),Returns the number of values in this array.
4083,common/primitives,com.google.common.primitives,Class ImmutableLongArray,public boolean isEmpty(),Returns true if there are no values in this array (length() is zero).
4084,common/primitives,com.google.common.primitives,Class ImmutableLongArray,public long get(int index),Returns the long value present at the given index.
4085,common/primitives,com.google.common.primitives,Class ImmutableLongArray,public int indexOf(long target),"Returns the smallest index for which get(int) returns target, or -1 if no such index exists. Equivalent to asList().indexOf(target)."
4086,common/primitives,com.google.common.primitives,Class ImmutableLongArray,public int lastIndexOf(long target),"Returns the largest index for which get(int) returns target, or -1 if no such index exists. Equivalent to asList().lastIndexOf(target)."
4087,common/primitives,com.google.common.primitives,Class ImmutableLongArray,public boolean contains(long target),Returns true if target is present at any index in this array. Equivalent to asList().contains(target).
4088,common/primitives,com.google.common.primitives,Class ImmutableLongArray,public void forEach(LongConsumer consumer),"Invokes consumer for each value contained in this array, in order."
4089,common/primitives,com.google.common.primitives,Class ImmutableLongArray,public LongStream stream(),"Returns a stream over the values in this array, in order."
4090,common/primitives,com.google.common.primitives,Class ImmutableLongArray,public long[] toArray(),"Returns a new, mutable copy of this array's values, as a primitive long[]."
4091,common/primitives,com.google.common.primitives,Class ImmutableLongArray,"public ImmutableLongArray subArray(int startIndex, int endIndex)","Returns a new immutable array containing the values in the specified range. Performance note: The returned array has the same full memory footprint as this one does (no actual copying is performed). To reduce memory usage, use subArray(start, end).trimmed()."
4092,common/primitives,com.google.common.primitives,Class ImmutableLongArray,public List<Long> asList(),"Returns an immutable view of this array's values as a List; note that long values are boxed into Long instances on demand, which can be very expensive. The returned list should be used once and discarded. For any usages beyond that, pass the returned list to ImmutableList.copyOf and use that list instead."
4093,common/primitives,com.google.common.primitives,Class ImmutableLongArray,public boolean equals(@Nullable Object object),"Returns true if object is an ImmutableLongArray containing the same values as this one, in the same order."
4094,common/primitives,com.google.common.primitives,Class ImmutableLongArray,public int hashCode(),Returns an unspecified hash code for the contents of this immutable array.
4095,common/primitives,com.google.common.primitives,Class ImmutableLongArray,public String toString(),"Returns a string representation of this array in the same form as Arrays.toString(long[]), for example [1, 2, 3]."
4096,common/primitives,com.google.common.primitives,Class ImmutableLongArray.Builder,public ImmutableLongArray.Builder add(long value),Appends value to the end of the values the built ImmutableLongArray will contain.
4097,common/primitives,com.google.common.primitives,Class ImmutableLongArray.Builder,public ImmutableLongArray.Builder addAll(long[] values),"Appends values, in order, to the end of the values the built ImmutableLongArray will contain."
4098,common/primitives,com.google.common.primitives,Class ImmutableLongArray.Builder,public ImmutableLongArray.Builder addAll(Iterable<Long> values),"Appends values, in order, to the end of the values the built ImmutableLongArray will contain."
4099,common/primitives,com.google.common.primitives,Class ImmutableLongArray.Builder,public ImmutableLongArray.Builder addAll(Collection<Long> values),"Appends values, in order, to the end of the values the built ImmutableLongArray will contain."
4100,common/primitives,com.google.common.primitives,Class ImmutableLongArray.Builder,public ImmutableLongArray.Builder addAll(LongStream stream),"Appends all values from stream, in order, to the end of the values the built ImmutableLongArray will contain."
4101,common/primitives,com.google.common.primitives,Class ImmutableLongArray.Builder,public ImmutableLongArray.Builder addAll(ImmutableLongArray values),"Appends values, in order, to the end of the values the built ImmutableLongArray will contain."
4102,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>","public static <T,K,V> Collector<T,?,ImmutableMap<K,V>> toImmutableMap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction)","Returns a Collector that accumulates elements into an ImmutableMap whose keys and values are the result of applying the provided mapping functions to the input elements. Entries appear in the result ImmutableMap in encounter order. If the mapped keys contain duplicates (according to Object.equals(Object), an IllegalArgumentException is thrown when the collection operation is performed. (This differs from the Collector returned by Collectors.toMap(Function, Function), which throws an IllegalStateException.)"
4103,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>","public static <T,K,V> Collector<T,?,ImmutableMap<K,V>> toImmutableMap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction, BinaryOperator<V> mergeFunction)","Returns a Collector that accumulates elements into an ImmutableMap whose keys and values are the result of applying the provided mapping functions to the input elements. If the mapped keys contain duplicates (according to Object.equals(Object)), the values are merged using the specified merging function. Entries will appear in the encounter order of the first occurrence of the key."
4104,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>","public static <K,V> ImmutableMap<K,V> of()","Returns the empty map. This map behaves and performs comparably to Collections.emptyMap(), and is preferable mainly for consistency and maintainability of your code."
4105,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>","public static <K,V> ImmutableMap<K,V> of(K k1, V v1)","Returns an immutable map containing a single entry. This map behaves and performs comparably to Collections.singletonMap(K, V) but will not accept a null key or value. It is preferable mainly for consistency and maintainability of your code."
4106,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>","public static <K,V> ImmutableMap<K,V> of(K k1, V v1, K k2, V v2)","Returns an immutable map containing the given entries, in order."
4107,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>","public static <K,V> ImmutableMap<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3)","Returns an immutable map containing the given entries, in order."
4108,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>","public static <K,V> ImmutableMap<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)","Returns an immutable map containing the given entries, in order."
4109,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>","public static <K,V> ImmutableMap<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)","Returns an immutable map containing the given entries, in order."
4110,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>","public static <K,V> ImmutableMap.Builder<K,V> builder()",Returns a new builder. The generated builder is equivalent to the builder created by the ImmutableMap.Builder constructor.
4111,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>","@Betapublic static <K,V> ImmutableMap.Builder<K,V> builderWithExpectedSize(int expectedSize)","Returns a new builder, expecting the specified number of entries to be added. If expectedSize is exactly the number of entries added to the builder before ImmutableMap.Builder.build() is called, the builder is likely to perform better than an unsized builder() would have. It is not specified if any performance benefits apply if expectedSize is close to, but not exactly, the number of entries added to the builder."
4112,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>","public static <K,V> ImmutableMap<K,V> copyOf(Map<? extends K,? extends V> map)","Returns an immutable map containing the same entries as map. The returned map iterates over entries in the same order as the entrySet of the original map. If map somehow contains entries with duplicate keys (for example, if it is a SortedMap whose comparator is not consistent with equals), the results of this method are undefined. Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change."
4113,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>","@Betapublic static <K,V> ImmutableMap<K,V> copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)",Returns an immutable map containing the specified entries. The returned map iterates over entries in the same order as the original iterable.
4114,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>","@CanIgnoreReturnValue @Deprecatedpublic final V put(K k, V v)",Deprecated. Unsupported operation.
4115,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>","@CanIgnoreReturnValue @Deprecatedpublic final V putIfAbsent(K key, V value)",Deprecated. Unsupported operation.
4116,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>","@Deprecatedpublic final boolean replace(K key, V oldValue, V newValue)",Deprecated. Unsupported operation.
4117,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>","@Deprecatedpublic final V replace(K key, V value)",Deprecated. Unsupported operation.
4118,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>","@Deprecatedpublic final V computeIfAbsent(K key, Function<? super K,? extends V> mappingFunction)",Deprecated. Unsupported operation.
4119,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>","@Deprecatedpublic final V computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)",Deprecated. Unsupported operation.
4120,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>","@Deprecatedpublic final V compute(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)",Deprecated. Unsupported operation.
4121,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>","@Deprecatedpublic final V merge(K key, V value, BiFunction<? super V,? super V,? extends V> remappingFunction)",Deprecated. Unsupported operation.
4122,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>","@Deprecatedpublic final void putAll(Map<? extends K,? extends V> map)",Deprecated. Unsupported operation.
4123,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>","@Deprecatedpublic final void replaceAll(BiFunction<? super K,? super V,? extends V> function)",Deprecated. Unsupported operation.
4124,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>",@Deprecatedpublic final V remove(Object o),Deprecated. Unsupported operation.
4125,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>","@Deprecatedpublic final boolean remove(Object key, Object value)",Deprecated. Unsupported operation.
4126,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>",@Deprecatedpublic final void clear(),Deprecated. Unsupported operation.
4127,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>",public boolean isEmpty(),Description copied from interface: java.util.Map
4128,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>",public boolean containsKey(@Nullable Object key),Description copied from interface: java.util.Map
4129,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>",public boolean containsValue(@Nullable Object value),Description copied from interface: java.util.Map
4130,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>",public abstract V get(@Nullable Object key),Description copied from interface: java.util.Map
4131,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>","public final V getOrDefault(@Nullable Object key, V defaultValue)",Description copied from interface: java.util.Map
4132,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>","public ImmutableSet<Map.Entry<K,V>> entrySet()","Returns an immutable set of the mappings in this map. The iteration order is specified by the method used to create this map. Typically, this is insertion order."
4133,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>",public ImmutableSet<K> keySet(),"Returns an immutable set of the keys in this map, in the same order that they appear in entrySet."
4134,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>",public ImmutableCollection<V> values(),"Returns an immutable collection of the values in this map, in the same order that they appear in entrySet."
4135,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>","public ImmutableSetMultimap<K,V> asMultimap()",Returns a multimap view of the map.
4136,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>",public boolean equals(@Nullable Object object),Description copied from class: java.lang.Object
4137,common/collect,com.google.common.collect,"Class ImmutableMap<K,V>",public int hashCode(),Description copied from class: java.lang.Object
4138,common/collect,com.google.common.collect,"Class ImmutableMap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableMap.Builder<K,V> put(K key, V value)","Associates key with value in the built map. Duplicate keys are not allowed, and will cause build() to fail."
4139,common/collect,com.google.common.collect,"Class ImmutableMap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableMap.Builder<K,V> put(Map.Entry<? extends K,? extends V> entry)","Adds the given entry to the map, making it immutable if necessary. Duplicate keys are not allowed, and will cause build() to fail."
4140,common/collect,com.google.common.collect,"Class ImmutableMap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableMap.Builder<K,V> putAll(Map<? extends K,? extends V> map)","Associates all of the given map's keys and values in the built map. Duplicate keys are not allowed, and will cause build() to fail."
4141,common/collect,com.google.common.collect,"Class ImmutableMap.Builder<K,V>","@CanIgnoreReturnValue @Betapublic ImmutableMap.Builder<K,V> putAll(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)","Adds all of the given entries to the built map. Duplicate keys are not allowed, and will cause build() to fail."
4142,common/collect,com.google.common.collect,"Class ImmutableMap.Builder<K,V>","@CanIgnoreReturnValue @Betapublic ImmutableMap.Builder<K,V> orderEntriesByValue(Comparator<? super V> valueComparator)","Configures this Builder to order entries by value according to the specified comparator. The sort order is stable, that is, if two entries have values that compare as equivalent, the entry that was inserted first will be first in the built map's iteration order."
4143,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>","public static <K,V> ImmutableMultimap<K,V> of()",Returns an empty multimap.
4144,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>","public static <K,V> ImmutableMultimap<K,V> of(K k1, V v1)",Returns an immutable multimap containing a single entry.
4145,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>","public static <K,V> ImmutableMultimap<K,V> of(K k1, V v1, K k2, V v2)","Returns an immutable multimap containing the given entries, in order."
4146,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>","public static <K,V> ImmutableMultimap<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3)","Returns an immutable multimap containing the given entries, in the key-grouped insertion order described in the class documentation."
4147,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>","public static <K,V> ImmutableMultimap<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)","Returns an immutable multimap containing the given entries, in the key-grouped insertion order described in the class documentation."
4148,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>","public static <K,V> ImmutableMultimap<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)","Returns an immutable multimap containing the given entries, in the key-grouped insertion order described in the class documentation."
4149,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>","public static <K,V> ImmutableMultimap.Builder<K,V> builder()",Returns a new builder. The generated builder is equivalent to the builder created by the ImmutableMultimap.Builder constructor.
4150,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>","public static <K,V> ImmutableMultimap<K,V> copyOf(Multimap<? extends K,? extends V> multimap)","Returns an immutable multimap containing the same mappings as multimap, in the key-grouped iteration order described in the class documentation. Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change."
4151,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>","@Betapublic static <K,V> ImmutableMultimap<K,V> copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)","Returns an immutable multimap containing the specified entries. The returned multimap iterates over keys in the order they were first encountered in the input, and the values for each key are iterated in the order they were encountered."
4152,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>",@CanIgnoreReturnValue @Deprecatedpublic ImmutableCollection<V> removeAll(Object key),Deprecated. Unsupported operation.
4153,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>","@CanIgnoreReturnValue @Deprecatedpublic ImmutableCollection<V> replaceValues(K key, Iterable<? extends V> values)",Deprecated. Unsupported operation.
4154,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>",@Deprecatedpublic void clear(),Deprecated. Unsupported operation.
4155,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>",public abstract ImmutableCollection<V> get(K key),"Returns an immutable collection of the values for the given key. If no mappings in the multimap have the provided key, an empty immutable collection is returned. The values are in the same order as the parameters used to build this multimap."
4156,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>","public abstract ImmutableMultimap<V,K> inverse()","Returns an immutable multimap which is the inverse of this one. For every key-value mapping in the original, the result will have a mapping with key and value reversed."
4157,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>","@CanIgnoreReturnValue @Deprecatedpublic boolean put(K key, V value)",Deprecated. Unsupported operation.
4158,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>","@CanIgnoreReturnValue @Deprecatedpublic boolean putAll(K key, Iterable<? extends V> values)",Deprecated. Unsupported operation.
4159,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>","@CanIgnoreReturnValue @Deprecatedpublic boolean putAll(Multimap<? extends K,? extends V> multimap)",Deprecated. Unsupported operation.
4160,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>","@CanIgnoreReturnValue @Deprecatedpublic boolean remove(Object key, Object value)",Deprecated. Unsupported operation.
4161,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>",public boolean containsKey(@Nullable Object key),Description copied from interface: Multimap
4162,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>",public boolean containsValue(@Nullable Object value),Description copied from interface: Multimap
4163,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>",public int size(),Description copied from interface: Multimap
4164,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>",public ImmutableSet<K> keySet(),"Returns an immutable set of the distinct keys in this multimap, in the same order as they appear in this multimap."
4165,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>","public ImmutableMap<K,Collection<V>> asMap()",Returns an immutable map that associates each key with its corresponding values in the multimap. Keys and values appear in the same order as in this multimap.
4166,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>","public ImmutableCollection<Map.Entry<K,V>> entries()",Returns an immutable collection of all key-value pairs in the multimap.
4167,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>","public void forEach(BiConsumer<? super K,? super V> action)",Description copied from interface: Multimap
4168,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>",public ImmutableMultiset<K> keys(),"Returns an immutable multiset containing all the keys in this multimap, in the same order and with the same frequencies as they appear in this multimap; to get only a single occurrence of each key, use keySet()."
4169,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>",public ImmutableCollection<V> values(),"Returns an immutable collection of the values in this multimap. Its iterator traverses the values for the first key, the values for the second key, and so on."
4170,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>",public boolean isEmpty(),Description copied from interface: Multimap
4171,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>","public boolean containsEntry(@Nullable Object key, @Nullable Object value)",Description copied from interface: Multimap
4172,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>",public boolean equals(@Nullable Object object),Description copied from class: java.lang.Object
4173,common/collect,com.google.common.collect,"Class ImmutableMultimap<K,V>",public int hashCode(),"Returns the hash code for this multimap. The hash code of a multimap is defined as the hash code of the map view, as returned by Multimap.asMap()."
4174,common/collect,com.google.common.collect,"Class ImmutableMultimap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableMultimap.Builder<K,V> put(K key, V value)",Adds a key-value mapping to the built multimap.
4175,common/collect,com.google.common.collect,"Class ImmutableMultimap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableMultimap.Builder<K,V> put(Map.Entry<? extends K,? extends V> entry)",Adds an entry to the built multimap.
4176,common/collect,com.google.common.collect,"Class ImmutableMultimap.Builder<K,V>","@CanIgnoreReturnValue @Betapublic ImmutableMultimap.Builder<K,V> putAll(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)",Adds entries to the built multimap.
4177,common/collect,com.google.common.collect,"Class ImmutableMultimap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableMultimap.Builder<K,V> putAll(K key, Iterable<? extends V> values)",Stores a collection of values with the same key in the built multimap.
4178,common/collect,com.google.common.collect,"Class ImmutableMultimap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableMultimap.Builder<K,V> putAll(K key, V... values)",Stores an array of values with the same key in the built multimap.
4179,common/collect,com.google.common.collect,"Class ImmutableMultimap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableMultimap.Builder<K,V> putAll(Multimap<? extends K,? extends V> multimap)","Stores another multimap's entries in the built multimap. The generated multimap's key and value orderings correspond to the iteration ordering of the multimap.asMap() view, with new keys and values following any existing keys and values."
4180,common/collect,com.google.common.collect,"Class ImmutableMultimap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableMultimap.Builder<K,V> orderKeysBy(Comparator<? super K> keyComparator)",Specifies the ordering of the generated multimap's keys.
4181,common/collect,com.google.common.collect,"Class ImmutableMultimap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableMultimap.Builder<K,V> orderValuesBy(Comparator<? super V> valueComparator)",Specifies the ordering of the generated multimap's values for each key.
4182,common/collect,com.google.common.collect,Class ImmutableMultiset<E>,"public static <E> Collector<E,?,ImmutableMultiset<E>> toImmutableMultiset()",Returns a Collector that accumulates the input elements into a new ImmutableMultiset. Elements iterate in order by the first appearance of that element in encounter order.
4183,common/collect,com.google.common.collect,Class ImmutableMultiset<E>,"public static <T,E> Collector<T,?,ImmutableMultiset<E>> toImmutableMultiset(Function<? super T,? extends E> elementFunction, ToIntFunction<? super T> countFunction)","Returns a Collector that accumulates elements into an ImmutableMultiset whose elements are the result of applying elementFunction to the inputs, with counts equal to the result of applying countFunction to the inputs. If the mapped elements contain duplicates (according to Object.equals(java.lang.Object)), the first occurrence in encounter order appears in the resulting multiset, with count equal to the sum of the outputs of countFunction.applyAsInt(t) for each t mapped to that element."
4184,common/collect,com.google.common.collect,Class ImmutableMultiset<E>,public static <E> ImmutableMultiset<E> of(),Returns the empty immutable multiset.
4185,common/collect,com.google.common.collect,Class ImmutableMultiset<E>,public static <E> ImmutableMultiset<E> of(E element),Returns an immutable multiset containing a single element.
4186,common/collect,com.google.common.collect,Class ImmutableMultiset<E>,"public static <E> ImmutableMultiset<E> of(E e1, E e2)","Returns an immutable multiset containing the given elements, in order."
4187,common/collect,com.google.common.collect,Class ImmutableMultiset<E>,"public static <E> ImmutableMultiset<E> of(E e1, E e2, E e3)","Returns an immutable multiset containing the given elements, in the grouped iteration order described in the class documentation."
4188,common/collect,com.google.common.collect,Class ImmutableMultiset<E>,"public static <E> ImmutableMultiset<E> of(E e1, E e2, E e3, E e4)","Returns an immutable multiset containing the given elements, in the grouped iteration order described in the class documentation."
4189,common/collect,com.google.common.collect,Class ImmutableMultiset<E>,"public static <E> ImmutableMultiset<E> of(E e1, E e2, E e3, E e4, E e5)","Returns an immutable multiset containing the given elements, in the grouped iteration order described in the class documentation."
4190,common/collect,com.google.common.collect,Class ImmutableMultiset<E>,"public static <E> ImmutableMultiset<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E... others)","Returns an immutable multiset containing the given elements, in the grouped iteration order described in the class documentation."
4191,common/collect,com.google.common.collect,Class ImmutableMultiset<E>,public static <E> ImmutableMultiset<E> copyOf(E[] elements),"Returns an immutable multiset containing the given elements, in the grouped iteration order described in the class documentation."
4192,common/collect,com.google.common.collect,Class ImmutableMultiset<E>,public static <E> ImmutableMultiset<E> copyOf(Iterable<? extends E> elements),"Returns an immutable multiset containing the given elements, in the grouped iteration order described in the class documentation."
4193,common/collect,com.google.common.collect,Class ImmutableMultiset<E>,public static <E> ImmutableMultiset<E> copyOf(Iterator<? extends E> elements),"Returns an immutable multiset containing the given elements, in the grouped iteration order described in the class documentation."
4194,common/collect,com.google.common.collect,Class ImmutableMultiset<E>,public UnmodifiableIterator<E> iterator(),Description copied from class: ImmutableCollection
4195,common/collect,com.google.common.collect,Class ImmutableMultiset<E>,public ImmutableList<E> asList(),Description copied from class: ImmutableCollection
4196,common/collect,com.google.common.collect,Class ImmutableMultiset<E>,public boolean contains(@Nullable Object object),Description copied from class: java.util.AbstractCollection
4197,common/collect,com.google.common.collect,Class ImmutableMultiset<E>,"@CanIgnoreReturnValue @Deprecatedpublic final int add(E element, int occurrences)",Deprecated. Unsupported operation.
4198,common/collect,com.google.common.collect,Class ImmutableMultiset<E>,"@CanIgnoreReturnValue @Deprecatedpublic final int remove(Object element, int occurrences)",Deprecated. Unsupported operation.
4199,common/collect,com.google.common.collect,Class ImmutableMultiset<E>,"@CanIgnoreReturnValue @Deprecatedpublic final int setCount(E element, int count)",Deprecated. Unsupported operation.
4200,common/collect,com.google.common.collect,Class ImmutableMultiset<E>,"@CanIgnoreReturnValue @Deprecatedpublic final boolean setCount(E element, int oldCount, int newCount)",Deprecated. Unsupported operation.
4201,common/collect,com.google.common.collect,Class ImmutableMultiset<E>,public boolean equals(@Nullable Object object),Description copied from class: java.lang.Object
4202,common/collect,com.google.common.collect,Class ImmutableMultiset<E>,public int hashCode(),Description copied from class: java.lang.Object
4203,common/collect,com.google.common.collect,Class ImmutableMultiset<E>,public String toString(),Description copied from class: java.util.AbstractCollection
4204,common/collect,com.google.common.collect,Class ImmutableMultiset<E>,public abstract ImmutableSet<E> elementSet(),Description copied from interface: Multiset
4205,common/collect,com.google.common.collect,Class ImmutableMultiset<E>,public ImmutableSet<Multiset.Entry<E>> entrySet(),Description copied from interface: Multiset
4206,common/collect,com.google.common.collect,Class ImmutableMultiset.Builder<E>,@CanIgnoreReturnValuepublic ImmutableMultiset.Builder<E> add(E element),Adds element to the ImmutableMultiset.
4207,common/collect,com.google.common.collect,Class ImmutableMultiset.Builder<E>,@CanIgnoreReturnValuepublic ImmutableMultiset.Builder<E> add(E... elements),Adds each element of elements to the ImmutableMultiset.
4208,common/collect,com.google.common.collect,Class ImmutableMultiset.Builder<E>,"@CanIgnoreReturnValuepublic ImmutableMultiset.Builder<E> addCopies(E element, int occurrences)",Adds a number of occurrences of an element to this ImmutableMultiset.
4209,common/collect,com.google.common.collect,Class ImmutableMultiset.Builder<E>,"@CanIgnoreReturnValuepublic ImmutableMultiset.Builder<E> setCount(E element, int count)",Adds or removes the necessary occurrences of an element such that the element attains the desired count.
4210,common/collect,com.google.common.collect,Class ImmutableMultiset.Builder<E>,@CanIgnoreReturnValuepublic ImmutableMultiset.Builder<E> addAll(Iterable<? extends E> elements),Adds each element of elements to the ImmutableMultiset.
4211,common/collect,com.google.common.collect,Class ImmutableMultiset.Builder<E>,@CanIgnoreReturnValuepublic ImmutableMultiset.Builder<E> addAll(Iterator<? extends E> elements),Adds each element of elements to the ImmutableMultiset.
4212,common/graph,com.google.common.graph,"Class ImmutableNetwork<N,E>","protected final com.google.common.graph.MapIteratorCache<N,com.google.common.graph.NetworkConnections<N,E>> nodeConnections",
4213,common/graph,com.google.common.graph,"Class ImmutableNetwork<N,E>","public static <N,E> ImmutableNetwork<N,E> copyOf(Network<N,E> network)",Returns an immutable copy of network.
4214,common/graph,com.google.common.graph,"Class ImmutableNetwork<N,E>","@Deprecatedpublic static <N,E> ImmutableNetwork<N,E> copyOf(ImmutableNetwork<N,E> network)",Deprecated. no need to use this
4215,common/graph,com.google.common.graph,"Class ImmutableNetwork<N,E>",public ImmutableGraph<N> asGraph(),Description copied from interface: Network
4216,common/graph,com.google.common.graph,"Class ImmutableNetwork<N,E>",public Set<N> nodes(),Description copied from interface: Network
4217,common/graph,com.google.common.graph,"Class ImmutableNetwork<N,E>",public Set<E> edges(),Description copied from interface: Network
4218,common/graph,com.google.common.graph,"Class ImmutableNetwork<N,E>",public boolean isDirected(),Description copied from interface: Network
4219,common/graph,com.google.common.graph,"Class ImmutableNetwork<N,E>",public boolean allowsParallelEdges(),Description copied from interface: Network
4220,common/graph,com.google.common.graph,"Class ImmutableNetwork<N,E>",public boolean allowsSelfLoops(),Description copied from interface: Network
4221,common/graph,com.google.common.graph,"Class ImmutableNetwork<N,E>",public ElementOrder<N> nodeOrder(),Description copied from interface: Network
4222,common/graph,com.google.common.graph,"Class ImmutableNetwork<N,E>",public ElementOrder<E> edgeOrder(),Description copied from interface: Network
4223,common/graph,com.google.common.graph,"Class ImmutableNetwork<N,E>",public Set<E> incidentEdges(N node),Description copied from interface: Network
4224,common/graph,com.google.common.graph,"Class ImmutableNetwork<N,E>",public EndpointPair<N> incidentNodes(E edge),Description copied from interface: Network
4225,common/graph,com.google.common.graph,"Class ImmutableNetwork<N,E>",public Set<N> adjacentNodes(N node),Description copied from interface: Network
4226,common/graph,com.google.common.graph,"Class ImmutableNetwork<N,E>","public Set<E> edgesConnecting(N nodeU, N nodeV)",Description copied from interface: Network
4227,common/graph,com.google.common.graph,"Class ImmutableNetwork<N,E>",public Set<E> inEdges(N node),Description copied from interface: Network
4228,common/graph,com.google.common.graph,"Class ImmutableNetwork<N,E>",public Set<E> outEdges(N node),Description copied from interface: Network
4229,common/graph,com.google.common.graph,"Class ImmutableNetwork<N,E>",public Set<N> predecessors(N node),Description copied from interface: Network
4230,common/graph,com.google.common.graph,"Class ImmutableNetwork<N,E>",public Set<N> successors(N node),Description copied from interface: Network
4231,common/graph,com.google.common.graph,"Class ImmutableNetwork<N,E>","protected final com.google.common.graph.NetworkConnections<N,E> checkedConnections(N node)",
4232,common/graph,com.google.common.graph,"Class ImmutableNetwork<N,E>",protected final N checkedReferenceNode(E edge),
4233,common/graph,com.google.common.graph,"Class ImmutableNetwork<N,E>",protected final boolean containsNode(N node),
4234,common/graph,com.google.common.graph,"Class ImmutableNetwork.Builder<N,E>","@CanIgnoreReturnValuepublic ImmutableNetwork.Builder<N,E> addNode(N node)","Adds node if it is not already present. Nodes must be unique, just as Map keys must be. They must also be non-null."
4235,common/graph,com.google.common.graph,"Class ImmutableNetwork.Builder<N,E>","@CanIgnoreReturnValuepublic ImmutableNetwork.Builder<N,E> addEdge(N nodeU, N nodeV, E edge)","Adds edge connecting nodeU to nodeV. If the network is directed, edge will be directed in this network; otherwise, it will be undirected. edge must be unique to this network, just as a Map key must be. It must also be non-null. If nodeU and nodeV are not already present in this network, this method will silently add nodeU and nodeV to the network. If edge already connects nodeU to nodeV (in the specified order if this network isDirected(), else in any order), then this method will have no effect."
4236,common/graph,com.google.common.graph,"Class ImmutableNetwork.Builder<N,E>","@CanIgnoreReturnValuepublic ImmutableNetwork.Builder<N,E> addEdge(EndpointPair<N> endpoints, E edge)","Adds edge connecting endpoints. In an undirected network, edge will also connect nodeV to nodeU. If this network is directed, edge will be directed in this network; if it is undirected, edge will be undirected in this network. If this network is directed, endpoints must be ordered. edge must be unique to this network, just as a Map key must be. It must also be non-null. If either or both endpoints are not already present in this network, this method will silently add each missing endpoint to the network. If edge already connects an endpoint pair equal to endpoints, then this method will have no effect."
4237,common/collect,com.google.common.collect,"Class ImmutableRangeMap<K extends Comparable<?>,V>","public static <T,K extends Comparable<? super K>,V> Collector<T,?,ImmutableRangeMap<K,V>> toImmutableRangeMap(Function<? super T,Range<K>> keyFunction, Function<? super T,? extends V> valueFunction)","Returns a Collector that accumulates the input elements into a new ImmutableRangeMap. As in ImmutableRangeMap.Builder, overlapping ranges are not permitted."
4238,common/collect,com.google.common.collect,"Class ImmutableRangeMap<K extends Comparable<?>,V>","public static <K extends Comparable<?>,V> ImmutableRangeMap<K,V> of()",Returns an empty immutable range map.
4239,common/collect,com.google.common.collect,"Class ImmutableRangeMap<K extends Comparable<?>,V>","public static <K extends Comparable<?>,V> ImmutableRangeMap<K,V> of(Range<K> range, V value)",Returns an immutable range map mapping a single range to a single value.
4240,common/collect,com.google.common.collect,"Class ImmutableRangeMap<K extends Comparable<?>,V>","public static <K extends Comparable<?>,V> ImmutableRangeMap<K,V> copyOf(RangeMap<K,? extends V> rangeMap)",
4241,common/collect,com.google.common.collect,"Class ImmutableRangeMap<K extends Comparable<?>,V>","public static <K extends Comparable<?>,V> ImmutableRangeMap.Builder<K,V> builder()",Returns a new builder for an immutable range map.
4242,common/collect,com.google.common.collect,"Class ImmutableRangeMap<K extends Comparable<?>,V>",public V get(K key),Description copied from interface: RangeMap
4243,common/collect,com.google.common.collect,"Class ImmutableRangeMap<K extends Comparable<?>,V>","public @Nullable Map.Entry<Range<K>,V> getEntry(K key)",Description copied from interface: RangeMap
4244,common/collect,com.google.common.collect,"Class ImmutableRangeMap<K extends Comparable<?>,V>",public Range<K> span(),Description copied from interface: RangeMap
4245,common/collect,com.google.common.collect,"Class ImmutableRangeMap<K extends Comparable<?>,V>","@Deprecatedpublic void put(Range<K> range, V value)",Deprecated. Unsupported operation.
4246,common/collect,com.google.common.collect,"Class ImmutableRangeMap<K extends Comparable<?>,V>","@Deprecatedpublic void putCoalescing(Range<K> range, V value)",Deprecated. Unsupported operation.
4247,common/collect,com.google.common.collect,"Class ImmutableRangeMap<K extends Comparable<?>,V>","@Deprecatedpublic void putAll(RangeMap<K,V> rangeMap)",Deprecated. Unsupported operation.
4248,common/collect,com.google.common.collect,"Class ImmutableRangeMap<K extends Comparable<?>,V>",@Deprecatedpublic void clear(),Deprecated. Unsupported operation.
4249,common/collect,com.google.common.collect,"Class ImmutableRangeMap<K extends Comparable<?>,V>",@Deprecatedpublic void remove(Range<K> range),Deprecated. Unsupported operation.
4250,common/collect,com.google.common.collect,"Class ImmutableRangeMap<K extends Comparable<?>,V>","@Deprecatedpublic void merge(Range<K> range, V value, BiFunction<? super V,? super V,? extends V> remappingFunction)",Deprecated. Unsupported operation.
4251,common/collect,com.google.common.collect,"Class ImmutableRangeMap<K extends Comparable<?>,V>","public ImmutableMap<Range<K>,V> asMapOfRanges()",Description copied from interface: RangeMap
4252,common/collect,com.google.common.collect,"Class ImmutableRangeMap<K extends Comparable<?>,V>","public ImmutableMap<Range<K>,V> asDescendingMapOfRanges()",Description copied from interface: RangeMap
4253,common/collect,com.google.common.collect,"Class ImmutableRangeMap<K extends Comparable<?>,V>","public ImmutableRangeMap<K,V> subRangeMap(Range<K> range)",Description copied from interface: RangeMap
4254,common/collect,com.google.common.collect,"Class ImmutableRangeMap<K extends Comparable<?>,V>",public int hashCode(),Description copied from class: java.lang.Object
4255,common/collect,com.google.common.collect,"Class ImmutableRangeMap<K extends Comparable<?>,V>",public boolean equals(@Nullable Object o),Description copied from class: java.lang.Object
4256,common/collect,com.google.common.collect,"Class ImmutableRangeMap.Builder<K extends Comparable<?>,V>","@CanIgnoreReturnValuepublic ImmutableRangeMap.Builder<K,V> put(Range<K> range, V value)",Associates the specified range with the specified value.
4257,common/collect,com.google.common.collect,"Class ImmutableRangeMap.Builder<K extends Comparable<?>,V>","@CanIgnoreReturnValuepublic ImmutableRangeMap.Builder<K,V> putAll(RangeMap<K,? extends V> rangeMap)",Copies all associations from the specified range map into this builder.
4258,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,"public static <E extends Comparable<? super E>> Collector<Range<E>,?,ImmutableRangeSet<E>> toImmutableRangeSet()","Returns a Collector that accumulates the input elements into a new ImmutableRangeSet. As in ImmutableRangeSet.Builder, overlapping ranges are not permitted and adjacent ranges will be merged."
4259,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,public static <C extends Comparable> ImmutableRangeSet<C> of(),Returns an empty immutable range set.
4260,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,public static <C extends Comparable> ImmutableRangeSet<C> of(Range<C> range),"Returns an immutable range set containing the specified single range. If range.isEmpty(), this is equivalent to of()."
4261,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,public static <C extends Comparable> ImmutableRangeSet<C> copyOf(RangeSet<C> rangeSet),Returns an immutable copy of the specified RangeSet.
4262,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,public static <C extends Comparable<?>> ImmutableRangeSet<C> copyOf(Iterable<Range<C>> ranges),"Returns an ImmutableRangeSet containing each of the specified disjoint ranges. Overlapping ranges and empty ranges are forbidden, though adjacent ranges are permitted and will be merged."
4263,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,public static <C extends Comparable<?>> ImmutableRangeSet<C> unionOf(Iterable<Range<C>> ranges),"Returns an ImmutableRangeSet representing the union of the specified ranges. This is the smallest RangeSet which encloses each of the specified ranges. Duplicate or connected ranges are permitted, and will be coalesced in the result."
4264,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,public boolean intersects(Range<C> otherRange),Description copied from interface: RangeSet
4265,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,public boolean encloses(Range<C> otherRange),Description copied from interface: RangeSet
4266,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,public Range<C> rangeContaining(C value),Description copied from interface: RangeSet
4267,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,public Range<C> span(),Description copied from interface: RangeSet
4268,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,public boolean isEmpty(),Description copied from interface: RangeSet
4269,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,@Deprecatedpublic void add(Range<C> range),Deprecated. Unsupported operation.
4270,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,@Deprecatedpublic void addAll(RangeSet<C> other),Deprecated. Unsupported operation.
4271,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,@Deprecatedpublic void addAll(Iterable<Range<C>> other),Deprecated. Unsupported operation.
4272,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,@Deprecatedpublic void remove(Range<C> range),Deprecated. Unsupported operation.
4273,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,@Deprecatedpublic void removeAll(RangeSet<C> other),Deprecated. Unsupported operation.
4274,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,@Deprecatedpublic void removeAll(Iterable<Range<C>> other),Deprecated. Unsupported operation.
4275,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,public ImmutableSet<Range<C>> asRanges(),Description copied from interface: RangeSet
4276,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,public ImmutableSet<Range<C>> asDescendingSetOfRanges(),Description copied from interface: RangeSet
4277,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,public ImmutableRangeSet<C> complement(),Description copied from interface: RangeSet
4278,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,public ImmutableRangeSet<C> union(RangeSet<C> other),Returns a new range set consisting of the union of this range set and other. This is essentially the same as TreeRangeSet.create(this).addAll(other) except it returns an ImmutableRangeSet.
4279,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,public ImmutableRangeSet<C> intersection(RangeSet<C> other),Returns a new range set consisting of the intersection of this range set and other. This is essentially the same as TreeRangeSet.create(this).removeAll(other.complement()) except it returns an ImmutableRangeSet.
4280,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,public ImmutableRangeSet<C> difference(RangeSet<C> other),Returns a new range set consisting of the difference of this range set and other. This is essentially the same as TreeRangeSet.create(this).removeAll(other) except it returns an ImmutableRangeSet.
4281,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,public ImmutableRangeSet<C> subRangeSet(Range<C> range),Returns a view of the intersection of this range set with the given range.
4282,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,public ImmutableSortedSet<C> asSet(DiscreteDomain<C> domain),"Returns an ImmutableSortedSet containing the same values in the given domain contained by this range set. Note: a.asSet(d).equals(b.asSet(d)) does not imply a.equals(b)! For example, a and b could be [2..4] and (1..5), or the empty ranges [3..3) and [4..4). Warning: Be extremely careful what you do with the asSet view of a large range set (such as ImmutableRangeSet.of(Range.greaterThan(0))). Certain operations on such a set can be performed efficiently, but others (such as Set.hashCode() or Collections.frequency(java.util.Collection<?>, java.lang.Object)) can cause major performance problems. The returned set's Object.toString() method returns a short-hand form of the set's contents, such as [1..100]}."
4283,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,public static <C extends Comparable<?>> ImmutableRangeSet.Builder<C> builder(),Returns a new builder for an immutable range set.
4284,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,public boolean contains(C value),Description copied from interface: RangeSet
4285,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,public void clear(),Description copied from interface: RangeSet
4286,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,public boolean enclosesAll(RangeSet<C> other),Description copied from interface: RangeSet
4287,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,public boolean equals(@Nullable Object obj),Description copied from class: java.lang.Object
4288,common/collect,com.google.common.collect,Class ImmutableRangeSet<C extends Comparable>,public final int hashCode(),Description copied from class: java.lang.Object
4289,common/collect,com.google.common.collect,Class ImmutableRangeSet.Builder<C extends Comparable<?>>,@CanIgnoreReturnValuepublic ImmutableRangeSet.Builder<C> add(Range<C> range),"Add the specified range to this builder. Adjacent ranges are permitted and will be merged, but overlapping ranges will cause an exception when build() is called."
4290,common/collect,com.google.common.collect,Class ImmutableRangeSet.Builder<C extends Comparable<?>>,@CanIgnoreReturnValuepublic ImmutableRangeSet.Builder<C> addAll(RangeSet<C> ranges),"Add all ranges from the specified range set to this builder. Adjacent ranges are permitted and will be merged, but overlapping ranges will cause an exception when build() is called."
4291,common/collect,com.google.common.collect,Class ImmutableRangeSet.Builder<C extends Comparable<?>>,@CanIgnoreReturnValuepublic ImmutableRangeSet.Builder<C> addAll(Iterable<Range<C>> ranges),"Add all of the specified ranges to this builder. Adjacent ranges are permitted and will be merged, but overlapping ranges will cause an exception when build() is called."
4292,common/collect,com.google.common.collect,Class ImmutableSet<E>,"public static <E> Collector<E,?,ImmutableSet<E>> toImmutableSet()","Returns a Collector that accumulates the input elements into a new ImmutableSet. Elements appear in the resulting set in the encounter order of the stream; if the stream contains duplicates (according to Object.equals(Object)), only the first duplicate in encounter order will appear in the result."
4293,common/collect,com.google.common.collect,Class ImmutableSet<E>,public static <E> ImmutableSet<E> of(),"Returns the empty immutable set. Preferred over Collections.emptySet() for code consistency, and because the return type conveys the immutability guarantee."
4294,common/collect,com.google.common.collect,Class ImmutableSet<E>,public static <E> ImmutableSet<E> of(E element),"Returns an immutable set containing element. Preferred over Collections.singleton(T) for code consistency, null rejection, and because the return type conveys the immutability guarantee."
4295,common/collect,com.google.common.collect,Class ImmutableSet<E>,"public static <E> ImmutableSet<E> of(E e1, E e2)","Returns an immutable set containing the given elements, minus duplicates, in the order each was first specified. That is, if multiple elements are equal, all except the first are ignored."
4296,common/collect,com.google.common.collect,Class ImmutableSet<E>,"public static <E> ImmutableSet<E> of(E e1, E e2, E e3)","Returns an immutable set containing the given elements, minus duplicates, in the order each was first specified. That is, if multiple elements are equal, all except the first are ignored."
4297,common/collect,com.google.common.collect,Class ImmutableSet<E>,"public static <E> ImmutableSet<E> of(E e1, E e2, E e3, E e4)","Returns an immutable set containing the given elements, minus duplicates, in the order each was first specified. That is, if multiple elements are equal, all except the first are ignored."
4298,common/collect,com.google.common.collect,Class ImmutableSet<E>,"public static <E> ImmutableSet<E> of(E e1, E e2, E e3, E e4, E e5)","Returns an immutable set containing the given elements, minus duplicates, in the order each was first specified. That is, if multiple elements are equal, all except the first are ignored."
4299,common/collect,com.google.common.collect,Class ImmutableSet<E>,"@SafeVarargspublic static <E> ImmutableSet<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E... others)","Returns an immutable set containing the given elements, minus duplicates, in the order each was first specified. That is, if multiple elements are equal, all except the first are ignored. The array others must not be longer than Integer.MAX_VALUE - 6."
4300,common/collect,com.google.common.collect,Class ImmutableSet<E>,public static <E> ImmutableSet<E> copyOf(Collection<? extends E> elements),"Returns an immutable set containing each of elements, minus duplicates, in the order each appears first in the source collection. Performance note: This method will sometimes recognize that the actual copy operation is unnecessary; for example, copyOf(copyOf(anArrayList)) will copy the data only once. This reduces the expense of habitually making defensive copies at API boundaries. However, the precise conditions for skipping the copy operation are undefined."
4301,common/collect,com.google.common.collect,Class ImmutableSet<E>,public static <E> ImmutableSet<E> copyOf(Iterable<? extends E> elements),"Returns an immutable set containing each of elements, minus duplicates, in the order each appears first in the source iterable. This method iterates over elements only once. Performance note: This method will sometimes recognize that the actual copy operation is unnecessary; for example, copyOf(copyOf(anArrayList)) should copy the data only once. This reduces the expense of habitually making defensive copies at API boundaries. However, the precise conditions for skipping the copy operation are undefined."
4302,common/collect,com.google.common.collect,Class ImmutableSet<E>,public static <E> ImmutableSet<E> copyOf(Iterator<? extends E> elements),"Returns an immutable set containing each of elements, minus duplicates, in the order each appears first in the source iterator."
4303,common/collect,com.google.common.collect,Class ImmutableSet<E>,public static <E> ImmutableSet<E> copyOf(E[] elements),"Returns an immutable set containing each of elements, minus duplicates, in the order each appears first in the source array."
4304,common/collect,com.google.common.collect,Class ImmutableSet<E>,public boolean equals(@Nullable Object object),Description copied from class: java.lang.Object
4305,common/collect,com.google.common.collect,Class ImmutableSet<E>,public int hashCode(),Description copied from class: java.lang.Object
4306,common/collect,com.google.common.collect,Class ImmutableSet<E>,public abstract UnmodifiableIterator<E> iterator(),Description copied from class: ImmutableCollection
4307,common/collect,com.google.common.collect,Class ImmutableSet<E>,public ImmutableList<E> asList(),Description copied from class: ImmutableCollection
4308,common/collect,com.google.common.collect,Class ImmutableSet<E>,public static <E> ImmutableSet.Builder<E> builder(),Returns a new builder. The generated builder is equivalent to the builder created by the ImmutableSet.Builder constructor.
4309,common/collect,com.google.common.collect,Class ImmutableSet.Builder<E>,@CanIgnoreReturnValuepublic ImmutableSet.Builder<E> add(E element),Description copied from class: ImmutableCollection.Builder
4310,common/collect,com.google.common.collect,Class ImmutableSet.Builder<E>,@CanIgnoreReturnValuepublic ImmutableSet.Builder<E> add(E... elements),Description copied from class: ImmutableCollection.Builder
4311,common/collect,com.google.common.collect,Class ImmutableSet.Builder<E>,@CanIgnoreReturnValuepublic ImmutableSet.Builder<E> addAll(Iterable<? extends E> elements),"Adds each element of elements to the ImmutableSet, ignoring duplicate elements (only the first duplicate element is added)."
4312,common/collect,com.google.common.collect,Class ImmutableSet.Builder<E>,@CanIgnoreReturnValuepublic ImmutableSet.Builder<E> addAll(Iterator<? extends E> elements),Description copied from class: ImmutableCollection.Builder
4313,common/collect,com.google.common.collect,"Class ImmutableSetMultimap<K,V>","public static <T,K,V> Collector<T,?,ImmutableSetMultimap<K,V>> toImmutableSetMultimap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction)","Returns a Collector that accumulates elements into an ImmutableSetMultimap whose keys and values are the result of applying the provided mapping functions to the input elements. For streams with defined encounter order (as defined in the Ordering section of the java.util.stream Javadoc), that order is preserved, but entries are grouped by key. Example: static final Multimap<Character, String> FIRST_LETTER_MULTIMAP = Stream.of(banana, apple, carrot, asparagus, cherry) .collect(toImmutableSetMultimap(str -> str.charAt(0), str -> str.substring(1))); // is equivalent to static final Multimap<Character, String> FIRST_LETTER_MULTIMAP = new ImmutableSetMultimap.Builder<Character, String>() .put('b', anana) .putAll('a', pple, sparagus) .putAll('c', arrot, herry) .build(); "
4314,common/collect,com.google.common.collect,"Class ImmutableSetMultimap<K,V>","public static <T,K,V> Collector<T,?,ImmutableSetMultimap<K,V>> flatteningToImmutableSetMultimap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends Stream<? extends V>> valuesFunction)","Returns a Collector accumulating entries into an ImmutableSetMultimap. Each input element is mapped to a key and a stream of values, each of which are put into the resulting Multimap, in the encounter order of the stream and the encounter order of the streams of values. Example: static final ImmutableSetMultimap<Character, Character> FIRST_LETTER_MULTIMAP = Stream.of(banana, apple, carrot, asparagus, cherry) .collect( flatteningToImmutableSetMultimap( str -> str.charAt(0), str -> str.substring(1).chars().mapToObj(c -> (char) c)); // is equivalent to static final ImmutableSetMultimap<Character, Character> FIRST_LETTER_MULTIMAP = ImmutableSetMultimap.<Character, Character>builder() .putAll('b', Arrays.asList('a', 'n', 'a', 'n', 'a')) .putAll('a', Arrays.asList('p', 'p', 'l', 'e')) .putAll('c', Arrays.asList('a', 'r', 'r', 'o', 't')) .putAll('a', Arrays.asList('s', 'p', 'a', 'r', 'a', 'g', 'u', 's')) .putAll('c', Arrays.asList('h', 'e', 'r', 'r', 'y')) .build(); // after deduplication, the resulting multimap is equivalent to static final ImmutableSetMultimap<Character, Character> FIRST_LETTER_MULTIMAP = ImmutableSetMultimap.<Character, Character>builder() .putAll('b', Arrays.asList('a', 'n')) .putAll('a', Arrays.asList('p', 'l', 'e', 's', 'a', 'r', 'g', 'u')) .putAll('c', Arrays.asList('a', 'r', 'o', 't', 'h', 'e', 'y')) .build(); }"
4315,common/collect,com.google.common.collect,"Class ImmutableSetMultimap<K,V>","public static <K,V> ImmutableSetMultimap<K,V> of()",Returns the empty multimap.
4316,common/collect,com.google.common.collect,"Class ImmutableSetMultimap<K,V>","public static <K,V> ImmutableSetMultimap<K,V> of(K k1, V v1)",Returns an immutable multimap containing a single entry.
4317,common/collect,com.google.common.collect,"Class ImmutableSetMultimap<K,V>","public static <K,V> ImmutableSetMultimap<K,V> of(K k1, V v1, K k2, V v2)","Returns an immutable multimap containing the given entries, in order. Repeated occurrences of an entry (according to Object.equals(java.lang.Object)) after the first are ignored."
4318,common/collect,com.google.common.collect,"Class ImmutableSetMultimap<K,V>","public static <K,V> ImmutableSetMultimap<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3)","Returns an immutable multimap containing the given entries, in order. Repeated occurrences of an entry (according to Object.equals(java.lang.Object)) after the first are ignored."
4319,common/collect,com.google.common.collect,"Class ImmutableSetMultimap<K,V>","public static <K,V> ImmutableSetMultimap<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)","Returns an immutable multimap containing the given entries, in order. Repeated occurrences of an entry (according to Object.equals(java.lang.Object)) after the first are ignored."
4320,common/collect,com.google.common.collect,"Class ImmutableSetMultimap<K,V>","public static <K,V> ImmutableSetMultimap<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)","Returns an immutable multimap containing the given entries, in order. Repeated occurrences of an entry (according to Object.equals(java.lang.Object)) after the first are ignored."
4321,common/collect,com.google.common.collect,"Class ImmutableSetMultimap<K,V>","public static <K,V> ImmutableSetMultimap.Builder<K,V> builder()",Returns a new ImmutableSetMultimap.Builder.
4322,common/collect,com.google.common.collect,"Class ImmutableSetMultimap<K,V>","public static <K,V> ImmutableSetMultimap<K,V> copyOf(Multimap<? extends K,? extends V> multimap)","Returns an immutable set multimap containing the same mappings as multimap. The generated multimap's key and value orderings correspond to the iteration ordering of the multimap.asMap() view. Repeated occurrences of an entry in the multimap after the first are ignored. Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change."
4323,common/collect,com.google.common.collect,"Class ImmutableSetMultimap<K,V>","@Betapublic static <K,V> ImmutableSetMultimap<K,V> copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)","Returns an immutable multimap containing the specified entries. The returned multimap iterates over keys in the order they were first encountered in the input, and the values for each key are iterated in the order they were encountered. If two values for the same key are equal, the first value encountered is used."
4324,common/collect,com.google.common.collect,"Class ImmutableSetMultimap<K,V>",public ImmutableSet<V> get(K key),"Returns an immutable set of the values for the given key. If no mappings in the multimap have the provided key, an empty immutable set is returned. The values are in the same order as the parameters used to build this multimap."
4325,common/collect,com.google.common.collect,"Class ImmutableSetMultimap<K,V>","public ImmutableSetMultimap<V,K> inverse()","Returns an immutable multimap which is the inverse of this one. For every key-value mapping in the original, the result will have a mapping with key and value reversed. Because an inverse of a set multimap cannot contain multiple pairs with the same key and value, this method returns an ImmutableSetMultimap rather than the ImmutableMultimap specified in the ImmutableMultimap class."
4326,common/collect,com.google.common.collect,"Class ImmutableSetMultimap<K,V>",@CanIgnoreReturnValue @Deprecatedpublic ImmutableSet<V> removeAll(Object key),Deprecated. Unsupported operation.
4327,common/collect,com.google.common.collect,"Class ImmutableSetMultimap<K,V>","@CanIgnoreReturnValue @Deprecatedpublic ImmutableSet<V> replaceValues(K key, Iterable<? extends V> values)",Deprecated. Unsupported operation.
4328,common/collect,com.google.common.collect,"Class ImmutableSetMultimap<K,V>","public ImmutableSet<Map.Entry<K,V>> entries()","Returns an immutable collection of all key-value pairs in the multimap. Its iterator traverses the values for the first key, the values for the second key, and so on."
4329,common/collect,com.google.common.collect,"Class ImmutableSetMultimap<K,V>",public boolean isEmpty(),Description copied from interface: Multimap
4330,common/collect,com.google.common.collect,"Class ImmutableSetMultimap<K,V>","public boolean containsEntry(@Nullable Object key, @Nullable Object value)",Description copied from interface: Multimap
4331,common/collect,com.google.common.collect,"Class ImmutableSetMultimap<K,V>",public boolean equals(@Nullable Object object),Description copied from class: java.lang.Object
4332,common/collect,com.google.common.collect,"Class ImmutableSetMultimap<K,V>",public int hashCode(),"Returns the hash code for this multimap. The hash code of a multimap is defined as the hash code of the map view, as returned by Multimap.asMap()."
4333,common/collect,com.google.common.collect,"Class ImmutableSetMultimap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableSetMultimap.Builder<K,V> put(K key, V value)",Adds a key-value mapping to the built multimap if it is not already present.
4334,common/collect,com.google.common.collect,"Class ImmutableSetMultimap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableSetMultimap.Builder<K,V> put(Map.Entry<? extends K,? extends V> entry)",Adds an entry to the built multimap if it is not already present.
4335,common/collect,com.google.common.collect,"Class ImmutableSetMultimap.Builder<K,V>","@CanIgnoreReturnValue @Betapublic ImmutableSetMultimap.Builder<K,V> putAll(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)",Adds entries to the built multimap.
4336,common/collect,com.google.common.collect,"Class ImmutableSetMultimap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableSetMultimap.Builder<K,V> putAll(K key, Iterable<? extends V> values)",Description copied from class: ImmutableMultimap.Builder
4337,common/collect,com.google.common.collect,"Class ImmutableSetMultimap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableSetMultimap.Builder<K,V> putAll(K key, V... values)",Description copied from class: ImmutableMultimap.Builder
4338,common/collect,com.google.common.collect,"Class ImmutableSetMultimap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableSetMultimap.Builder<K,V> putAll(Multimap<? extends K,? extends V> multimap)",Description copied from class: ImmutableMultimap.Builder
4339,common/collect,com.google.common.collect,"Class ImmutableSetMultimap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableSetMultimap.Builder<K,V> orderKeysBy(Comparator<? super K> keyComparator)",Specifies the ordering of the generated multimap's keys.
4340,common/collect,com.google.common.collect,"Class ImmutableSetMultimap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableSetMultimap.Builder<K,V> orderValuesBy(Comparator<? super V> valueComparator)","Specifies the ordering of the generated multimap's values for each key. If this method is called, the sets returned by the get() method of the generated multimap and its Multimap.asMap() view are ImmutableSortedSet instances. However, serialization does not preserve that property, though it does maintain the key and value ordering."
4341,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","public static <T,K,V> Collector<T,?,ImmutableSortedMap<K,V>> toImmutableSortedMap(Comparator<? super K> comparator, Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction)","Returns a Collector that accumulates elements into an ImmutableSortedMap whose keys and values are the result of applying the provided mapping functions to the input elements. The generated map is sorted by the specified comparator. If the mapped keys contain duplicates (according to the specified comparator), an IllegalArgumentException is thrown when the collection operation is performed. (This differs from the Collector returned by Collectors.toMap(Function, Function), which throws an IllegalStateException.)"
4342,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","public static <T,K,V> Collector<T,?,ImmutableSortedMap<K,V>> toImmutableSortedMap(Comparator<? super K> comparator, Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction, BinaryOperator<V> mergeFunction)","Returns a Collector that accumulates elements into an ImmutableSortedMap whose keys and values are the result of applying the provided mapping functions to the input elements. If the mapped keys contain duplicates (according to the comparator), the the values are merged using the specified merging function. Entries will appear in the encounter order of the first occurrence of the key."
4343,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","public static <K,V> ImmutableSortedMap<K,V> of()",Returns the empty sorted map.
4344,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","public static <K extends Comparable<? super K>,V> ImmutableSortedMap<K,V> of(K k1, V v1)",Returns an immutable map containing a single entry.
4345,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","public static <K extends Comparable<? super K>,V> ImmutableSortedMap<K,V> of(K k1, V v1, K k2, V v2)","Returns an immutable sorted map containing the given entries, sorted by the natural ordering of their keys."
4346,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","public static <K extends Comparable<? super K>,V> ImmutableSortedMap<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3)","Returns an immutable sorted map containing the given entries, sorted by the natural ordering of their keys."
4347,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","public static <K extends Comparable<? super K>,V> ImmutableSortedMap<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)","Returns an immutable sorted map containing the given entries, sorted by the natural ordering of their keys."
4348,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","public static <K extends Comparable<? super K>,V> ImmutableSortedMap<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)","Returns an immutable sorted map containing the given entries, sorted by the natural ordering of their keys."
4349,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","public static <K,V> ImmutableSortedMap<K,V> copyOf(Map<? extends K,? extends V> map)","Returns an immutable map containing the same entries as map, sorted by the natural ordering of the keys. Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. This method is not type-safe, as it may be called on a map with keys that are not mutually comparable."
4350,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","public static <K,V> ImmutableSortedMap<K,V> copyOf(Map<? extends K,? extends V> map, Comparator<? super K> comparator)","Returns an immutable map containing the same entries as map, with keys sorted by the provided comparator. Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change."
4351,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","@Betapublic static <K,V> ImmutableSortedMap<K,V> copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)","Returns an immutable map containing the given entries, with keys sorted by the provided comparator. This method is not type-safe, as it may be called on a map with keys that are not mutually comparable."
4352,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","@Betapublic static <K,V> ImmutableSortedMap<K,V> copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries, Comparator<? super K> comparator)","Returns an immutable map containing the given entries, with keys sorted by the provided comparator."
4353,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","public static <K,V> ImmutableSortedMap<K,V> copyOfSorted(SortedMap<K,? extends V> map)","Returns an immutable map containing the same entries as the provided sorted map, with the same ordering. Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change."
4354,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","public static <K extends Comparable<?>,V> ImmutableSortedMap.Builder<K,V> naturalOrder()",Returns a builder that creates immutable sorted maps whose keys are ordered by their natural ordering. The sorted maps use Ordering.natural() as the comparator.
4355,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","public static <K,V> ImmutableSortedMap.Builder<K,V> orderedBy(Comparator<K> comparator)","Returns a builder that creates immutable sorted maps with an explicit comparator. If the comparator has a more general type than the map's keys, such as creating a SortedMap<Integer, String> with a Comparator<Number>, use the ImmutableSortedMap.Builder constructor instead."
4356,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","public static <K extends Comparable<?>,V> ImmutableSortedMap.Builder<K,V> reverseOrder()",Returns a builder that creates immutable sorted maps whose keys are ordered by the reverse of their natural ordering.
4357,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>",public int size(),Description copied from interface: java.util.Map
4358,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","public void forEach(BiConsumer<? super K,? super V> action)",Description copied from interface: java.util.Map
4359,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>",public V get(@Nullable Object key),Description copied from interface: java.util.Map
4360,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","public ImmutableSet<Map.Entry<K,V>> entrySet()","Returns an immutable set of the mappings in this map, sorted by the key ordering."
4361,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>",public ImmutableSortedSet<K> keySet(),Returns an immutable sorted set of the keys in this map.
4362,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>",public ImmutableCollection<V> values(),"Returns an immutable collection of the values in this map, sorted by the ordering of the corresponding keys."
4363,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>",public Comparator<? super K> comparator(),"Returns the comparator that orders the keys, which is Ordering.natural() when the natural ordering of the keys is used. Note that its behavior is not consistent with TreeMap.comparator(), which returns null to indicate natural ordering."
4364,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>",public K firstKey(),Description copied from interface: java.util.SortedMap
4365,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>",public K lastKey(),Description copied from interface: java.util.SortedMap
4366,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","public ImmutableSortedMap<K,V> headMap(K toKey)","This method returns a ImmutableSortedMap, consisting of the entries whose keys are less than toKey. The SortedMap.headMap(K) documentation states that a submap of a submap throws an IllegalArgumentException if passed a toKey greater than an earlier toKey. However, this method doesn't throw an exception in that situation, but instead keeps the original toKey."
4367,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","public ImmutableSortedMap<K,V> headMap(K toKey, boolean inclusive)","This method returns a ImmutableSortedMap, consisting of the entries whose keys are less than (or equal to, if inclusive) toKey. The SortedMap.headMap(K) documentation states that a submap of a submap throws an IllegalArgumentException if passed a toKey greater than an earlier toKey. However, this method doesn't throw an exception in that situation, but instead keeps the original toKey."
4368,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","public ImmutableSortedMap<K,V> subMap(K fromKey, K toKey)","This method returns a ImmutableSortedMap, consisting of the entries whose keys ranges from fromKey, inclusive, to toKey, exclusive. The SortedMap.subMap(K, K) documentation states that a submap of a submap throws an IllegalArgumentException if passed a fromKey less than an earlier fromKey. However, this method doesn't throw an exception in that situation, but instead keeps the original fromKey. Similarly, this method keeps the original toKey, instead of throwing an exception, if passed a toKey greater than an earlier toKey."
4369,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","public ImmutableSortedMap<K,V> subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)","This method returns a ImmutableSortedMap, consisting of the entries whose keys ranges from fromKey to toKey, inclusive or exclusive as indicated by the boolean flags. The SortedMap.subMap(K, K) documentation states that a submap of a submap throws an IllegalArgumentException if passed a fromKey less than an earlier fromKey. However, this method doesn't throw an exception in that situation, but instead keeps the original fromKey. Similarly, this method keeps the original toKey, instead of throwing an exception, if passed a toKey greater than an earlier toKey."
4370,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","public ImmutableSortedMap<K,V> tailMap(K fromKey)","This method returns a ImmutableSortedMap, consisting of the entries whose keys are greater than or equals to fromKey. The SortedMap.tailMap(K) documentation states that a submap of a submap throws an IllegalArgumentException if passed a fromKey less than an earlier fromKey. However, this method doesn't throw an exception in that situation, but instead keeps the original fromKey."
4371,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","public ImmutableSortedMap<K,V> tailMap(K fromKey, boolean inclusive)","This method returns a ImmutableSortedMap, consisting of the entries whose keys are greater than (or equal to, if inclusive) fromKey. The SortedMap.tailMap(K) documentation states that a submap of a submap throws an IllegalArgumentException if passed a fromKey less than an earlier fromKey. However, this method doesn't throw an exception in that situation, but instead keeps the original fromKey."
4372,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","public Map.Entry<K,V> lowerEntry(K key)",Description copied from interface: java.util.NavigableMap
4373,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>",public K lowerKey(K key),Description copied from interface: java.util.NavigableMap
4374,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","public Map.Entry<K,V> floorEntry(K key)",Description copied from interface: java.util.NavigableMap
4375,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>",public K floorKey(K key),Description copied from interface: java.util.NavigableMap
4376,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","public Map.Entry<K,V> ceilingEntry(K key)",Description copied from interface: java.util.NavigableMap
4377,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>",public K ceilingKey(K key),Description copied from interface: java.util.NavigableMap
4378,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","public Map.Entry<K,V> higherEntry(K key)",Description copied from interface: java.util.NavigableMap
4379,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>",public K higherKey(K key),Description copied from interface: java.util.NavigableMap
4380,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","public Map.Entry<K,V> firstEntry()",Description copied from interface: java.util.NavigableMap
4381,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","public Map.Entry<K,V> lastEntry()",Description copied from interface: java.util.NavigableMap
4382,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","@CanIgnoreReturnValue @Deprecatedpublic final Map.Entry<K,V> pollFirstEntry()",Deprecated. Unsupported operation.
4383,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","@CanIgnoreReturnValue @Deprecatedpublic final Map.Entry<K,V> pollLastEntry()",Deprecated. Unsupported operation.
4384,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","public ImmutableSortedMap<K,V> descendingMap()",Description copied from interface: java.util.NavigableMap
4385,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>",public ImmutableSortedSet<K> navigableKeySet(),Description copied from interface: java.util.NavigableMap
4386,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>",public ImmutableSortedSet<K> descendingKeySet(),Description copied from interface: java.util.NavigableMap
4387,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","@Deprecatedpublic static <T,K,V> Collector<T,?,ImmutableMap<K,V>> toImmutableMap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction)","Deprecated. Use toImmutableSortedMap(java.util.Comparator<? super K>, java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>)."
4388,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","@Deprecatedpublic static <T,K,V> Collector<T,?,ImmutableMap<K,V>> toImmutableMap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction, BinaryOperator<V> mergeFunction)","Deprecated. Use toImmutableSortedMap(java.util.Comparator<? super K>, java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>)."
4389,common/collect,com.google.common.collect,"Class ImmutableSortedMap<K,V>","@Deprecatedpublic static <K,V> ImmutableSortedMap.Builder<K,V> builder()","Deprecated. Use naturalOrder(), which offers better type-safety."
4390,common/collect,com.google.common.collect,"Class ImmutableSortedMap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableSortedMap.Builder<K,V> put(K key, V value)","Associates key with value in the built map. Duplicate keys, according to the comparator (which might be the keys' natural order), are not allowed, and will cause build() to fail."
4391,common/collect,com.google.common.collect,"Class ImmutableSortedMap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableSortedMap.Builder<K,V> put(Map.Entry<? extends K,? extends V> entry)","Adds the given entry to the map, making it immutable if necessary. Duplicate keys, according to the comparator (which might be the keys' natural order), are not allowed, and will cause build() to fail."
4392,common/collect,com.google.common.collect,"Class ImmutableSortedMap.Builder<K,V>","@CanIgnoreReturnValuepublic ImmutableSortedMap.Builder<K,V> putAll(Map<? extends K,? extends V> map)","Associates all of the given map's keys and values in the built map. Duplicate keys, according to the comparator (which might be the keys' natural order), are not allowed, and will cause build() to fail."
4393,common/collect,com.google.common.collect,"Class ImmutableSortedMap.Builder<K,V>","@CanIgnoreReturnValue @Betapublic ImmutableSortedMap.Builder<K,V> putAll(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)","Adds all the given entries to the built map. Duplicate keys, according to the comparator (which might be the keys' natural order), are not allowed, and will cause build() to fail."
4394,common/collect,com.google.common.collect,"Class ImmutableSortedMap.Builder<K,V>","@CanIgnoreReturnValue @Beta @Deprecatedpublic ImmutableSortedMap.Builder<K,V> orderEntriesByValue(Comparator<? super V> valueComparator)",Deprecated. Unsupported by ImmutableSortedMap.Builder.
4395,common/collect,com.google.common.collect,Class ImmutableSortedMultiset<E>,"public static <E> Collector<E,?,ImmutableSortedMultiset<E>> toImmutableSortedMultiset(Comparator<? super E> comparator)",Returns a Collector that accumulates the input elements into a new ImmutableMultiset. Elements are sorted by the specified comparator. Warning: comparator should be consistent with equals as explained in the Comparator documentation.
4396,common/collect,com.google.common.collect,Class ImmutableSortedMultiset<E>,"public static <T,E> Collector<T,?,ImmutableSortedMultiset<E>> toImmutableSortedMultiset(Comparator<? super E> comparator, Function<? super T,? extends E> elementFunction, ToIntFunction<? super T> countFunction)","Returns a Collector that accumulates elements into an ImmutableSortedMultiset whose elements are the result of applying elementFunction to the inputs, with counts equal to the result of applying countFunction to the inputs. If the mapped elements contain duplicates (according to comparator), the first occurrence in encounter order appears in the resulting multiset, with count equal to the sum of the outputs of countFunction.applyAsInt(t) for each t mapped to that element."
4397,common/collect,com.google.common.collect,Class ImmutableSortedMultiset<E>,public static <E> ImmutableSortedMultiset<E> of(),Returns the empty immutable sorted multiset.
4398,common/collect,com.google.common.collect,Class ImmutableSortedMultiset<E>,public static <E extends Comparable<? super E>> ImmutableSortedMultiset<E> of(E element),Returns an immutable sorted multiset containing a single element.
4399,common/collect,com.google.common.collect,Class ImmutableSortedMultiset<E>,"public static <E extends Comparable<? super E>> ImmutableSortedMultiset<E> of(E e1, E e2)",Returns an immutable sorted multiset containing the given elements sorted by their natural ordering.
4400,common/collect,com.google.common.collect,Class ImmutableSortedMultiset<E>,"public static <E extends Comparable<? super E>> ImmutableSortedMultiset<E> of(E e1, E e2, E e3)",Returns an immutable sorted multiset containing the given elements sorted by their natural ordering.
4401,common/collect,com.google.common.collect,Class ImmutableSortedMultiset<E>,"public static <E extends Comparable<? super E>> ImmutableSortedMultiset<E> of(E e1, E e2, E e3, E e4)",Returns an immutable sorted multiset containing the given elements sorted by their natural ordering.
4402,common/collect,com.google.common.collect,Class ImmutableSortedMultiset<E>,"public static <E extends Comparable<? super E>> ImmutableSortedMultiset<E> of(E e1, E e2, E e3, E e4, E e5)",Returns an immutable sorted multiset containing the given elements sorted by their natural ordering.
4403,common/collect,com.google.common.collect,Class ImmutableSortedMultiset<E>,"public static <E extends Comparable<? super E>> ImmutableSortedMultiset<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E... remaining)",Returns an immutable sorted multiset containing the given elements sorted by their natural ordering.
4404,common/collect,com.google.common.collect,Class ImmutableSortedMultiset<E>,public static <E extends Comparable<? super E>> ImmutableSortedMultiset<E> copyOf(E[] elements),Returns an immutable sorted multiset containing the given elements sorted by their natural ordering.
4405,common/collect,com.google.common.collect,Class ImmutableSortedMultiset<E>,public static <E> ImmutableSortedMultiset<E> copyOf(Iterable<? extends E> elements),"Returns an immutable sorted multiset containing the given elements sorted by their natural ordering. To create a copy of a SortedMultiset that preserves the comparator, call copyOfSorted(com.google.common.collect.SortedMultiset<E>) instead. This method iterates over elements at most once. Note that if s is a Multiset<String>, then ImmutableSortedMultiset.copyOf(s) returns an ImmutableSortedMultiset<String> containing each of the strings in s, while ImmutableSortedMultiset.of(s) returns an ImmutableSortedMultiset<Multiset<String>> containing one element (the given multiset itself). Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. This method is not type-safe, as it may be called on elements that are not mutually comparable."
4406,common/collect,com.google.common.collect,Class ImmutableSortedMultiset<E>,public static <E> ImmutableSortedMultiset<E> copyOf(Iterator<? extends E> elements),"Returns an immutable sorted multiset containing the given elements sorted by their natural ordering. This method is not type-safe, as it may be called on elements that are not mutually comparable."
4407,common/collect,com.google.common.collect,Class ImmutableSortedMultiset<E>,"public static <E> ImmutableSortedMultiset<E> copyOf(Comparator<? super E> comparator, Iterator<? extends E> elements)",Returns an immutable sorted multiset containing the given elements sorted by the given Comparator.
4408,common/collect,com.google.common.collect,Class ImmutableSortedMultiset<E>,"public static <E> ImmutableSortedMultiset<E> copyOf(Comparator<? super E> comparator, Iterable<? extends E> elements)","Returns an immutable sorted multiset containing the given elements sorted by the given Comparator. This method iterates over elements at most once. Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change."
4409,common/collect,com.google.common.collect,Class ImmutableSortedMultiset<E>,public static <E> ImmutableSortedMultiset<E> copyOfSorted(SortedMultiset<E> sortedMultiset),"Returns an immutable sorted multiset containing the elements of a sorted multiset, sorted by the same Comparator. That behavior differs from copyOf(Iterable), which always uses the natural ordering of the elements. Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. This method is safe to use even when sortedMultiset is a synchronized or concurrent collection that is currently being modified by another thread."
4410,common/collect,com.google.common.collect,Class ImmutableSortedMultiset<E>,public final Comparator<? super E> comparator(),Description copied from interface: SortedMultiset
4411,common/collect,com.google.common.collect,Class ImmutableSortedMultiset<E>,public abstract ImmutableSortedSet<E> elementSet(),Description copied from interface: Multiset
4412,common/collect,com.google.common.collect,Class ImmutableSortedMultiset<E>,public ImmutableSortedMultiset<E> descendingMultiset(),Description copied from interface: SortedMultiset
4413,common/collect,com.google.common.collect,Class ImmutableSortedMultiset<E>,@CanIgnoreReturnValue @Deprecatedpublic final Multiset.Entry<E> pollFirstEntry(),Deprecated. Unsupported operation.
4414,common/collect,com.google.common.collect,Class ImmutableSortedMultiset<E>,@CanIgnoreReturnValue @Deprecatedpublic final Multiset.Entry<E> pollLastEntry(),Deprecated. Unsupported operation.
4415,common/collect,com.google.common.collect,Class ImmutableSortedMultiset<E>,"public abstract ImmutableSortedMultiset<E> headMultiset(E upperBound, BoundType boundType)",Description copied from interface: SortedMultiset
4416,common/collect,com.google.common.collect,Class ImmutableSortedMultiset<E>,"public ImmutableSortedMultiset<E> subMultiset(E lowerBound, BoundType lowerBoundType, E upperBound, BoundType upperBoundType)",Description copied from interface: SortedMultiset
4417,common/collect,com.google.common.collect,Class ImmutableSortedMultiset<E>,"public abstract ImmutableSortedMultiset<E> tailMultiset(E lowerBound, BoundType boundType)",Description copied from interface: SortedMultiset
4418,common/collect,com.google.common.collect,Class ImmutableSortedMultiset<E>,public static <E> ImmutableSortedMultiset.Builder<E> orderedBy(Comparator<E> comparator),"Returns a builder that creates immutable sorted multisets with an explicit comparator. If the comparator has a more general type than the set being generated, such as creating a SortedMultiset<Integer> with a Comparator<Number>, use the ImmutableSortedMultiset.Builder constructor instead."
4419,common/collect,com.google.common.collect,Class ImmutableSortedMultiset<E>,public static <E extends Comparable<?>> ImmutableSortedMultiset.Builder<E> reverseOrder(),Returns a builder that creates immutable sorted multisets whose elements are ordered by the reverse of their natural ordering. Note: the type parameter E extends Comparable<?> rather than Comparable<? super E> as a workaround for javac bug 6468354.
4420,common/collect,com.google.common.collect,Class ImmutableSortedMultiset<E>,public static <E extends Comparable<?>> ImmutableSortedMultiset.Builder<E> naturalOrder(),"Returns a builder that creates immutable sorted multisets whose elements are ordered by their natural ordering. The sorted multisets use Ordering.natural() as the comparator. This method provides more type-safety than builder(), as it can be called only for classes that implement Comparable. Note: the type parameter E extends Comparable<?> rather than Comparable<? super E> as a workaround for javac bug 6468354."
4421,common/collect,com.google.common.collect,Class ImmutableSortedMultiset<E>,"@Deprecatedpublic static <E> Collector<E,?,ImmutableMultiset<E>> toImmutableMultiset()",Deprecated. Use toImmutableSortedMultiset(java.util.Comparator<? super E>).
4422,common/collect,com.google.common.collect,Class ImmutableSortedMultiset<E>,"@Deprecatedpublic static <T,E> Collector<T,?,ImmutableMultiset<E>> toImmutableMultiset(Function<? super T,? extends E> elementFunction, ToIntFunction<? super T> countFunction)",Deprecated. Use toImmutableSortedMultiset(java.util.Comparator<? super E>).
4423,common/collect,com.google.common.collect,Class ImmutableSortedMultiset.Builder<E>,@CanIgnoreReturnValuepublic ImmutableSortedMultiset.Builder<E> add(E element),Adds element to the ImmutableSortedMultiset.
4424,common/collect,com.google.common.collect,Class ImmutableSortedMultiset.Builder<E>,@CanIgnoreReturnValuepublic ImmutableSortedMultiset.Builder<E> add(E... elements),Adds each element of elements to the ImmutableSortedMultiset.
4425,common/collect,com.google.common.collect,Class ImmutableSortedMultiset.Builder<E>,"@CanIgnoreReturnValuepublic ImmutableSortedMultiset.Builder<E> addCopies(E element, int occurrences)",Adds a number of occurrences of an element to this ImmutableSortedMultiset.
4426,common/collect,com.google.common.collect,Class ImmutableSortedMultiset.Builder<E>,"@CanIgnoreReturnValuepublic ImmutableSortedMultiset.Builder<E> setCount(E element, int count)",Adds or removes the necessary occurrences of an element such that the element attains the desired count.
4427,common/collect,com.google.common.collect,Class ImmutableSortedMultiset.Builder<E>,@CanIgnoreReturnValuepublic ImmutableSortedMultiset.Builder<E> addAll(Iterable<? extends E> elements),Adds each element of elements to the ImmutableSortedMultiset.
4428,common/collect,com.google.common.collect,Class ImmutableSortedMultiset.Builder<E>,@CanIgnoreReturnValuepublic ImmutableSortedMultiset.Builder<E> addAll(Iterator<? extends E> elements),Adds each element of elements to the ImmutableSortedMultiset.
4429,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,"public static <E> Collector<E,?,ImmutableSortedSet<E>> toImmutableSortedSet(Comparator<? super E> comparator)","Returns a Collector that accumulates the input elements into a new ImmutableSortedSet, ordered by the specified comparator. If the elements contain duplicates (according to the comparator), only the first duplicate in encounter order will appear in the result."
4430,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,public static <E> ImmutableSortedSet<E> of(),Returns the empty immutable sorted set.
4431,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,public static <E extends Comparable<? super E>> ImmutableSortedSet<E> of(E element),Returns an immutable sorted set containing a single element.
4432,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,"public static <E extends Comparable<? super E>> ImmutableSortedSet<E> of(E e1, E e2)","Returns an immutable sorted set containing the given elements sorted by their natural ordering. When multiple elements are equivalent according to Comparable.compareTo(T), only the first one specified is included."
4433,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,"public static <E extends Comparable<? super E>> ImmutableSortedSet<E> of(E e1, E e2, E e3)","Returns an immutable sorted set containing the given elements sorted by their natural ordering. When multiple elements are equivalent according to Comparable.compareTo(T), only the first one specified is included."
4434,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,"public static <E extends Comparable<? super E>> ImmutableSortedSet<E> of(E e1, E e2, E e3, E e4)","Returns an immutable sorted set containing the given elements sorted by their natural ordering. When multiple elements are equivalent according to Comparable.compareTo(T), only the first one specified is included."
4435,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,"public static <E extends Comparable<? super E>> ImmutableSortedSet<E> of(E e1, E e2, E e3, E e4, E e5)","Returns an immutable sorted set containing the given elements sorted by their natural ordering. When multiple elements are equivalent according to Comparable.compareTo(T), only the first one specified is included."
4436,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,"public static <E extends Comparable<? super E>> ImmutableSortedSet<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E... remaining)","Returns an immutable sorted set containing the given elements sorted by their natural ordering. When multiple elements are equivalent according to Comparable.compareTo(T), only the first one specified is included."
4437,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,public static <E extends Comparable<? super E>> ImmutableSortedSet<E> copyOf(E[] elements),"Returns an immutable sorted set containing the given elements sorted by their natural ordering. When multiple elements are equivalent according to Comparable.compareTo(T), only the first one specified is included."
4438,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,public static <E> ImmutableSortedSet<E> copyOf(Iterable<? extends E> elements),"Returns an immutable sorted set containing the given elements sorted by their natural ordering. When multiple elements are equivalent according to compareTo(), only the first one specified is included. To create a copy of a SortedSet that preserves the comparator, call copyOfSorted(java.util.SortedSet<E>) instead. This method iterates over elements at most once. Note that if s is a Set<String>, then ImmutableSortedSet.copyOf(s) returns an ImmutableSortedSet<String> containing each of the strings in s, while ImmutableSortedSet.of(s) returns an ImmutableSortedSet<Set<String>> containing one element (the given set itself). Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. This method is not type-safe, as it may be called on elements that are not mutually comparable."
4439,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,public static <E> ImmutableSortedSet<E> copyOf(Collection<? extends E> elements),"Returns an immutable sorted set containing the given elements sorted by their natural ordering. When multiple elements are equivalent according to compareTo(), only the first one specified is included. To create a copy of a SortedSet that preserves the comparator, call copyOfSorted(java.util.SortedSet<E>) instead. This method iterates over elements at most once. Note that if s is a Set<String>, then ImmutableSortedSet.copyOf(s) returns an ImmutableSortedSet<String> containing each of the strings in s, while ImmutableSortedSet.of(s) returns an ImmutableSortedSet<Set<String>> containing one element (the given set itself). Note: Despite what the method name suggests, if elements is an ImmutableSortedSet, it may be returned instead of a copy. This method is not type-safe, as it may be called on elements that are not mutually comparable. This method is safe to use even when elements is a synchronized or concurrent collection that is currently being modified by another thread."
4440,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,public static <E> ImmutableSortedSet<E> copyOf(Iterator<? extends E> elements),"Returns an immutable sorted set containing the given elements sorted by their natural ordering. When multiple elements are equivalent according to compareTo(), only the first one specified is included. This method is not type-safe, as it may be called on elements that are not mutually comparable."
4441,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,"public static <E> ImmutableSortedSet<E> copyOf(Comparator<? super E> comparator, Iterator<? extends E> elements)","Returns an immutable sorted set containing the given elements sorted by the given Comparator. When multiple elements are equivalent according to compareTo(), only the first one specified is included."
4442,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,"public static <E> ImmutableSortedSet<E> copyOf(Comparator<? super E> comparator, Iterable<? extends E> elements)","Returns an immutable sorted set containing the given elements sorted by the given Comparator. When multiple elements are equivalent according to compare(), only the first one specified is included. This method iterates over elements at most once. Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change."
4443,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,"public static <E> ImmutableSortedSet<E> copyOf(Comparator<? super E> comparator, Collection<? extends E> elements)","Returns an immutable sorted set containing the given elements sorted by the given Comparator. When multiple elements are equivalent according to compareTo(), only the first one specified is included. Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. This method is safe to use even when elements is a synchronized or concurrent collection that is currently being modified by another thread."
4444,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,public static <E> ImmutableSortedSet<E> copyOfSorted(SortedSet<E> sortedSet),"Returns an immutable sorted set containing the elements of a sorted set, sorted by the same Comparator. That behavior differs from copyOf(Iterable), which always uses the natural ordering of the elements. Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. This method is safe to use even when sortedSet is a synchronized or concurrent collection that is currently being modified by another thread."
4445,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,public static <E> ImmutableSortedSet.Builder<E> orderedBy(Comparator<E> comparator),"Returns a builder that creates immutable sorted sets with an explicit comparator. If the comparator has a more general type than the set being generated, such as creating a SortedSet<Integer> with a Comparator<Number>, use the ImmutableSortedSet.Builder constructor instead."
4446,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,public static <E extends Comparable<?>> ImmutableSortedSet.Builder<E> reverseOrder(),Returns a builder that creates immutable sorted sets whose elements are ordered by the reverse of their natural ordering.
4447,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,public static <E extends Comparable<?>> ImmutableSortedSet.Builder<E> naturalOrder(),"Returns a builder that creates immutable sorted sets whose elements are ordered by their natural ordering. The sorted sets use Ordering.natural() as the comparator. This method provides more type-safety than builder(), as it can be called only for classes that implement Comparable."
4448,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,public Comparator<? super E> comparator(),"Returns the comparator that orders the elements, which is Ordering.natural() when the natural ordering of the elements is used. Note that its behavior is not consistent with SortedSet.comparator(), which returns null to indicate natural ordering."
4449,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,public abstract UnmodifiableIterator<E> iterator(),Description copied from class: ImmutableCollection
4450,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,public ImmutableSortedSet<E> headSet(E toElement),"Returns a view of the portion of this set whose elements are strictly less than toElement. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range. Equivalent to headSet(toElement, false). This method returns a serializable ImmutableSortedSet. The SortedSet.headSet(E) documentation states that a subset of a subset throws an IllegalArgumentException if passed a toElement greater than an earlier toElement. However, this method doesn't throw an exception in that situation, but instead keeps the original toElement."
4451,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,"public ImmutableSortedSet<E> headSet(E toElement, boolean inclusive)",Description copied from interface: java.util.NavigableSet
4452,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,"public ImmutableSortedSet<E> subSet(E fromElement, E toElement)","Returns a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive. (If fromElement and toElement are equal, the returned set is empty.) The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range. Equivalent to subSet(fromElement, true, toElement, false). This method returns a serializable ImmutableSortedSet. The SortedSet.subSet(E, E) documentation states that a subset of a subset throws an IllegalArgumentException if passed a fromElement smaller than an earlier fromElement. However, this method doesn't throw an exception in that situation, but instead keeps the original fromElement. Similarly, this method keeps the original toElement, instead of throwing an exception, if passed a toElement greater than an earlier toElement."
4453,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,"@GwtIncompatiblepublic ImmutableSortedSet<E> subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)",Description copied from interface: java.util.NavigableSet
4454,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,public ImmutableSortedSet<E> tailSet(E fromElement),"Returns a view of the portion of this set whose elements are greater than or equal to fromElement. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range. Equivalent to tailSet(fromElement, true). This method returns a serializable ImmutableSortedSet. The SortedSet.tailSet(E) documentation states that a subset of a subset throws an IllegalArgumentException if passed a fromElement smaller than an earlier fromElement. However, this method doesn't throw an exception in that situation, but instead keeps the original fromElement."
4455,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,"public ImmutableSortedSet<E> tailSet(E fromElement, boolean inclusive)",Description copied from interface: java.util.NavigableSet
4456,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,@GwtIncompatiblepublic E lower(E e),Description copied from interface: java.util.NavigableSet
4457,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,public E floor(E e),Description copied from interface: java.util.NavigableSet
4458,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,public E ceiling(E e),Description copied from interface: java.util.NavigableSet
4459,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,@GwtIncompatiblepublic E higher(E e),Description copied from interface: java.util.NavigableSet
4460,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,public E first(),Description copied from interface: java.util.SortedSet
4461,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,public E last(),Description copied from interface: java.util.SortedSet
4462,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,@CanIgnoreReturnValue @Deprecated @GwtIncompatiblepublic final E pollFirst(),Deprecated. Unsupported operation.
4463,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,@CanIgnoreReturnValue @Deprecated @GwtIncompatiblepublic final E pollLast(),Deprecated. Unsupported operation.
4464,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,@GwtIncompatiblepublic ImmutableSortedSet<E> descendingSet(),Description copied from interface: java.util.NavigableSet
4465,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,public Spliterator<E> spliterator(),Description copied from interface: java.util.Collection
4466,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,@GwtIncompatiblepublic abstract UnmodifiableIterator<E> descendingIterator(),Description copied from interface: java.util.NavigableSet
4467,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,"@Deprecatedpublic static <E> Collector<E,?,ImmutableSet<E>> toImmutableSet()",Deprecated. Use toImmutableSortedSet(java.util.Comparator<? super E>).
4468,common/collect,com.google.common.collect,Class ImmutableSortedSet<E>,@Deprecatedpublic static <E> ImmutableSortedSet.Builder<E> builder(),"Deprecated. Use naturalOrder(), which offers better type-safety."
4469,common/collect,com.google.common.collect,Class ImmutableSortedSet.Builder<E>,@CanIgnoreReturnValuepublic ImmutableSortedSet.Builder<E> add(E element),"Adds element to the ImmutableSortedSet. If the ImmutableSortedSet already contains element, then add has no effect. (only the previously added element is retained)."
4470,common/collect,com.google.common.collect,Class ImmutableSortedSet.Builder<E>,@CanIgnoreReturnValuepublic ImmutableSortedSet.Builder<E> add(E... elements),"Adds each element of elements to the ImmutableSortedSet, ignoring duplicate elements (only the first duplicate element is added)."
4471,common/collect,com.google.common.collect,Class ImmutableSortedSet.Builder<E>,@CanIgnoreReturnValuepublic ImmutableSortedSet.Builder<E> addAll(Iterable<? extends E> elements),"Adds each element of elements to the ImmutableSortedSet, ignoring duplicate elements (only the first duplicate element is added)."
4472,common/collect,com.google.common.collect,Class ImmutableSortedSet.Builder<E>,@CanIgnoreReturnValuepublic ImmutableSortedSet.Builder<E> addAll(Iterator<? extends E> elements),"Adds each element of elements to the ImmutableSortedSet, ignoring duplicate elements (only the first duplicate element is added)."
4473,common/collect,com.google.common.collect,"Class ImmutableTable<R,C,V>","public static <T,R,C,V> Collector<T,?,ImmutableTable<R,C,V>> toImmutableTable(Function<? super T,? extends R> rowFunction, Function<? super T,? extends C> columnFunction, Function<? super T,? extends V> valueFunction)","Returns a Collector that accumulates elements into an ImmutableTable. Each input element is mapped to one cell in the returned table, with the rows, columns, and values generated by applying the specified functions. The returned Collector will throw a NullPointerException at collection time if the row, column, or value functions return null on any input."
4474,common/collect,com.google.common.collect,"Class ImmutableTable<R,C,V>","public static <T,R,C,V> Collector<T,?,ImmutableTable<R,C,V>> toImmutableTable(Function<? super T,? extends R> rowFunction, Function<? super T,? extends C> columnFunction, Function<? super T,? extends V> valueFunction, BinaryOperator<V> mergeFunction)","Returns a Collector that accumulates elements into an ImmutableTable. Each input element is mapped to one cell in the returned table, with the rows, columns, and values generated by applying the specified functions. If multiple inputs are mapped to the same row and column pair, they will be combined with the specified merging function in encounter order. The returned Collector will throw a NullPointerException at collection time if the row, column, value, or merging functions return null on any input."
4475,common/collect,com.google.common.collect,"Class ImmutableTable<R,C,V>","public static <R,C,V> ImmutableTable<R,C,V> of()",Returns an empty immutable table.
4476,common/collect,com.google.common.collect,"Class ImmutableTable<R,C,V>","public static <R,C,V> ImmutableTable<R,C,V> of(R rowKey, C columnKey, V value)",Returns an immutable table containing a single cell.
4477,common/collect,com.google.common.collect,"Class ImmutableTable<R,C,V>","public static <R,C,V> ImmutableTable<R,C,V> copyOf(Table<? extends R,? extends C,? extends V> table)","Returns an immutable copy of the provided table. The Table.cellSet() iteration order of the provided table determines the iteration ordering of all views in the returned table. Note that some views of the original table and the copied table may have different iteration orders. For more control over the ordering, create a ImmutableTable.Builder and call ImmutableTable.Builder.orderRowsBy(java.util.Comparator<? super R>), ImmutableTable.Builder.orderColumnsBy(java.util.Comparator<? super C>), and ImmutableTable.Builder.putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change."
4478,common/collect,com.google.common.collect,"Class ImmutableTable<R,C,V>","public static <R,C,V> ImmutableTable.Builder<R,C,V> builder()",Returns a new builder. The generated builder is equivalent to the builder created by the ImmutableTable.Builder() constructor.
4479,common/collect,com.google.common.collect,"Class ImmutableTable<R,C,V>","public ImmutableSet<Table.Cell<R,C,V>> cellSet()",Description copied from interface: Table
4480,common/collect,com.google.common.collect,"Class ImmutableTable<R,C,V>",public ImmutableCollection<V> values(),Description copied from interface: Table
4481,common/collect,com.google.common.collect,"Class ImmutableTable<R,C,V>","public ImmutableMap<R,V> column(C columnKey)","Returns a view of all mappings that have the given column key. For each row key / column key / value mapping in the table with that column key, the returned map associates the row key with the value. If no mappings in the table have the provided column key, an empty map is returned. Changes to the returned map will update the underlying table, and vice versa."
4482,common/collect,com.google.common.collect,"Class ImmutableTable<R,C,V>",public ImmutableSet<C> columnKeySet(),Description copied from interface: Table
4483,common/collect,com.google.common.collect,"Class ImmutableTable<R,C,V>","public abstract ImmutableMap<C,Map<R,V>> columnMap()","Returns a view that associates each column key with the corresponding map from row keys to values. Changes to the returned map will update this table. The returned map does not support put() or putAll(), or setValue() on its entries. In contrast, the maps returned by columnMap().get() have the same behavior as those returned by Table.column(C). Those maps may support setValue(), put(), and putAll(). The value Map<R, V> instances in the returned map are ImmutableMap instances as well."
4484,common/collect,com.google.common.collect,"Class ImmutableTable<R,C,V>","public ImmutableMap<C,V> row(R rowKey)","Returns a view of all mappings that have the given row key. For each row key / column key / value mapping in the table with that row key, the returned map associates the column key with the value. If no mappings in the table have the provided row key, an empty map is returned. Changes to the returned map will update the underlying table, and vice versa."
4485,common/collect,com.google.common.collect,"Class ImmutableTable<R,C,V>",public ImmutableSet<R> rowKeySet(),Description copied from interface: Table
4486,common/collect,com.google.common.collect,"Class ImmutableTable<R,C,V>","public abstract ImmutableMap<R,Map<C,V>> rowMap()","Returns a view that associates each row key with the corresponding map from column keys to values. Changes to the returned map will update this table. The returned map does not support put() or putAll(), or setValue() on its entries. In contrast, the maps returned by rowMap().get() have the same behavior as those returned by Table.row(R). Those maps may support setValue(), put(), and putAll(). The value Map<C, V> instances in the returned map are ImmutableMap instances as well."
4487,common/collect,com.google.common.collect,"Class ImmutableTable<R,C,V>","public boolean contains(@Nullable Object rowKey, @Nullable Object columnKey)",Description copied from interface: Table
4488,common/collect,com.google.common.collect,"Class ImmutableTable<R,C,V>",public boolean containsValue(@Nullable Object value),Description copied from interface: Table
4489,common/collect,com.google.common.collect,"Class ImmutableTable<R,C,V>",@Deprecatedpublic final void clear(),Deprecated. Unsupported operation.
4490,common/collect,com.google.common.collect,"Class ImmutableTable<R,C,V>","@CanIgnoreReturnValue @Deprecatedpublic final V put(R rowKey, C columnKey, V value)",Deprecated. Unsupported operation.
4491,common/collect,com.google.common.collect,"Class ImmutableTable<R,C,V>","@Deprecatedpublic final void putAll(Table<? extends R,? extends C,? extends V> table)",Deprecated. Unsupported operation.
4492,common/collect,com.google.common.collect,"Class ImmutableTable<R,C,V>","@CanIgnoreReturnValue @Deprecatedpublic final V remove(Object rowKey, Object columnKey)",Deprecated. Unsupported operation.
4493,common/collect,com.google.common.collect,"Class ImmutableTable<R,C,V>",public boolean containsRow(@Nullable Object rowKey),Description copied from interface: Table
4494,common/collect,com.google.common.collect,"Class ImmutableTable<R,C,V>",public boolean containsColumn(@Nullable Object columnKey),Description copied from interface: Table
4495,common/collect,com.google.common.collect,"Class ImmutableTable<R,C,V>","public V get(@Nullable Object rowKey, @Nullable Object columnKey)",Description copied from interface: Table
4496,common/collect,com.google.common.collect,"Class ImmutableTable<R,C,V>",public boolean isEmpty(),Description copied from interface: Table
4497,common/collect,com.google.common.collect,"Class ImmutableTable<R,C,V>",public boolean equals(@Nullable Object obj),Description copied from class: java.lang.Object
4498,common/collect,com.google.common.collect,"Class ImmutableTable<R,C,V>",public int hashCode(),Description copied from class: java.lang.Object
4499,common/collect,com.google.common.collect,"Class ImmutableTable.Builder<R,C,V>","@CanIgnoreReturnValuepublic ImmutableTable.Builder<R,C,V> orderRowsBy(Comparator<? super R> rowComparator)",Specifies the ordering of the generated table's rows.
4500,common/collect,com.google.common.collect,"Class ImmutableTable.Builder<R,C,V>","@CanIgnoreReturnValuepublic ImmutableTable.Builder<R,C,V> orderColumnsBy(Comparator<? super C> columnComparator)",Specifies the ordering of the generated table's columns.
4501,common/collect,com.google.common.collect,"Class ImmutableTable.Builder<R,C,V>","@CanIgnoreReturnValuepublic ImmutableTable.Builder<R,C,V> put(R rowKey, C columnKey, V value)","Associates the (rowKey, columnKey) pair with value in the built table. Duplicate key pairs are not allowed and will cause build() to fail."
4502,common/collect,com.google.common.collect,"Class ImmutableTable.Builder<R,C,V>","@CanIgnoreReturnValuepublic ImmutableTable.Builder<R,C,V> put(Table.Cell<? extends R,? extends C,? extends V> cell)","Adds the given cell to the table, making it immutable if necessary. Duplicate key pairs are not allowed and will cause build() to fail."
4503,common/collect,com.google.common.collect,"Class ImmutableTable.Builder<R,C,V>","@CanIgnoreReturnValuepublic ImmutableTable.Builder<R,C,V> putAll(Table<? extends R,? extends C,? extends V> table)","Associates all of the given table's keys and values in the built table. Duplicate row key column key pairs are not allowed, and will cause build() to fail."
4504,common/reflect,com.google.common.reflect,Class ImmutableTypeToInstanceMap<B>,public static <B> ImmutableTypeToInstanceMap<B> of(),Returns an empty type to instance map.
4505,common/reflect,com.google.common.reflect,Class ImmutableTypeToInstanceMap<B>,public static <B> ImmutableTypeToInstanceMap.Builder<B> builder(),Returns a new builder.
4506,common/reflect,com.google.common.reflect,Class ImmutableTypeToInstanceMap<B>,public <T extends B> T getInstance(TypeToken<T> type),Description copied from interface: TypeToInstanceMap
4507,common/reflect,com.google.common.reflect,Class ImmutableTypeToInstanceMap<B>,public <T extends B> T getInstance(Class<T> type),Description copied from interface: TypeToInstanceMap
4508,common/reflect,com.google.common.reflect,Class ImmutableTypeToInstanceMap<B>,"@CanIgnoreReturnValue @Deprecatedpublic <T extends B> T putInstance(TypeToken<T> type, T value)",Deprecated. unsupported operation
4509,common/reflect,com.google.common.reflect,Class ImmutableTypeToInstanceMap<B>,"@CanIgnoreReturnValue @Deprecatedpublic <T extends B> T putInstance(Class<T> type, T value)",Deprecated. unsupported operation
4510,common/reflect,com.google.common.reflect,Class ImmutableTypeToInstanceMap<B>,"@CanIgnoreReturnValue @Deprecatedpublic B put(TypeToken<? extends B> key, B value)",Deprecated. unsupported operation
4511,common/reflect,com.google.common.reflect,Class ImmutableTypeToInstanceMap<B>,"@Deprecatedpublic void putAll(Map<? extends TypeToken<? extends B>,? extends B> map)",Deprecated. unsupported operation
4512,common/reflect,com.google.common.reflect,Class ImmutableTypeToInstanceMap.Builder<B>,"@CanIgnoreReturnValuepublic <T extends B> ImmutableTypeToInstanceMap.Builder<B> put(Class<T> key, T value)","Associates key with value in the built map. Duplicate keys are not allowed, and will cause build() to fail."
4513,common/reflect,com.google.common.reflect,Class ImmutableTypeToInstanceMap.Builder<B>,"@CanIgnoreReturnValuepublic <T extends B> ImmutableTypeToInstanceMap.Builder<B> put(TypeToken<T> key, T value)","Associates key with value in the built map. Duplicate keys are not allowed, and will cause build() to fail."
4514,common/graph,com.google.common.graph,"Class ImmutableValueGraph<N,V>","protected final com.google.common.graph.MapIteratorCache<N,com.google.common.graph.GraphConnections<N,V>> nodeConnections",
4515,common/graph,com.google.common.graph,"Class ImmutableValueGraph<N,V>","public static <N,V> ImmutableValueGraph<N,V> copyOf(ValueGraph<N,V> graph)",Returns an immutable copy of graph.
4516,common/graph,com.google.common.graph,"Class ImmutableValueGraph<N,V>","@Deprecatedpublic static <N,V> ImmutableValueGraph<N,V> copyOf(ImmutableValueGraph<N,V> graph)",Deprecated. no need to use this
4517,common/graph,com.google.common.graph,"Class ImmutableValueGraph<N,V>",public ElementOrder<N> incidentEdgeOrder(),"Returns an ElementOrder that specifies the order of iteration for the elements of edges(), adjacentNodes(Object), predecessors(Object), successors(Object) and incidentEdges(Object)."
4518,common/graph,com.google.common.graph,"Class ImmutableValueGraph<N,V>",public ImmutableGraph<N> asGraph(),Description copied from interface: ValueGraph
4519,common/graph,com.google.common.graph,"Class ImmutableValueGraph<N,V>",public Set<N> nodes(),Description copied from interface: ValueGraph
4520,common/graph,com.google.common.graph,"Class ImmutableValueGraph<N,V>",public boolean isDirected(),Description copied from interface: ValueGraph
4521,common/graph,com.google.common.graph,"Class ImmutableValueGraph<N,V>",public boolean allowsSelfLoops(),Description copied from interface: ValueGraph
4522,common/graph,com.google.common.graph,"Class ImmutableValueGraph<N,V>",public ElementOrder<N> nodeOrder(),Description copied from interface: ValueGraph
4523,common/graph,com.google.common.graph,"Class ImmutableValueGraph<N,V>",public Set<N> adjacentNodes(N node),Description copied from interface: ValueGraph
4524,common/graph,com.google.common.graph,"Class ImmutableValueGraph<N,V>",public Set<N> predecessors(N node),Description copied from interface: ValueGraph
4525,common/graph,com.google.common.graph,"Class ImmutableValueGraph<N,V>",public Set<N> successors(N node),Description copied from interface: ValueGraph
4526,common/graph,com.google.common.graph,"Class ImmutableValueGraph<N,V>",public Set<EndpointPair<N>> incidentEdges(N node),Returns the edges in this graph whose endpoints include node. This is equal to the union of incoming and outgoing edges.
4527,common/graph,com.google.common.graph,"Class ImmutableValueGraph<N,V>","public boolean hasEdgeConnecting(N nodeU, N nodeV)","Returns true if there is an edge that directly connects nodeU to nodeV. This is equivalent to nodes().contains(nodeU) && successors(nodeU).contains(nodeV). In an undirected graph, this is equal to hasEdgeConnecting(nodeV, nodeU)."
4528,common/graph,com.google.common.graph,"Class ImmutableValueGraph<N,V>",public boolean hasEdgeConnecting(EndpointPair<N> endpoints),"Returns true if there is an edge that directly connects endpoints (in the order, if any, specified by endpoints). This is equivalent to edges().contains(endpoints). Unlike the other EndpointPair-accepting methods, this method does not throw if the endpoints are unordered; it simply returns false. This is for consistency with the behavior of Collection#contains(Object) (which does not generally throw if the object cannot be present in the collection), and the desire to have this method's behavior be compatible with edges().contains(endpoints)."
4529,common/graph,com.google.common.graph,"Class ImmutableValueGraph<N,V>","public V edgeValueOrDefault(N nodeU, N nodeV, V defaultValue)",Description copied from interface: ValueGraph
4530,common/graph,com.google.common.graph,"Class ImmutableValueGraph<N,V>","public V edgeValueOrDefault(EndpointPair<N> endpoints, V defaultValue)",Description copied from interface: ValueGraph
4531,common/graph,com.google.common.graph,"Class ImmutableValueGraph<N,V>",protected long edgeCount(),"Returns the number of edges in this graph; used to calculate the size of edges(). This implementation requires O(|N|) time. Classes extending this one may manually keep track of the number of edges as the graph is updated, and override this method for better performance."
4532,common/graph,com.google.common.graph,"Class ImmutableValueGraph<N,V>","protected final com.google.common.graph.GraphConnections<N,V> checkedConnections(N node)",
4533,common/graph,com.google.common.graph,"Class ImmutableValueGraph<N,V>",protected final boolean containsNode(N node),
4534,common/graph,com.google.common.graph,"Class ImmutableValueGraph<N,V>","protected final boolean hasEdgeConnecting_internal(N nodeU, N nodeV)",
4535,common/graph,com.google.common.graph,"Class ImmutableValueGraph<N,V>","protected final V edgeValueOrDefault_internal(N nodeU, N nodeV, V defaultValue)",
4536,common/graph,com.google.common.graph,"Class ImmutableValueGraph<N,V>",public Set<EndpointPair<N>> edges(),An implementation of BaseGraph.edges() defined in terms of nodes() and successors(Object).
4537,common/graph,com.google.common.graph,"Class ImmutableValueGraph<N,V>",public int degree(N node),"Returns the count of node's incident edges, counting self-loops twice (equivalently, the number of times an edge touches node). For directed graphs, this is equal to inDegree(node) + outDegree(node). For undirected graphs, this is equal to incidentEdges(node).size() + (number of self-loops incident to node). If the count is greater than Integer.MAX_VALUE, returns Integer.MAX_VALUE."
4538,common/graph,com.google.common.graph,"Class ImmutableValueGraph<N,V>",public int inDegree(N node),"Returns the count of node's incoming edges (equal to predecessors(node).size()) in a directed graph. In an undirected graph, returns the degree(Object). If the count is greater than Integer.MAX_VALUE, returns Integer.MAX_VALUE."
4539,common/graph,com.google.common.graph,"Class ImmutableValueGraph<N,V>",public int outDegree(N node),"Returns the count of node's outgoing edges (equal to successors(node).size()) in a directed graph. In an undirected graph, returns the degree(Object). If the count is greater than Integer.MAX_VALUE, returns Integer.MAX_VALUE."
4540,common/graph,com.google.common.graph,"Class ImmutableValueGraph<N,V>",protected final void validateEndpoints(EndpointPair<?> endpoints),Throws IllegalArgumentException if the ordering of endpoints is not compatible with the directionality of this graph.
4541,common/graph,com.google.common.graph,"Class ImmutableValueGraph.Builder<N,V>","@CanIgnoreReturnValuepublic ImmutableValueGraph.Builder<N,V> addNode(N node)","Adds node if it is not already present. Nodes must be unique, just as Map keys must be. They must also be non-null."
4542,common/graph,com.google.common.graph,"Class ImmutableValueGraph.Builder<N,V>","@CanIgnoreReturnValuepublic ImmutableValueGraph.Builder<N,V> putEdgeValue(N nodeU, N nodeV, V value)","Adds an edge connecting nodeU to nodeV if one is not already present, and sets a value for that edge to value (overwriting the existing value, if any). If the graph is directed, the resultant edge will be directed; otherwise, it will be undirected. Values do not have to be unique. However, values must be non-null. If nodeU and nodeV are not already present in this graph, this method will silently add nodeU and nodeV to the graph."
4543,common/graph,com.google.common.graph,"Class ImmutableValueGraph.Builder<N,V>","@CanIgnoreReturnValuepublic ImmutableValueGraph.Builder<N,V> putEdgeValue(EndpointPair<N> endpoints, V value)","Adds an edge connecting endpoints if one is not already present, and sets a value for that edge to value (overwriting the existing value, if any). If the graph is directed, the resultant edge will be directed; otherwise, it will be undirected. If this graph is directed, endpoints must be ordered. Values do not have to be unique. However, values must be non-null. If either or both endpoints are not already present in this graph, this method will silently add each missing endpoint to the graph."
4544,common/net,com.google.common.net,Class InetAddresses,public static InetAddress forString(String ipString),Returns the InetAddress having the given string representation. This deliberately avoids all nameservice lookups (e.g. no DNS). Anything after a % in an IPv6 address is ignored (assumed to be a Scope ID).
4545,common/net,com.google.common.net,Class InetAddresses,public static boolean isInetAddress(String ipString),"Returns true if the supplied string is a valid IP string literal, false otherwise."
4546,common/net,com.google.common.net,Class InetAddresses,public static String toAddrString(InetAddress ip),"Returns the string representation of an InetAddress. For IPv4 addresses, this is identical to InetAddress.getHostAddress(), but for IPv6 addresses, the output follows RFC 5952 section 4. The main difference is that this method uses :: for zero compression, while Java's version uses the uncompressed form. This method uses hexadecimal for all IPv6 addresses, including IPv4-mapped IPv6 addresses such as ::c000:201. The output does not include a Scope ID."
4547,common/net,com.google.common.net,Class InetAddresses,public static String toUriString(InetAddress ip),"Returns the string representation of an InetAddress suitable for inclusion in a URI. For IPv4 addresses, this is identical to InetAddress.getHostAddress(), but for IPv6 addresses it compresses zeroes and surrounds the text with square brackets; for example [2001:db8::1]. Per section 3.2.2 of RFC 3986, a URI containing an IPv6 string literal is of the form http://[2001:db8::1]:8888/index.html. Use of either toAddrString(java.net.InetAddress), InetAddress.getHostAddress(), or this method is recommended over InetAddress.toString() when an IP address string literal is desired. This is because InetAddress.toString() prints the hostname and the IP address string joined by a /."
4548,common/net,com.google.common.net,Class InetAddresses,public static InetAddress forUriString(String hostAddr),"Returns an InetAddress representing the literal IPv4 or IPv6 host portion of a URL, encoded in the format specified by RFC 3986 section 3.2.2. This function is similar to forString(String), however, it requires that IPv6 addresses are surrounded by square brackets. This function is the inverse of toUriString(java.net.InetAddress)."
4549,common/net,com.google.common.net,Class InetAddresses,public static boolean isUriInetAddress(String ipString),"Returns true if the supplied string is a valid URI IP string literal, false otherwise."
4550,common/net,com.google.common.net,Class InetAddresses,public static boolean isCompatIPv4Address(Inet6Address ip),"Evaluates whether the argument is an IPv6 compat address. An IPv4 compatible, or compat, address is one with 96 leading bits of zero, with the remaining 32 bits interpreted as an IPv4 address. These are conventionally represented in string literals as ::192.168.0.1, though ::c0a8:1 is also considered an IPv4 compatible address (and equivalent to ::192.168.0.1). For more on IPv4 compatible addresses see section 2.5.5.1 of RFC 4291. NOTE: This method is different from Inet6Address.isIPv4CompatibleAddress() in that it more correctly classifies :: and ::1 as proper IPv6 addresses (which they are), NOT IPv4 compatible addresses (which they are generally NOT considered to be)."
4551,common/net,com.google.common.net,Class InetAddresses,public static Inet4Address getCompatIPv4Address(Inet6Address ip),Returns the IPv4 address embedded in an IPv4 compatible address.
4552,common/net,com.google.common.net,Class InetAddresses,public static boolean is6to4Address(Inet6Address ip),Evaluates whether the argument is a 6to4 address. 6to4 addresses begin with the 2002::/16 prefix. The next 32 bits are the IPv4 address of the host to which IPv6-in-IPv4 tunneled packets should be routed. For more on 6to4 addresses see section 2 of RFC 3056.
4553,common/net,com.google.common.net,Class InetAddresses,public static Inet4Address get6to4IPv4Address(Inet6Address ip),Returns the IPv4 address embedded in a 6to4 address.
4554,common/net,com.google.common.net,Class InetAddresses,public static boolean isTeredoAddress(Inet6Address ip),Evaluates whether the argument is a Teredo address. Teredo addresses begin with the 2001::/32 prefix.
4555,common/net,com.google.common.net,Class InetAddresses,public static InetAddresses.TeredoInfo getTeredoInfo(Inet6Address ip),Returns the Teredo information embedded in a Teredo address.
4556,common/net,com.google.common.net,Class InetAddresses,public static boolean isIsatapAddress(Inet6Address ip),"Evaluates whether the argument is an ISATAP address. From RFC 5214: ISATAP interface identifiers are constructed in Modified EUI-64 format [...] by concatenating the 24-bit IANA OUI (00-00-5E), the 8-bit hexadecimal value 0xFE, and a 32-bit IPv4 address in network byte order [...] For more on ISATAP addresses see section 6.1 of RFC 5214."
4557,common/net,com.google.common.net,Class InetAddresses,public static Inet4Address getIsatapIPv4Address(Inet6Address ip),Returns the IPv4 address embedded in an ISATAP address.
4558,common/net,com.google.common.net,Class InetAddresses,public static boolean hasEmbeddedIPv4ClientAddress(Inet6Address ip),Examines the Inet6Address to determine if it is an IPv6 address of one of the specified address types that contain an embedded IPv4 address. NOTE: ISATAP addresses are explicitly excluded from this method due to their trivial spoofability. With other transition addresses spoofing involves (at least) infection of one's BGP routing table.
4559,common/net,com.google.common.net,Class InetAddresses,public static Inet4Address getEmbeddedIPv4ClientAddress(Inet6Address ip),Examines the Inet6Address to extract the embedded IPv4 client address if the InetAddress is an IPv6 address of one of the specified address types that contain an embedded IPv4 address. NOTE: ISATAP addresses are explicitly excluded from this method due to their trivial spoofability. With other transition addresses spoofing involves (at least) infection of one's BGP routing table.
4560,common/net,com.google.common.net,Class InetAddresses,public static boolean isMappedIPv4Address(String ipString),"Evaluates whether the argument is an IPv4 mapped IPv6 address. An IPv4 mapped address is anything in the range ::ffff:0:0/96 (sometimes written as ::ffff:0.0.0.0/96), with the last 32 bits interpreted as an IPv4 address. For more on IPv4 mapped addresses see section 2.5.5.2 of RFC 4291. Note: This method takes a String argument because InetAddress automatically collapses mapped addresses to IPv4. (It is actually possible to avoid this using one of the obscure Inet6Address methods, but it would be unwise to depend on such a poorly-documented feature.)"
4561,common/net,com.google.common.net,Class InetAddresses,public static Inet4Address getCoercedIPv4Address(InetAddress ip),"Coerces an IPv6 address into an IPv4 address. HACK: As long as applications continue to use IPv4 addresses for indexing into tables, accounting, et cetera, it may be necessary to coerce IPv6 addresses into IPv4 addresses. This function does so by hashing 64 bits of the IPv6 address into 224.0.0.0/3 (64 bits into 29 bits): If the IPv6 address contains an embedded IPv4 address, the function hashes that. Otherwise, it hashes the upper 64 bits of the IPv6 address. A coerced IPv4 address is equivalent to itself. NOTE: This function is failsafe for security purposes: ALL IPv6 addresses (except localhost (::1)) are hashed to avoid the security risk associated with extracting an embedded IPv4 address that might permit elevated privileges."
4562,common/net,com.google.common.net,Class InetAddresses,public static int coerceToInteger(InetAddress ip),Returns an integer representing an IPv4 address regardless of whether the supplied argument is an IPv4 address or not. IPv6 addresses are coerced to IPv4 addresses before being converted to integers. As long as there are applications that assume that all IP addresses are IPv4 addresses and can therefore be converted safely to integers (for whatever purpose) this function can be used to handle IPv6 addresses as well until the application is suitably fixed. NOTE: an IPv6 address coerced to an IPv4 address can only be used for such purposes as rudimentary identification or indexing into a collection of real InetAddresses. They cannot be used as real addresses for the purposes of network communication.
4563,common/net,com.google.common.net,Class InetAddresses,public static BigInteger toBigInteger(InetAddress address),"Returns a BigInteger representing the address. Unlike coerceToInteger, IPv6 addresses are not coerced to IPv4 addresses."
4564,common/net,com.google.common.net,Class InetAddresses,public static Inet4Address fromInteger(int address),Returns an Inet4Address having the integer value specified by the argument.
4565,common/net,com.google.common.net,Class InetAddresses,public static Inet4Address fromIPv4BigInteger(BigInteger address),Returns the Inet4Address corresponding to a given BigInteger.
4566,common/net,com.google.common.net,Class InetAddresses,public static Inet6Address fromIPv6BigInteger(BigInteger address),Returns the Inet6Address corresponding to a given BigInteger.
4567,common/net,com.google.common.net,Class InetAddresses,public static InetAddress fromLittleEndianByteArray(byte[] addr) throws UnknownHostException,"Returns an address from a little-endian ordered byte array (the opposite of what InetAddress.getByAddress(java.lang.String, byte[]) expects). IPv4 address byte array must be 4 bytes long and IPv6 byte array must be 16 bytes long."
4568,common/net,com.google.common.net,Class InetAddresses,public static InetAddress decrement(InetAddress address),Returns a new InetAddress that is one less than the passed in address. This method works for both IPv4 and IPv6 addresses.
4569,common/net,com.google.common.net,Class InetAddresses,public static InetAddress increment(InetAddress address),Returns a new InetAddress that is one more than the passed in address. This method works for both IPv4 and IPv6 addresses.
4570,common/net,com.google.common.net,Class InetAddresses.TeredoInfo,public Inet4Address getServer(),
4571,common/net,com.google.common.net,Class InetAddresses.TeredoInfo,public Inet4Address getClient(),
4572,common/net,com.google.common.net,Class InetAddresses.TeredoInfo,public int getPort(),
4573,common/collect,com.google.common.collect,Class Interners,public static Interners.InternerBuilder newBuilder(),Returns a fresh Interners.InternerBuilder instance.
4574,common/collect,com.google.common.collect,Class Interners,public static <E> Interner<E> newStrongInterner(),"Returns a new thread-safe interner which retains a strong reference to each instance it has interned, thus preventing these instances from being garbage-collected. If this retention is acceptable, this implementation may perform better than newWeakInterner()."
4575,common/collect,com.google.common.collect,Class Interners,"@GwtIncompatible(value=""java.lang.ref.WeakReference"")public static <E> Interner<E> newWeakInterner()","Returns a new thread-safe interner which retains a weak reference to each instance it has interned, and so does not prevent these instances from being garbage-collected. This most likely does not perform as well as newStrongInterner(), but is the best alternative when the memory usage of that implementation is unacceptable."
4576,common/collect,com.google.common.collect,Class Interners.InternerBuilder,public Interners.InternerBuilder strong(),Instructs the Interners.InternerBuilder to build a strong interner.
4577,common/collect,com.google.common.collect,Class Interners.InternerBuilder,"@GwtIncompatible(value=""java.lang.ref.WeakReference"")public Interners.InternerBuilder weak()",Instructs the Interners.InternerBuilder to build a weak interner.
4578,common/collect,com.google.common.collect,Class Interners.InternerBuilder,public Interners.InternerBuilder concurrencyLevel(int concurrencyLevel),Sets the concurrency level that will be used by the to-be-built Interner.
4579,common/net,com.google.common.net,Class InternetDomainName,public static InternetDomainName from(String domain),"Returns an instance of InternetDomainName after lenient validation. Specifically, validation against RFC 3490 (Internationalizing Domain Names in Applications) is skipped, while validation against RFC 1035 is relaxed in the following ways: Any part containing non-ASCII characters is considered valid. Underscores ('_') are permitted wherever dashes ('-') are permitted. Parts other than the final part may start with a digit, as mandated by RFC 1123. "
4580,common/net,com.google.common.net,Class InternetDomainName,public ImmutableList<String> parts(),"Returns the individual components of this domain name, normalized to all lower case. For example, for the domain name mail.google.com, this method returns the list [mail, google, com]."
4581,common/net,com.google.common.net,Class InternetDomainName,public boolean isPublicSuffix(),"Indicates whether this domain name represents a public suffix, as defined by the Mozilla Foundation's Public Suffix List (PSL). A public suffix is one under which Internet users can directly register names, such as com, co.uk or pvt.k12.wy.us. Examples of domain names that are not public suffixes include google.com, foo.co.uk, and myblog.blogspot.com. Public suffixes are a proper superset of registry suffixes. The list of public suffixes additionally contains privately owned domain names under which Internet users can register subdomains. An example of a public suffix that is not a registry suffix is blogspot.com. Note that it is true that all public suffixes have registry suffixes, since domain name registries collectively control all internet domain names. For considerations on whether the public suffix or registry suffix designation is more suitable for your application, see this article."
4582,common/net,com.google.common.net,Class InternetDomainName,public boolean hasPublicSuffix(),"Indicates whether this domain name ends in a public suffix, including if it is a public suffix itself. For example, returns true for www.google.com, foo.co.uk and com, but not for invalid or google.invalid. This is the recommended method for determining whether a domain is potentially an addressable host. Note that this method is equivalent to hasRegistrySuffix() because all registry suffixes are public suffixes and all public suffixes have registry suffixes."
4583,common/net,com.google.common.net,Class InternetDomainName,public InternetDomainName publicSuffix(),"Returns the public suffix portion of the domain name, or null if no public suffix is present."
4584,common/net,com.google.common.net,Class InternetDomainName,public boolean isUnderPublicSuffix(),"Indicates whether this domain name ends in a public suffix, while not being a public suffix itself. For example, returns true for www.google.com, foo.co.uk and myblog.blogspot.com, but not for com, co.uk, google.invalid, or blogspot.com. This method can be used to determine whether it will probably be possible to set cookies on the domain, though even that depends on individual browsers' implementations of cookie controls. See RFC 2109 for details."
4585,common/net,com.google.common.net,Class InternetDomainName,public boolean isTopPrivateDomain(),"Indicates whether this domain name is composed of exactly one subdomain component followed by a public suffix. For example, returns true for google.com foo.co.uk, and myblog.blogspot.com, but not for www.google.com, co.uk, or blogspot.com. This method can be used to determine whether a domain is probably the highest level for which cookies may be set, though even that depends on individual browsers' implementations of cookie controls. See RFC 2109 for details."
4586,common/net,com.google.common.net,Class InternetDomainName,public InternetDomainName topPrivateDomain(),"Returns the portion of this domain name that is one level beneath the public suffix. For example, for x.adwords.google.co.uk it returns google.co.uk, since co.uk is a public suffix. Similarly, for myblog.blogspot.com it returns the same domain, myblog.blogspot.com, since blogspot.com is a public suffix. If isTopPrivateDomain() is true, the current domain name instance is returned. This method can be used to determine the probable highest level parent domain for which cookies may be set, though even that depends on individual browsers' implementations of cookie controls."
4587,common/net,com.google.common.net,Class InternetDomainName,public boolean isRegistrySuffix(),"Indicates whether this domain name represents a registry suffix, as defined by a subset of the Mozilla Foundation's Public Suffix List (PSL). A registry suffix is one under which Internet users can directly register names via a domain name registrar, and have such registrations lawfully protected by internet-governing bodies such as ICANN. Examples of registry suffixes include com, co.uk, and pvt.k12.wy.us. Examples of domain names that are not registry suffixes include google.com and foo.co.uk. Registry suffixes are a proper subset of public suffixes. The list of public suffixes additionally contains privately owned domain names under which Internet users can register subdomains. An example of a public suffix that is not a registry suffix is blogspot.com. Note that it is true that all public suffixes have registry suffixes, since domain name registries collectively control all internet domain names. For considerations on whether the public suffix or registry suffix designation is more suitable for your application, see this article."
4588,common/net,com.google.common.net,Class InternetDomainName,public boolean hasRegistrySuffix(),"Indicates whether this domain name ends in a registry suffix, including if it is a registry suffix itself. For example, returns true for www.google.com, foo.co.uk and com, but not for invalid or google.invalid. Note that this method is equivalent to hasPublicSuffix() because all registry suffixes are public suffixes and all public suffixes have registry suffixes."
4589,common/net,com.google.common.net,Class InternetDomainName,public InternetDomainName registrySuffix(),"Returns the registry suffix portion of the domain name, or null if no registry suffix is present."
4590,common/net,com.google.common.net,Class InternetDomainName,public boolean isUnderRegistrySuffix(),"Indicates whether this domain name ends in a registry suffix, while not being a registry suffix itself. For example, returns true for www.google.com, foo.co.uk and blogspot.com, but not for com, co.uk, or google.invalid."
4591,common/net,com.google.common.net,Class InternetDomainName,public boolean isTopDomainUnderRegistrySuffix(),"Indicates whether this domain name is composed of exactly one subdomain component followed by a registry suffix. For example, returns true for google.com, foo.co.uk, and blogspot.com, but not for www.google.com, co.uk, or myblog.blogspot.com. Warning: This method should not be used to determine the probable highest level parent domain for which cookies may be set. Use topPrivateDomain() for that purpose."
4592,common/net,com.google.common.net,Class InternetDomainName,public InternetDomainName topDomainUnderRegistrySuffix(),"Returns the portion of this domain name that is one level beneath the registry suffix. For example, for x.adwords.google.co.uk it returns google.co.uk, since co.uk is a registry suffix. Similarly, for myblog.blogspot.com it returns blogspot.com, since com is a registry suffix. If isTopDomainUnderRegistrySuffix() is true, the current domain name instance is returned. Warning: This method should not be used to determine whether a domain is probably the highest level for which cookies may be set. Use isTopPrivateDomain() for that purpose."
4593,common/net,com.google.common.net,Class InternetDomainName,public boolean hasParent(),Indicates whether this domain is composed of two or more parts.
4594,common/net,com.google.common.net,Class InternetDomainName,public InternetDomainName parent(),"Returns an InternetDomainName that is the immediate ancestor of this one; that is, the current domain with the leftmost part removed. For example, the parent of www.google.com is google.com."
4595,common/net,com.google.common.net,Class InternetDomainName,public InternetDomainName child(String leftParts),"Creates and returns a new InternetDomainName by prepending the argument and a dot to the current name. For example, InternetDomainName.from(foo.com).child(www.bar) returns a new InternetDomainName with the value www.bar.foo.com. Only lenient validation is performed, as described here."
4596,common/net,com.google.common.net,Class InternetDomainName,public static boolean isValid(String name),"Indicates whether the argument is a syntactically valid domain name using lenient validation. Specifically, validation against RFC 3490 (Internationalizing Domain Names in Applications) is skipped. The following two code snippets are equivalent: domainName = InternetDomainName.isValid(name) ? InternetDomainName.from(name) : DEFAULT_DOMAIN; try { domainName = InternetDomainName.from(name); } catch (IllegalArgumentException e) { domainName = DEFAULT_DOMAIN; } "
4597,common/net,com.google.common.net,Class InternetDomainName,public String toString(),"Returns the domain name, normalized to all lower case."
4598,common/net,com.google.common.net,Class InternetDomainName,public boolean equals(@Nullable Object object),"Equality testing is based on the text supplied by the caller, after normalization as described in the class documentation. For example, a non-ASCII Unicode domain name and the Punycode version of the same domain name would not be considered equal."
4599,common/math,com.google.common.math,Class IntMath,@Betapublic static int ceilingPowerOfTwo(int x),"Returns the smallest power of two greater than or equal to x. This is equivalent to checkedPow(2, log2(x, CEILING))."
4600,common/math,com.google.common.math,Class IntMath,@Betapublic static int floorPowerOfTwo(int x),"Returns the largest power of two less than or equal to x. This is equivalent to checkedPow(2, log2(x, FLOOR))."
4601,common/math,com.google.common.math,Class IntMath,public static boolean isPowerOfTwo(int x),"Returns true if x represents a power of two. This differs from Integer.bitCount(x) == 1, because Integer.bitCount(Integer.MIN_VALUE) == 1, but Integer.MIN_VALUE is not a power of two."
4602,common/math,com.google.common.math,Class IntMath,"public static int log2(int x, RoundingMode mode)","Returns the base-2 logarithm of x, rounded according to the specified rounding mode."
4603,common/math,com.google.common.math,Class IntMath,"@GwtIncompatiblepublic static int log10(int x, RoundingMode mode)","Returns the base-10 logarithm of x, rounded according to the specified rounding mode."
4604,common/math,com.google.common.math,Class IntMath,"@GwtIncompatiblepublic static int pow(int b, int k)","Returns b to the kth power. Even if the result overflows, it will be equal to BigInteger.valueOf(b).pow(k).intValue(). This implementation runs in O(log k) time. Compare checkedPow(int, int), which throws an ArithmeticException upon overflow."
4605,common/math,com.google.common.math,Class IntMath,"@GwtIncompatiblepublic static int sqrt(int x, RoundingMode mode)","Returns the square root of x, rounded with the specified rounding mode."
4606,common/math,com.google.common.math,Class IntMath,"public static int divide(int p, int q, RoundingMode mode)","Returns the result of dividing p by q, rounding using the specified RoundingMode."
4607,common/math,com.google.common.math,Class IntMath,"public static int mod(int x, int m)","Returns x mod m, a non-negative value less than m. This differs from x % m, which might be negative. For example: mod(7, 4) == 3 mod(-7, 4) == 1 mod(-1, 4) == 3 mod(-8, 4) == 0 mod(8, 4) == 0 "
4608,common/math,com.google.common.math,Class IntMath,"public static int gcd(int a, int b)","Returns the greatest common divisor of a, b. Returns 0 if a == 0 && b == 0."
4609,common/math,com.google.common.math,Class IntMath,"public static int checkedAdd(int a, int b)","Returns the sum of a and b, provided it does not overflow."
4610,common/math,com.google.common.math,Class IntMath,"public static int checkedSubtract(int a, int b)","Returns the difference of a and b, provided it does not overflow."
4611,common/math,com.google.common.math,Class IntMath,"public static int checkedMultiply(int a, int b)","Returns the product of a and b, provided it does not overflow."
4612,common/math,com.google.common.math,Class IntMath,"public static int checkedPow(int b, int k)","Returns the b to the kth power, provided it does not overflow. pow(int, int) may be faster, but does not check for overflow."
4613,common/math,com.google.common.math,Class IntMath,"@Betapublic static int saturatedAdd(int a, int b)","Returns the sum of a and b unless it would overflow or underflow in which case Integer.MAX_VALUE or Integer.MIN_VALUE is returned, respectively."
4614,common/math,com.google.common.math,Class IntMath,"@Betapublic static int saturatedSubtract(int a, int b)","Returns the difference of a and b unless it would overflow or underflow in which case Integer.MAX_VALUE or Integer.MIN_VALUE is returned, respectively."
4615,common/math,com.google.common.math,Class IntMath,"@Betapublic static int saturatedMultiply(int a, int b)","Returns the product of a and b unless it would overflow or underflow in which case Integer.MAX_VALUE or Integer.MIN_VALUE is returned, respectively."
4616,common/math,com.google.common.math,Class IntMath,"@Betapublic static int saturatedPow(int b, int k)","Returns the b to the kth power, unless it would overflow or underflow in which case Integer.MAX_VALUE or Integer.MIN_VALUE is returned, respectively."
4617,common/math,com.google.common.math,Class IntMath,public static int factorial(int n),"Returns n!, that is, the product of the first n positive integers, 1 if n == 0, or Integer.MAX_VALUE if the result does not fit in a int."
4618,common/math,com.google.common.math,Class IntMath,"public static int binomial(int n, int k)","Returns n choose k, also known as the binomial coefficient of n and k, or Integer.MAX_VALUE if the result does not fit in an int."
4619,common/math,com.google.common.math,Class IntMath,"public static int mean(int x, int y)","Returns the arithmetic mean of x and y, rounded towards negative infinity. This method is overflow resilient."
4620,common/primitives,com.google.common.primitives,Class Ints,public static final int BYTES,The number of bytes required to represent a primitive int value. Java 8 users: use Integer.BYTES instead.
4621,common/primitives,com.google.common.primitives,Class Ints,public static int hashCode(int value),Returns a hash code for value; equal to the result of invoking ((Integer) value).hashCode(). Java 8 users: use Integer.hashCode(int) instead.
4622,common/primitives,com.google.common.primitives,Class Ints,public static int checkedCast(long value),"Returns the int value that is equal to value, if possible."
4623,common/primitives,com.google.common.primitives,Class Ints,public static int saturatedCast(long value),Returns the int nearest in value to value.
4624,common/primitives,com.google.common.primitives,Class Ints,"public static int compare(int a, int b)","Compares the two specified int values. The sign of the value returned is the same as that of ((Integer) a).compareTo(b). Note for Java 7 and later: this method should be treated as deprecated; use the equivalent Integer.compare(int, int) method instead."
4625,common/primitives,com.google.common.primitives,Class Ints,"public static boolean contains(int[] array, int target)",Returns true if target is present as an element anywhere in array.
4626,common/primitives,com.google.common.primitives,Class Ints,"public static int indexOf(int[] array, int target)",Returns the index of the first appearance of the value target in array.
4627,common/primitives,com.google.common.primitives,Class Ints,"public static int indexOf(int[] array, int[] target)","Returns the start position of the first occurrence of the specified target within array, or -1 if there is no such occurrence. More formally, returns the lowest index i such that Arrays.copyOfRange(array, i, i + target.length) contains exactly the same elements as target."
4628,common/primitives,com.google.common.primitives,Class Ints,"public static int lastIndexOf(int[] array, int target)",Returns the index of the last appearance of the value target in array.
4629,common/primitives,com.google.common.primitives,Class Ints,"@GwtIncompatible(value=""Available in GWT! Annotation is to avoid conflict with GWT specialization of base class."")public static int min(int... array)",Returns the least value present in array.
4630,common/primitives,com.google.common.primitives,Class Ints,"@GwtIncompatible(value=""Available in GWT! Annotation is to avoid conflict with GWT specialization of base class."")public static int max(int... array)",Returns the greatest value present in array.
4631,common/primitives,com.google.common.primitives,Class Ints,"@Betapublic static int constrainToRange(int value, int min, int max)","Returns the value nearest to value which is within the closed range [min..max]. If value is within the range [min..max], value is returned unchanged. If value is less than min, min is returned, and if value is greater than max, max is returned."
4632,common/primitives,com.google.common.primitives,Class Ints,public static int[] concat(int[]... arrays),"Returns the values from each provided array combined into a single array. For example, concat(new int[] {a, b}, new int[] {}, new int[] {c} returns the array {a, b, c}."
4633,common/primitives,com.google.common.primitives,Class Ints,public static byte[] toByteArray(int value),"Returns a big-endian representation of value in a 4-element byte array; equivalent to ByteBuffer.allocate(4).putInt(value).array(). For example, the input value 0x12131415 would yield the byte array {0x12, 0x13, 0x14, 0x15}. If you need to convert and concatenate several values (possibly even of different types), use a shared ByteBuffer instance, or use ByteStreams.newDataOutput() to get a growable buffer."
4634,common/primitives,com.google.common.primitives,Class Ints,public static int fromByteArray(byte[] bytes),"Returns the int value whose big-endian representation is stored in the first 4 bytes of bytes; equivalent to ByteBuffer.wrap(bytes).getInt(). For example, the input byte array {0x12, 0x13, 0x14, 0x15, 0x33} would yield the int value 0x12131415. Arguably, it's preferable to use ByteBuffer; that library exposes much more flexibility at little cost in readability."
4635,common/primitives,com.google.common.primitives,Class Ints,"public static int fromBytes(byte b1, byte b2, byte b3, byte b4)","Returns the int value whose byte representation is the given 4 bytes, in big-endian order; equivalent to Ints.fromByteArray(new byte[] {b1, b2, b3, b4})."
4636,common/primitives,com.google.common.primitives,Class Ints,"@Betapublic static Converter<String,Integer> stringConverter()","Returns a serializable converter object that converts between strings and integers using Integer.decode(java.lang.String) and Integer.toString(). The returned converter throws NumberFormatException if the input string is invalid. Warning: please see Integer.decode(java.lang.String) to understand exactly how strings are parsed. For example, the string 0123 is treated as octal and converted to the value 83."
4637,common/primitives,com.google.common.primitives,Class Ints,"public static int[] ensureCapacity(int[] array, int minLength, int padding)","Returns an array containing the same values as array, but guaranteed to be of a specified minimum length. If array already has a length of at least minLength, it is returned directly. Otherwise, a new array of size minLength + padding is returned, containing the values of array, and zeroes in the remaining places."
4638,common/primitives,com.google.common.primitives,Class Ints,"public static String join(String separator, int... array)","Returns a string containing the supplied int values separated by separator. For example, join(-, 1, 2, 3) returns the string 1-2-3."
4639,common/primitives,com.google.common.primitives,Class Ints,public static Comparator<int[]> lexicographicalComparator(),"Returns a comparator that compares two int arrays lexicographically. That is, it compares, using compare(int, int)), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example, [] < [1] < [1, 2] < [2]. The returned comparator is inconsistent with Object.equals(Object) (since arrays support only identity equality), but it is consistent with Arrays.equals(int[], int[])."
4640,common/primitives,com.google.common.primitives,Class Ints,public static void sortDescending(int[] array),Sorts the elements of array in descending order.
4641,common/primitives,com.google.common.primitives,Class Ints,"public static void sortDescending(int[] array, int fromIndex, int toIndex)",Sorts the elements of array between fromIndex inclusive and toIndex exclusive in descending order.
4642,common/primitives,com.google.common.primitives,Class Ints,public static void reverse(int[] array),"Reverses the elements of array. This is equivalent to Collections.reverse(Ints.asList(array)), but is likely to be more efficient."
4643,common/primitives,com.google.common.primitives,Class Ints,"public static void reverse(int[] array, int fromIndex, int toIndex)","Reverses the elements of array between fromIndex inclusive and toIndex exclusive. This is equivalent to Collections.reverse(Ints.asList(array).subList(fromIndex, toIndex)), but is likely to be more efficient."
4644,common/primitives,com.google.common.primitives,Class Ints,public static int[] toArray(Collection<? extends Number> collection),"Returns an array containing each value of collection, converted to a int value in the manner of Number.intValue(). Elements are copied from the argument collection as if by collection.toArray(). Calling this method is as thread-safe as calling that method."
4645,common/primitives,com.google.common.primitives,Class Ints,public static List<Integer> asList(int... backingArray),"Returns a fixed-size list backed by the specified array, similar to Arrays.asList(Object[]). The list supports List.set(int, Object), but any attempt to set a value to null will result in a NullPointerException. The returned list maintains the values, but not the identities, of Integer objects written to or read from it. For example, whether list.get(0) == list.get(0) is true for the returned list is unspecified. Note: when possible, you should represent your data as an ImmutableIntArray instead, which has an asList view."
4646,common/primitives,com.google.common.primitives,Class Ints,@Betapublic static @Nullable Integer tryParse(String string),"Parses the specified string as a signed decimal integer value. The ASCII character '-' ('\u002D') is recognized as the minus sign. Unlike Integer.parseInt(String), this method returns null instead of throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns null if non-ASCII digits are present in the string. Note that strings prefixed with ASCII '+' are rejected, even under JDK 7, despite the change to Integer.parseInt(String) for that version."
4647,common/reflect,com.google.common.reflect,"Class Invokable<T,R>","public static Invokable<?,Object> from(Method method)",Returns Invokable of method.
4648,common/reflect,com.google.common.reflect,"Class Invokable<T,R>","public static <T> Invokable<T,T> from(Constructor<T> constructor)",Returns Invokable of constructor.
4649,common/reflect,com.google.common.reflect,"Class Invokable<T,R>",public abstract boolean isOverridable(),"Returns true if this is an overridable method. Constructors, private, static or final methods, or methods declared by final classes are not overridable."
4650,common/reflect,com.google.common.reflect,"Class Invokable<T,R>",public abstract boolean isVarArgs(),Returns true if this was declared to take a variable number of arguments.
4651,common/reflect,com.google.common.reflect,"Class Invokable<T,R>","@CanIgnoreReturnValuepublic final R invoke(T receiver, Object... args) throws InvocationTargetException, IllegalAccessException",Invokes with receiver as 'this' and args passed to the underlying method and returns the return value; or calls the underlying constructor with args and returns the constructed instance.
4652,common/reflect,com.google.common.reflect,"Class Invokable<T,R>",public final TypeToken<? extends R> getReturnType(),Returns the return type of this Invokable.
4653,common/reflect,com.google.common.reflect,"Class Invokable<T,R>",public final ImmutableList<Parameter> getParameters(),"Returns all declared parameters of this Invokable. Note that if this is a constructor of a non-static inner class, unlike Constructor.getParameterTypes(), the hidden this parameter of the enclosing class is excluded from the returned parameters."
4654,common/reflect,com.google.common.reflect,"Class Invokable<T,R>",public final ImmutableList<TypeToken<? extends Throwable>> getExceptionTypes(),Returns all declared exception types of this Invokable.
4655,common/reflect,com.google.common.reflect,"Class Invokable<T,R>","public final <R1 extends R> Invokable<T,R1> returning(Class<R1> returnType)","Explicitly specifies the return type of this Invokable. For example: Method factoryMethod = Person.class.getMethod(create); Invokable<?, Person> factory = Invokable.of(getNameMethod).returning(Person.class); "
4656,common/reflect,com.google.common.reflect,"Class Invokable<T,R>","public final <R1 extends R> Invokable<T,R1> returning(TypeToken<R1> returnType)",Explicitly specifies the return type of this Invokable.
4657,common/reflect,com.google.common.reflect,"Class Invokable<T,R>",public final Class<? super T> getDeclaringClass(),Description copied from interface: java.lang.reflect.Member
4658,common/reflect,com.google.common.reflect,"Class Invokable<T,R>",public TypeToken<T> getOwnerType(),Returns the type of T.
4659,common/reflect,com.google.common.reflect,"Class Invokable<T,R>",public abstract AnnotatedType getAnnotatedReturnType(),
4660,common/reflect,com.google.common.reflect,"Class Invokable<T,R>",public final boolean isAnnotationPresent(Class<? extends Annotation> annotationClass),Description copied from class: java.lang.reflect.AccessibleObject
4661,common/reflect,com.google.common.reflect,"Class Invokable<T,R>",public final <A extends Annotation> A getAnnotation(Class<A> annotationClass),Description copied from interface: java.lang.reflect.AnnotatedElement
4662,common/reflect,com.google.common.reflect,"Class Invokable<T,R>",public final Annotation[] getAnnotations(),Description copied from interface: java.lang.reflect.AnnotatedElement
4663,common/reflect,com.google.common.reflect,"Class Invokable<T,R>",public final Annotation[] getDeclaredAnnotations(),Description copied from interface: java.lang.reflect.AnnotatedElement
4664,common/reflect,com.google.common.reflect,"Class Invokable<T,R>",public final void setAccessible(boolean flag) throws SecurityException,Description copied from class: java.lang.reflect.AccessibleObject
4665,common/reflect,com.google.common.reflect,"Class Invokable<T,R>",public final boolean isAccessible(),Description copied from class: java.lang.reflect.AccessibleObject
4666,common/reflect,com.google.common.reflect,"Class Invokable<T,R>",public final String getName(),Description copied from interface: java.lang.reflect.Member
4667,common/reflect,com.google.common.reflect,"Class Invokable<T,R>",public final int getModifiers(),Description copied from interface: java.lang.reflect.Member
4668,common/reflect,com.google.common.reflect,"Class Invokable<T,R>",public final boolean isSynthetic(),Description copied from interface: java.lang.reflect.Member
4669,common/reflect,com.google.common.reflect,"Class Invokable<T,R>",public final boolean isPublic(),Returns true if the element is public.
4670,common/reflect,com.google.common.reflect,"Class Invokable<T,R>",public final boolean isProtected(),Returns true if the element is protected.
4671,common/reflect,com.google.common.reflect,"Class Invokable<T,R>",public final boolean isPackagePrivate(),Returns true if the element is package-private.
4672,common/reflect,com.google.common.reflect,"Class Invokable<T,R>",public final boolean isPrivate(),Returns true if the element is private.
4673,common/reflect,com.google.common.reflect,"Class Invokable<T,R>",public final boolean isStatic(),Returns true if the element is static.
4674,common/reflect,com.google.common.reflect,"Class Invokable<T,R>",public final boolean isFinal(),"Returns true if this method is final, per Modifier.isFinal(getModifiers()). Note that a method may still be effectively final, or non-overridable when it has no final keyword. For example, it could be private, or it could be declared by a final class. To tell whether a method is overridable, use isOverridable()."
4675,common/reflect,com.google.common.reflect,"Class Invokable<T,R>",public final boolean isAbstract(),Returns true if the method is abstract.
4676,common/reflect,com.google.common.reflect,"Class Invokable<T,R>",public final boolean isNative(),Returns true if the element is native.
4677,common/reflect,com.google.common.reflect,"Class Invokable<T,R>",public final boolean isSynchronized(),Returns true if the method is synchronized.
4678,common/reflect,com.google.common.reflect,"Class Invokable<T,R>",public boolean equals(@Nullable Object obj),Description copied from class: java.lang.Object
4679,common/reflect,com.google.common.reflect,"Class Invokable<T,R>",public int hashCode(),Description copied from class: java.lang.Object
4680,common/collect,com.google.common.collect,Class Iterables,public static <T> Iterable<T> unmodifiableIterable(Iterable<? extends T> iterable),Returns an unmodifiable view of iterable.
4681,common/collect,com.google.common.collect,Class Iterables,@Deprecatedpublic static <E> Iterable<E> unmodifiableIterable(ImmutableCollection<E> iterable),Deprecated. no need to use this
4682,common/collect,com.google.common.collect,Class Iterables,public static int size(Iterable<?> iterable),Returns the number of elements in iterable.
4683,common/collect,com.google.common.collect,Class Iterables,"public static boolean contains(Iterable<?> iterable, @Nullable Object element)","Returns true if iterable contains any element o for which Objects.equals(o, element) would return true. Otherwise returns false, even in cases where Collection.contains(java.lang.Object) might throw NullPointerException or ClassCastException."
4684,common/collect,com.google.common.collect,Class Iterables,"@CanIgnoreReturnValuepublic static boolean removeAll(Iterable<?> removeFrom, Collection<?> elementsToRemove)","Removes, from an iterable, every element that belongs to the provided collection. This method calls Collection.removeAll(java.util.Collection<?>) if iterable is a collection, and Iterators.removeAll(java.util.Iterator<?>, java.util.Collection<?>) otherwise."
4685,common/collect,com.google.common.collect,Class Iterables,"@CanIgnoreReturnValuepublic static boolean retainAll(Iterable<?> removeFrom, Collection<?> elementsToRetain)","Removes, from an iterable, every element that does not belong to the provided collection. This method calls Collection.retainAll(java.util.Collection<?>) if iterable is a collection, and Iterators.retainAll(java.util.Iterator<?>, java.util.Collection<?>) otherwise."
4686,common/collect,com.google.common.collect,Class Iterables,"@CanIgnoreReturnValuepublic static <T> boolean removeIf(Iterable<T> removeFrom, Predicate<? super T> predicate)","Removes, from an iterable, every element that satisfies the provided predicate. Removals may or may not happen immediately as each element is tested against the predicate. The behavior of this method is not specified if predicate is dependent on removeFrom. Java 8 users: if removeFrom is a Collection, use removeFrom.removeIf(predicate) instead."
4687,common/collect,com.google.common.collect,Class Iterables,"public static boolean elementsEqual(Iterable<?> iterable1, Iterable<?> iterable2)","Determines whether two iterables contain equal elements in the same order. More specifically, this method returns true if iterable1 and iterable2 contain the same number of elements and every element of iterable1 is equal to the corresponding element of iterable2."
4688,common/collect,com.google.common.collect,Class Iterables,public static String toString(Iterable<?> iterable),"Returns a string representation of iterable, with the format [e1, e2, ..., en] (that is, identical to Arrays.toString(Iterables.toArray(iterable))). Note that for most implementations of Collection, collection.toString() also gives the same result, but that behavior is not generally guaranteed."
4689,common/collect,com.google.common.collect,Class Iterables,public static <T> T getOnlyElement(Iterable<T> iterable),Returns the single element contained in iterable. Java 8 users: the Stream equivalent to this method is stream.collect(MoreCollectors.onlyElement()).
4690,common/collect,com.google.common.collect,Class Iterables,"public static <T> T getOnlyElement(Iterable<? extends T> iterable, T defaultValue)","Returns the single element contained in iterable, or defaultValue if the iterable is empty. Java 8 users: the Stream equivalent to this method is stream.collect(MoreCollectors.toOptional()).orElse(defaultValue)."
4691,common/collect,com.google.common.collect,Class Iterables,"@GwtIncompatiblepublic static <T> T[] toArray(Iterable<? extends T> iterable, Class<T> type)",Copies an iterable's elements into an array.
4692,common/collect,com.google.common.collect,Class Iterables,"@CanIgnoreReturnValuepublic static <T> boolean addAll(Collection<T> addTo, Iterable<? extends T> elementsToAdd)",Adds all elements in iterable to collection.
4693,common/collect,com.google.common.collect,Class Iterables,"public static int frequency(Iterable<?> iterable, @Nullable Object element)","Returns the number of elements in the specified iterable that equal the specified object. This implementation avoids a full iteration when the iterable is a Multiset or Set. Java 8 users: In most cases, the Stream equivalent of this method is stream.filter(element::equals).count(). If element might be null, use stream.filter(Predicate.isEqual(element)).count() instead."
4694,common/collect,com.google.common.collect,Class Iterables,public static <T> Iterable<T> cycle(Iterable<T> iterable),"Returns an iterable whose iterators cycle indefinitely over the elements of iterable. That iterator supports remove() if iterable.iterator() does. After remove() is called, subsequent cycles omit the removed element, which is no longer in iterable. The iterator's hasNext() method returns true until iterable is empty. Warning: Typical uses of the resulting iterator may produce an infinite loop. You should use an explicit break or be certain that you will eventually remove all the elements. To cycle over the iterable n times, use the following: Iterables.concat(Collections.nCopies(n, iterable))Java 8 users: The Stream equivalent of this method is Stream.generate(() -> iterable).flatMap(Streams::stream)."
4695,common/collect,com.google.common.collect,Class Iterables,@SafeVarargspublic static <T> Iterable<T> cycle(T... elements),"Returns an iterable whose iterators cycle indefinitely over the provided elements. After remove is invoked on a generated iterator, the removed element will no longer appear in either that iterator or any other iterator created from the same source iterable. That is, this method behaves exactly as Iterables.cycle(Lists.newArrayList(elements)). The iterator's hasNext method returns true until all of the original elements have been removed. Warning: Typical uses of the resulting iterator may produce an infinite loop. You should use an explicit break or be certain that you will eventually remove all the elements. To cycle over the elements n times, use the following: Iterables.concat(Collections.nCopies(n, Arrays.asList(elements)))Java 8 users: If passing a single element e, the Stream equivalent of this method is Stream.generate(() -> e). Otherwise, put the elements in a collection and use Stream.generate(() -> collection).flatMap(Collection::stream)."
4696,common/collect,com.google.common.collect,Class Iterables,"public static <T> Iterable<T> concat(Iterable<? extends T> a, Iterable<? extends T> b)","Combines two iterables into a single iterable. The returned iterable has an iterator that traverses the elements in a, followed by the elements in b. The source iterators are not polled until necessary. The returned iterable's iterator supports remove() when the corresponding input iterator supports it. Java 8 users: The Stream equivalent of this method is Stream.concat(a, b)."
4697,common/collect,com.google.common.collect,Class Iterables,"public static <T> Iterable<T> concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c)","Combines three iterables into a single iterable. The returned iterable has an iterator that traverses the elements in a, followed by the elements in b, followed by the elements in c. The source iterators are not polled until necessary. The returned iterable's iterator supports remove() when the corresponding input iterator supports it. Java 8 users: The Stream equivalent of this method is Streams.concat(a, b, c)."
4698,common/collect,com.google.common.collect,Class Iterables,"public static <T> Iterable<T> concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c, Iterable<? extends T> d)","Combines four iterables into a single iterable. The returned iterable has an iterator that traverses the elements in a, followed by the elements in b, followed by the elements in c, followed by the elements in d. The source iterators are not polled until necessary. The returned iterable's iterator supports remove() when the corresponding input iterator supports it. Java 8 users: The Stream equivalent of this method is Streams.concat(a, b, c, d)."
4699,common/collect,com.google.common.collect,Class Iterables,@SafeVarargspublic static <T> Iterable<T> concat(Iterable<? extends T>... inputs),Combines multiple iterables into a single iterable. The returned iterable has an iterator that traverses the elements of each iterable in inputs. The input iterators are not polled until necessary. The returned iterable's iterator supports remove() when the corresponding input iterator supports it. Java 8 users: The Stream equivalent of this method is Streams.concat(...).
4700,common/collect,com.google.common.collect,Class Iterables,public static <T> Iterable<T> concat(Iterable<? extends Iterable<? extends T>> inputs),Combines multiple iterables into a single iterable. The returned iterable has an iterator that traverses the elements of each iterable in inputs. The input iterators are not polled until necessary. The returned iterable's iterator supports remove() when the corresponding input iterator supports it. The methods of the returned iterable may throw NullPointerException if any of the input iterators is null. Java 8 users: The Stream equivalent of this method is streamOfStreams.flatMap(s -> s).
4701,common/collect,com.google.common.collect,Class Iterables,"public static <T> Iterable<List<T>> partition(Iterable<T> iterable, int size)","Divides an iterable into unmodifiable sublists of the given size (the final iterable may be smaller). For example, partitioning an iterable containing [a, b, c, d, e] with a partition size of 3 yields [[a, b, c], [d, e]] -- an outer iterable containing two inner lists of three and two elements, all in the original order. Iterators returned by the returned iterable do not support the Iterator.remove() method. The returned lists implement RandomAccess, whether or not the input list does. Note: if iterable is a List, use Lists.partition(List, int) instead."
4702,common/collect,com.google.common.collect,Class Iterables,"public static <T> Iterable<List<T>> paddedPartition(Iterable<T> iterable, int size)","Divides an iterable into unmodifiable sublists of the given size, padding the final iterable with null values if necessary. For example, partitioning an iterable containing [a, b, c, d, e] with a partition size of 3 yields [[a, b, c], [d, e, null]] -- an outer iterable containing two inner lists of three elements each, all in the original order. Iterators returned by the returned iterable do not support the Iterator.remove() method."
4703,common/collect,com.google.common.collect,Class Iterables,"public static <T> Iterable<T> filter(Iterable<T> unfiltered, Predicate<? super T> retainIfTrue)",Returns a view of unfiltered containing all elements that satisfy the input predicate retainIfTrue. The returned iterable's iterator does not support remove(). Stream equivalent: Stream.filter(java.util.function.Predicate<? super T>).
4704,common/collect,com.google.common.collect,Class Iterables,"@GwtIncompatiblepublic static <T> Iterable<T> filter(Iterable<?> unfiltered, Class<T> desiredType)","Returns a view of unfiltered containing all elements that are of the type desiredType. The returned iterable's iterator does not support remove(). Stream equivalent: stream.filter(type::isInstance).map(type::cast). This does perform a little more work than necessary, so another option is to insert an unchecked cast at some later point: @SuppressWarnings(unchecked) // safe because of ::isInstance check ImmutableList<NewType> result = (ImmutableList) stream.filter(NewType.class::isInstance).collect(toImmutableList()); "
4705,common/collect,com.google.common.collect,Class Iterables,"public static <T> boolean any(Iterable<T> iterable, Predicate<? super T> predicate)",Returns true if any element in iterable satisfies the predicate. Stream equivalent: Stream.anyMatch(java.util.function.Predicate<? super T>).
4706,common/collect,com.google.common.collect,Class Iterables,"public static <T> boolean all(Iterable<T> iterable, Predicate<? super T> predicate)","Returns true if every element in iterable satisfies the predicate. If iterable is empty, true is returned. Stream equivalent: Stream.allMatch(java.util.function.Predicate<? super T>)."
4707,common/collect,com.google.common.collect,Class Iterables,"public static <T> T find(Iterable<T> iterable, Predicate<? super T> predicate)","Returns the first element in iterable that satisfies the given predicate; use this method only when such an element is known to exist. If it is possible that no element will match, use tryFind(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>) or find(Iterable, Predicate, Object) instead. Stream equivalent: stream.filter(predicate).findFirst().get()"
4708,common/collect,com.google.common.collect,Class Iterables,"public static <T> T find(Iterable<? extends T> iterable, Predicate<? super T> predicate, T defaultValue)","Returns the first element in iterable that satisfies the given predicate, or defaultValue if none found. Note that this can usually be handled more naturally using tryFind(iterable, predicate).or(defaultValue). Stream equivalent: stream.filter(predicate).findFirst().orElse(defaultValue)"
4709,common/collect,com.google.common.collect,Class Iterables,"public static <T> Optional<T> tryFind(Iterable<T> iterable, Predicate<? super T> predicate)","Returns an Optional containing the first element in iterable that satisfies the given predicate, if such an element exists. Warning: avoid using a predicate that matches null. If null is matched in iterable, a NullPointerException will be thrown. Stream equivalent: stream.filter(predicate).findFirst()"
4710,common/collect,com.google.common.collect,Class Iterables,"public static <T> int indexOf(Iterable<T> iterable, Predicate<? super T> predicate)","Returns the index in iterable of the first element that satisfies the provided predicate, or -1 if the Iterable has no such elements. More formally, returns the lowest index i such that predicate.apply(Iterables.get(iterable, i)) returns true, or -1 if there is no such index."
4711,common/collect,com.google.common.collect,Class Iterables,"public static <F,T> Iterable<T> transform(Iterable<F> fromIterable, Function<? super F,? extends T> function)","Returns a view containing the result of applying function to each element of fromIterable. The returned iterable's iterator supports remove() if fromIterable's iterator does. After a successful remove() call, fromIterable no longer contains the corresponding element. If the input Iterable is known to be a List or other Collection, consider Lists.transform(java.util.List<F>, com.google.common.base.Function<? super F, ? extends T>) and Collections2.transform(java.util.Collection<F>, com.google.common.base.Function<? super F, T>). Stream equivalent: Stream.map(java.util.function.Function<? super T, ? extends R>)"
4712,common/collect,com.google.common.collect,Class Iterables,"public static <T> T get(Iterable<T> iterable, int position)",Returns the element at the specified position in an iterable. Stream equivalent: stream.skip(position).findFirst().get() (throws NoSuchElementException if out of bounds)
4713,common/collect,com.google.common.collect,Class Iterables,"public static <T> T get(Iterable<? extends T> iterable, int position, T defaultValue)",Returns the element at the specified position in an iterable or a default value otherwise. Stream equivalent: stream.skip(position).findFirst().orElse(defaultValue) (returns the default value if the index is out of bounds)
4714,common/collect,com.google.common.collect,Class Iterables,"public static <T> T getFirst(Iterable<? extends T> iterable, T defaultValue)","Returns the first element in iterable or defaultValue if the iterable is empty. The Iterators analog to this method is Iterators.getNext(java.util.Iterator<? extends T>, T). If no default value is desired (and the caller instead wants a NoSuchElementException to be thrown), it is recommended that iterable.iterator().next() is used instead. To get the only element in a single-element Iterable, consider using getOnlyElement(Iterable) or getOnlyElement(Iterable, Object) instead. Stream equivalent: stream.findFirst().orElse(defaultValue)"
4715,common/collect,com.google.common.collect,Class Iterables,public static <T> T getLast(Iterable<T> iterable),"Returns the last element of iterable. If iterable is a List with RandomAccess support, then this operation is guaranteed to be O(1). Stream equivalent: Streams.findLast(stream).get()"
4716,common/collect,com.google.common.collect,Class Iterables,"public static <T> T getLast(Iterable<? extends T> iterable, T defaultValue)","Returns the last element of iterable or defaultValue if the iterable is empty. If iterable is a List with RandomAccess support, then this operation is guaranteed to be O(1). Stream equivalent: Streams.findLast(stream).orElse(defaultValue)"
4717,common/collect,com.google.common.collect,Class Iterables,"public static <T> Iterable<T> skip(Iterable<T> iterable, int numberToSkip)","Returns a view of iterable that skips its first numberToSkip elements. If iterable contains fewer than numberToSkip elements, the returned iterable skips all of its elements. Modifications to the underlying Iterable before a call to iterator() are reflected in the returned iterator. That is, the iterator skips the first numberToSkip elements that exist when the Iterator is created, not when skip() is called. The returned iterable's iterator supports remove() if the iterator of the underlying iterable supports it. Note that it is not possible to delete the last skipped element by immediately calling remove() on that iterator, as the Iterator contract states that a call to remove() before a call to next() will throw an IllegalStateException. Stream equivalent: Stream.skip(long)"
4718,common/collect,com.google.common.collect,Class Iterables,"public static <T> Iterable<T> limit(Iterable<T> iterable, int limitSize)","Returns a view of iterable containing its first limitSize elements. If iterable contains fewer than limitSize elements, the returned view contains all of its elements. The returned iterable's iterator supports remove() if iterable's iterator does. Stream equivalent: Stream.limit(long)"
4719,common/collect,com.google.common.collect,Class Iterables,public static <T> Iterable<T> consumingIterable(Iterable<T> iterable),"Returns a view of the supplied iterable that wraps each generated Iterator through Iterators.consumingIterator(Iterator). Note: If iterable is a Queue, the returned iterable will get entries from Queue.remove() since Queue's iteration order is undefined. Calling Iterator.hasNext() on a generated iterator from the returned iterable may cause an item to be immediately dequeued for return on a subsequent call to Iterator.next()."
4720,common/collect,com.google.common.collect,Class Iterables,public static boolean isEmpty(Iterable<?> iterable),"Determines if the given iterable contains no elements. There is no precise Iterator equivalent to this method, since one can only ask an iterator whether it has any elements remaining (which one does using Iterator.hasNext()). Stream equivalent: !stream.findAny().isPresent()"
4721,common/collect,com.google.common.collect,Class Iterators,public static <T> UnmodifiableIterator<T> unmodifiableIterator(Iterator<? extends T> iterator),Returns an unmodifiable view of iterator.
4722,common/collect,com.google.common.collect,Class Iterators,@Deprecatedpublic static <T> UnmodifiableIterator<T> unmodifiableIterator(UnmodifiableIterator<T> iterator),Deprecated. no need to use this
4723,common/collect,com.google.common.collect,Class Iterators,public static int size(Iterator<?> iterator),Returns the number of elements remaining in iterator. The iterator will be left exhausted: its hasNext() method will return false.
4724,common/collect,com.google.common.collect,Class Iterators,"public static boolean contains(Iterator<?> iterator, @Nullable Object element)",Returns true if iterator contains element.
4725,common/collect,com.google.common.collect,Class Iterators,"@CanIgnoreReturnValuepublic static boolean removeAll(Iterator<?> removeFrom, Collection<?> elementsToRemove)",Traverses an iterator and removes every element that belongs to the provided collection. The iterator will be left exhausted: its hasNext() method will return false.
4726,common/collect,com.google.common.collect,Class Iterators,"@CanIgnoreReturnValuepublic static <T> boolean removeIf(Iterator<T> removeFrom, Predicate<? super T> predicate)",Removes every element that satisfies the provided predicate from the iterator. The iterator will be left exhausted: its hasNext() method will return false.
4727,common/collect,com.google.common.collect,Class Iterators,"@CanIgnoreReturnValuepublic static boolean retainAll(Iterator<?> removeFrom, Collection<?> elementsToRetain)",Traverses an iterator and removes every element that does not belong to the provided collection. The iterator will be left exhausted: its hasNext() method will return false.
4728,common/collect,com.google.common.collect,Class Iterators,"public static boolean elementsEqual(Iterator<?> iterator1, Iterator<?> iterator2)","Determines whether two iterators contain equal elements in the same order. More specifically, this method returns true if iterator1 and iterator2 contain the same number of elements and every element of iterator1 is equal to the corresponding element of iterator2. Note that this will modify the supplied iterators, since they will have been advanced some number of elements forward."
4729,common/collect,com.google.common.collect,Class Iterators,public static String toString(Iterator<?> iterator),"Returns a string representation of iterator, with the format [e1, e2, ..., en]. The iterator will be left exhausted: its hasNext() method will return false."
4730,common/collect,com.google.common.collect,Class Iterators,public static <T> T getOnlyElement(Iterator<T> iterator),Returns the single element contained in iterator.
4731,common/collect,com.google.common.collect,Class Iterators,"public static <T> T getOnlyElement(Iterator<? extends T> iterator, T defaultValue)","Returns the single element contained in iterator, or defaultValue if the iterator is empty."
4732,common/collect,com.google.common.collect,Class Iterators,"@GwtIncompatiblepublic static <T> T[] toArray(Iterator<? extends T> iterator, Class<T> type)",Copies an iterator's elements into an array. The iterator will be left exhausted: its hasNext() method will return false.
4733,common/collect,com.google.common.collect,Class Iterators,"@CanIgnoreReturnValuepublic static <T> boolean addAll(Collection<T> addTo, Iterator<? extends T> iterator)",Adds all elements in iterator to collection. The iterator will be left exhausted: its hasNext() method will return false.
4734,common/collect,com.google.common.collect,Class Iterators,"public static int frequency(Iterator<?> iterator, @Nullable Object element)",Returns the number of elements in the specified iterator that equal the specified object. The iterator will be left exhausted: its hasNext() method will return false.
4735,common/collect,com.google.common.collect,Class Iterators,public static <T> Iterator<T> cycle(Iterable<T> iterable),"Returns an iterator that cycles indefinitely over the elements of iterable. The returned iterator supports remove() if the provided iterator does. After remove() is called, subsequent cycles omit the removed element, which is no longer in iterable. The iterator's hasNext() method returns true until iterable is empty. Warning: Typical uses of the resulting iterator may produce an infinite loop. You should use an explicit break or be certain that you will eventually remove all the elements."
4736,common/collect,com.google.common.collect,Class Iterators,@SafeVarargspublic static <T> Iterator<T> cycle(T... elements),"Returns an iterator that cycles indefinitely over the provided elements. The returned iterator supports remove(). After remove() is called, subsequent cycles omit the removed element, but elements does not change. The iterator's hasNext() method returns true until all of the original elements have been removed. Warning: Typical uses of the resulting iterator may produce an infinite loop. You should use an explicit break or be certain that you will eventually remove all the elements."
4737,common/collect,com.google.common.collect,Class Iterators,"public static <T> Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b)","Combines two iterators into a single iterator. The returned iterator iterates across the elements in a, followed by the elements in b. The source iterators are not polled until necessary. The returned iterator supports remove() when the corresponding input iterator supports it."
4738,common/collect,com.google.common.collect,Class Iterators,"public static <T> Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b, Iterator<? extends T> c)","Combines three iterators into a single iterator. The returned iterator iterates across the elements in a, followed by the elements in b, followed by the elements in c. The source iterators are not polled until necessary. The returned iterator supports remove() when the corresponding input iterator supports it."
4739,common/collect,com.google.common.collect,Class Iterators,"public static <T> Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b, Iterator<? extends T> c, Iterator<? extends T> d)","Combines four iterators into a single iterator. The returned iterator iterates across the elements in a, followed by the elements in b, followed by the elements in c, followed by the elements in d. The source iterators are not polled until necessary. The returned iterator supports remove() when the corresponding input iterator supports it."
4740,common/collect,com.google.common.collect,Class Iterators,public static <T> Iterator<T> concat(Iterator<? extends T>... inputs),Combines multiple iterators into a single iterator. The returned iterator iterates across the elements of each iterator in inputs. The input iterators are not polled until necessary. The returned iterator supports remove() when the corresponding input iterator supports it.
4741,common/collect,com.google.common.collect,Class Iterators,public static <T> Iterator<T> concat(Iterator<? extends Iterator<? extends T>> inputs),Combines multiple iterators into a single iterator. The returned iterator iterates across the elements of each iterator in inputs. The input iterators are not polled until necessary. The returned iterator supports remove() when the corresponding input iterator supports it. The methods of the returned iterator may throw NullPointerException if any of the input iterators is null.
4742,common/collect,com.google.common.collect,Class Iterators,"public static <T> UnmodifiableIterator<List<T>> partition(Iterator<T> iterator, int size)","Divides an iterator into unmodifiable sublists of the given size (the final list may be smaller). For example, partitioning an iterator containing [a, b, c, d, e] with a partition size of 3 yields [[a, b, c], [d, e]] -- an outer iterator containing two inner lists of three and two elements, all in the original order. The returned lists implement RandomAccess."
4743,common/collect,com.google.common.collect,Class Iterators,"public static <T> UnmodifiableIterator<List<T>> paddedPartition(Iterator<T> iterator, int size)","Divides an iterator into unmodifiable sublists of the given size, padding the final iterator with null values if necessary. For example, partitioning an iterator containing [a, b, c, d, e] with a partition size of 3 yields [[a, b, c], [d, e, null]] -- an outer iterator containing two inner lists of three elements each, all in the original order. The returned lists implement RandomAccess."
4744,common/collect,com.google.common.collect,Class Iterators,"public static <T> UnmodifiableIterator<T> filter(Iterator<T> unfiltered, Predicate<? super T> retainIfTrue)",Returns a view of unfiltered containing all elements that satisfy the input predicate retainIfTrue.
4745,common/collect,com.google.common.collect,Class Iterators,"@GwtIncompatiblepublic static <T> UnmodifiableIterator<T> filter(Iterator<?> unfiltered, Class<T> desiredType)",Returns a view of unfiltered containing all elements that are of the type desiredType.
4746,common/collect,com.google.common.collect,Class Iterators,"public static <T> boolean any(Iterator<T> iterator, Predicate<? super T> predicate)",Returns true if one or more elements returned by iterator satisfy the given predicate.
4747,common/collect,com.google.common.collect,Class Iterators,"public static <T> boolean all(Iterator<T> iterator, Predicate<? super T> predicate)","Returns true if every element returned by iterator satisfies the given predicate. If iterator is empty, true is returned."
4748,common/collect,com.google.common.collect,Class Iterators,"public static <T> T find(Iterator<T> iterator, Predicate<? super T> predicate)","Returns the first element in iterator that satisfies the given predicate; use this method only when such an element is known to exist. If no such element is found, the iterator will be left exhausted: its hasNext() method will return false. If it is possible that no element will match, use tryFind(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>) or find(Iterator, Predicate, Object) instead."
4749,common/collect,com.google.common.collect,Class Iterators,"public static <T> T find(Iterator<? extends T> iterator, Predicate<? super T> predicate, T defaultValue)","Returns the first element in iterator that satisfies the given predicate. If no such element is found, defaultValue will be returned from this method and the iterator will be left exhausted: its hasNext() method will return false. Note that this can usually be handled more naturally using tryFind(iterator, predicate).or(defaultValue)."
4750,common/collect,com.google.common.collect,Class Iterators,"public static <T> Optional<T> tryFind(Iterator<T> iterator, Predicate<? super T> predicate)","Returns an Optional containing the first element in iterator that satisfies the given predicate, if such an element exists. If no such element is found, an empty Optional will be returned from this method and the iterator will be left exhausted: its hasNext() method will return false. Warning: avoid using a predicate that matches null. If null is matched in iterator, a NullPointerException will be thrown."
4751,common/collect,com.google.common.collect,Class Iterators,"public static <T> int indexOf(Iterator<T> iterator, Predicate<? super T> predicate)","Returns the index in iterator of the first element that satisfies the provided predicate, or -1 if the Iterator has no such elements. More formally, returns the lowest index i such that predicate.apply(Iterators.get(iterator, i)) returns true, or -1 if there is no such index. If -1 is returned, the iterator will be left exhausted: its hasNext() method will return false. Otherwise, the iterator will be set to the element which satisfies the predicate."
4752,common/collect,com.google.common.collect,Class Iterators,"public static <F,T> Iterator<T> transform(Iterator<F> fromIterator, Function<? super F,? extends T> function)","Returns a view containing the result of applying function to each element of fromIterator. The returned iterator supports remove() if fromIterator does. After a successful remove() call, fromIterator no longer contains the corresponding element."
4753,common/collect,com.google.common.collect,Class Iterators,"public static <T> T get(Iterator<T> iterator, int position)","Advances iterator position + 1 times, returning the element at the positionth position."
4754,common/collect,com.google.common.collect,Class Iterators,"public static <T> T get(Iterator<? extends T> iterator, int position, T defaultValue)","Advances iterator position + 1 times, returning the element at the positionth position or defaultValue otherwise."
4755,common/collect,com.google.common.collect,Class Iterators,"public static <T> T getNext(Iterator<? extends T> iterator, T defaultValue)","Returns the next element in iterator or defaultValue if the iterator is empty. The Iterables analog to this method is Iterables.getFirst(java.lang.Iterable<? extends T>, T)."
4756,common/collect,com.google.common.collect,Class Iterators,public static <T> T getLast(Iterator<T> iterator),"Advances iterator to the end, returning the last element."
4757,common/collect,com.google.common.collect,Class Iterators,"public static <T> T getLast(Iterator<? extends T> iterator, T defaultValue)","Advances iterator to the end, returning the last element or defaultValue if the iterator is empty."
4758,common/collect,com.google.common.collect,Class Iterators,"@CanIgnoreReturnValuepublic static int advance(Iterator<?> iterator, int numberToAdvance)","Calls next() on iterator, either numberToAdvance times or until hasNext() returns false, whichever comes first."
4759,common/collect,com.google.common.collect,Class Iterators,"public static <T> Iterator<T> limit(Iterator<T> iterator, int limitSize)","Returns a view containing the first limitSize elements of iterator. If iterator contains fewer than limitSize elements, the returned view contains all of its elements. The returned iterator supports remove() if iterator does."
4760,common/collect,com.google.common.collect,Class Iterators,public static <T> Iterator<T> consumingIterator(Iterator<T> iterator),Returns a view of the supplied iterator that removes each element from the supplied iterator as it is returned. The provided iterator must support Iterator.remove() or else the returned iterator will fail on the first call to next.
4761,common/collect,com.google.common.collect,Class Iterators,@SafeVarargspublic static <T> UnmodifiableIterator<T> forArray(T... array),"Returns an iterator containing the elements of array in order. The returned iterator is a view of the array; subsequent changes to the array will be reflected in the iterator. Note: It is often preferable to represent your data using a collection type, for example using Arrays.asList(Object[]), making this method unnecessary. The Iterable equivalent of this method is either Arrays.asList(Object[]), ImmutableList.copyOf(Object[])}, or ImmutableList.of()."
4762,common/collect,com.google.common.collect,Class Iterators,public static <T> UnmodifiableIterator<T> singletonIterator(T value),Returns an iterator containing only value. The Iterable equivalent of this method is Collections.singleton(T).
4763,common/collect,com.google.common.collect,Class Iterators,public static <T> UnmodifiableIterator<T> forEnumeration(Enumeration<T> enumeration),"Adapts an Enumeration to the Iterator interface. This method has no equivalent in Iterables because viewing an Enumeration as an Iterable is impossible. However, the contents can be copied into a collection using Collections.list(java.util.Enumeration<T>). Java 9 users: use enumeration.asIterator() instead, unless it is important to return an UnmodifiableIterator instead of a plain Iterator."
4764,common/collect,com.google.common.collect,Class Iterators,public static <T> Enumeration<T> asEnumeration(Iterator<T> iterator),"Adapts an Iterator to the Enumeration interface. The Iterable equivalent of this method is either Collections.enumeration(java.util.Collection<T>) (if you have a Collection), or Iterators.asEnumeration(collection.iterator())."
4765,common/collect,com.google.common.collect,Class Iterators,public static <T> PeekingIterator<T> peekingIterator(Iterator<? extends T> iterator),"Returns a PeekingIterator backed by the given iterator. Calls to the peek method with no intervening calls to next do not affect the iteration, and hence return the same object each time. A subsequent call to next is guaranteed to return the same object again. For example: PeekingIterator<String> peekingIterator = Iterators.peekingIterator(Iterators.forArray(a, b)); String a1 = peekingIterator.peek(); // returns a String a2 = peekingIterator.peek(); // also returns a String a3 = peekingIterator.next(); // also returns a Any structural changes to the underlying iteration (aside from those performed by the iterator's own PeekingIterator.remove() method) will leave the iterator in an undefined state. The returned iterator does not support removal after peeking, as explained by PeekingIterator.remove(). Note: If the given iterator is already a PeekingIterator, it might be returned to the caller, although this is neither guaranteed to occur nor required to be consistent. For example, this method might choose to pass through recognized implementations of PeekingIterator when the behavior of the implementation is known to meet the contract guaranteed by this method. There is no Iterable equivalent to this method, so use this method to wrap each individual iterator as it is generated."
4766,common/collect,com.google.common.collect,Class Iterators,@Deprecatedpublic static <T> PeekingIterator<T> peekingIterator(PeekingIterator<T> iterator),Deprecated. no need to use this
4767,util/concurrent,com.google.common.util.concurrent,Class JdkFutureAdapters,public static <V> ListenableFuture<V> listenInPoolThread(Future<V> future),"Assigns a thread to the given Future to provide ListenableFuture functionality. Warning: If the input future does not already implement ListenableFuture, the returned future will emulate ListenableFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor) by taking a thread from an internal, unbounded pool at the first call to addListener and holding it until the future is done. Prefer to create ListenableFuture instances with SettableFuture, MoreExecutors.listeningDecorator( java.util.concurrent.ExecutorService), ListenableFutureTask, AbstractFuture, and other utilities over creating plain Future instances to be upgraded to ListenableFuture after the fact."
4768,common/base,com.google.common.base,Class Joiner,public static Joiner on(String separator),Returns a joiner which automatically places separator between consecutive elements.
4769,common/base,com.google.common.base,Class Joiner,public static Joiner on(char separator),Returns a joiner which automatically places separator between consecutive elements.
4770,common/base,com.google.common.base,Class Joiner,"@CanIgnoreReturnValuepublic <A extends Appendable> A appendTo(A appendable, Iterable<?> parts) throws IOException","Appends the string representation of each of parts, using the previously configured separator between each, to appendable."
4771,common/base,com.google.common.base,Class Joiner,"@CanIgnoreReturnValuepublic <A extends Appendable> A appendTo(A appendable, Iterator<?> parts) throws IOException","Appends the string representation of each of parts, using the previously configured separator between each, to appendable."
4772,common/base,com.google.common.base,Class Joiner,"@CanIgnoreReturnValuepublic final <A extends Appendable> A appendTo(A appendable, Object[] parts) throws IOException","Appends the string representation of each of parts, using the previously configured separator between each, to appendable."
4773,common/base,com.google.common.base,Class Joiner,"@CanIgnoreReturnValuepublic final <A extends Appendable> A appendTo(A appendable, @Nullable Object first, @Nullable Object second, Object... rest) throws IOException",Appends to appendable the string representation of each of the remaining arguments.
4774,common/base,com.google.common.base,Class Joiner,"@CanIgnoreReturnValuepublic final StringBuilder appendTo(StringBuilder builder, Iterable<?> parts)","Appends the string representation of each of parts, using the previously configured separator between each, to builder. Identical to appendTo(Appendable, Iterable), except that it does not throw IOException."
4775,common/base,com.google.common.base,Class Joiner,"@CanIgnoreReturnValuepublic final StringBuilder appendTo(StringBuilder builder, Iterator<?> parts)","Appends the string representation of each of parts, using the previously configured separator between each, to builder. Identical to appendTo(Appendable, Iterable), except that it does not throw IOException."
4776,common/base,com.google.common.base,Class Joiner,"@CanIgnoreReturnValuepublic final StringBuilder appendTo(StringBuilder builder, Object[] parts)","Appends the string representation of each of parts, using the previously configured separator between each, to builder. Identical to appendTo(Appendable, Iterable), except that it does not throw IOException."
4777,common/base,com.google.common.base,Class Joiner,"@CanIgnoreReturnValuepublic final StringBuilder appendTo(StringBuilder builder, @Nullable Object first, @Nullable Object second, Object... rest)","Appends to builder the string representation of each of the remaining arguments. Identical to appendTo(Appendable, Object, Object, Object...), except that it does not throw IOException."
4778,common/base,com.google.common.base,Class Joiner,public final String join(Iterable<?> parts),"Returns a string containing the string representation of each of parts, using the previously configured separator between each."
4779,common/base,com.google.common.base,Class Joiner,public final String join(Iterator<?> parts),"Returns a string containing the string representation of each of parts, using the previously configured separator between each."
4780,common/base,com.google.common.base,Class Joiner,public final String join(Object[] parts),"Returns a string containing the string representation of each of parts, using the previously configured separator between each."
4781,common/base,com.google.common.base,Class Joiner,"public final String join(@Nullable Object first, @Nullable Object second, Object... rest)","Returns a string containing the string representation of each argument, using the previously configured separator between each."
4782,common/base,com.google.common.base,Class Joiner,public Joiner useForNull(String nullText),"Returns a joiner with the same behavior as this one, except automatically substituting nullText for any provided null elements."
4783,common/base,com.google.common.base,Class Joiner,public Joiner skipNulls(),"Returns a joiner with the same behavior as this joiner, except automatically skipping over any provided null elements."
4784,common/base,com.google.common.base,Class Joiner,public Joiner.MapJoiner withKeyValueSeparator(char keyValueSeparator),"Returns a MapJoiner using the given key-value separator, and the same configuration as this Joiner otherwise."
4785,common/base,com.google.common.base,Class Joiner.MapJoiner,"@CanIgnoreReturnValuepublic <A extends Appendable> A appendTo(A appendable, Map<?,?> map) throws IOException","Appends the string representation of each entry of map, using the previously configured separator and key-value separator, to appendable."
4786,common/base,com.google.common.base,Class Joiner.MapJoiner,"@CanIgnoreReturnValuepublic StringBuilder appendTo(StringBuilder builder, Map<?,?> map)","Appends the string representation of each entry of map, using the previously configured separator and key-value separator, to builder. Identical to appendTo(Appendable, Map), except that it does not throw IOException."
4787,common/base,com.google.common.base,Class Joiner.MapJoiner,"@Beta @CanIgnoreReturnValuepublic <A extends Appendable> A appendTo(A appendable, Iterable<? extends Map.Entry<?,?>> entries) throws IOException","Appends the string representation of each entry in entries, using the previously configured separator and key-value separator, to appendable."
4788,common/base,com.google.common.base,Class Joiner.MapJoiner,"@Beta @CanIgnoreReturnValuepublic <A extends Appendable> A appendTo(A appendable, Iterator<? extends Map.Entry<?,?>> parts) throws IOException","Appends the string representation of each entry in entries, using the previously configured separator and key-value separator, to appendable."
4789,common/base,com.google.common.base,Class Joiner.MapJoiner,"@Beta @CanIgnoreReturnValuepublic StringBuilder appendTo(StringBuilder builder, Iterable<? extends Map.Entry<?,?>> entries)","Appends the string representation of each entry in entries, using the previously configured separator and key-value separator, to builder. Identical to appendTo(Appendable, Iterable), except that it does not throw IOException."
4790,common/base,com.google.common.base,Class Joiner.MapJoiner,"@Beta @CanIgnoreReturnValuepublic StringBuilder appendTo(StringBuilder builder, Iterator<? extends Map.Entry<?,?>> entries)","Appends the string representation of each entry in entries, using the previously configured separator and key-value separator, to builder. Identical to appendTo(Appendable, Iterable), except that it does not throw IOException."
4791,common/base,com.google.common.base,Class Joiner.MapJoiner,"public String join(Map<?,?> map)","Returns a string containing the string representation of each entry of map, using the previously configured separator and key-value separator."
4792,common/base,com.google.common.base,Class Joiner.MapJoiner,"@Betapublic String join(Iterable<? extends Map.Entry<?,?>> entries)","Returns a string containing the string representation of each entry in entries, using the previously configured separator and key-value separator."
4793,common/base,com.google.common.base,Class Joiner.MapJoiner,"@Betapublic String join(Iterator<? extends Map.Entry<?,?>> entries)","Returns a string containing the string representation of each entry in entries, using the previously configured separator and key-value separator."
4794,common/math,com.google.common.math,Class LinearTransformation,"public static LinearTransformation.LinearTransformationBuilder mapping(double x1, double y1)","Start building an instance which maps x = x1 to y = y1. Both arguments must be finite. Call either LinearTransformation.LinearTransformationBuilder.and(double, double) or LinearTransformation.LinearTransformationBuilder.withSlope(double) on the returned object to finish building the instance."
4795,common/math,com.google.common.math,Class LinearTransformation,public static LinearTransformation vertical(double x),Builds an instance representing a vertical transformation with a constant value of x. (The inverse of this will be a horizontal transformation.)
4796,common/math,com.google.common.math,Class LinearTransformation,public static LinearTransformation horizontal(double y),Builds an instance representing a horizontal transformation with a constant value of y. (The inverse of this will be a vertical transformation.)
4797,common/math,com.google.common.math,Class LinearTransformation,public static LinearTransformation forNaN(),"Builds an instance for datasets which contains Double.NaN. The isHorizontal() and isVertical() methods return false and the slope(), and transform(double) methods all return Double.NaN. The inverse() method returns the same instance."
4798,common/math,com.google.common.math,Class LinearTransformation,public abstract boolean isVertical(),Returns whether this is a vertical transformation.
4799,common/math,com.google.common.math,Class LinearTransformation,public abstract boolean isHorizontal(),Returns whether this is a horizontal transformation.
4800,common/math,com.google.common.math,Class LinearTransformation,public abstract double slope(),"Returns the slope of the transformation, i.e. the rate of change of y with respect to x. This must not be called on a vertical transformation (i.e. when isVertical() is true)."
4801,common/math,com.google.common.math,Class LinearTransformation,public abstract double transform(double x),Returns the y corresponding to the given x. This must not be called on a vertical transformation (i.e. when isVertical() is true).
4802,common/math,com.google.common.math,Class LinearTransformation.LinearTransformationBuilder,"public LinearTransformation and(double x2, double y2)","Finish building an instance which also maps x = x2 to y = y2. These values must not both be identical to the values given in the first mapping. If only the x values are identical, the transformation is vertical. If only the y values are identical, the transformation is horizontal (i.e. the slope is zero)."
4803,common/io,com.google.common.io,Interface LineProcessor<T>,@CanIgnoreReturnValueboolean processLine(String line) throws IOException,This method will be called once for each line.
4804,common/collect,com.google.common.collect,"Class LinkedHashMultimap<K,V>","public static <K,V> LinkedHashMultimap<K,V> create()","Creates a new, empty LinkedHashMultimap with the default initial capacities."
4805,common/collect,com.google.common.collect,"Class LinkedHashMultimap<K,V>","public static <K,V> LinkedHashMultimap<K,V> create(int expectedKeys, int expectedValuesPerKey)",Constructs an empty LinkedHashMultimap with enough capacity to hold the specified numbers of keys and values without rehashing.
4806,common/collect,com.google.common.collect,"Class LinkedHashMultimap<K,V>","public static <K,V> LinkedHashMultimap<K,V> create(Multimap<? extends K,? extends V> multimap)","Constructs a LinkedHashMultimap with the same mappings as the specified multimap. If a key-value mapping appears multiple times in the input multimap, it only appears once in the constructed multimap. The new multimap has the same Multimap.entries() iteration order as the input multimap, except for excluding duplicate mappings."
4807,common/collect,com.google.common.collect,"Class LinkedHashMultimap<K,V>","@CanIgnoreReturnValuepublic Set<V> replaceValues(K key, Iterable<? extends V> values)","Stores a collection of values with the same key, replacing any existing values for that key. If values is empty, this is equivalent to removeAll(key). The returned collection is immutable. Because a SetMultimap has unique values for a given key, this method returns a Set, instead of the Collection specified in the Multimap interface. Any duplicates in values will be stored in the multimap once. If values is not empty and the multimap already contains a mapping for key, the keySet() ordering is unchanged. However, the provided values always come last in the entries() and values() iteration orderings."
4808,common/collect,com.google.common.collect,"Class LinkedHashMultimap<K,V>","public Set<Map.Entry<K,V>> entries()","Returns a set of all key-value pairs. Changes to the returned set will update the underlying multimap, and vice versa. The entries set does not support the add or addAll operations. The iterator generated by the returned set traverses the entries in the order they were added to the multimap. Each entry is an immutable snapshot of a key-value mapping in the multimap, taken at the time the entry is returned by a method call to the collection or its iterator."
4809,common/collect,com.google.common.collect,"Class LinkedHashMultimap<K,V>",public Set<K> keySet(),"Returns a view collection of all distinct keys contained in this multimap. Note that the key set contains a key if and only if this multimap maps that key to at least one value. The iterator generated by the returned set traverses the keys in the order they were first added to the multimap. Changes to the returned set will update the underlying multimap, and vice versa. However, adding to the returned set is not possible."
4810,common/collect,com.google.common.collect,"Class LinkedHashMultimap<K,V>",public Collection<V> values(),"Returns a collection of all values in the multimap. Changes to the returned collection will update the underlying multimap, and vice versa. The iterator generated by the returned collection traverses the values in the order they were added to the multimap."
4811,common/collect,com.google.common.collect,"Class LinkedHashMultimap<K,V>",public void clear(),Description copied from interface: Multimap
4812,common/collect,com.google.common.collect,"Class LinkedHashMultimap<K,V>",public Set<V> get(K key),"Returns a view collection of the values associated with key in this multimap, if any. Note that when containsKey(key) is false, this returns an empty collection, not null. Changes to the returned collection will update the underlying multimap, and vice versa. The returned collection is not serializable. Because a SetMultimap has unique values for a given key, this method returns a Set, instead of the Collection specified in the Multimap interface."
4813,common/collect,com.google.common.collect,"Class LinkedHashMultimap<K,V>",@CanIgnoreReturnValuepublic Set<V> removeAll(@Nullable Object key),"Removes all values associated with the key key. Once this method returns, key will not be mapped to any values, so it will not appear in Multimap.keySet(), Multimap.asMap(), or any other views. The returned collection is immutable. Because a SetMultimap has unique values for a given key, this method returns a Set, instead of the Collection specified in the Multimap interface."
4814,common/collect,com.google.common.collect,"Class LinkedHashMultimap<K,V>","public Map<K,Collection<V>> asMap()","Returns a view of this multimap as a Map from each distinct key to the nonempty collection of that key's associated values. Note that this.asMap().get(k) is equivalent to this.get(k) only when k is a key contained in the multimap; otherwise it returns null as opposed to an empty collection. Changes to the returned map or the collections that serve as its values will update the underlying multimap, and vice versa. The map does not support put or putAll, nor do its entries support setValue. Though the method signature doesn't say so explicitly, the returned map has Set values."
4815,common/collect,com.google.common.collect,"Class LinkedHashMultimap<K,V>","@CanIgnoreReturnValuepublic boolean put(K key, V value)",Stores a key-value pair in the multimap.
4816,common/collect,com.google.common.collect,"Class LinkedHashMultimap<K,V>",public boolean equals(@Nullable Object object),"Compares the specified object to this multimap for equality. Two SetMultimap instances are equal if, for each key, they contain the same values. Equality does not depend on the ordering of keys or values."
4817,common/collect,com.google.common.collect,"Class LinkedHashMultimap<K,V>",public int size(),Description copied from interface: Multimap
4818,common/collect,com.google.common.collect,"Class LinkedHashMultimap<K,V>",public boolean containsKey(@Nullable Object key),Description copied from interface: Multimap
4819,common/collect,com.google.common.collect,"Class LinkedHashMultimap<K,V>","public void forEach(BiConsumer<? super K,? super V> action)",Description copied from interface: Multimap
4820,common/collect,com.google.common.collect,"Class LinkedHashMultimap<K,V>",public boolean isEmpty(),Description copied from interface: Multimap
4821,common/collect,com.google.common.collect,"Class LinkedHashMultimap<K,V>",public boolean containsValue(@Nullable Object value),Description copied from interface: Multimap
4822,common/collect,com.google.common.collect,"Class LinkedHashMultimap<K,V>","public boolean containsEntry(@Nullable Object key, @Nullable Object value)",Description copied from interface: Multimap
4823,common/collect,com.google.common.collect,"Class LinkedHashMultimap<K,V>","@CanIgnoreReturnValuepublic boolean remove(@Nullable Object key, @Nullable Object value)",Description copied from interface: Multimap
4824,common/collect,com.google.common.collect,"Class LinkedHashMultimap<K,V>","@CanIgnoreReturnValuepublic boolean putAll(K key, Iterable<? extends V> values)",Description copied from interface: Multimap
4825,common/collect,com.google.common.collect,"Class LinkedHashMultimap<K,V>","@CanIgnoreReturnValuepublic boolean putAll(Multimap<? extends K,? extends V> multimap)",Description copied from interface: Multimap
4826,common/collect,com.google.common.collect,"Class LinkedHashMultimap<K,V>",public Multiset<K> keys(),Description copied from interface: Multimap
4827,common/collect,com.google.common.collect,"Class LinkedHashMultimap<K,V>",public int hashCode(),"Returns the hash code for this multimap. The hash code of a multimap is defined as the hash code of the map view, as returned by Multimap.asMap()."
4828,common/collect,com.google.common.collect,Class LinkedHashMultiset<E>,public static <E> LinkedHashMultiset<E> create(),"Creates a new, empty LinkedHashMultiset using the default initial capacity."
4829,common/collect,com.google.common.collect,Class LinkedHashMultiset<E>,public static <E> LinkedHashMultiset<E> create(int distinctElements),"Creates a new, empty LinkedHashMultiset with the specified expected number of distinct elements."
4830,common/collect,com.google.common.collect,Class LinkedHashMultiset<E>,public static <E> LinkedHashMultiset<E> create(Iterable<? extends E> elements),Creates a new LinkedHashMultiset containing the specified elements. This implementation is highly efficient when elements is itself a Multiset.
4831,common/collect,com.google.common.collect,Class LinkedHashMultiset<E>,public Set<Multiset.Entry<E>> entrySet(),"Returns a view of the contents of this multiset, grouped into Multiset.Entry instances, each providing an element of the multiset and the count of that element. This set contains exactly one entry for each distinct element in the multiset (thus it always has the same size as the Multiset.elementSet()). The order of the elements in the element set is unspecified. The entry set is backed by the same data as the multiset, so any change to either is immediately reflected in the other. However, multiset changes may or may not be reflected in any Entry instances already retrieved from the entry set (this is implementation-dependent). Furthermore, implementations are not required to support modifications to the entry set at all, and the Entry instances themselves don't even have methods for modification. See the specific implementation class for more details on how its entry set handles modifications. Invoking Multiset.Entry.getCount() on an entry in the returned set always returns the current count of that element in the multiset, as opposed to the count at the time the entry was retrieved."
4832,common/collect,com.google.common.collect,Class LinkedHashMultiset<E>,public void forEachEntry(ObjIntConsumer<? super E> action),Description copied from interface: Multiset
4833,common/collect,com.google.common.collect,Class LinkedHashMultiset<E>,public void clear(),Description copied from class: java.util.AbstractCollection
4834,common/collect,com.google.common.collect,Class LinkedHashMultiset<E>,public int size(),Description copied from interface: java.util.Collection
4835,common/collect,com.google.common.collect,Class LinkedHashMultiset<E>,public Iterator<E> iterator(),Description copied from class: java.util.AbstractCollection
4836,common/collect,com.google.common.collect,Class LinkedHashMultiset<E>,public int count(@Nullable Object element),Description copied from interface: Multiset
4837,common/collect,com.google.common.collect,Class LinkedHashMultiset<E>,"@CanIgnoreReturnValuepublic int add(E element, int occurrences)","Adds a number of occurrences of an element to this multiset. Note that if occurrences == 1, this method has the identical effect to Multiset.add(Object). This method is functionally equivalent (except in the case of overflow) to the call addAll(Collections.nCopies(element, occurrences)), which would presumably perform much more poorly."
4838,common/collect,com.google.common.collect,Class LinkedHashMultiset<E>,"@CanIgnoreReturnValuepublic int remove(@Nullable Object element, int occurrences)",Description copied from interface: Multiset
4839,common/collect,com.google.common.collect,Class LinkedHashMultiset<E>,"@CanIgnoreReturnValuepublic int setCount(E element, int count)",Description copied from interface: Multiset
4840,common/collect,com.google.common.collect,Class LinkedHashMultiset<E>,public boolean isEmpty(),Description copied from class: java.util.AbstractCollection
4841,common/collect,com.google.common.collect,Class LinkedHashMultiset<E>,public boolean contains(@Nullable Object element),Description copied from class: java.util.AbstractCollection
4842,common/collect,com.google.common.collect,Class LinkedHashMultiset<E>,@CanIgnoreReturnValuepublic final boolean add(E element),Description copied from class: java.util.AbstractCollection
4843,common/collect,com.google.common.collect,Class LinkedHashMultiset<E>,@CanIgnoreReturnValuepublic final boolean remove(@Nullable Object element),Description copied from class: java.util.AbstractCollection
4844,common/collect,com.google.common.collect,Class LinkedHashMultiset<E>,"@CanIgnoreReturnValuepublic boolean setCount(E element, int oldCount, int newCount)",Description copied from interface: Multiset
4845,common/collect,com.google.common.collect,Class LinkedHashMultiset<E>,@CanIgnoreReturnValuepublic final boolean addAll(Collection<? extends E> elementsToAdd),"Adds all of the elements in the specified collection to this collection (optional operation). The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (This implies that the behavior of this call is undefined if the specified collection is this collection, and this collection is nonempty.) This implementation iterates over the specified collection, and adds each object returned by the iterator to this collection, in turn. Note that this implementation will throw an UnsupportedOperationException unless add is overridden (assuming the specified collection is non-empty). This implementation is highly efficient when elementsToAdd is itself a Multiset."
4846,common/collect,com.google.common.collect,Class LinkedHashMultiset<E>,@CanIgnoreReturnValuepublic final boolean removeAll(Collection<?> elementsToRemove),Description copied from class: java.util.AbstractCollection
4847,common/collect,com.google.common.collect,Class LinkedHashMultiset<E>,@CanIgnoreReturnValuepublic final boolean retainAll(Collection<?> elementsToRetain),Description copied from class: java.util.AbstractCollection
4848,common/collect,com.google.common.collect,Class LinkedHashMultiset<E>,public Set<E> elementSet(),Description copied from interface: Multiset
4849,common/collect,com.google.common.collect,Class LinkedHashMultiset<E>,public final boolean equals(@Nullable Object object),"Indicates whether some other object is equal to this one. The equals method implements an equivalence relation on non-null object references: It is reflexive: for any non-null reference value x, x.equals(x) should return true. It is symmetric: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is transitive: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is consistent: for any non-null reference values x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes. This implementation returns true if object is a multiset of the same size and if, for each element, the two multisets have the same count."
4850,common/collect,com.google.common.collect,Class LinkedHashMultiset<E>,public final int hashCode(),"Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by HashMap. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the Object.equals(java.lang.Object) method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java™ programming language.) This implementation returns the hash code of Multiset.entrySet()."
4851,common/collect,com.google.common.collect,"Class LinkedListMultimap<K,V>","public static <K,V> LinkedListMultimap<K,V> create()","Creates a new, empty LinkedListMultimap with the default initial capacity."
4852,common/collect,com.google.common.collect,"Class LinkedListMultimap<K,V>","public static <K,V> LinkedListMultimap<K,V> create(int expectedKeys)",Constructs an empty LinkedListMultimap with enough capacity to hold the specified number of keys without rehashing.
4853,common/collect,com.google.common.collect,"Class LinkedListMultimap<K,V>","public static <K,V> LinkedListMultimap<K,V> create(Multimap<? extends K,? extends V> multimap)",Constructs a LinkedListMultimap with the same mappings as the specified Multimap. The new multimap has the same Multimap.entries() iteration order as the input multimap.
4854,common/collect,com.google.common.collect,"Class LinkedListMultimap<K,V>",public int size(),Description copied from interface: Multimap
4855,common/collect,com.google.common.collect,"Class LinkedListMultimap<K,V>",public boolean isEmpty(),Description copied from interface: Multimap
4856,common/collect,com.google.common.collect,"Class LinkedListMultimap<K,V>",public boolean containsKey(@Nullable Object key),Description copied from interface: Multimap
4857,common/collect,com.google.common.collect,"Class LinkedListMultimap<K,V>",public boolean containsValue(@Nullable Object value),Description copied from interface: Multimap
4858,common/collect,com.google.common.collect,"Class LinkedListMultimap<K,V>","@CanIgnoreReturnValuepublic boolean put(K key, V value)",Stores a key-value pair in the multimap.
4859,common/collect,com.google.common.collect,"Class LinkedListMultimap<K,V>","@CanIgnoreReturnValuepublic List<V> replaceValues(K key, Iterable<? extends V> values)","Stores a collection of values with the same key, replacing any existing values for that key. If values is empty, this is equivalent to removeAll(key). If any entries for the specified key already exist in the multimap, their values are changed in-place without affecting the iteration order. The returned list is immutable and implements RandomAccess."
4860,common/collect,com.google.common.collect,"Class LinkedListMultimap<K,V>",@CanIgnoreReturnValuepublic List<V> removeAll(@Nullable Object key),"Removes all values associated with the key key. Once this method returns, key will not be mapped to any values, so it will not appear in Multimap.keySet(), Multimap.asMap(), or any other views. Because the values for a given key may have duplicates and follow the insertion ordering, this method returns a List, instead of the Collection specified in the Multimap interface. The returned list is immutable and implements RandomAccess."
4861,common/collect,com.google.common.collect,"Class LinkedListMultimap<K,V>",public void clear(),Description copied from interface: Multimap
4862,common/collect,com.google.common.collect,"Class LinkedListMultimap<K,V>",public List<V> get(K key),"Returns a view collection of the values associated with key in this multimap, if any. Note that when containsKey(key) is false, this returns an empty collection, not null. Changes to the returned collection will update the underlying multimap, and vice versa. Because the values for a given key may have duplicates and follow the insertion ordering, this method returns a List, instead of the Collection specified in the Multimap interface. If the multimap is modified while an iteration over the list is in progress (except through the iterator's own add, set or remove operations) the results of the iteration are undefined. The returned list is not serializable and does not have random access."
4863,common/collect,com.google.common.collect,"Class LinkedListMultimap<K,V>",public List<V> values(),"Returns a view collection containing the value from each key-value pair contained in this multimap, without collapsing duplicates (so values().size() == size()). Changes to the returned collection will update the underlying multimap, and vice versa. However, adding to the returned collection is not possible. The iterator generated by the returned collection traverses the values in the order they were added to the multimap. Because the values may have duplicates and follow the insertion ordering, this method returns a List, instead of the Collection specified in the ListMultimap interface."
4864,common/collect,com.google.common.collect,"Class LinkedListMultimap<K,V>","public List<Map.Entry<K,V>> entries()","Returns a view collection of all key-value pairs contained in this multimap, as Map.Entry instances. Changes to the returned collection or the entries it contains will update the underlying multimap, and vice versa. However, adding to the returned collection is not possible. The iterator generated by the returned collection traverses the entries in the order they were added to the multimap. Because the entries may have duplicates and follow the insertion ordering, this method returns a List, instead of the Collection specified in the ListMultimap interface. An entry's Map.Entry.getKey() method always returns the same key, regardless of what happens subsequently. As long as the corresponding key-value mapping is not removed from the multimap, Map.Entry.getValue() returns the value from the multimap, which may change over time, and Map.Entry.setValue(V) modifies that value. Removing the mapping from the multimap does not alter the value returned by getValue(), though a subsequent setValue() call won't update the multimap but will lead to a revised value being returned by getValue()."
4865,common/collect,com.google.common.collect,"Class LinkedListMultimap<K,V>","public boolean containsEntry(@Nullable Object key, @Nullable Object value)",Description copied from interface: Multimap
4866,common/collect,com.google.common.collect,"Class LinkedListMultimap<K,V>","@CanIgnoreReturnValuepublic boolean remove(@Nullable Object key, @Nullable Object value)",Description copied from interface: Multimap
4867,common/collect,com.google.common.collect,"Class LinkedListMultimap<K,V>","@CanIgnoreReturnValuepublic boolean putAll(K key, Iterable<? extends V> values)",Description copied from interface: Multimap
4868,common/collect,com.google.common.collect,"Class LinkedListMultimap<K,V>","@CanIgnoreReturnValuepublic boolean putAll(Multimap<? extends K,? extends V> multimap)",Description copied from interface: Multimap
4869,common/collect,com.google.common.collect,"Class LinkedListMultimap<K,V>",public Set<K> keySet(),Description copied from interface: Multimap
4870,common/collect,com.google.common.collect,"Class LinkedListMultimap<K,V>",public Multiset<K> keys(),Description copied from interface: Multimap
4871,common/collect,com.google.common.collect,"Class LinkedListMultimap<K,V>","public Map<K,Collection<V>> asMap()",Description copied from interface: Multimap
4872,common/collect,com.google.common.collect,"Class LinkedListMultimap<K,V>",public boolean equals(@Nullable Object object),Description copied from class: java.lang.Object
4873,common/collect,com.google.common.collect,"Class LinkedListMultimap<K,V>",public int hashCode(),"Returns the hash code for this multimap. The hash code of a multimap is defined as the hash code of the map view, as returned by Multimap.asMap()."
4874,util/concurrent,com.google.common.util.concurrent,Class ListenableFutureTask<V>,public static <V> ListenableFutureTask<V> create(Callable<V> callable),"Creates a ListenableFutureTask that will upon running, execute the given Callable."
4875,util/concurrent,com.google.common.util.concurrent,Class ListenableFutureTask<V>,"public static <V> ListenableFutureTask<V> create(Runnable runnable, V result)","Creates a ListenableFutureTask that will upon running, execute the given Runnable, and arrange that get will return the given result on successful completion."
4876,util/concurrent,com.google.common.util.concurrent,Class ListenableFutureTask<V>,"public void addListener(Runnable listener, Executor exec)",Description copied from interface: ListenableFuture
4877,util/concurrent,com.google.common.util.concurrent,Class ListenableFutureTask<V>,"@CanIgnoreReturnValuepublic V get(long timeout, TimeUnit unit) throws TimeoutException, InterruptedException, ExecutionException",Description copied from interface: java.util.concurrent.Future
4878,util/concurrent,com.google.common.util.concurrent,Interface ListeningExecutorService,<T> ListenableFuture<T> submit(Callable<T> task),Description copied from interface: java.util.concurrent.ExecutorService
4879,util/concurrent,com.google.common.util.concurrent,Interface ListeningExecutorService,ListenableFuture<?> submit(Runnable task),Description copied from interface: java.util.concurrent.ExecutorService
4880,util/concurrent,com.google.common.util.concurrent,Interface ListeningExecutorService,"<T> ListenableFuture<T> submit(Runnable task, T result)",Description copied from interface: java.util.concurrent.ExecutorService
4881,util/concurrent,com.google.common.util.concurrent,Interface ListeningExecutorService,<T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) throws InterruptedException,"Executes the given tasks, returning a list of Futures holding their status and results when all complete. Future.isDone() is true for each element of the returned list. Note that a completed task could have terminated either normally or by throwing an exception. The results of this method are undefined if the given collection is modified while this operation is in progress. All elements in the returned list must be ListenableFuture instances. The easiest way to obtain a List<ListenableFuture<T>> from this method is an unchecked (but safe) cast: @SuppressWarnings(unchecked) // guaranteed by invokeAll contract List<ListenableFuture<T>> futures = (List) executor.invokeAll(tasks); "
4882,util/concurrent,com.google.common.util.concurrent,Interface ListeningScheduledExecutorService,"ListenableScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit)",Description copied from interface: java.util.concurrent.ScheduledExecutorService
4883,util/concurrent,com.google.common.util.concurrent,Interface ListeningScheduledExecutorService,"default ListenableScheduledFuture<?> schedule(Runnable command, Duration delay)","Duration-based overload of schedule(Runnable, long, TimeUnit)."
4884,util/concurrent,com.google.common.util.concurrent,Interface ListeningScheduledExecutorService,"<V> ListenableScheduledFuture<V> schedule(Callable<V> callable, long delay, TimeUnit unit)",Description copied from interface: java.util.concurrent.ScheduledExecutorService
4885,util/concurrent,com.google.common.util.concurrent,Interface ListeningScheduledExecutorService,"default <V> ListenableScheduledFuture<V> schedule(Callable<V> callable, Duration delay)","Duration-based overload of schedule(Callable, long, TimeUnit)."
4886,util/concurrent,com.google.common.util.concurrent,Interface ListeningScheduledExecutorService,"ListenableScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)",Description copied from interface: java.util.concurrent.ScheduledExecutorService
4887,util/concurrent,com.google.common.util.concurrent,Interface ListeningScheduledExecutorService,"default ListenableScheduledFuture<?> scheduleAtFixedRate(Runnable command, Duration initialDelay, Duration period)","Duration-based overload of scheduleAtFixedRate(Runnable, long, long, TimeUnit)."
4888,util/concurrent,com.google.common.util.concurrent,Interface ListeningScheduledExecutorService,"ListenableScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)",Description copied from interface: java.util.concurrent.ScheduledExecutorService
4889,common/collect,com.google.common.collect,"Interface ListMultimap<K,V>",List<V> get(K key),"Returns a view collection of the values associated with key in this multimap, if any. Note that when containsKey(key) is false, this returns an empty collection, not null. Changes to the returned collection will update the underlying multimap, and vice versa. Because the values for a given key may have duplicates and follow the insertion ordering, this method returns a List, instead of the Collection specified in the Multimap interface."
4890,common/collect,com.google.common.collect,"Interface ListMultimap<K,V>",@CanIgnoreReturnValueList<V> removeAll(@Nullable Object key),"Removes all values associated with the key key. Once this method returns, key will not be mapped to any values, so it will not appear in Multimap.keySet(), Multimap.asMap(), or any other views. Because the values for a given key may have duplicates and follow the insertion ordering, this method returns a List, instead of the Collection specified in the Multimap interface."
4891,common/collect,com.google.common.collect,"Interface ListMultimap<K,V>","@CanIgnoreReturnValueList<V> replaceValues(K key, Iterable<? extends V> values)","Stores a collection of values with the same key, replacing any existing values for that key. If values is empty, this is equivalent to removeAll(key). Because the values for a given key may have duplicates and follow the insertion ordering, this method returns a List, instead of the Collection specified in the Multimap interface."
4892,common/collect,com.google.common.collect,"Interface ListMultimap<K,V>","Map<K,Collection<V>> asMap()","Returns a view of this multimap as a Map from each distinct key to the nonempty collection of that key's associated values. Note that this.asMap().get(k) is equivalent to this.get(k) only when k is a key contained in the multimap; otherwise it returns null as opposed to an empty collection. Changes to the returned map or the collections that serve as its values will update the underlying multimap, and vice versa. The map does not support put or putAll, nor do its entries support setValue. Note: The returned map's values are guaranteed to be of type List. To obtain this map with the more specific generic type Map<K, List<V>>, call Multimaps.asMap(ListMultimap) instead."
4893,common/collect,com.google.common.collect,Class Lists,@GwtCompatible(serializable=true)public static <E> ArrayList<E> newArrayList(),"Creates a mutable, empty ArrayList instance (for Java 6 and earlier). Note: if mutability is not required, use ImmutableList.of() instead. Note for Java 7 and later: this method is now unnecessary and should be treated as deprecated. Instead, use the ArrayList constructor directly, taking advantage of the new diamond syntax."
4894,common/collect,com.google.common.collect,Class Lists,@SafeVarargs @GwtCompatible(serializable=true)public static <E> ArrayList<E> newArrayList(E... elements),"Creates a mutable ArrayList instance containing the given elements. Note: essentially the only reason to use this method is when you will need to add or remove elements later. Otherwise, for non-null elements use ImmutableList.of() (for varargs) or ImmutableList.copyOf(Object[]) (for an array) instead. If any elements might be null, or you need support for List.set(int, Object), use Arrays.asList(T...). Note that even when you do need the ability to add or remove, this method provides only a tiny bit of syntactic sugar for newArrayList(asList(...)), or for creating an empty list then calling Collections.addAll(java.util.Collection<? super T>, T...). This method is not actually very useful and will likely be deprecated in the future."
4895,common/collect,com.google.common.collect,Class Lists,@GwtCompatible(serializable=true)public static <E> ArrayList<E> newArrayList(Iterable<? extends E> elements),"Creates a mutable ArrayList instance containing the given elements; a very thin shortcut for creating an empty list then calling Iterables.addAll(java.util.Collection<T>, java.lang.Iterable<? extends T>). Note: if mutability is not required and the elements are non-null, use ImmutableList.copyOf(Iterable) instead. (Or, change elements to be a FluentIterable and call elements.toList().) Note for Java 7 and later: if elements is a Collection, you don't need this method. Use the ArrayList constructor directly, taking advantage of the new diamond syntax."
4896,common/collect,com.google.common.collect,Class Lists,@GwtCompatible(serializable=true)public static <E> ArrayList<E> newArrayList(Iterator<? extends E> elements),"Creates a mutable ArrayList instance containing the given elements; a very thin shortcut for creating an empty list and then calling Iterators.addAll(java.util.Collection<T>, java.util.Iterator<? extends T>). Note: if mutability is not required and the elements are non-null, use ImmutableList.copyOf(Iterator) instead."
4897,common/collect,com.google.common.collect,Class Lists,@GwtCompatible(serializable=true)public static <E> ArrayList<E> newArrayListWithCapacity(int initialArraySize),"Creates an ArrayList instance backed by an array with the specified initial size; simply delegates to ArrayList(int). Note for Java 7 and later: this method is now unnecessary and should be treated as deprecated. Instead, use new ArrayList<>(int) directly, taking advantage of the new diamond syntax. (Unlike here, there is no risk of overload ambiguity, since the ArrayList constructors very wisely did not accept varargs.)"
4898,common/collect,com.google.common.collect,Class Lists,@GwtCompatible(serializable=true)public static <E> ArrayList<E> newArrayListWithExpectedSize(int estimatedSize),"Creates an ArrayList instance to hold estimatedSize elements, plus an unspecified amount of padding; you almost certainly mean to call newArrayListWithCapacity(int) (see that method for further advice on usage). Note: This method will soon be deprecated. Even in the rare case that you do want some amount of padding, it's best if you choose your desired amount explicitly."
4899,common/collect,com.google.common.collect,Class Lists,@GwtCompatible(serializable=true)public static <E> LinkedList<E> newLinkedList(),"Creates a mutable, empty LinkedList instance (for Java 6 and earlier). Note: if you won't be adding any elements to the list, use ImmutableList.of() instead. Performance note: ArrayList and ArrayDeque consistently outperform LinkedList except in certain rare and specific situations. Unless you have spent a lot of time benchmarking your specific needs, use one of those instead. Note for Java 7 and later: this method is now unnecessary and should be treated as deprecated. Instead, use the LinkedList constructor directly, taking advantage of the new diamond syntax."
4900,common/collect,com.google.common.collect,Class Lists,@GwtCompatible(serializable=true)public static <E> LinkedList<E> newLinkedList(Iterable<? extends E> elements),"Creates a mutable LinkedList instance containing the given elements; a very thin shortcut for creating an empty list then calling Iterables.addAll(java.util.Collection<T>, java.lang.Iterable<? extends T>). Note: if mutability is not required and the elements are non-null, use ImmutableList.copyOf(Iterable) instead. (Or, change elements to be a FluentIterable and call elements.toList().) Performance note: ArrayList and ArrayDeque consistently outperform LinkedList except in certain rare and specific situations. Unless you have spent a lot of time benchmarking your specific needs, use one of those instead. Note for Java 7 and later: if elements is a Collection, you don't need this method. Use the LinkedList constructor directly, taking advantage of the new diamond syntax."
4901,common/collect,com.google.common.collect,Class Lists,@GwtIncompatiblepublic static <E> CopyOnWriteArrayList<E> newCopyOnWriteArrayList(),"Creates an empty CopyOnWriteArrayList instance. Note: if you need an immutable empty List, use Collections.emptyList() instead."
4902,common/collect,com.google.common.collect,Class Lists,@GwtIncompatiblepublic static <E> CopyOnWriteArrayList<E> newCopyOnWriteArrayList(Iterable<? extends E> elements),Creates a CopyOnWriteArrayList instance containing the given elements.
4903,common/collect,com.google.common.collect,Class Lists,"public static <E> List<E> asList(E first, E[] rest)","Returns an unmodifiable list containing the specified first element and backed by the specified array of additional elements. Changes to the rest array will be reflected in the returned list. Unlike Arrays.asList(T...), the returned list is unmodifiable. This is useful when a varargs method needs to use a signature such as (Foo firstFoo, Foo... moreFoos), in order to avoid overload ambiguity or to enforce a minimum argument count. The returned list is serializable and implements RandomAccess."
4904,common/collect,com.google.common.collect,Class Lists,"public static <E> List<E> asList(E first, E second, E[] rest)","Returns an unmodifiable list containing the specified first and second element, and backed by the specified array of additional elements. Changes to the rest array will be reflected in the returned list. Unlike Arrays.asList(T...), the returned list is unmodifiable. This is useful when a varargs method needs to use a signature such as (Foo firstFoo, Foo secondFoo, Foo... moreFoos), in order to avoid overload ambiguity or to enforce a minimum argument count. The returned list is serializable and implements RandomAccess."
4905,common/collect,com.google.common.collect,Class Lists,public static <B> List<List<B>> cartesianProduct(List<? extends List<? extends B>> lists),"Returns every possible list that can be formed by choosing one element from each of the given lists in order; the n-ary Cartesian product of the lists. For example: Lists.cartesianProduct(ImmutableList.of( ImmutableList.of(1, 2), ImmutableList.of(A, B, C))) returns a list containing six lists in the following order: ImmutableList.of(1, A)ImmutableList.of(1, B)ImmutableList.of(1, C)ImmutableList.of(2, A)ImmutableList.of(2, B)ImmutableList.of(2, C)The result is guaranteed to be in the traditional, lexicographical order for Cartesian products that you would get from nesting for loops: for (B b0 : lists.get(0)) { for (B b1 : lists.get(1)) { ... ImmutableList<B> tuple = ImmutableList.of(b0, b1, ...); // operate on tuple } } Note that if any input list is empty, the Cartesian product will also be empty. If no lists at all are provided (an empty list), the resulting Cartesian product has one element, an empty list (counter-intuitive, but mathematically consistent). Performance notes: while the cartesian product of lists of size m, n, p is a list of size m x n x p, its actual memory consumption is much smaller. When the cartesian product is constructed, the input lists are merely copied. Only as the resulting list is iterated are the individual lists created, and these are not retained after iteration."
4906,common/collect,com.google.common.collect,Class Lists,@SafeVarargspublic static <B> List<List<B>> cartesianProduct(List<? extends B>... lists),"Returns every possible list that can be formed by choosing one element from each of the given lists in order; the n-ary Cartesian product of the lists. For example: Lists.cartesianProduct(ImmutableList.of( ImmutableList.of(1, 2), ImmutableList.of(A, B, C))) returns a list containing six lists in the following order: ImmutableList.of(1, A)ImmutableList.of(1, B)ImmutableList.of(1, C)ImmutableList.of(2, A)ImmutableList.of(2, B)ImmutableList.of(2, C)The result is guaranteed to be in the traditional, lexicographical order for Cartesian products that you would get from nesting for loops: for (B b0 : lists.get(0)) { for (B b1 : lists.get(1)) { ... ImmutableList<B> tuple = ImmutableList.of(b0, b1, ...); // operate on tuple } } Note that if any input list is empty, the Cartesian product will also be empty. If no lists at all are provided (an empty list), the resulting Cartesian product has one element, an empty list (counter-intuitive, but mathematically consistent). Performance notes: while the cartesian product of lists of size m, n, p is a list of size m x n x p, its actual memory consumption is much smaller. When the cartesian product is constructed, the input lists are merely copied. Only as the resulting list is iterated are the individual lists created, and these are not retained after iteration."
4907,common/collect,com.google.common.collect,Class Lists,"public static <F,T> List<T> transform(List<F> fromList, Function<? super F,? extends T> function)","Returns a list that applies function to each element of fromList. The returned list is a transformed view of fromList; changes to fromList will be reflected in the returned list and vice versa. Since functions are not reversible, the transform is one-way and new items cannot be stored in the returned list. The add, addAll and set methods are unsupported in the returned list. The function is applied lazily, invoked when needed. This is necessary for the returned list to be a view, but it means that the function will be applied many times for bulk operations like List.contains(java.lang.Object) and List.hashCode(). For this to perform well, function should be fast. To avoid lazy evaluation when the returned list doesn't need to be a view, copy the returned list into a new list of your choosing. If fromList implements RandomAccess, so will the returned list. The returned list is threadsafe if the supplied list and function are. If only a Collection or Iterable input is available, use Collections2.transform(java.util.Collection<F>, com.google.common.base.Function<? super F, T>) or Iterables.transform(java.lang.Iterable<F>, com.google.common.base.Function<? super F, ? extends T>). Note: serializing the returned list is implemented by serializing fromList, its contents, and function -- not by serializing the transformed values. This can lead to surprising behavior, so serializing the returned list is not recommended. Instead, copy the list using ImmutableList.copyOf(Collection) (for example), then serialize the copy. Other methods similar to this do not implement serialization at all for this reason. Java 8 users: many use cases for this method are better addressed by Stream.map(java.util.function.Function<? super T, ? extends R>). This method is not being deprecated, but we gently encourage you to migrate to streams."
4908,common/collect,com.google.common.collect,Class Lists,"public static <T> List<List<T>> partition(List<T> list, int size)","Returns consecutive sublists of a list, each of the same size (the final list may be smaller). For example, partitioning a list containing [a, b, c, d, e] with a partition size of 3 yields [[a, b, c], [d, e]] -- an outer list containing two inner lists of three and two elements, all in the original order. The outer list is unmodifiable, but reflects the latest state of the source list. The inner lists are sublist views of the original list, produced on demand using List.subList(int, int), and are subject to all the usual caveats about modification as explained in that API."
4909,common/collect,com.google.common.collect,Class Lists,public static ImmutableList<Character> charactersOf(String string),Returns a view of the specified string as an immutable list of Character values.
4910,common/collect,com.google.common.collect,Class Lists,@Betapublic static List<Character> charactersOf(CharSequence sequence),"Returns a view of the specified CharSequence as a List<Character>, viewing sequence as a sequence of Unicode code units. The view does not support any modification operations, but reflects any changes to the underlying character sequence."
4911,common/io,com.google.common.io,Class LittleEndianDataInputStream,@CanIgnoreReturnValuepublic String readLine(),This method will throw an UnsupportedOperationException.
4912,common/io,com.google.common.io,Class LittleEndianDataInputStream,public void readFully(byte[] b) throws IOException,Description copied from interface: java.io.DataInput
4913,common/io,com.google.common.io,Class LittleEndianDataInputStream,"public void readFully(byte[] b, int off, int len) throws IOException",Description copied from interface: java.io.DataInput
4914,common/io,com.google.common.io,Class LittleEndianDataInputStream,public int skipBytes(int n) throws IOException,Description copied from interface: java.io.DataInput
4915,common/io,com.google.common.io,Class LittleEndianDataInputStream,@CanIgnoreReturnValuepublic int readUnsignedByte() throws IOException,Description copied from interface: java.io.DataInput
4916,common/io,com.google.common.io,Class LittleEndianDataInputStream,@CanIgnoreReturnValuepublic int readUnsignedShort() throws IOException,"Reads an unsigned short as specified by DataInputStream.readUnsignedShort(), except using little-endian byte order."
4917,common/io,com.google.common.io,Class LittleEndianDataInputStream,@CanIgnoreReturnValuepublic int readInt() throws IOException,"Reads an integer as specified by DataInputStream.readInt(), except using little-endian byte order."
4918,common/io,com.google.common.io,Class LittleEndianDataInputStream,@CanIgnoreReturnValuepublic long readLong() throws IOException,"Reads a long as specified by DataInputStream.readLong(), except using little-endian byte order."
4919,common/io,com.google.common.io,Class LittleEndianDataInputStream,@CanIgnoreReturnValuepublic float readFloat() throws IOException,"Reads a float as specified by DataInputStream.readFloat(), except using little-endian byte order."
4920,common/io,com.google.common.io,Class LittleEndianDataInputStream,@CanIgnoreReturnValuepublic double readDouble() throws IOException,"Reads a double as specified by DataInputStream.readDouble(), except using little-endian byte order."
4921,common/io,com.google.common.io,Class LittleEndianDataInputStream,@CanIgnoreReturnValuepublic String readUTF() throws IOException,Description copied from interface: java.io.DataInput
4922,common/io,com.google.common.io,Class LittleEndianDataInputStream,@CanIgnoreReturnValuepublic short readShort() throws IOException,"Reads a short as specified by DataInputStream.readShort(), except using little-endian byte order."
4923,common/io,com.google.common.io,Class LittleEndianDataInputStream,@CanIgnoreReturnValuepublic char readChar() throws IOException,"Reads a char as specified by DataInputStream.readChar(), except using little-endian byte order."
4924,common/io,com.google.common.io,Class LittleEndianDataInputStream,@CanIgnoreReturnValuepublic byte readByte() throws IOException,Description copied from interface: java.io.DataInput
4925,common/io,com.google.common.io,Class LittleEndianDataOutputStream,"public void write(byte[] b, int off, int len) throws IOException",Description copied from class: java.io.FilterOutputStream
4926,common/io,com.google.common.io,Class LittleEndianDataOutputStream,public void writeBoolean(boolean v) throws IOException,Description copied from interface: java.io.DataOutput
4927,common/io,com.google.common.io,Class LittleEndianDataOutputStream,public void writeByte(int v) throws IOException,Description copied from interface: java.io.DataOutput
4928,common/io,com.google.common.io,Class LittleEndianDataOutputStream,@Deprecatedpublic void writeBytes(String s) throws IOException,"Deprecated. The semantics of writeBytes(String s) are considered dangerous. Please use writeUTF(String s), writeChars(String s) or another write method instead."
4929,common/io,com.google.common.io,Class LittleEndianDataOutputStream,public void writeChar(int v) throws IOException,"Writes a char as specified by DataOutputStream.writeChar(int), except using little-endian byte order."
4930,common/io,com.google.common.io,Class LittleEndianDataOutputStream,public void writeChars(String s) throws IOException,"Writes a String as specified by DataOutputStream.writeChars(String), except each character is written using little-endian byte order."
4931,common/io,com.google.common.io,Class LittleEndianDataOutputStream,public void writeDouble(double v) throws IOException,"Writes a double as specified by DataOutputStream.writeDouble(double), except using little-endian byte order."
4932,common/io,com.google.common.io,Class LittleEndianDataOutputStream,public void writeFloat(float v) throws IOException,"Writes a float as specified by DataOutputStream.writeFloat(float), except using little-endian byte order."
4933,common/io,com.google.common.io,Class LittleEndianDataOutputStream,public void writeInt(int v) throws IOException,"Writes an int as specified by DataOutputStream.writeInt(int), except using little-endian byte order."
4934,common/io,com.google.common.io,Class LittleEndianDataOutputStream,public void writeLong(long v) throws IOException,"Writes a long as specified by DataOutputStream.writeLong(long), except using little-endian byte order."
4935,common/io,com.google.common.io,Class LittleEndianDataOutputStream,public void writeShort(int v) throws IOException,"Writes a short as specified by DataOutputStream.writeShort(int), except using little-endian byte order."
4936,common/io,com.google.common.io,Class LittleEndianDataOutputStream,public void writeUTF(String str) throws IOException,Description copied from interface: java.io.DataOutput
4937,common/cache,com.google.common.cache,"Interface LoadingCache<K,V>",V get(K key)throws ExecutionException,"Returns the value associated with key in this cache, first loading that value if necessary. No observable state associated with this cache is modified until loading completes. If another call to get(K) or getUnchecked(K) is currently loading the value for key, simply waits for that thread to finish and returns its loaded value. Note that multiple threads can concurrently load values for distinct keys. Caches loaded by a CacheLoader will call CacheLoader.load(K) to load new values into the cache. Newly loaded values are added to the cache using Cache.asMap().putIfAbsent after loading has completed; if another value was associated with key while the new value was loading then a removal notification will be sent for the new value. If the cache loader associated with this cache is known not to throw checked exceptions, then prefer getUnchecked(K) over this method."
4938,common/cache,com.google.common.cache,"Interface LoadingCache<K,V>",V getUnchecked(K key),"Returns the value associated with key in this cache, first loading that value if necessary. No observable state associated with this cache is modified until loading completes. Unlike get(K), this method does not throw a checked exception, and thus should only be used in situations where checked exceptions are not thrown by the cache loader. If another call to get(K) or getUnchecked(K) is currently loading the value for key, simply waits for that thread to finish and returns its loaded value. Note that multiple threads can concurrently load values for distinct keys. Caches loaded by a CacheLoader will call CacheLoader.load(K) to load new values into the cache. Newly loaded values are added to the cache using Cache.asMap().putIfAbsent after loading has completed; if another value was associated with key while the new value was loading then a removal notification will be sent for the new value. Warning: this method silently converts checked exceptions to unchecked exceptions, and should not be used with cache loaders which throw checked exceptions. In such cases use get(K) instead."
4939,common/cache,com.google.common.cache,"Interface LoadingCache<K,V>","ImmutableMap<K,V> getAll(Iterable<? extends K> keys) throws ExecutionException","Returns a map of the values associated with keys, creating or retrieving those values if necessary. The returned map contains entries that were already cached, combined with newly loaded entries; it will never contain null keys or values. Caches loaded by a CacheLoader will issue a single request to CacheLoader.loadAll(java.lang.Iterable<? extends K>) for all keys which are not already present in the cache. All entries returned by CacheLoader.loadAll(java.lang.Iterable<? extends K>) will be stored in the cache, over-writing any previously cached values. This method will throw an exception if CacheLoader.loadAll(java.lang.Iterable<? extends K>) returns null, returns a map containing null keys or values, or fails to return an entry for each requested key. Note that duplicate elements in keys, as determined by Object.equals(java.lang.Object), will be ignored."
4940,common/cache,com.google.common.cache,"Interface LoadingCache<K,V>",@DeprecatedV apply(K key),Deprecated. Provided to satisfy the Function interface; use get(K) or getUnchecked(K) instead.
4941,common/cache,com.google.common.cache,"Interface LoadingCache<K,V>",void refresh(K key),"Loads a new value for key, possibly asynchronously. While the new value is loading the previous value (if any) will continue to be returned by get(key) unless it is evicted. If the new value is loaded successfully it will replace the previous value in the cache; if an exception is thrown while refreshing the previous value will remain, and the exception will be logged (using Logger) and swallowed. Caches loaded by a CacheLoader will call CacheLoader.reload(K, V) if the cache currently contains a value for key, and CacheLoader.load(K) otherwise. Loading is asynchronous only if CacheLoader.reload(K, V) was overridden with an asynchronous implementation. Returns without doing anything if another thread is currently loading the value for key. If the cache loader associated with this cache performs refresh asynchronously then this method may return before refresh completes."
4942,common/math,com.google.common.math,Class LongMath,@Betapublic static long ceilingPowerOfTwo(long x),"Returns the smallest power of two greater than or equal to x. This is equivalent to checkedPow(2, log2(x, CEILING))."
4943,common/math,com.google.common.math,Class LongMath,@Betapublic static long floorPowerOfTwo(long x),"Returns the largest power of two less than or equal to x. This is equivalent to checkedPow(2, log2(x, FLOOR))."
4944,common/math,com.google.common.math,Class LongMath,public static boolean isPowerOfTwo(long x),"Returns true if x represents a power of two. This differs from Long.bitCount(x) == 1, because Long.bitCount(Long.MIN_VALUE) == 1, but Long.MIN_VALUE is not a power of two."
4945,common/math,com.google.common.math,Class LongMath,"public static int log2(long x, RoundingMode mode)","Returns the base-2 logarithm of x, rounded according to the specified rounding mode."
4946,common/math,com.google.common.math,Class LongMath,"@GwtIncompatiblepublic static int log10(long x, RoundingMode mode)","Returns the base-10 logarithm of x, rounded according to the specified rounding mode."
4947,common/math,com.google.common.math,Class LongMath,"@GwtIncompatiblepublic static long pow(long b, int k)","Returns b to the kth power. Even if the result overflows, it will be equal to BigInteger.valueOf(b).pow(k).longValue(). This implementation runs in O(log k) time."
4948,common/math,com.google.common.math,Class LongMath,"@GwtIncompatiblepublic static long sqrt(long x, RoundingMode mode)","Returns the square root of x, rounded with the specified rounding mode."
4949,common/math,com.google.common.math,Class LongMath,"@GwtIncompatiblepublic static long divide(long p, long q, RoundingMode mode)","Returns the result of dividing p by q, rounding using the specified RoundingMode."
4950,common/math,com.google.common.math,Class LongMath,"@GwtIncompatiblepublic static int mod(long x, int m)","Returns x mod m, a non-negative value less than m. This differs from x % m, which might be negative. For example: mod(7, 4) == 3 mod(-7, 4) == 1 mod(-1, 4) == 3 mod(-8, 4) == 0 mod(8, 4) == 0 "
4951,common/math,com.google.common.math,Class LongMath,"@GwtIncompatiblepublic static long mod(long x, long m)","Returns x mod m, a non-negative value less than m. This differs from x % m, which might be negative. For example: mod(7, 4) == 3 mod(-7, 4) == 1 mod(-1, 4) == 3 mod(-8, 4) == 0 mod(8, 4) == 0 "
4952,common/math,com.google.common.math,Class LongMath,"public static long gcd(long a, long b)","Returns the greatest common divisor of a, b. Returns 0 if a == 0 && b == 0."
4953,common/math,com.google.common.math,Class LongMath,"@GwtIncompatiblepublic static long checkedAdd(long a, long b)","Returns the sum of a and b, provided it does not overflow."
4954,common/math,com.google.common.math,Class LongMath,"@GwtIncompatiblepublic static long checkedSubtract(long a, long b)","Returns the difference of a and b, provided it does not overflow."
4955,common/math,com.google.common.math,Class LongMath,"public static long checkedMultiply(long a, long b)","Returns the product of a and b, provided it does not overflow."
4956,common/math,com.google.common.math,Class LongMath,"@GwtIncompatiblepublic static long checkedPow(long b, int k)","Returns the b to the kth power, provided it does not overflow."
4957,common/math,com.google.common.math,Class LongMath,"@Betapublic static long saturatedAdd(long a, long b)","Returns the sum of a and b unless it would overflow or underflow in which case Long.MAX_VALUE or Long.MIN_VALUE is returned, respectively."
4958,common/math,com.google.common.math,Class LongMath,"@Betapublic static long saturatedSubtract(long a, long b)","Returns the difference of a and b unless it would overflow or underflow in which case Long.MAX_VALUE or Long.MIN_VALUE is returned, respectively."
4959,common/math,com.google.common.math,Class LongMath,"@Betapublic static long saturatedMultiply(long a, long b)","Returns the product of a and b unless it would overflow or underflow in which case Long.MAX_VALUE or Long.MIN_VALUE is returned, respectively."
4960,common/math,com.google.common.math,Class LongMath,"@Betapublic static long saturatedPow(long b, int k)","Returns the b to the kth power, unless it would overflow or underflow in which case Long.MAX_VALUE or Long.MIN_VALUE is returned, respectively."
4961,common/math,com.google.common.math,Class LongMath,@GwtIncompatiblepublic static long factorial(int n),"Returns n!, that is, the product of the first n positive integers, 1 if n == 0, or Long.MAX_VALUE if the result does not fit in a long."
4962,common/math,com.google.common.math,Class LongMath,"public static long binomial(int n, int k)","Returns n choose k, also known as the binomial coefficient of n and k, or Long.MAX_VALUE if the result does not fit in a long."
4963,common/math,com.google.common.math,Class LongMath,"public static long mean(long x, long y)","Returns the arithmetic mean of x and y, rounded toward negative infinity. This method is resilient to overflow."
4964,common/math,com.google.common.math,Class LongMath,@GwtIncompatible @Betapublic static boolean isPrime(long n),"Returns true if n is a prime number: an integer greater than one that cannot be factored into a product of smaller positive integers. Returns false if n is zero, one, or a composite number (one which can be factored into smaller positive integers). To test larger numbers, use BigInteger.isProbablePrime(int)."
4965,common/primitives,com.google.common.primitives,Class Longs,public static final int BYTES,The number of bytes required to represent a primitive long value. Java 8 users: use Long.BYTES instead.
4966,common/primitives,com.google.common.primitives,Class Longs,public static int hashCode(long value),"Returns a hash code for value; equal to the result of invoking ((Long) value).hashCode(). This method always return the value specified by Long.hashCode() in java, which might be different from ((Long) value).hashCode() in GWT because Long.hashCode() in GWT does not obey the JRE contract. Java 8 users: use Long.hashCode(long) instead."
4967,common/primitives,com.google.common.primitives,Class Longs,"public static int compare(long a, long b)","Compares the two specified long values. The sign of the value returned is the same as that of ((Long) a).compareTo(b). Note for Java 7 and later: this method should be treated as deprecated; use the equivalent Long.compare(long, long) method instead."
4968,common/primitives,com.google.common.primitives,Class Longs,"public static boolean contains(long[] array, long target)",Returns true if target is present as an element anywhere in array.
4969,common/primitives,com.google.common.primitives,Class Longs,"public static int indexOf(long[] array, long target)",Returns the index of the first appearance of the value target in array.
4970,common/primitives,com.google.common.primitives,Class Longs,"public static int indexOf(long[] array, long[] target)","Returns the start position of the first occurrence of the specified target within array, or -1 if there is no such occurrence. More formally, returns the lowest index i such that Arrays.copyOfRange(array, i, i + target.length) contains exactly the same elements as target."
4971,common/primitives,com.google.common.primitives,Class Longs,"public static int lastIndexOf(long[] array, long target)",Returns the index of the last appearance of the value target in array.
4972,common/primitives,com.google.common.primitives,Class Longs,public static long min(long... array),Returns the least value present in array.
4973,common/primitives,com.google.common.primitives,Class Longs,public static long max(long... array),Returns the greatest value present in array.
4974,common/primitives,com.google.common.primitives,Class Longs,"@Betapublic static long constrainToRange(long value, long min, long max)","Returns the value nearest to value which is within the closed range [min..max]. If value is within the range [min..max], value is returned unchanged. If value is less than min, min is returned, and if value is greater than max, max is returned."
4975,common/primitives,com.google.common.primitives,Class Longs,public static long[] concat(long[]... arrays),"Returns the values from each provided array combined into a single array. For example, concat(new long[] {a, b}, new long[] {}, new long[] {c} returns the array {a, b, c}."
4976,common/primitives,com.google.common.primitives,Class Longs,public static byte[] toByteArray(long value),"Returns a big-endian representation of value in an 8-element byte array; equivalent to ByteBuffer.allocate(8).putLong(value).array(). For example, the input value 0x1213141516171819L would yield the byte array {0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19}. If you need to convert and concatenate several values (possibly even of different types), use a shared ByteBuffer instance, or use ByteStreams.newDataOutput() to get a growable buffer."
4977,common/primitives,com.google.common.primitives,Class Longs,public static long fromByteArray(byte[] bytes),"Returns the long value whose big-endian representation is stored in the first 8 bytes of bytes; equivalent to ByteBuffer.wrap(bytes).getLong(). For example, the input byte array {0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19} would yield the long value 0x1213141516171819L. Arguably, it's preferable to use ByteBuffer; that library exposes much more flexibility at little cost in readability."
4978,common/primitives,com.google.common.primitives,Class Longs,"public static long fromBytes(byte b1, byte b2, byte b3, byte b4, byte b5, byte b6, byte b7, byte b8)","Returns the long value whose byte representation is the given 8 bytes, in big-endian order; equivalent to Longs.fromByteArray(new byte[] {b1, b2, b3, b4, b5, b6, b7, b8})."
4979,common/primitives,com.google.common.primitives,Class Longs,@Betapublic static @Nullable Long tryParse(String string),"Parses the specified string as a signed decimal long value. The ASCII character '-' ( '\u002D') is recognized as the minus sign. Unlike Long.parseLong(String), this method returns null instead of throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns null if non-ASCII digits are present in the string. Note that strings prefixed with ASCII '+' are rejected, even under JDK 7, despite the change to Long.parseLong(String) for that version."
4980,common/primitives,com.google.common.primitives,Class Longs,"@Betapublic static @Nullable Long tryParse(String string, int radix)","Parses the specified string as a signed long value using the specified radix. The ASCII character '-' ('\u002D') is recognized as the minus sign. Unlike Long.parseLong(String, int), this method returns null instead of throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns null if non-ASCII digits are present in the string. Note that strings prefixed with ASCII '+' are rejected, even under JDK 7, despite the change to Long.parseLong(String, int) for that version."
4981,common/primitives,com.google.common.primitives,Class Longs,"@Betapublic static Converter<String,Long> stringConverter()","Returns a serializable converter object that converts between strings and longs using Long.decode(java.lang.String) and Long.toString(). The returned converter throws NumberFormatException if the input string is invalid. Warning: please see Long.decode(java.lang.String) to understand exactly how strings are parsed. For example, the string 0123 is treated as octal and converted to the value 83L."
4982,common/primitives,com.google.common.primitives,Class Longs,"public static long[] ensureCapacity(long[] array, int minLength, int padding)","Returns an array containing the same values as array, but guaranteed to be of a specified minimum length. If array already has a length of at least minLength, it is returned directly. Otherwise, a new array of size minLength + padding is returned, containing the values of array, and zeroes in the remaining places."
4983,common/primitives,com.google.common.primitives,Class Longs,"public static String join(String separator, long... array)","Returns a string containing the supplied long values separated by separator. For example, join(-, 1L, 2L, 3L) returns the string 1-2-3."
4984,common/primitives,com.google.common.primitives,Class Longs,public static Comparator<long[]> lexicographicalComparator(),"Returns a comparator that compares two long arrays lexicographically. That is, it compares, using compare(long, long)), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example, [] < [1L] < [1L, 2L] < [2L]. The returned comparator is inconsistent with Object.equals(Object) (since arrays support only identity equality), but it is consistent with Arrays.equals(long[], long[])."
4985,common/primitives,com.google.common.primitives,Class Longs,public static void sortDescending(long[] array),Sorts the elements of array in descending order.
4986,common/primitives,com.google.common.primitives,Class Longs,"public static void sortDescending(long[] array, int fromIndex, int toIndex)",Sorts the elements of array between fromIndex inclusive and toIndex exclusive in descending order.
4987,common/primitives,com.google.common.primitives,Class Longs,public static void reverse(long[] array),"Reverses the elements of array. This is equivalent to Collections.reverse(Longs.asList(array)), but is likely to be more efficient."
4988,common/primitives,com.google.common.primitives,Class Longs,"public static void reverse(long[] array, int fromIndex, int toIndex)","Reverses the elements of array between fromIndex inclusive and toIndex exclusive. This is equivalent to Collections.reverse(Longs.asList(array).subList(fromIndex, toIndex)), but is likely to be more efficient."
4989,common/primitives,com.google.common.primitives,Class Longs,public static long[] toArray(Collection<? extends Number> collection),"Returns an array containing each value of collection, converted to a long value in the manner of Number.longValue(). Elements are copied from the argument collection as if by collection.toArray(). Calling this method is as thread-safe as calling that method."
4990,common/collect,com.google.common.collect,"Interface MapDifference<K,V>",boolean areEqual(),"Returns true if there are no differences between the two maps; that is, if the maps are equal."
4991,common/collect,com.google.common.collect,"Interface MapDifference<K,V>","Map<K,V> entriesOnlyOnLeft()",Returns an unmodifiable map containing the entries from the left map whose keys are not present in the right map.
4992,common/collect,com.google.common.collect,"Interface MapDifference<K,V>","Map<K,V> entriesOnlyOnRight()",Returns an unmodifiable map containing the entries from the right map whose keys are not present in the left map.
4993,common/collect,com.google.common.collect,"Interface MapDifference<K,V>","Map<K,V> entriesInCommon()","Returns an unmodifiable map containing the entries that appear in both maps; that is, the intersection of the two maps."
4994,common/collect,com.google.common.collect,"Interface MapDifference<K,V>","Map<K,MapDifference.ValueDifference<V>> entriesDiffering()","Returns an unmodifiable map describing keys that appear in both maps, but with different values."
4995,common/collect,com.google.common.collect,"Interface MapDifference<K,V>",boolean equals(@Nullable Object object),"Compares the specified object with this instance for equality. Returns true if the given object is also a MapDifference and the values returned by the entriesOnlyOnLeft(), entriesOnlyOnRight(), entriesInCommon() and entriesDiffering() of the two instances are equal."
4996,common/collect,com.google.common.collect,Interface MapDifference.ValueDifference<V>,V leftValue(),Returns the value from the left map (possibly null).
4997,common/collect,com.google.common.collect,Interface MapDifference.ValueDifference<V>,V rightValue(),Returns the value from the right map (possibly null).
4998,common/collect,com.google.common.collect,Interface MapDifference.ValueDifference<V>,boolean equals(@Nullable Object other),Two instances are considered equal if their leftValue() values are equal and their rightValue() values are also equal.
4999,common/collect,com.google.common.collect,Class MapMaker,@CanIgnoreReturnValuepublic MapMaker initialCapacity(int initialCapacity),"Sets the minimum total size for the internal hash tables. For example, if the initial capacity is 60, and the concurrency level is 8, then eight segments are created, each having a hash table of size eight. Providing a large enough estimate at construction time avoids the need for expensive resizing operations later, but setting this value unnecessarily high wastes memory."
5000,common/collect,com.google.common.collect,Class MapMaker,@CanIgnoreReturnValuepublic MapMaker concurrencyLevel(int concurrencyLevel),"Guides the allowed concurrency among update operations. Used as a hint for internal sizing. The table is internally partitioned to try to permit the indicated number of concurrent updates without contention. Because assignment of entries to these partitions is not necessarily uniform, the actual concurrency observed may vary. Ideally, you should choose a value to accommodate as many threads as will ever concurrently modify the table. Using a significantly higher value than you need can waste space and time, and a significantly lower value can lead to thread contention. But overestimates and underestimates within an order of magnitude do not usually have much noticeable impact. A value of one permits only one thread to modify the map at a time, but since read operations can proceed concurrently, this still yields higher concurrency than full synchronization. Defaults to 4. Note: Prior to Guava release 9.0, the default was 16. It is possible the default will change again in the future. If you care about this value, you should always choose it explicitly."
5001,common/collect,com.google.common.collect,Class MapMaker,@CanIgnoreReturnValue @GwtIncompatiblepublic MapMaker weakKeys(),"Specifies that each key (not value) stored in the map should be wrapped in a WeakReference (by default, strong references are used). Warning: when this method is used, the resulting map will use identity (==) comparison to determine equality of keys, which is a technical violation of the Map specification, and may not be what you expect."
5002,common/collect,com.google.common.collect,Class MapMaker,@CanIgnoreReturnValue @GwtIncompatiblepublic MapMaker weakValues(),"Specifies that each value (not key) stored in the map should be wrapped in a WeakReference (by default, strong references are used). Weak values will be garbage collected once they are weakly reachable. This makes them a poor candidate for caching. Warning: when this method is used, the resulting map will use identity (==) comparison to determine equality of values. This technically violates the specifications of the methods containsValue, remove(Object, Object) and replace(K, V, V), and may not be what you expect."
5003,common/collect,com.google.common.collect,Class MapMaker,"public <K,V> ConcurrentMap<K,V> makeMap()","Builds a thread-safe map. This method does not alter the state of this MapMaker instance, so it can be invoked again to create multiple independent maps. The bulk operations putAll, equals, and clear are not guaranteed to be performed atomically on the returned map. Additionally, size and containsValue are implemented as bulk read operations, and thus may fail to observe concurrent writes."
5004,common/collect,com.google.common.collect,Class Maps,"@GwtCompatible(serializable=true)public static <K extends Enum<K>,V> ImmutableMap<K,V> immutableEnumMap(Map<K,? extends V> map)","Returns an immutable map instance containing the given entries. Internally, the returned map will be backed by an EnumMap. The iteration order of the returned map follows the enum's iteration order, not the order in which the elements appear in the given map."
5005,common/collect,com.google.common.collect,Class Maps,"public static <T,K extends Enum<K>,V> Collector<T,?,ImmutableMap<K,V>> toImmutableEnumMap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction)","Returns a Collector that accumulates elements into an ImmutableMap whose keys and values are the result of applying the provided mapping functions to the input elements. The resulting implementation is specialized for enum key types. The returned map and its views will iterate over keys in their enum definition order, not encounter order. If the mapped keys contain duplicates, an IllegalArgumentException is thrown when the collection operation is performed. (This differs from the Collector returned by Collectors.toMap(Function, Function), which throws an IllegalStateException.)"
5006,common/collect,com.google.common.collect,Class Maps,"public static <T,K extends Enum<K>,V> Collector<T,?,ImmutableMap<K,V>> toImmutableEnumMap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction, BinaryOperator<V> mergeFunction)","Returns a Collector that accumulates elements into an ImmutableMap whose keys and values are the result of applying the provided mapping functions to the input elements. The resulting implementation is specialized for enum key types. The returned map and its views will iterate over keys in their enum definition order, not encounter order. If the mapped keys contain duplicates, the values are merged using the specified merging function."
5007,common/collect,com.google.common.collect,Class Maps,"public static <K,V> HashMap<K,V> newHashMap()","Creates a mutable, empty HashMap instance. Note: if mutability is not required, use ImmutableMap.of() instead. Note: if K is an enum type, use newEnumMap(java.lang.Class<K>) instead. Note for Java 7 and later: this method is now unnecessary and should be treated as deprecated. Instead, use the HashMap constructor directly, taking advantage of the new diamond syntax."
5008,common/collect,com.google.common.collect,Class Maps,"public static <K,V> HashMap<K,V> newHashMap(Map<? extends K,? extends V> map)","Creates a mutable HashMap instance with the same mappings as the specified map. Note: if mutability is not required, use ImmutableMap.copyOf(Map) instead. Note: if K is an Enum type, use newEnumMap(java.lang.Class<K>) instead. Note for Java 7 and later: this method is now unnecessary and should be treated as deprecated. Instead, use the HashMap constructor directly, taking advantage of the new diamond syntax."
5009,common/collect,com.google.common.collect,Class Maps,"public static <K,V> HashMap<K,V> newHashMapWithExpectedSize(int expectedSize)","Creates a HashMap instance, with a high enough initial capacity that it should hold expectedSize elements without growth. This behavior cannot be broadly guaranteed, but it is observed to be true for OpenJDK 1.7. It also can't be guaranteed that the method isn't inadvertently oversizing the returned map."
5010,common/collect,com.google.common.collect,Class Maps,"public static <K,V> LinkedHashMap<K,V> newLinkedHashMap()","Creates a mutable, empty, insertion-ordered LinkedHashMap instance. Note: if mutability is not required, use ImmutableMap.of() instead. Note for Java 7 and later: this method is now unnecessary and should be treated as deprecated. Instead, use the LinkedHashMap constructor directly, taking advantage of the new diamond syntax."
5011,common/collect,com.google.common.collect,Class Maps,"public static <K,V> LinkedHashMap<K,V> newLinkedHashMap(Map<? extends K,? extends V> map)","Creates a mutable, insertion-ordered LinkedHashMap instance with the same mappings as the specified map. Note: if mutability is not required, use ImmutableMap.copyOf(Map) instead. Note for Java 7 and later: this method is now unnecessary and should be treated as deprecated. Instead, use the LinkedHashMap constructor directly, taking advantage of the new diamond syntax."
5012,common/collect,com.google.common.collect,Class Maps,"public static <K,V> LinkedHashMap<K,V> newLinkedHashMapWithExpectedSize(int expectedSize)","Creates a LinkedHashMap instance, with a high enough initial capacity that it should hold expectedSize elements without growth. This behavior cannot be broadly guaranteed, but it is observed to be true for OpenJDK 1.7. It also can't be guaranteed that the method isn't inadvertently oversizing the returned map."
5013,common/collect,com.google.common.collect,Class Maps,"public static <K,V> ConcurrentMap<K,V> newConcurrentMap()",Creates a new empty ConcurrentHashMap instance.
5014,common/collect,com.google.common.collect,Class Maps,"public static <K extends Comparable,V> TreeMap<K,V> newTreeMap()","Creates a mutable, empty TreeMap instance using the natural ordering of its elements. Note: if mutability is not required, use ImmutableSortedMap.of() instead. Note for Java 7 and later: this method is now unnecessary and should be treated as deprecated. Instead, use the TreeMap constructor directly, taking advantage of the new diamond syntax."
5015,common/collect,com.google.common.collect,Class Maps,"public static <K,V> TreeMap<K,V> newTreeMap(SortedMap<K,? extends V> map)","Creates a mutable TreeMap instance with the same mappings as the specified map and using the same ordering as the specified map. Note: if mutability is not required, use ImmutableSortedMap.copyOfSorted(SortedMap) instead. Note for Java 7 and later: this method is now unnecessary and should be treated as deprecated. Instead, use the TreeMap constructor directly, taking advantage of the new diamond syntax."
5016,common/collect,com.google.common.collect,Class Maps,"public static <C,K extends C,V> TreeMap<K,V> newTreeMap(@Nullable Comparator<C> comparator)","Creates a mutable, empty TreeMap instance using the given comparator. Note: if mutability is not required, use ImmutableSortedMap.orderedBy(comparator).build() instead. Note for Java 7 and later: this method is now unnecessary and should be treated as deprecated. Instead, use the TreeMap constructor directly, taking advantage of the new diamond syntax."
5017,common/collect,com.google.common.collect,Class Maps,"public static <K extends Enum<K>,V> EnumMap<K,V> newEnumMap(Class<K> type)",Creates an EnumMap instance.
5018,common/collect,com.google.common.collect,Class Maps,"public static <K extends Enum<K>,V> EnumMap<K,V> newEnumMap(Map<K,? extends V> map)","Creates an EnumMap with the same mappings as the specified map. Note for Java 7 and later: this method is now unnecessary and should be treated as deprecated. Instead, use the EnumMap constructor directly, taking advantage of the new diamond syntax."
5019,common/collect,com.google.common.collect,Class Maps,"public static <K,V> IdentityHashMap<K,V> newIdentityHashMap()","Creates an IdentityHashMap instance. Note for Java 7 and later: this method is now unnecessary and should be treated as deprecated. Instead, use the IdentityHashMap constructor directly, taking advantage of the new diamond syntax."
5020,common/collect,com.google.common.collect,Class Maps,"public static <K,V> MapDifference<K,V> difference(Map<? extends K,? extends V> left, Map<? extends K,? extends V> right)","Computes the difference between two maps. This difference is an immutable snapshot of the state of the maps at the time this method is called. It will never change, even if the maps change at a later time. Since this method uses HashMap instances internally, the keys of the supplied maps must be well-behaved with respect to Object.equals(java.lang.Object) and Object.hashCode(). Note:If you only need to know whether two maps have the same mappings, call left.equals(right) instead of this method."
5021,common/collect,com.google.common.collect,Class Maps,"public static <K,V> MapDifference<K,V> difference(Map<? extends K,? extends V> left, Map<? extends K,? extends V> right, Equivalence<? super V> valueEquivalence)","Computes the difference between two maps. This difference is an immutable snapshot of the state of the maps at the time this method is called. It will never change, even if the maps change at a later time. Since this method uses HashMap instances internally, the keys of the supplied maps must be well-behaved with respect to Object.equals(java.lang.Object) and Object.hashCode()."
5022,common/collect,com.google.common.collect,Class Maps,"public static <K,V> SortedMapDifference<K,V> difference(SortedMap<K,? extends V> left, Map<? extends K,? extends V> right)","Computes the difference between two sorted maps, using the comparator of the left map, or Ordering.natural() if the left map uses the natural ordering of its elements. This difference is an immutable snapshot of the state of the maps at the time this method is called. It will never change, even if the maps change at a later time. Since this method uses TreeMap instances internally, the keys of the right map must all compare as distinct according to the comparator of the left map. Note:If you only need to know whether two sorted maps have the same mappings, call left.equals(right) instead of this method."
5023,common/collect,com.google.common.collect,Class Maps,"public static <K,V> Map<K,V> asMap(Set<K> set, Function<? super K,V> function)","Returns a live Map view whose keys are the contents of set and whose values are computed on demand using function. To get an immutable copy instead, use toMap(Iterable, Function). Specifically, for each k in the backing set, the returned map has an entry mapping k to function.apply(k). The keySet, values, and entrySet views of the returned map iterate in the same order as the backing set. Modifications to the backing set are read through to the returned map. The returned map supports removal operations if the backing set does. Removal operations write through to the backing set. The returned map does not support put operations. Warning: If the function rejects null, caution is required to make sure the set does not contain null, because the view cannot stop null from being added to the set. Warning: This method assumes that for any instance k of key type K, k.equals(k2) implies that k2 is also of type K. Using a key type for which this may not hold, such as ArrayList, may risk a ClassCastException when calling methods on the resulting map view."
5024,common/collect,com.google.common.collect,Class Maps,"public static <K,V> SortedMap<K,V> asMap(SortedSet<K> set, Function<? super K,V> function)","Returns a view of the sorted set as a map, mapping keys from the set according to the specified function. Specifically, for each k in the backing set, the returned map has an entry mapping k to function.apply(k). The keySet, values, and entrySet views of the returned map iterate in the same order as the backing set. Modifications to the backing set are read through to the returned map. The returned map supports removal operations if the backing set does. Removal operations write through to the backing set. The returned map does not support put operations. Warning: If the function rejects null, caution is required to make sure the set does not contain null, because the view cannot stop null from being added to the set. Warning: This method assumes that for any instance k of key type K, k.equals(k2) implies that k2 is also of type K. Using a key type for which this may not hold, such as ArrayList, may risk a ClassCastException when calling methods on the resulting map view."
5025,common/collect,com.google.common.collect,Class Maps,"@GwtIncompatiblepublic static <K,V> NavigableMap<K,V> asMap(NavigableSet<K> set, Function<? super K,V> function)","Returns a view of the navigable set as a map, mapping keys from the set according to the specified function. Specifically, for each k in the backing set, the returned map has an entry mapping k to function.apply(k). The keySet, values, and entrySet views of the returned map iterate in the same order as the backing set. Modifications to the backing set are read through to the returned map. The returned map supports removal operations if the backing set does. Removal operations write through to the backing set. The returned map does not support put operations. Warning: If the function rejects null, caution is required to make sure the set does not contain null, because the view cannot stop null from being added to the set. Warning: This method assumes that for any instance k of key type K, k.equals(k2) implies that k2 is also of type K. Using a key type for which this may not hold, such as ArrayList, may risk a ClassCastException when calling methods on the resulting map view."
5026,common/collect,com.google.common.collect,Class Maps,"public static <K,V> ImmutableMap<K,V> toMap(Iterable<K> keys, Function<? super K,V> valueFunction)","Returns an immutable map whose keys are the distinct elements of keys and whose value for each key was computed by valueFunction. The map's iteration order is the order of the first appearance of each key in keys. When there are multiple instances of a key in keys, it is unspecified whether valueFunction will be applied to more than one instance of that key and, if it is, which result will be mapped to that key in the returned map. If keys is a Set, a live view can be obtained instead of a copy using asMap(Set, Function)."
5027,common/collect,com.google.common.collect,Class Maps,"public static <K,V> ImmutableMap<K,V> toMap(Iterator<K> keys, Function<? super K,V> valueFunction)","Returns an immutable map whose keys are the distinct elements of keys and whose value for each key was computed by valueFunction. The map's iteration order is the order of the first appearance of each key in keys. When there are multiple instances of a key in keys, it is unspecified whether valueFunction will be applied to more than one instance of that key and, if it is, which result will be mapped to that key in the returned map."
5028,common/collect,com.google.common.collect,Class Maps,"@CanIgnoreReturnValuepublic static <K,V> ImmutableMap<K,V> uniqueIndex(Iterable<V> values, Function<? super V,K> keyFunction)","Returns a map with the given values, indexed by keys derived from those values. In other words, each input value produces an entry in the map whose key is the result of applying keyFunction to that value. These entries appear in the same order as the input values. Example usage: Color red = new Color(red, 255, 0, 0); ... ImmutableSet<Color> allColors = ImmutableSet.of(red, green, blue); Map<String, Color> colorForName = uniqueIndex(allColors, toStringFunction()); assertThat(colorForName).containsEntry(red, red); If your index may associate multiple values with each key, use Multimaps.index."
5029,common/collect,com.google.common.collect,Class Maps,"@CanIgnoreReturnValuepublic static <K,V> ImmutableMap<K,V> uniqueIndex(Iterator<V> values, Function<? super V,K> keyFunction)","Returns a map with the given values, indexed by keys derived from those values. In other words, each input value produces an entry in the map whose key is the result of applying keyFunction to that value. These entries appear in the same order as the input values. Example usage: Color red = new Color(red, 255, 0, 0); ... Iterator<Color> allColors = ImmutableSet.of(red, green, blue).iterator(); Map<String, Color> colorForName = uniqueIndex(allColors, toStringFunction()); assertThat(colorForName).containsEntry(red, red); If your index may associate multiple values with each key, use Multimaps.index."
5030,common/collect,com.google.common.collect,Class Maps,"@GwtIncompatiblepublic static ImmutableMap<String,String> fromProperties(Properties properties)","Creates an ImmutableMap<String, String> from a Properties instance. Properties normally derive from Map<Object, Object>, but they typically contain strings, which is awkward. This method lets you get a plain-old-Map out of a Properties."
5031,common/collect,com.google.common.collect,Class Maps,"@GwtCompatible(serializable=true)public static <K,V> Map.Entry<K,V> immutableEntry(K key, V value)","Returns an immutable map entry with the specified key and value. The Map.Entry.setValue(V) operation throws an UnsupportedOperationException. The returned entry is serializable. Java 9 users: consider using java.util.Map.entry(key, value) if the key and value are non-null and the entry does not need to be serializable."
5032,common/collect,com.google.common.collect,Class Maps,"public static <A,B> Converter<A,B> asConverter(BiMap<A,B> bimap)","Returns a Converter that converts values using bimap.get(), and whose inverse view converts values using bimap.inverse().get(). To use a plain Map as a Function, see Functions.forMap(Map) or Functions.forMap(Map, Object)."
5033,common/collect,com.google.common.collect,Class Maps,"public static <K,V> BiMap<K,V> synchronizedBiMap(BiMap<K,V> bimap)","Returns a synchronized (thread-safe) bimap backed by the specified bimap. In order to guarantee serial access, it is critical that all access to the backing bimap is accomplished through the returned bimap. It is imperative that the user manually synchronize on the returned map when accessing any of its collection views: BiMap<Long, String> map = Maps.synchronizedBiMap( HashBiMap.<Long, String>create()); ... Set<Long> set = map.keySet(); // Needn't be in synchronized block ... synchronized (map) { // Synchronizing on map, not set! Iterator<Long> it = set.iterator(); // Must be in synchronized block while (it.hasNext()) { foo(it.next()); } } Failure to follow this advice may result in non-deterministic behavior. The returned bimap will be serializable if the specified bimap is serializable."
5034,common/collect,com.google.common.collect,Class Maps,"public static <K,V> BiMap<K,V> unmodifiableBiMap(BiMap<? extends K,? extends V> bimap)","Returns an unmodifiable view of the specified bimap. This method allows modules to provide users with read-only access to internal bimaps. Query operations on the returned bimap read through to the specified bimap, and attempts to modify the returned map, whether direct or via its collection views, result in an UnsupportedOperationException. The returned bimap will be serializable if the specified bimap is serializable."
5035,common/collect,com.google.common.collect,Class Maps,"public static <K,V1,V2> Map<K,V2> transformValues(Map<K,V1> fromMap, Function<? super V1,V2> function)","Returns a view of a map where each value is transformed by a function. All other properties of the map, such as iteration order, are left intact. For example, the code: Map<String, Integer> map = ImmutableMap.of(a, 4, b, 9); Function<Integer, Double> sqrt = new Function<Integer, Double>() { public Double apply(Integer in) { return Math.sqrt((int) in); } }; Map<String, Double> transformed = Maps.transformValues(map, sqrt); System.out.println(transformed); ... prints {a=2.0, b=3.0}. Changes in the underlying map are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying map. It's acceptable for the underlying map to contain null keys, and even null values provided that the function is capable of accepting null input. The transformed map might contain null values, if the function sometimes gives a null result. The returned map is not thread-safe or serializable, even if the underlying map is. The function is applied lazily, invoked when needed. This is necessary for the returned map to be a view, but it means that the function will be applied many times for bulk operations like Map.containsValue(java.lang.Object) and Map.toString(). For this to perform well, function should be fast. To avoid lazy evaluation when the returned map doesn't need to be a view, copy the returned map into a new map of your choosing."
5036,common/collect,com.google.common.collect,Class Maps,"public static <K,V1,V2> SortedMap<K,V2> transformValues(SortedMap<K,V1> fromMap, Function<? super V1,V2> function)","Returns a view of a sorted map where each value is transformed by a function. All other properties of the map, such as iteration order, are left intact. For example, the code: SortedMap<String, Integer> map = ImmutableSortedMap.of(a, 4, b, 9); Function<Integer, Double> sqrt = new Function<Integer, Double>() { public Double apply(Integer in) { return Math.sqrt((int) in); } }; SortedMap<String, Double> transformed = Maps.transformValues(map, sqrt); System.out.println(transformed); ... prints {a=2.0, b=3.0}. Changes in the underlying map are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying map. It's acceptable for the underlying map to contain null keys, and even null values provided that the function is capable of accepting null input. The transformed map might contain null values, if the function sometimes gives a null result. The returned map is not thread-safe or serializable, even if the underlying map is. The function is applied lazily, invoked when needed. This is necessary for the returned map to be a view, but it means that the function will be applied many times for bulk operations like Map.containsValue(java.lang.Object) and Map.toString(). For this to perform well, function should be fast. To avoid lazy evaluation when the returned map doesn't need to be a view, copy the returned map into a new map of your choosing."
5037,common/collect,com.google.common.collect,Class Maps,"@GwtIncompatiblepublic static <K,V1,V2> NavigableMap<K,V2> transformValues(NavigableMap<K,V1> fromMap, Function<? super V1,V2> function)","Returns a view of a navigable map where each value is transformed by a function. All other properties of the map, such as iteration order, are left intact. For example, the code: NavigableMap<String, Integer> map = Maps.newTreeMap(); map.put(a, 4); map.put(b, 9); Function<Integer, Double> sqrt = new Function<Integer, Double>() { public Double apply(Integer in) { return Math.sqrt((int) in); } }; NavigableMap<String, Double> transformed = Maps.transformNavigableValues(map, sqrt); System.out.println(transformed); ... prints {a=2.0, b=3.0}. Changes in the underlying map are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying map. It's acceptable for the underlying map to contain null keys, and even null values provided that the function is capable of accepting null input. The transformed map might contain null values, if the function sometimes gives a null result. The returned map is not thread-safe or serializable, even if the underlying map is. The function is applied lazily, invoked when needed. This is necessary for the returned map to be a view, but it means that the function will be applied many times for bulk operations like Map.containsValue(java.lang.Object) and Map.toString(). For this to perform well, function should be fast. To avoid lazy evaluation when the returned map doesn't need to be a view, copy the returned map into a new map of your choosing."
5038,common/collect,com.google.common.collect,Class Maps,"public static <K,V1,V2> Map<K,V2> transformEntries(Map<K,V1> fromMap, Maps.EntryTransformer<? super K,? super V1,V2> transformer)","Returns a view of a map whose values are derived from the original map's entries. In contrast to transformValues(java.util.Map<K, V1>, com.google.common.base.Function<? super V1, V2>), this method's entry-transformation logic may depend on the key as well as the value. All other properties of the transformed map, such as iteration order, are left intact. For example, the code: Map<String, Boolean> options = ImmutableMap.of(verbose, true, sort, false); EntryTransformer<String, Boolean, String> flagPrefixer = new EntryTransformer<String, Boolean, String>() { public String transformEntry(String key, Boolean value) { return value ? key : no + key; } }; Map<String, String> transformed = Maps.transformEntries(options, flagPrefixer); System.out.println(transformed); ... prints {verbose=verbose, sort=nosort}. Changes in the underlying map are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying map. It's acceptable for the underlying map to contain null keys and null values provided that the transformer is capable of accepting null inputs. The transformed map might contain null values if the transformer sometimes gives a null result. The returned map is not thread-safe or serializable, even if the underlying map is. The transformer is applied lazily, invoked when needed. This is necessary for the returned map to be a view, but it means that the transformer will be applied many times for bulk operations like Map.containsValue(java.lang.Object) and Object.toString(). For this to perform well, transformer should be fast. To avoid lazy evaluation when the returned map doesn't need to be a view, copy the returned map into a new map of your choosing. Warning: This method assumes that for any instance k of EntryTransformer key type K, k.equals(k2) implies that k2 is also of type K. Using an EntryTransformer key type for which this may not hold, such as ArrayList, may risk a ClassCastException when calling methods on the transformed map."
5039,common/collect,com.google.common.collect,Class Maps,"public static <K,V1,V2> SortedMap<K,V2> transformEntries(SortedMap<K,V1> fromMap, Maps.EntryTransformer<? super K,? super V1,V2> transformer)","Returns a view of a sorted map whose values are derived from the original sorted map's entries. In contrast to transformValues(java.util.Map<K, V1>, com.google.common.base.Function<? super V1, V2>), this method's entry-transformation logic may depend on the key as well as the value. All other properties of the transformed map, such as iteration order, are left intact. For example, the code: Map<String, Boolean> options = ImmutableSortedMap.of(verbose, true, sort, false); EntryTransformer<String, Boolean, String> flagPrefixer = new EntryTransformer<String, Boolean, String>() { public String transformEntry(String key, Boolean value) { return value ? key : yes + key; } }; SortedMap<String, String> transformed = Maps.transformEntries(options, flagPrefixer); System.out.println(transformed); ... prints {sort=yessort, verbose=verbose}. Changes in the underlying map are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying map. It's acceptable for the underlying map to contain null keys and null values provided that the transformer is capable of accepting null inputs. The transformed map might contain null values if the transformer sometimes gives a null result. The returned map is not thread-safe or serializable, even if the underlying map is. The transformer is applied lazily, invoked when needed. This is necessary for the returned map to be a view, but it means that the transformer will be applied many times for bulk operations like Map.containsValue(java.lang.Object) and Object.toString(). For this to perform well, transformer should be fast. To avoid lazy evaluation when the returned map doesn't need to be a view, copy the returned map into a new map of your choosing. Warning: This method assumes that for any instance k of EntryTransformer key type K, k.equals(k2) implies that k2 is also of type K. Using an EntryTransformer key type for which this may not hold, such as ArrayList, may risk a ClassCastException when calling methods on the transformed map."
5040,common/collect,com.google.common.collect,Class Maps,"@GwtIncompatiblepublic static <K,V1,V2> NavigableMap<K,V2> transformEntries(NavigableMap<K,V1> fromMap, Maps.EntryTransformer<? super K,? super V1,V2> transformer)","Returns a view of a navigable map whose values are derived from the original navigable map's entries. In contrast to transformValues(java.util.Map<K, V1>, com.google.common.base.Function<? super V1, V2>), this method's entry-transformation logic may depend on the key as well as the value. All other properties of the transformed map, such as iteration order, are left intact. For example, the code: NavigableMap<String, Boolean> options = Maps.newTreeMap(); options.put(verbose, false); options.put(sort, true); EntryTransformer<String, Boolean, String> flagPrefixer = new EntryTransformer<String, Boolean, String>() { public String transformEntry(String key, Boolean value) { return value ? key : (yes + key); } }; NavigableMap<String, String> transformed = LabsMaps.transformNavigableEntries(options, flagPrefixer); System.out.println(transformed); ... prints {sort=yessort, verbose=verbose}. Changes in the underlying map are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying map. It's acceptable for the underlying map to contain null keys and null values provided that the transformer is capable of accepting null inputs. The transformed map might contain null values if the transformer sometimes gives a null result. The returned map is not thread-safe or serializable, even if the underlying map is. The transformer is applied lazily, invoked when needed. This is necessary for the returned map to be a view, but it means that the transformer will be applied many times for bulk operations like Map.containsValue(java.lang.Object) and Object.toString(). For this to perform well, transformer should be fast. To avoid lazy evaluation when the returned map doesn't need to be a view, copy the returned map into a new map of your choosing. Warning: This method assumes that for any instance k of EntryTransformer key type K, k.equals(k2) implies that k2 is also of type K. Using an EntryTransformer key type for which this may not hold, such as ArrayList, may risk a ClassCastException when calling methods on the transformed map."
5041,common/collect,com.google.common.collect,Class Maps,"public static <K,V> Map<K,V> filterKeys(Map<K,V> unfiltered, Predicate<? super K> keyPredicate)","Returns a map containing the mappings in unfiltered whose keys satisfy a predicate. The returned map is a live view of unfiltered; changes to one affect the other. The resulting map's keySet(), entrySet(), and values() views have iterators that don't support remove(), but all other methods are supported by the map and its views. When given a key that doesn't satisfy the predicate, the map's put() and putAll() methods throw an IllegalArgumentException. When methods such as removeAll() and clear() are called on the filtered map or its views, only mappings whose keys satisfy the filter will be removed from the underlying map. The returned map isn't threadsafe or serializable, even if unfiltered is. Many of the filtered map's methods, such as size(), iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is not needed, it may be faster to copy the filtered map and use the copy. Warning: keyPredicate must be consistent with equals, as documented at Predicate.apply(T). Do not provide a predicate such as Predicates.instanceOf(ArrayList.class), which is inconsistent with equals."
5042,common/collect,com.google.common.collect,Class Maps,"public static <K,V> SortedMap<K,V> filterKeys(SortedMap<K,V> unfiltered, Predicate<? super K> keyPredicate)","Returns a sorted map containing the mappings in unfiltered whose keys satisfy a predicate. The returned map is a live view of unfiltered; changes to one affect the other. The resulting map's keySet(), entrySet(), and values() views have iterators that don't support remove(), but all other methods are supported by the map and its views. When given a key that doesn't satisfy the predicate, the map's put() and putAll() methods throw an IllegalArgumentException. When methods such as removeAll() and clear() are called on the filtered map or its views, only mappings whose keys satisfy the filter will be removed from the underlying map. The returned map isn't threadsafe or serializable, even if unfiltered is. Many of the filtered map's methods, such as size(), iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is not needed, it may be faster to copy the filtered map and use the copy. Warning: keyPredicate must be consistent with equals, as documented at Predicate.apply(T). Do not provide a predicate such as Predicates.instanceOf(ArrayList.class), which is inconsistent with equals."
5043,common/collect,com.google.common.collect,Class Maps,"@GwtIncompatiblepublic static <K,V> NavigableMap<K,V> filterKeys(NavigableMap<K,V> unfiltered, Predicate<? super K> keyPredicate)","Returns a navigable map containing the mappings in unfiltered whose keys satisfy a predicate. The returned map is a live view of unfiltered; changes to one affect the other. The resulting map's keySet(), entrySet(), and values() views have iterators that don't support remove(), but all other methods are supported by the map and its views. When given a key that doesn't satisfy the predicate, the map's put() and putAll() methods throw an IllegalArgumentException. When methods such as removeAll() and clear() are called on the filtered map or its views, only mappings whose keys satisfy the filter will be removed from the underlying map. The returned map isn't threadsafe or serializable, even if unfiltered is. Many of the filtered map's methods, such as size(), iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is not needed, it may be faster to copy the filtered map and use the copy. Warning: keyPredicate must be consistent with equals, as documented at Predicate.apply(T). Do not provide a predicate such as Predicates.instanceOf(ArrayList.class), which is inconsistent with equals."
5044,common/collect,com.google.common.collect,Class Maps,"public static <K,V> BiMap<K,V> filterKeys(BiMap<K,V> unfiltered, Predicate<? super K> keyPredicate)","Returns a bimap containing the mappings in unfiltered whose keys satisfy a predicate. The returned bimap is a live view of unfiltered; changes to one affect the other. The resulting bimap's keySet(), entrySet(), and values() views have iterators that don't support remove(), but all other methods are supported by the bimap and its views. When given a key that doesn't satisfy the predicate, the bimap's put(), forcePut() and putAll() methods throw an IllegalArgumentException. When methods such as removeAll() and clear() are called on the filtered bimap or its views, only mappings that satisfy the filter will be removed from the underlying bimap. The returned bimap isn't threadsafe or serializable, even if unfiltered is. Many of the filtered bimap's methods, such as size(), iterate across every key in the underlying bimap and determine which satisfy the filter. When a live view is not needed, it may be faster to copy the filtered bimap and use the copy. Warning: entryPredicate must be consistent with equals , as documented at Predicate.apply(T)."
5045,common/collect,com.google.common.collect,Class Maps,"public static <K,V> Map<K,V> filterValues(Map<K,V> unfiltered, Predicate<? super V> valuePredicate)","Returns a map containing the mappings in unfiltered whose values satisfy a predicate. The returned map is a live view of unfiltered; changes to one affect the other. The resulting map's keySet(), entrySet(), and values() views have iterators that don't support remove(), but all other methods are supported by the map and its views. When given a value that doesn't satisfy the predicate, the map's put(), putAll(), and Map.Entry.setValue(V) methods throw an IllegalArgumentException. When methods such as removeAll() and clear() are called on the filtered map or its views, only mappings whose values satisfy the filter will be removed from the underlying map. The returned map isn't threadsafe or serializable, even if unfiltered is. Many of the filtered map's methods, such as size(), iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is not needed, it may be faster to copy the filtered map and use the copy. Warning: valuePredicate must be consistent with equals, as documented at Predicate.apply(T). Do not provide a predicate such as Predicates.instanceOf(ArrayList.class), which is inconsistent with equals."
5046,common/collect,com.google.common.collect,Class Maps,"public static <K,V> SortedMap<K,V> filterValues(SortedMap<K,V> unfiltered, Predicate<? super V> valuePredicate)","Returns a sorted map containing the mappings in unfiltered whose values satisfy a predicate. The returned map is a live view of unfiltered; changes to one affect the other. The resulting map's keySet(), entrySet(), and values() views have iterators that don't support remove(), but all other methods are supported by the map and its views. When given a value that doesn't satisfy the predicate, the map's put(), putAll(), and Map.Entry.setValue(V) methods throw an IllegalArgumentException. When methods such as removeAll() and clear() are called on the filtered map or its views, only mappings whose values satisfy the filter will be removed from the underlying map. The returned map isn't threadsafe or serializable, even if unfiltered is. Many of the filtered map's methods, such as size(), iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is not needed, it may be faster to copy the filtered map and use the copy. Warning: valuePredicate must be consistent with equals, as documented at Predicate.apply(T). Do not provide a predicate such as Predicates.instanceOf(ArrayList.class), which is inconsistent with equals."
5047,common/collect,com.google.common.collect,Class Maps,"@GwtIncompatiblepublic static <K,V> NavigableMap<K,V> filterValues(NavigableMap<K,V> unfiltered, Predicate<? super V> valuePredicate)","Returns a navigable map containing the mappings in unfiltered whose values satisfy a predicate. The returned map is a live view of unfiltered; changes to one affect the other. The resulting map's keySet(), entrySet(), and values() views have iterators that don't support remove(), but all other methods are supported by the map and its views. When given a value that doesn't satisfy the predicate, the map's put(), putAll(), and Map.Entry.setValue(V) methods throw an IllegalArgumentException. When methods such as removeAll() and clear() are called on the filtered map or its views, only mappings whose values satisfy the filter will be removed from the underlying map. The returned map isn't threadsafe or serializable, even if unfiltered is. Many of the filtered map's methods, such as size(), iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is not needed, it may be faster to copy the filtered map and use the copy. Warning: valuePredicate must be consistent with equals, as documented at Predicate.apply(T). Do not provide a predicate such as Predicates.instanceOf(ArrayList.class), which is inconsistent with equals."
5048,common/collect,com.google.common.collect,Class Maps,"public static <K,V> BiMap<K,V> filterValues(BiMap<K,V> unfiltered, Predicate<? super V> valuePredicate)","Returns a bimap containing the mappings in unfiltered whose values satisfy a predicate. The returned bimap is a live view of unfiltered; changes to one affect the other. The resulting bimap's keySet(), entrySet(), and values() views have iterators that don't support remove(), but all other methods are supported by the bimap and its views. When given a value that doesn't satisfy the predicate, the bimap's put(), forcePut() and putAll() methods throw an IllegalArgumentException. Similarly, the map's entries have a Map.Entry.setValue(V) method that throws an IllegalArgumentException when the provided value doesn't satisfy the predicate. When methods such as removeAll() and clear() are called on the filtered bimap or its views, only mappings that satisfy the filter will be removed from the underlying bimap. The returned bimap isn't threadsafe or serializable, even if unfiltered is. Many of the filtered bimap's methods, such as size(), iterate across every value in the underlying bimap and determine which satisfy the filter. When a live view is not needed, it may be faster to copy the filtered bimap and use the copy. Warning: entryPredicate must be consistent with equals , as documented at Predicate.apply(T)."
5049,common/collect,com.google.common.collect,Class Maps,"public static <K,V> Map<K,V> filterEntries(Map<K,V> unfiltered, Predicate<? super Map.Entry<K,V>> entryPredicate)","Returns a map containing the mappings in unfiltered that satisfy a predicate. The returned map is a live view of unfiltered; changes to one affect the other. The resulting map's keySet(), entrySet(), and values() views have iterators that don't support remove(), but all other methods are supported by the map and its views. When given a key/value pair that doesn't satisfy the predicate, the map's put() and putAll() methods throw an IllegalArgumentException. Similarly, the map's entries have a Map.Entry.setValue(V) method that throws an IllegalArgumentException when the existing key and the provided value don't satisfy the predicate. When methods such as removeAll() and clear() are called on the filtered map or its views, only mappings that satisfy the filter will be removed from the underlying map. The returned map isn't threadsafe or serializable, even if unfiltered is. Many of the filtered map's methods, such as size(), iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is not needed, it may be faster to copy the filtered map and use the copy. Warning: entryPredicate must be consistent with equals, as documented at Predicate.apply(T)."
5050,common/collect,com.google.common.collect,Class Maps,"public static <K,V> SortedMap<K,V> filterEntries(SortedMap<K,V> unfiltered, Predicate<? super Map.Entry<K,V>> entryPredicate)","Returns a sorted map containing the mappings in unfiltered that satisfy a predicate. The returned map is a live view of unfiltered; changes to one affect the other. The resulting map's keySet(), entrySet(), and values() views have iterators that don't support remove(), but all other methods are supported by the map and its views. When given a key/value pair that doesn't satisfy the predicate, the map's put() and putAll() methods throw an IllegalArgumentException. Similarly, the map's entries have a Map.Entry.setValue(V) method that throws an IllegalArgumentException when the existing key and the provided value don't satisfy the predicate. When methods such as removeAll() and clear() are called on the filtered map or its views, only mappings that satisfy the filter will be removed from the underlying map. The returned map isn't threadsafe or serializable, even if unfiltered is. Many of the filtered map's methods, such as size(), iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is not needed, it may be faster to copy the filtered map and use the copy. Warning: entryPredicate must be consistent with equals, as documented at Predicate.apply(T)."
5051,common/collect,com.google.common.collect,Class Maps,"@GwtIncompatiblepublic static <K,V> NavigableMap<K,V> filterEntries(NavigableMap<K,V> unfiltered, Predicate<? super Map.Entry<K,V>> entryPredicate)","Returns a sorted map containing the mappings in unfiltered that satisfy a predicate. The returned map is a live view of unfiltered; changes to one affect the other. The resulting map's keySet(), entrySet(), and values() views have iterators that don't support remove(), but all other methods are supported by the map and its views. When given a key/value pair that doesn't satisfy the predicate, the map's put() and putAll() methods throw an IllegalArgumentException. Similarly, the map's entries have a Map.Entry.setValue(V) method that throws an IllegalArgumentException when the existing key and the provided value don't satisfy the predicate. When methods such as removeAll() and clear() are called on the filtered map or its views, only mappings that satisfy the filter will be removed from the underlying map. The returned map isn't threadsafe or serializable, even if unfiltered is. Many of the filtered map's methods, such as size(), iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is not needed, it may be faster to copy the filtered map and use the copy. Warning: entryPredicate must be consistent with equals, as documented at Predicate.apply(T)."
5052,common/collect,com.google.common.collect,Class Maps,"public static <K,V> BiMap<K,V> filterEntries(BiMap<K,V> unfiltered, Predicate<? super Map.Entry<K,V>> entryPredicate)","Returns a bimap containing the mappings in unfiltered that satisfy a predicate. The returned bimap is a live view of unfiltered; changes to one affect the other. The resulting bimap's keySet(), entrySet(), and values() views have iterators that don't support remove(), but all other methods are supported by the bimap and its views. When given a key/value pair that doesn't satisfy the predicate, the bimap's put(), forcePut() and putAll() methods throw an IllegalArgumentException. Similarly, the map's entries have an Map.Entry.setValue(V) method that throws an IllegalArgumentException when the existing key and the provided value don't satisfy the predicate. When methods such as removeAll() and clear() are called on the filtered bimap or its views, only mappings that satisfy the filter will be removed from the underlying bimap. The returned bimap isn't threadsafe or serializable, even if unfiltered is. Many of the filtered bimap's methods, such as size(), iterate across every key/value mapping in the underlying bimap and determine which satisfy the filter. When a live view is not needed, it may be faster to copy the filtered bimap and use the copy. Warning: entryPredicate must be consistent with equals , as documented at Predicate.apply(T)."
5053,common/collect,com.google.common.collect,Class Maps,"@GwtIncompatiblepublic static <K,V> NavigableMap<K,V> unmodifiableNavigableMap(NavigableMap<K,? extends V> map)","Returns an unmodifiable view of the specified navigable map. Query operations on the returned map read through to the specified map, and attempts to modify the returned map, whether direct or via its views, result in an UnsupportedOperationException. The returned navigable map will be serializable if the specified navigable map is serializable. This method's signature will not permit you to convert a NavigableMap<? extends K, V> to a NavigableMap<K, V>. If it permitted this, the returned map's comparator() method might return a Comparator<? extends K>, which works only on a particular subtype of K, but promise that it's a Comparator<? super K>, which must work on any type of K."
5054,common/collect,com.google.common.collect,Class Maps,"@GwtIncompatiblepublic static <K,V> NavigableMap<K,V> synchronizedNavigableMap(NavigableMap<K,V> navigableMap)","Returns a synchronized (thread-safe) navigable map backed by the specified navigable map. In order to guarantee serial access, it is critical that all access to the backing navigable map is accomplished through the returned navigable map (or its views). It is imperative that the user manually synchronize on the returned navigable map when iterating over any of its collection views, or the collections views of any of its descendingMap, subMap, headMap or tailMap views. NavigableMap<K, V> map = synchronizedNavigableMap(new TreeMap<K, V>()); // Needn't be in synchronized block NavigableSet<K> set = map.navigableKeySet(); synchronized (map) { // Synchronizing on map, not set! Iterator<K> it = set.iterator(); // Must be in synchronized block while (it.hasNext()) { foo(it.next()); } } or: NavigableMap<K, V> map = synchronizedNavigableMap(new TreeMap<K, V>()); NavigableMap<K, V> map2 = map.subMap(foo, false, bar, true); // Needn't be in synchronized block NavigableSet<K> set2 = map2.descendingKeySet(); synchronized (map) { // Synchronizing on map, not map2 or set2! Iterator<K> it = set2.iterator(); // Must be in synchronized block while (it.hasNext()) { foo(it.next()); } } Failure to follow this advice may result in non-deterministic behavior. The returned navigable map will be serializable if the specified navigable map is serializable."
5055,common/net,com.google.common.net,Class MediaType,public static final MediaType ANY_TYPE,
5056,common/net,com.google.common.net,Class MediaType,public static final MediaType ANY_TEXT_TYPE,
5057,common/net,com.google.common.net,Class MediaType,public static final MediaType ANY_IMAGE_TYPE,
5058,common/net,com.google.common.net,Class MediaType,public static final MediaType ANY_AUDIO_TYPE,
5059,common/net,com.google.common.net,Class MediaType,public static final MediaType ANY_VIDEO_TYPE,
5060,common/net,com.google.common.net,Class MediaType,public static final MediaType ANY_APPLICATION_TYPE,
5061,common/net,com.google.common.net,Class MediaType,public static final MediaType ANY_FONT_TYPE,Wildcard matching any font top-level media type.
5062,common/net,com.google.common.net,Class MediaType,public static final MediaType CACHE_MANIFEST_UTF_8,
5063,common/net,com.google.common.net,Class MediaType,public static final MediaType CSS_UTF_8,
5064,common/net,com.google.common.net,Class MediaType,public static final MediaType CSV_UTF_8,
5065,common/net,com.google.common.net,Class MediaType,public static final MediaType HTML_UTF_8,
5066,common/net,com.google.common.net,Class MediaType,public static final MediaType I_CALENDAR_UTF_8,
5067,common/net,com.google.common.net,Class MediaType,public static final MediaType PLAIN_TEXT_UTF_8,
5068,common/net,com.google.common.net,Class MediaType,public static final MediaType TEXT_JAVASCRIPT_UTF_8,"RFC 4329 declares application/javascript to be the correct media type for JavaScript, but this may be necessary in certain situations for compatibility."
5069,common/net,com.google.common.net,Class MediaType,public static final MediaType TSV_UTF_8,Tab separated values.
5070,common/net,com.google.common.net,Class MediaType,public static final MediaType VCARD_UTF_8,
5071,common/net,com.google.common.net,Class MediaType,public static final MediaType WML_UTF_8,UTF-8 encoded Wireless Markup Language.
5072,common/net,com.google.common.net,Class MediaType,public static final MediaType XML_UTF_8,"As described in RFC 3023, this constant (text/xml) is used for XML documents that are readable by casual users. APPLICATION_XML_UTF_8 is provided for documents that are intended for applications."
5073,common/net,com.google.common.net,Class MediaType,public static final MediaType VTT_UTF_8,"As described in the VTT spec, this is used for Web Video Text Tracks (WebVTT) files, used with the HTML5 track element."
5074,common/net,com.google.common.net,Class MediaType,public static final MediaType BMP,Bitmap file format (bmp files).
5075,common/net,com.google.common.net,Class MediaType,public static final MediaType CRW,"The Canon Image File Format (crw files), a widely-used raw image format for cameras. It is found in /etc/mime.types, e.g. in Debian 3.48-1."
5076,common/net,com.google.common.net,Class MediaType,public static final MediaType GIF,
5077,common/net,com.google.common.net,Class MediaType,public static final MediaType ICO,
5078,common/net,com.google.common.net,Class MediaType,public static final MediaType JPEG,
5079,common/net,com.google.common.net,Class MediaType,public static final MediaType PNG,
5080,common/net,com.google.common.net,Class MediaType,public static final MediaType PSD,"The Photoshop File Format (psd files) as defined by IANA, and found in /etc/mime.types, e.g. of the Apache HTTPD project; for the specification, see Adobe Photoshop Document Format and Wikipedia; this is the regular output/input of Photoshop (which can also export to various image formats; note that files with extension PSB are in a distinct but related format). This is a more recent replacement for the older, experimental type x-photoshop: RFC-2046.6."
5081,common/net,com.google.common.net,Class MediaType,public static final MediaType SVG_UTF_8,
5082,common/net,com.google.common.net,Class MediaType,public static final MediaType TIFF,
5083,common/net,com.google.common.net,Class MediaType,public static final MediaType WEBP,WebP image format.
5084,common/net,com.google.common.net,Class MediaType,public static final MediaType HEIF,HEIF image format.
5085,common/net,com.google.common.net,Class MediaType,public static final MediaType JP2K,JP2K image format.
5086,common/net,com.google.common.net,Class MediaType,public static final MediaType MP4_AUDIO,
5087,common/net,com.google.common.net,Class MediaType,public static final MediaType MPEG_AUDIO,
5088,common/net,com.google.common.net,Class MediaType,public static final MediaType OGG_AUDIO,
5089,common/net,com.google.common.net,Class MediaType,public static final MediaType WEBM_AUDIO,
5090,common/net,com.google.common.net,Class MediaType,public static final MediaType L16_AUDIO,"L16 audio, as defined by RFC 2586."
5091,common/net,com.google.common.net,Class MediaType,public static final MediaType L24_AUDIO,"L24 audio, as defined by RFC 3190."
5092,common/net,com.google.common.net,Class MediaType,public static final MediaType BASIC_AUDIO,"Basic Audio, as defined by RFC 2046."
5093,common/net,com.google.common.net,Class MediaType,public static final MediaType AAC_AUDIO,"Advanced Audio Coding. For more information, see Advanced Audio Coding."
5094,common/net,com.google.common.net,Class MediaType,public static final MediaType VORBIS_AUDIO,"Vorbis Audio, as defined by RFC 5215."
5095,common/net,com.google.common.net,Class MediaType,public static final MediaType WMA_AUDIO,"Windows Media Audio. For more information, see file name extensions for Windows Media metafiles."
5096,common/net,com.google.common.net,Class MediaType,public static final MediaType WAX_AUDIO,"Windows Media metafiles. For more information, see file name extensions for Windows Media metafiles."
5097,common/net,com.google.common.net,Class MediaType,public static final MediaType VND_REAL_AUDIO,"Real Audio. For more information, see this link."
5098,common/net,com.google.common.net,Class MediaType,public static final MediaType VND_WAVE_AUDIO,"WAVE format, as defined by RFC 2361."
5099,common/net,com.google.common.net,Class MediaType,public static final MediaType MP4_VIDEO,
5100,common/net,com.google.common.net,Class MediaType,public static final MediaType MPEG_VIDEO,
5101,common/net,com.google.common.net,Class MediaType,public static final MediaType OGG_VIDEO,
5102,common/net,com.google.common.net,Class MediaType,public static final MediaType QUICKTIME,
5103,common/net,com.google.common.net,Class MediaType,public static final MediaType WEBM_VIDEO,
5104,common/net,com.google.common.net,Class MediaType,public static final MediaType WMV,
5105,common/net,com.google.common.net,Class MediaType,public static final MediaType FLV_VIDEO,"Flash video. For more information, see this link."
5106,common/net,com.google.common.net,Class MediaType,public static final MediaType THREE_GPP_VIDEO,"The 3GP multimedia container format. For more information, see 3GPP TS 26.244."
5107,common/net,com.google.common.net,Class MediaType,public static final MediaType THREE_GPP2_VIDEO,"The 3G2 multimedia container format. For more information, see 3GPP2 C.S0050-B."
5108,common/net,com.google.common.net,Class MediaType,public static final MediaType APPLICATION_XML_UTF_8,"As described in RFC 3023, this constant (application/xml) is used for XML documents that are unreadable by casual users. XML_UTF_8 is provided for documents that may be read by users."
5109,common/net,com.google.common.net,Class MediaType,public static final MediaType ATOM_UTF_8,
5110,common/net,com.google.common.net,Class MediaType,public static final MediaType BZIP2,
5111,common/net,com.google.common.net,Class MediaType,public static final MediaType DART_UTF_8,Files in the dart programming language.
5112,common/net,com.google.common.net,Class MediaType,public static final MediaType APPLE_PASSBOOK,Apple Passbook.
5113,common/net,com.google.common.net,Class MediaType,public static final MediaType EOT,Embedded OpenType fonts. This is registered with the IANA.
5114,common/net,com.google.common.net,Class MediaType,public static final MediaType EPUB,As described in the International Digital Publishing Forum EPUB is the distribution and interchange format standard for digital publications and documents. This media type is defined in the EPUB Open Container Format specification.
5115,common/net,com.google.common.net,Class MediaType,public static final MediaType FORM_DATA,
5116,common/net,com.google.common.net,Class MediaType,public static final MediaType KEY_ARCHIVE,"As described in PKCS #12: Personal Information Exchange Syntax Standard, PKCS #12 defines an archive file format for storing many cryptography objects as a single file."
5117,common/net,com.google.common.net,Class MediaType,public static final MediaType APPLICATION_BINARY,"This is a non-standard media type, but is commonly used in serving hosted binary files as it is known not to trigger content sniffing in current browsers. It should not be used in other situations as it is not specified by any RFC and does not appear in the /IANA MIME Media Types list. Consider OCTET_STREAM for binary data that is not being served to a browser."
5118,common/net,com.google.common.net,Class MediaType,public static final MediaType GEO_JSON,"Media type for the GeoJSON Format, a geospatial data interchange format based on JSON."
5119,common/net,com.google.common.net,Class MediaType,public static final MediaType GZIP,
5120,common/net,com.google.common.net,Class MediaType,public static final MediaType HAL_JSON,JSON Hypertext Application Language (HAL) documents.
5121,common/net,com.google.common.net,Class MediaType,public static final MediaType JAVASCRIPT_UTF_8,"RFC 4329 declares this to be the correct media type for JavaScript, but text/javascript may be necessary in certain situations for compatibility."
5122,common/net,com.google.common.net,Class MediaType,public static final MediaType JOSE,For JWS or JWE objects using the Compact Serialization.
5123,common/net,com.google.common.net,Class MediaType,public static final MediaType JOSE_JSON,For JWS or JWE objects using the JSON Serialization.
5124,common/net,com.google.common.net,Class MediaType,public static final MediaType JSON_UTF_8,
5125,common/net,com.google.common.net,Class MediaType,public static final MediaType MANIFEST_JSON_UTF_8,The Manifest for a web application.
5126,common/net,com.google.common.net,Class MediaType,public static final MediaType KML,OGC KML (Keyhole Markup Language).
5127,common/net,com.google.common.net,Class MediaType,public static final MediaType KMZ,"OGC KML (Keyhole Markup Language), compressed using the ZIP format into KMZ archives."
5128,common/net,com.google.common.net,Class MediaType,public static final MediaType MBOX,The mbox database format.
5129,common/net,com.google.common.net,Class MediaType,public static final MediaType APPLE_MOBILE_CONFIG,Apple over-the-air mobile configuration profiles.
5130,common/net,com.google.common.net,Class MediaType,public static final MediaType MICROSOFT_EXCEL,Microsoft Excel spreadsheets.
5131,common/net,com.google.common.net,Class MediaType,public static final MediaType MICROSOFT_OUTLOOK,Microsoft Outlook items.
5132,common/net,com.google.common.net,Class MediaType,public static final MediaType MICROSOFT_POWERPOINT,Microsoft Powerpoint presentations.
5133,common/net,com.google.common.net,Class MediaType,public static final MediaType MICROSOFT_WORD,Microsoft Word documents.
5134,common/net,com.google.common.net,Class MediaType,public static final MediaType MEDIA_PRESENTATION_DESCRIPTION,Media type for Dynamic Adaptive Streaming over HTTP (DASH). This is registered with the IANA.
5135,common/net,com.google.common.net,Class MediaType,public static final MediaType WASM_APPLICATION,WASM applications. For more information see the Web Assembly overview.
5136,common/net,com.google.common.net,Class MediaType,public static final MediaType NACL_APPLICATION,NaCl applications. For more information see the Developer Guide for Native Client Application Structure.
5137,common/net,com.google.common.net,Class MediaType,public static final MediaType NACL_PORTABLE_APPLICATION,NaCl portable applications. For more information see the Developer Guide for Native Client Application Structure.
5138,common/net,com.google.common.net,Class MediaType,public static final MediaType OCTET_STREAM,
5139,common/net,com.google.common.net,Class MediaType,public static final MediaType OGG_CONTAINER,
5140,common/net,com.google.common.net,Class MediaType,public static final MediaType OOXML_DOCUMENT,
5141,common/net,com.google.common.net,Class MediaType,public static final MediaType OOXML_PRESENTATION,
5142,common/net,com.google.common.net,Class MediaType,public static final MediaType OOXML_SHEET,
5143,common/net,com.google.common.net,Class MediaType,public static final MediaType OPENDOCUMENT_GRAPHICS,
5144,common/net,com.google.common.net,Class MediaType,public static final MediaType OPENDOCUMENT_PRESENTATION,
5145,common/net,com.google.common.net,Class MediaType,public static final MediaType OPENDOCUMENT_SPREADSHEET,
5146,common/net,com.google.common.net,Class MediaType,public static final MediaType OPENDOCUMENT_TEXT,
5147,common/net,com.google.common.net,Class MediaType,public static final MediaType OPENSEARCH_DESCRIPTION_UTF_8,OpenSearch Description files are XML files that describe how a website can be used as a search engine by consumers (e.g. web browsers).
5148,common/net,com.google.common.net,Class MediaType,public static final MediaType PDF,
5149,common/net,com.google.common.net,Class MediaType,public static final MediaType POSTSCRIPT,
5150,common/net,com.google.common.net,Class MediaType,public static final MediaType PROTOBUF,Protocol buffers
5151,common/net,com.google.common.net,Class MediaType,public static final MediaType RDF_XML_UTF_8,"RDF/XML documents, which are XML serializations of Resource Description Framework graphs."
5152,common/net,com.google.common.net,Class MediaType,public static final MediaType RTF_UTF_8,
5153,common/net,com.google.common.net,Class MediaType,public static final MediaType SFNT,"RFC 8081 declares font/sfnt to be the correct media type for SFNT, but this may be necessary in certain situations for compatibility."
5154,common/net,com.google.common.net,Class MediaType,public static final MediaType SHOCKWAVE_FLASH,
5155,common/net,com.google.common.net,Class MediaType,public static final MediaType SKETCHUP,skp files produced by the 3D Modeling software SketchUp
5156,common/net,com.google.common.net,Class MediaType,public static final MediaType SOAP_XML_UTF_8,"As described in RFC 3902, this constant (application/soap+xml) is used to identify SOAP 1.2 message envelopes that have been serialized with XML 1.0. For SOAP 1.1 messages, see XML_UTF_8 per W3C Note on Simple Object Access Protocol (SOAP) 1.1"
5157,common/net,com.google.common.net,Class MediaType,public static final MediaType TAR,
5158,common/net,com.google.common.net,Class MediaType,public static final MediaType WOFF,"RFC 8081 declares font/woff to be the correct media type for WOFF, but this may be necessary in certain situations for compatibility."
5159,common/net,com.google.common.net,Class MediaType,public static final MediaType WOFF2,"RFC 8081 declares font/woff2 to be the correct media type for WOFF2, but this may be necessary in certain situations for compatibility."
5160,common/net,com.google.common.net,Class MediaType,public static final MediaType XHTML_UTF_8,
5161,common/net,com.google.common.net,Class MediaType,public static final MediaType XRD_UTF_8,"Extensible Resource Descriptors. This is not yet registered with the IANA, but it is specified by OASIS in the XRD definition and implemented in projects such as WebFinger."
5162,common/net,com.google.common.net,Class MediaType,public static final MediaType ZIP,
5163,common/net,com.google.common.net,Class MediaType,public static final MediaType FONT_COLLECTION,A collection of font outlines as defined by RFC 8081.
5164,common/net,com.google.common.net,Class MediaType,public static final MediaType FONT_OTF,Open Type Font Format (OTF) as defined by RFC 8081.
5165,common/net,com.google.common.net,Class MediaType,public static final MediaType FONT_SFNT,"Spline or Scalable Font Format (SFNT). RFC 8081 declares this to be the correct media type for SFNT, but application/font-sfnt may be necessary in certain situations for compatibility."
5166,common/net,com.google.common.net,Class MediaType,public static final MediaType FONT_TTF,True Type Font Format (TTF) as defined by RFC 8081.
5167,common/net,com.google.common.net,Class MediaType,public static final MediaType FONT_WOFF,"Web Open Font Format (WOFF). RFC 8081 declares this to be the correct media type for SFNT, but application/font-woff may be necessary in certain situations for compatibility."
5168,common/net,com.google.common.net,Class MediaType,public String type(),"Returns the top-level media type. For example, text in text/plain."
5169,common/net,com.google.common.net,Class MediaType,public String subtype(),"Returns the media subtype. For example, plain in text/plain."
5170,common/net,com.google.common.net,Class MediaType,"public ImmutableListMultimap<String,String> parameters()",Returns a multimap containing the parameters of this media type.
5171,common/net,com.google.common.net,Class MediaType,public Optional<Charset> charset(),Returns an optional charset for the value of the charset parameter if it is specified.
5172,common/net,com.google.common.net,Class MediaType,public MediaType withoutParameters(),"Returns a new instance with the same type and subtype as this instance, but without any parameters."
5173,common/net,com.google.common.net,Class MediaType,"public MediaType withParameters(Multimap<String,String> parameters)",Replaces all parameters with the given parameters.
5174,common/net,com.google.common.net,Class MediaType,"public MediaType withParameters(String attribute, Iterable<String> values)","Replaces all parameters with the given attribute with parameters using the given values. If there are no values, any existing parameters with the given attribute are removed."
5175,common/net,com.google.common.net,Class MediaType,"public MediaType withParameter(String attribute, String value)","Replaces all parameters with the given attribute with a single parameter with the given value. If multiple parameters with the same attributes are necessary use withParameters(String, Iterable). Prefer withCharset(java.nio.charset.Charset) for setting the charset parameter when using a Charset object."
5176,common/net,com.google.common.net,Class MediaType,public MediaType withCharset(Charset charset),"Returns a new instance with the same type and subtype as this instance, with the charset parameter set to the name of the given charset. Only one charset parameter will be present on the new instance regardless of the number set on this one. If a charset must be specified that is not supported on this JVM (and thus is not representable as a Charset instance, use withParameter(java.lang.String, java.lang.String)."
5177,common/net,com.google.common.net,Class MediaType,public boolean hasWildcard(),Returns true if either the type or subtype is the wildcard.
5178,common/net,com.google.common.net,Class MediaType,public boolean is(MediaType mediaTypeRange),"Returns true if this instance falls within the range (as defined by the HTTP Accept header) given by the argument according to three criteria: The type of the argument is the wildcard or equal to the type of this instance. The subtype of the argument is the wildcard or equal to the subtype of this instance. All of the parameters present in the argument are present in this instance. For example: PLAIN_TEXT_UTF_8.is(PLAIN_TEXT_UTF_8) // true PLAIN_TEXT_UTF_8.is(HTML_UTF_8) // false PLAIN_TEXT_UTF_8.is(ANY_TYPE) // true PLAIN_TEXT_UTF_8.is(ANY_TEXT_TYPE) // true PLAIN_TEXT_UTF_8.is(ANY_IMAGE_TYPE) // false PLAIN_TEXT_UTF_8.is(ANY_TEXT_TYPE.withCharset(UTF_8)) // true PLAIN_TEXT_UTF_8.withoutParameters().is(ANY_TEXT_TYPE.withCharset(UTF_8)) // false PLAIN_TEXT_UTF_8.is(ANY_TEXT_TYPE.withCharset(UTF_16)) // false Note that while it is possible to have the same parameter declared multiple times within a media type this method does not consider the number of occurrences of a parameter. For example, text/plain; charset=UTF-8 satisfies text/plain; charset=UTF-8; charset=UTF-8."
5179,common/net,com.google.common.net,Class MediaType,"public static MediaType create(String type, String subtype)",Creates a new media type with the given type and subtype.
5180,common/net,com.google.common.net,Class MediaType,public static MediaType parse(String input),Parses a media type from its string representation.
5181,common/net,com.google.common.net,Class MediaType,public boolean equals(@Nullable Object obj),Description copied from class: java.lang.Object
5182,common/net,com.google.common.net,Class MediaType,public int hashCode(),Description copied from class: java.lang.Object
5183,common/collect,com.google.common.collect,Class MinMaxPriorityQueue<E>,public static <E extends Comparable<E>> MinMaxPriorityQueue<E> create(),"Creates a new min-max priority queue with default settings: natural order, no maximum size, no initial contents, and an initial expected size of 11."
5184,common/collect,com.google.common.collect,Class MinMaxPriorityQueue<E>,public static <E extends Comparable<E>> MinMaxPriorityQueue<E> create(Iterable<? extends E> initialContents),"Creates a new min-max priority queue using natural order, no maximum size, and initially containing the given elements."
5185,common/collect,com.google.common.collect,Class MinMaxPriorityQueue<E>,public static <B> MinMaxPriorityQueue.Builder<B> orderedBy(Comparator<B> comparator),"Creates and returns a new builder, configured to build MinMaxPriorityQueue instances that use comparator to determine the least and greatest elements."
5186,common/collect,com.google.common.collect,Class MinMaxPriorityQueue<E>,public static MinMaxPriorityQueue.Builder<Comparable> expectedSize(int expectedSize),"Creates and returns a new builder, configured to build MinMaxPriorityQueue instances sized appropriately to hold expectedSize elements."
5187,common/collect,com.google.common.collect,Class MinMaxPriorityQueue<E>,public static MinMaxPriorityQueue.Builder<Comparable> maximumSize(int maximumSize),"Creates and returns a new builder, configured to build MinMaxPriorityQueue instances that are limited to maximumSize elements. Each time a queue grows beyond this bound, it immediately removes its greatest element (according to its comparator), which might be the element that was just added."
5188,common/collect,com.google.common.collect,Class MinMaxPriorityQueue<E>,public int size(),Description copied from interface: java.util.Collection
5189,common/collect,com.google.common.collect,Class MinMaxPriorityQueue<E>,@CanIgnoreReturnValuepublic boolean add(E element),"Adds the given element to this queue. If this queue has a maximum size, after adding element the queue will automatically evict its greatest element (according to its comparator), which may be element itself."
5190,common/collect,com.google.common.collect,Class MinMaxPriorityQueue<E>,@CanIgnoreReturnValuepublic boolean addAll(Collection<? extends E> newElements),Description copied from class: java.util.AbstractQueue
5191,common/collect,com.google.common.collect,Class MinMaxPriorityQueue<E>,@CanIgnoreReturnValuepublic boolean offer(E element),"Adds the given element to this queue. If this queue has a maximum size, after adding element the queue will automatically evict its greatest element (according to its comparator), which may be element itself."
5192,common/collect,com.google.common.collect,Class MinMaxPriorityQueue<E>,@CanIgnoreReturnValuepublic E poll(),Description copied from interface: java.util.Queue
5193,common/collect,com.google.common.collect,Class MinMaxPriorityQueue<E>,public E peek(),Description copied from interface: java.util.Queue
5194,common/collect,com.google.common.collect,Class MinMaxPriorityQueue<E>,@CanIgnoreReturnValuepublic E pollFirst(),"Removes and returns the least element of this queue, or returns null if the queue is empty."
5195,common/collect,com.google.common.collect,Class MinMaxPriorityQueue<E>,@CanIgnoreReturnValuepublic E removeFirst(),Removes and returns the least element of this queue.
5196,common/collect,com.google.common.collect,Class MinMaxPriorityQueue<E>,public E peekFirst(),"Retrieves, but does not remove, the least element of this queue, or returns null if the queue is empty."
5197,common/collect,com.google.common.collect,Class MinMaxPriorityQueue<E>,@CanIgnoreReturnValuepublic E pollLast(),"Removes and returns the greatest element of this queue, or returns null if the queue is empty."
5198,common/collect,com.google.common.collect,Class MinMaxPriorityQueue<E>,@CanIgnoreReturnValuepublic E removeLast(),Removes and returns the greatest element of this queue.
5199,common/collect,com.google.common.collect,Class MinMaxPriorityQueue<E>,public E peekLast(),"Retrieves, but does not remove, the greatest element of this queue, or returns null if the queue is empty."
5200,common/collect,com.google.common.collect,Class MinMaxPriorityQueue<E>,public Iterator<E> iterator(),"Returns an iterator over the elements contained in this collection, in no particular order. The iterator is fail-fast: If the MinMaxPriorityQueue is modified at any time after the iterator is created, in any way except through the iterator's own remove method, the iterator will generally throw a ConcurrentModificationException. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw ConcurrentModificationException on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: the fail-fast behavior of iterators should be used only to detect bugs."
5201,common/collect,com.google.common.collect,Class MinMaxPriorityQueue<E>,public void clear(),Description copied from class: java.util.AbstractQueue
5202,common/collect,com.google.common.collect,Class MinMaxPriorityQueue<E>,public Object[] toArray(),Description copied from class: java.util.AbstractCollection
5203,common/collect,com.google.common.collect,Class MinMaxPriorityQueue.Builder<B>,@CanIgnoreReturnValuepublic MinMaxPriorityQueue.Builder<B> expectedSize(int expectedSize),Configures this builder to build min-max priority queues with an initial expected size of expectedSize.
5204,common/collect,com.google.common.collect,Class MinMaxPriorityQueue.Builder<B>,@CanIgnoreReturnValuepublic MinMaxPriorityQueue.Builder<B> maximumSize(int maximumSize),"Configures this builder to build MinMaxPriorityQueue instances that are limited to maximumSize elements. Each time a queue grows beyond this bound, it immediately removes its greatest element (according to its comparator), which might be the element that was just added."
5205,common/collect,com.google.common.collect,Class MinMaxPriorityQueue.Builder<B>,public <T extends B> MinMaxPriorityQueue<T> create(),"Builds a new min-max priority queue using the previously specified options, and having no initial contents."
5206,util/concurrent,com.google.common.util.concurrent,Class Monitor,public Monitor(),Creates a monitor with a non-fair (but fast) ordering policy. Equivalent to Monitor(false).
5207,util/concurrent,com.google.common.util.concurrent,Class Monitor,public Monitor.Guard newGuard(BooleanSupplier isSatisfied),Creates a new guard for this monitor.
5208,util/concurrent,com.google.common.util.concurrent,Class Monitor,public void enter(),Enters this monitor. Blocks indefinitely.
5209,util/concurrent,com.google.common.util.concurrent,Class Monitor,public boolean enter(Duration time),Enters this monitor. Blocks at most the given time.
5210,util/concurrent,com.google.common.util.concurrent,Class Monitor,"public boolean enter(long time, TimeUnit unit)",Enters this monitor. Blocks at most the given time.
5211,util/concurrent,com.google.common.util.concurrent,Class Monitor,public void enterInterruptibly() throws InterruptedException,"Enters this monitor. Blocks indefinitely, but may be interrupted."
5212,util/concurrent,com.google.common.util.concurrent,Class Monitor,public boolean enterInterruptibly(Duration time) throws InterruptedException,"Enters this monitor. Blocks at most the given time, and may be interrupted."
5213,util/concurrent,com.google.common.util.concurrent,Class Monitor,"public boolean enterInterruptibly(long time, TimeUnit unit) throws InterruptedException","Enters this monitor. Blocks at most the given time, and may be interrupted."
5214,util/concurrent,com.google.common.util.concurrent,Class Monitor,public boolean tryEnter(),Enters this monitor if it is possible to do so immediately. Does not block. Note: This method disregards the fairness setting of this monitor.
5215,util/concurrent,com.google.common.util.concurrent,Class Monitor,public void enterWhen(Monitor.Guard guard) throws InterruptedException,"Enters this monitor when the guard is satisfied. Blocks indefinitely, but may be interrupted."
5216,util/concurrent,com.google.common.util.concurrent,Class Monitor,"public boolean enterWhen(Monitor.Guard guard, Duration time) throws InterruptedException","Enters this monitor when the guard is satisfied. Blocks at most the given time, including both the time to acquire the lock and the time to wait for the guard to be satisfied, and may be interrupted."
5217,util/concurrent,com.google.common.util.concurrent,Class Monitor,"public boolean enterWhen(Monitor.Guard guard, long time, TimeUnit unit) throws InterruptedException","Enters this monitor when the guard is satisfied. Blocks at most the given time, including both the time to acquire the lock and the time to wait for the guard to be satisfied, and may be interrupted."
5218,util/concurrent,com.google.common.util.concurrent,Class Monitor,public void enterWhenUninterruptibly(Monitor.Guard guard),Enters this monitor when the guard is satisfied. Blocks indefinitely.
5219,util/concurrent,com.google.common.util.concurrent,Class Monitor,"public boolean enterWhenUninterruptibly(Monitor.Guard guard, Duration time)","Enters this monitor when the guard is satisfied. Blocks at most the given time, including both the time to acquire the lock and the time to wait for the guard to be satisfied."
5220,util/concurrent,com.google.common.util.concurrent,Class Monitor,"public boolean enterWhenUninterruptibly(Monitor.Guard guard, long time, TimeUnit unit)","Enters this monitor when the guard is satisfied. Blocks at most the given time, including both the time to acquire the lock and the time to wait for the guard to be satisfied."
5221,util/concurrent,com.google.common.util.concurrent,Class Monitor,public boolean enterIf(Monitor.Guard guard),"Enters this monitor if the guard is satisfied. Blocks indefinitely acquiring the lock, but does not wait for the guard to be satisfied."
5222,util/concurrent,com.google.common.util.concurrent,Class Monitor,"public boolean enterIf(Monitor.Guard guard, Duration time)","Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the lock, but does not wait for the guard to be satisfied."
5223,util/concurrent,com.google.common.util.concurrent,Class Monitor,"public boolean enterIf(Monitor.Guard guard, long time, TimeUnit unit)","Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the lock, but does not wait for the guard to be satisfied."
5224,util/concurrent,com.google.common.util.concurrent,Class Monitor,public boolean enterIfInterruptibly(Monitor.Guard guard) throws InterruptedException,"Enters this monitor if the guard is satisfied. Blocks indefinitely acquiring the lock, but does not wait for the guard to be satisfied, and may be interrupted."
5225,util/concurrent,com.google.common.util.concurrent,Class Monitor,"public boolean enterIfInterruptibly(Monitor.Guard guard, Duration time) throws InterruptedException","Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the lock, but does not wait for the guard to be satisfied, and may be interrupted."
5226,util/concurrent,com.google.common.util.concurrent,Class Monitor,"public boolean enterIfInterruptibly(Monitor.Guard guard, long time, TimeUnit unit) throws InterruptedException","Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the lock, but does not wait for the guard to be satisfied, and may be interrupted."
5227,util/concurrent,com.google.common.util.concurrent,Class Monitor,public boolean tryEnterIf(Monitor.Guard guard),Enters this monitor if it is possible to do so immediately and the guard is satisfied. Does not block acquiring the lock and does not wait for the guard to be satisfied. Note: This method disregards the fairness setting of this monitor.
5228,util/concurrent,com.google.common.util.concurrent,Class Monitor,public void waitFor(Monitor.Guard guard) throws InterruptedException,"Waits for the guard to be satisfied. Waits indefinitely, but may be interrupted. May be called only by a thread currently occupying this monitor."
5229,util/concurrent,com.google.common.util.concurrent,Class Monitor,"public boolean waitFor(Monitor.Guard guard, Duration time) throws InterruptedException","Waits for the guard to be satisfied. Waits at most the given time, and may be interrupted. May be called only by a thread currently occupying this monitor."
5230,util/concurrent,com.google.common.util.concurrent,Class Monitor,"public boolean waitFor(Monitor.Guard guard, long time, TimeUnit unit) throws InterruptedException","Waits for the guard to be satisfied. Waits at most the given time, and may be interrupted. May be called only by a thread currently occupying this monitor."
5231,util/concurrent,com.google.common.util.concurrent,Class Monitor,public void waitForUninterruptibly(Monitor.Guard guard),Waits for the guard to be satisfied. Waits indefinitely. May be called only by a thread currently occupying this monitor.
5232,util/concurrent,com.google.common.util.concurrent,Class Monitor,"public boolean waitForUninterruptibly(Monitor.Guard guard, Duration time)",Waits for the guard to be satisfied. Waits at most the given time. May be called only by a thread currently occupying this monitor.
5233,util/concurrent,com.google.common.util.concurrent,Class Monitor,"public boolean waitForUninterruptibly(Monitor.Guard guard, long time, TimeUnit unit)",Waits for the guard to be satisfied. Waits at most the given time. May be called only by a thread currently occupying this monitor.
5234,util/concurrent,com.google.common.util.concurrent,Class Monitor,public void leave(),Leaves this monitor. May be called only by a thread currently occupying this monitor.
5235,util/concurrent,com.google.common.util.concurrent,Class Monitor,public boolean isFair(),Returns whether this monitor is using a fair ordering policy.
5236,util/concurrent,com.google.common.util.concurrent,Class Monitor,public boolean isOccupied(),"Returns whether this monitor is occupied by any thread. This method is designed for use in monitoring of the system state, not for synchronization control."
5237,util/concurrent,com.google.common.util.concurrent,Class Monitor,public boolean isOccupiedByCurrentThread(),Returns whether the current thread is occupying this monitor (has entered more times than it has left).
5238,util/concurrent,com.google.common.util.concurrent,Class Monitor,public int getOccupiedDepth(),Returns the number of times the current thread has entered this monitor in excess of the number of times it has left. Returns 0 if the current thread is not occupying this monitor.
5239,util/concurrent,com.google.common.util.concurrent,Class Monitor,public int getQueueLength(),"Returns an estimate of the number of threads waiting to enter this monitor. The value is only an estimate because the number of threads may change dynamically while this method traverses internal data structures. This method is designed for use in monitoring of the system state, not for synchronization control."
5240,util/concurrent,com.google.common.util.concurrent,Class Monitor,public boolean hasQueuedThreads(),"Returns whether any threads are waiting to enter this monitor. Note that because cancellations may occur at any time, a true return does not guarantee that any other thread will ever enter this monitor. This method is designed primarily for use in monitoring of the system state."
5241,util/concurrent,com.google.common.util.concurrent,Class Monitor,public boolean hasQueuedThread(Thread thread),"Queries whether the given thread is waiting to enter this monitor. Note that because cancellations may occur at any time, a true return does not guarantee that this thread will ever enter this monitor. This method is designed primarily for use in monitoring of the system state."
5242,util/concurrent,com.google.common.util.concurrent,Class Monitor,public boolean hasWaiters(Monitor.Guard guard),"Queries whether any threads are waiting for the given guard to become satisfied. Note that because timeouts and interrupts may occur at any time, a true return does not guarantee that the guard becoming satisfied in the future will awaken any threads. This method is designed primarily for use in monitoring of the system state."
5243,common/collect,com.google.common.collect,Class MoreCollectors,"public static <T> Collector<T,?,Optional<T>> toOptional()","A collector that converts a stream of zero or one elements to an Optional. The returned collector throws an IllegalArgumentException if the stream consists of two or more elements, and a NullPointerException if the stream consists of exactly one element, which is null."
5244,util/concurrent,com.google.common.util.concurrent,Class MoreExecutors,"@Beta @GwtIncompatiblepublic static ExecutorService getExitingExecutorService(ThreadPoolExecutor executor, Duration terminationTimeout)",Converts the given ThreadPoolExecutor into an ExecutorService that exits when the application is complete. It does so by using daemon threads and adding a shutdown hook to wait for their completion. This is mainly for fixed thread pools. See Executors.newFixedThreadPool(int).
5245,util/concurrent,com.google.common.util.concurrent,Class MoreExecutors,"@Beta @GwtIncompatiblepublic static ExecutorService getExitingExecutorService(ThreadPoolExecutor executor, long terminationTimeout, TimeUnit timeUnit)",Converts the given ThreadPoolExecutor into an ExecutorService that exits when the application is complete. It does so by using daemon threads and adding a shutdown hook to wait for their completion. This is mainly for fixed thread pools. See Executors.newFixedThreadPool(int).
5246,util/concurrent,com.google.common.util.concurrent,Class MoreExecutors,@Beta @GwtIncompatiblepublic static ExecutorService getExitingExecutorService(ThreadPoolExecutor executor),"Converts the given ThreadPoolExecutor into an ExecutorService that exits when the application is complete. It does so by using daemon threads and adding a shutdown hook to wait for their completion. This method waits 120 seconds before continuing with JVM termination, even if the executor has not finished its work. This is mainly for fixed thread pools. See Executors.newFixedThreadPool(int)."
5247,util/concurrent,com.google.common.util.concurrent,Class MoreExecutors,"@Beta @GwtIncompatiblepublic static ScheduledExecutorService getExitingScheduledExecutorService(ScheduledThreadPoolExecutor executor, Duration terminationTimeout)",Converts the given ScheduledThreadPoolExecutor into a ScheduledExecutorService that exits when the application is complete. It does so by using daemon threads and adding a shutdown hook to wait for their completion. This is mainly for fixed thread pools. See Executors.newScheduledThreadPool(int).
5248,util/concurrent,com.google.common.util.concurrent,Class MoreExecutors,"@Beta @GwtIncompatiblepublic static ScheduledExecutorService getExitingScheduledExecutorService(ScheduledThreadPoolExecutor executor, long terminationTimeout, TimeUnit timeUnit)",Converts the given ScheduledThreadPoolExecutor into a ScheduledExecutorService that exits when the application is complete. It does so by using daemon threads and adding a shutdown hook to wait for their completion. This is mainly for fixed thread pools. See Executors.newScheduledThreadPool(int).
5249,util/concurrent,com.google.common.util.concurrent,Class MoreExecutors,@Beta @GwtIncompatiblepublic static ScheduledExecutorService getExitingScheduledExecutorService(ScheduledThreadPoolExecutor executor),"Converts the given ScheduledThreadPoolExecutor into a ScheduledExecutorService that exits when the application is complete. It does so by using daemon threads and adding a shutdown hook to wait for their completion. This method waits 120 seconds before continuing with JVM termination, even if the executor has not finished its work. This is mainly for fixed thread pools. See Executors.newScheduledThreadPool(int)."
5250,util/concurrent,com.google.common.util.concurrent,Class MoreExecutors,"@Beta @GwtIncompatiblepublic static void addDelayedShutdownHook(ExecutorService service, Duration terminationTimeout)","Add a shutdown hook to wait for thread completion in the given service. This is useful if the given service uses daemon threads, and we want to keep the JVM from exiting immediately on shutdown, instead giving these daemon threads a chance to terminate normally."
5251,util/concurrent,com.google.common.util.concurrent,Class MoreExecutors,"@Beta @GwtIncompatiblepublic static void addDelayedShutdownHook(ExecutorService service, long terminationTimeout, TimeUnit timeUnit)","Add a shutdown hook to wait for thread completion in the given service. This is useful if the given service uses daemon threads, and we want to keep the JVM from exiting immediately on shutdown, instead giving these daemon threads a chance to terminate normally."
5252,util/concurrent,com.google.common.util.concurrent,Class MoreExecutors,@GwtIncompatiblepublic static ListeningExecutorService newDirectExecutorService(),"Creates an executor service that runs each task in the thread that invokes execute/submit, as in ThreadPoolExecutor.CallerRunsPolicy. This applies both to individually submitted tasks and to collections of tasks submitted via invokeAll or invokeAny. In the latter case, tasks will run serially on the calling thread. Tasks are run to completion before a Future is returned to the caller (unless the executor has been shutdown). Although all tasks are immediately executed in the thread that submitted the task, this ExecutorService imposes a small locking overhead on each task submission in order to implement shutdown and termination behavior. The implementation deviates from the ExecutorService specification with regards to the shutdownNow method. First, best-effort with regards to canceling running tasks is implemented as no-effort. No interrupts or other attempts are made to stop threads executing tasks. Second, the returned list will always be empty, as any submitted task is considered to have started execution. This applies also to tasks given to invokeAll or invokeAny which are pending serial execution, even the subset of the tasks that have not yet started execution. It is unclear from the ExecutorService specification if these should be included, and it's much easier to implement the interpretation that they not be. Finally, a call to shutdown or shutdownNow may result in concurrent calls to invokeAll/invokeAny throwing RejectedExecutionException, although a subset of the tasks may already have been executed."
5253,util/concurrent,com.google.common.util.concurrent,Class MoreExecutors,public static Executor directExecutor(),"Returns an Executor that runs each task in the thread that invokes execute, as in ThreadPoolExecutor.CallerRunsPolicy. This executor is appropriate for tasks that are lightweight and not deeply chained. Inappropriate directExecutor usage can cause problems, and these problems can be difficult to reproduce because they depend on timing. For example: A call like future.transform(function, directExecutor()) may execute the function immediately in the thread that is calling transform. (This specific case happens if the future is already completed.) If transform call was made from a UI thread or other latency-sensitive thread, a heavyweight function can harm responsiveness. If the task will be executed later, consider which thread will trigger the execution -- since that thread will execute the task inline. If the thread is a shared system thread like an RPC network thread, a heavyweight task can stall progress of the whole system or even deadlock it. If many tasks will be triggered by the same event, one heavyweight task may delay other tasks -- even tasks that are not themselves directExecutor tasks. If many such tasks are chained together (such as with future.transform(...).transform(...).transform(...)....), they may overflow the stack. (In simple cases, callers can avoid this by registering all tasks with the same newSequentialExecutor(java.util.concurrent.Executor) wrapper around directExecutor(). More complex cases may require using thread pools or making deeper changes.) Additionally, beware of executing tasks with directExecutor while holding a lock. Since the task you submit to the executor (or any other arbitrary work the executor does) may do slow work or acquire other locks, you risk deadlocks. This instance is equivalent to: final class DirectExecutor implements Executor { public void execute(Runnable r) { r.run(); } } This should be preferred to newDirectExecutorService() because implementing the ExecutorService subinterface necessitates significant performance overhead."
5254,util/concurrent,com.google.common.util.concurrent,Class MoreExecutors,@Beta @GwtIncompatiblepublic static Executor newSequentialExecutor(Executor delegate),"Returns an Executor that runs each task executed sequentially, such that no two tasks are running concurrently. Submitted tasks have a happens-before order as defined in the Java Language Specification. The executor uses delegate in order to execute each task in turn, and does not create any threads of its own. After execution begins on a thread from the delegate Executor, tasks are polled and executed from a task queue until there are no more tasks. The thread will not be released until there are no more tasks to run. If a task is submitted while a thread is executing tasks from the task queue, the thread will not be released until that submitted task is also complete. If a task is interrupted while a task is running: execution will not stop until the task queue is empty. tasks will begin execution with the thread marked as not interrupted - any interruption applies only to the task that was running at the point of interruption. if the thread was interrupted before the SequentialExecutor's worker begins execution, the interrupt will be restored to the thread after it completes so that its delegate Executor may process the interrupt. subtasks are run with the thread uninterrupted and interrupts received during execution of a task are ignored. RuntimeExceptions thrown by tasks are simply logged and the executor keeps trucking. If an Error is thrown, the error will propagate and execution will stop until the next time a task is submitted. When an Error is thrown by an executed task, previously submitted tasks may never run. An attempt will be made to restart execution on the next call to execute. If the delegate has begun to reject execution, the previously submitted tasks may never run, despite not throwing a RejectedExecutionException synchronously with the call to execute. If this behaviour is problematic, use an Executor with a single thread (e.g. Executors.newSingleThreadExecutor())."
5255,util/concurrent,com.google.common.util.concurrent,Class MoreExecutors,@GwtIncompatiblepublic static ListeningExecutorService listeningDecorator(ExecutorService delegate),"Creates an ExecutorService whose submit and invokeAll methods submit ListenableFutureTask instances to the given delegate executor. Those methods, as well as execute and invokeAny, are implemented in terms of calls to delegate.execute. All other methods are forwarded unchanged to the delegate. This implies that the returned ListeningExecutorService never calls the delegate's submit, invokeAll, and invokeAny methods, so any special handling of tasks must be implemented in the delegate's execute method or by wrapping the returned ListeningExecutorService. If the delegate executor was already an instance of ListeningExecutorService, it is returned untouched, and the rest of this documentation does not apply."
5256,util/concurrent,com.google.common.util.concurrent,Class MoreExecutors,@GwtIncompatiblepublic static ListeningScheduledExecutorService listeningDecorator(ScheduledExecutorService delegate),"Creates a ScheduledExecutorService whose submit and invokeAll methods submit ListenableFutureTask instances to the given delegate executor. Those methods, as well as execute and invokeAny, are implemented in terms of calls to delegate.execute. All other methods are forwarded unchanged to the delegate. This implies that the returned ListeningScheduledExecutorService never calls the delegate's submit, invokeAll, and invokeAny methods, so any special handling of tasks must be implemented in the delegate's execute method or by wrapping the returned ListeningScheduledExecutorService. If the delegate executor was already an instance of ListeningScheduledExecutorService, it is returned untouched, and the rest of this documentation does not apply."
5257,util/concurrent,com.google.common.util.concurrent,Class MoreExecutors,@Beta @GwtIncompatiblepublic static ThreadFactory platformThreadFactory(),"Returns a default thread factory used to create new threads. When running on AppEngine with access to AppEngine legacy APIs, this method returns ThreadManager.currentRequestThreadFactory(). Otherwise, it returns Executors.defaultThreadFactory()."
5258,util/concurrent,com.google.common.util.concurrent,Class MoreExecutors,"@Beta @CanIgnoreReturnValue @GwtIncompatiblepublic static boolean shutdownAndAwaitTermination(ExecutorService service, Duration timeout)","Shuts down the given executor service gradually, first disabling new submissions and later, if necessary, cancelling remaining tasks. The method takes the following steps: calls ExecutorService.shutdown(), disabling acceptance of new submitted tasks. awaits executor service termination for half of the specified timeout. if the timeout expires, it calls ExecutorService.shutdownNow(), cancelling pending tasks and interrupting running tasks. awaits executor service termination for the other half of the specified timeout. If, at any step of the process, the calling thread is interrupted, the method calls ExecutorService.shutdownNow() and returns."
5259,common/io,com.google.common.io,Class MoreFiles,"public static ByteSource asByteSource(Path path, OpenOption... options)",Returns a view of the given path as a ByteSource. Any open options provided are used when opening streams to the file and may affect the behavior of the returned source and the streams it provides. See StandardOpenOption for the standard options that may be provided. Providing no options is equivalent to providing the READ option.
5260,common/io,com.google.common.io,Class MoreFiles,"public static ByteSink asByteSink(Path path, OpenOption... options)","Returns a view of the given path as a ByteSink. Any open options provided are used when opening streams to the file and may affect the behavior of the returned sink and the streams it provides. See StandardOpenOption for the standard options that may be provided. Providing no options is equivalent to providing the CREATE, TRUNCATE_EXISTING and WRITE options."
5261,common/io,com.google.common.io,Class MoreFiles,"public static CharSource asCharSource(Path path, Charset charset, OpenOption... options)",Returns a view of the given path as a CharSource using the given charset. Any open options provided are used when opening streams to the file and may affect the behavior of the returned source and the streams it provides. See StandardOpenOption for the standard options that may be provided. Providing no options is equivalent to providing the READ option.
5262,common/io,com.google.common.io,Class MoreFiles,"public static CharSink asCharSink(Path path, Charset charset, OpenOption... options)","Returns a view of the given path as a CharSink using the given charset. Any open options provided are used when opening streams to the file and may affect the behavior of the returned sink and the streams it provides. See StandardOpenOption for the standard options that may be provided. Providing no options is equivalent to providing the CREATE, TRUNCATE_EXISTING and WRITE options."
5263,common/io,com.google.common.io,Class MoreFiles,public static ImmutableList<Path> listFiles(Path dir) throws IOException,Returns an immutable list of paths to the files contained in the given directory.
5264,common/io,com.google.common.io,Class MoreFiles,public static Traverser<Path> fileTraverser(),"Returns a Traverser instance for the file and directory tree. The returned traverser starts from a Path and will return all files and directories it encounters. The returned traverser attempts to avoid following symbolic links to directories. However, the traverser cannot guarantee that it will not follow symbolic links to directories as it is possible for a directory to be replaced with a symbolic link between checking if the file is a directory and actually reading the contents of that directory. If the Path passed to one of the traversal methods does not exist or is not a directory, no exception will be thrown and the returned Iterable will contain a single element: that path. DirectoryIteratorException may be thrown when iterating Iterable instances created by this traverser if an IOException is thrown by a call to listFiles(Path). Example: MoreFiles.fileTraverser().depthFirstPreOrder(Paths.get(/)) may return the following paths: [/, /etc, /etc/config.txt, /etc/fonts, /home, /home/alice, ...]"
5265,common/io,com.google.common.io,Class MoreFiles,public static Predicate<Path> isDirectory(LinkOption... options),"Returns a predicate that returns the result of Files.isDirectory(Path, LinkOption...) on input paths with the given link options."
5266,common/io,com.google.common.io,Class MoreFiles,public static Predicate<Path> isRegularFile(LinkOption... options),"Returns a predicate that returns the result of Files.isRegularFile(Path, LinkOption...) on input paths with the given link options."
5267,common/io,com.google.common.io,Class MoreFiles,"public static boolean equal(Path path1, Path path2) throws IOException","Returns true if the files located by the given paths exist, are not directories, and contain the same bytes."
5268,common/io,com.google.common.io,Class MoreFiles,public static void touch(Path path) throws IOException,"Like the unix command of the same name, creates an empty file or updates the last modified timestamp of the existing file at the given path to the current system time."
5269,common/io,com.google.common.io,Class MoreFiles,"public static void createParentDirectories(Path path, FileAttribute<?>... attrs) throws IOException","Creates any necessary but nonexistent parent directories of the specified path. Note that if this operation fails, it may have succeeded in creating some (but not all) of the necessary parent directories. The parent directory is created with the given attrs."
5270,common/io,com.google.common.io,Class MoreFiles,public static String getFileExtension(Path path),"Returns the file extension for the file at the given path, or the empty string if the file has no extension. The result does not include the '.'. Note: This method simply returns everything after the last '.' in the file's name as determined by Path.getFileName(). It does not account for any filesystem-specific behavior that the Path API does not already account for. For example, on NTFS it will report txt as the extension for the filename foo.exe:.txt even though NTFS will drop the :.txt part of the name when the file is actually created on the filesystem due to NTFS's Alternate Data Streams."
5271,common/io,com.google.common.io,Class MoreFiles,public static String getNameWithoutExtension(Path path),Returns the file name without its file extension or path. This is similar to the basename unix command. The result does not include the '.'.
5272,common/io,com.google.common.io,Class MoreFiles,"public static void deleteRecursively(Path path, RecursiveDeleteOption... options) throws IOException","Deletes the file or directory at the given path recursively. Deletes symbolic links, not their targets (subject to the caveat below). If an I/O exception occurs attempting to read, open or delete any file under the given directory, this method skips that file and continues. All such exceptions are collected and, after attempting to delete all files, an IOException is thrown containing those exceptions as suppressed exceptions. Warning: Security of recursive deletesOn a file system that supports symbolic links and does not support SecureDirectoryStream, it is possible for a recursive delete to delete files and directories that are outside the directory being deleted. This can happen if, after checking that a file is a directory (and not a symbolic link), that directory is replaced by a symbolic link to an outside directory before the call that opens the directory to read its entries. By default, this method throws InsecureRecursiveDeleteException if it can't guarantee the security of recursive deletes. If you wish to allow the recursive deletes anyway, pass RecursiveDeleteOption.ALLOW_INSECURE to this method to override that behavior."
5273,common/base,com.google.common.base,Class MoreObjects,"public static <T> T firstNonNull(T first, T second)","Returns the first of two given parameters that is not null, if either is, or otherwise throws a NullPointerException. To find the first non-null element in an iterable, use Iterables.find(iterable, Predicates.notNull()). For varargs, use Iterables.find(Arrays.asList(a, b, c, ...), Predicates.notNull()), static importing as necessary. Note: if first is represented as an Optional, this can be accomplished with first.or(second). That approach also allows for lazy evaluation of the fallback instance, using first.or(supplier). Java 9 users: use java.util.Objects.requireNonNullElse(first, second) instead."
5274,common/base,com.google.common.base,Class MoreObjects,public static MoreObjects.ToStringHelper toStringHelper(Object self),"Creates an instance of MoreObjects.ToStringHelper. This is helpful for implementing Object.toString(). Specification by example: // Returns ClassName{} MoreObjects.toStringHelper(this) .toString(); // Returns ClassName{x=1} MoreObjects.toStringHelper(this) .add(x, 1) .toString(); // Returns MyObject{x=1} MoreObjects.toStringHelper(MyObject) .add(x, 1) .toString(); // Returns ClassName{x=1, y=foo} MoreObjects.toStringHelper(this) .add(x, 1) .add(y, foo) .toString(); // Returns ClassName{x=1} MoreObjects.toStringHelper(this) .omitNullValues() .add(x, 1) .add(y, null) .toString(); Note that in GWT, class names are often obfuscated."
5275,common/base,com.google.common.base,Class MoreObjects,public static MoreObjects.ToStringHelper toStringHelper(Class<?> clazz),"Creates an instance of MoreObjects.ToStringHelper in the same manner as toStringHelper(Object), but using the simple name of clazz instead of using an instance's Object.getClass(). Note that in GWT, class names are often obfuscated."
5276,common/base,com.google.common.base,Class MoreObjects.ToStringHelper,@CanIgnoreReturnValuepublic MoreObjects.ToStringHelper omitNullValues(),"Configures the MoreObjects.ToStringHelper so toString() will ignore properties with null value. The order of calling this method, relative to the add()/addValue() methods, is not significant."
5277,common/base,com.google.common.base,Class MoreObjects.ToStringHelper,"@CanIgnoreReturnValuepublic MoreObjects.ToStringHelper add(String name, @Nullable Object value)","Adds a name/value pair to the formatted output in name=value format. If value is null, the string null is used, unless omitNullValues() is called, in which case this name/value pair will not be added."
5278,common/base,com.google.common.base,Class MoreObjects.ToStringHelper,"@CanIgnoreReturnValuepublic MoreObjects.ToStringHelper add(String name, boolean value)",Adds a name/value pair to the formatted output in name=value format.
5279,common/base,com.google.common.base,Class MoreObjects.ToStringHelper,"@CanIgnoreReturnValuepublic MoreObjects.ToStringHelper add(String name, char value)",Adds a name/value pair to the formatted output in name=value format.
5280,common/base,com.google.common.base,Class MoreObjects.ToStringHelper,"@CanIgnoreReturnValuepublic MoreObjects.ToStringHelper add(String name, double value)",Adds a name/value pair to the formatted output in name=value format.
5281,common/base,com.google.common.base,Class MoreObjects.ToStringHelper,"@CanIgnoreReturnValuepublic MoreObjects.ToStringHelper add(String name, float value)",Adds a name/value pair to the formatted output in name=value format.
5282,common/base,com.google.common.base,Class MoreObjects.ToStringHelper,"@CanIgnoreReturnValuepublic MoreObjects.ToStringHelper add(String name, int value)",Adds a name/value pair to the formatted output in name=value format.
5283,common/base,com.google.common.base,Class MoreObjects.ToStringHelper,"@CanIgnoreReturnValuepublic MoreObjects.ToStringHelper add(String name, long value)",Adds a name/value pair to the formatted output in name=value format.
5284,common/base,com.google.common.base,Class MoreObjects.ToStringHelper,@CanIgnoreReturnValuepublic MoreObjects.ToStringHelper addValue(@Nullable Object value),"Adds an unnamed value to the formatted output. It is strongly encouraged to use add(String, Object) instead and give value a readable name."
5285,common/base,com.google.common.base,Class MoreObjects.ToStringHelper,@CanIgnoreReturnValuepublic MoreObjects.ToStringHelper addValue(boolean value),"Adds an unnamed value to the formatted output. It is strongly encouraged to use add(String, boolean) instead and give value a readable name."
5286,common/base,com.google.common.base,Class MoreObjects.ToStringHelper,@CanIgnoreReturnValuepublic MoreObjects.ToStringHelper addValue(char value),"Adds an unnamed value to the formatted output. It is strongly encouraged to use add(String, char) instead and give value a readable name."
5287,common/base,com.google.common.base,Class MoreObjects.ToStringHelper,@CanIgnoreReturnValuepublic MoreObjects.ToStringHelper addValue(double value),"Adds an unnamed value to the formatted output. It is strongly encouraged to use add(String, double) instead and give value a readable name."
5288,common/base,com.google.common.base,Class MoreObjects.ToStringHelper,@CanIgnoreReturnValuepublic MoreObjects.ToStringHelper addValue(float value),"Adds an unnamed value to the formatted output. It is strongly encouraged to use add(String, float) instead and give value a readable name."
5289,common/base,com.google.common.base,Class MoreObjects.ToStringHelper,@CanIgnoreReturnValuepublic MoreObjects.ToStringHelper addValue(int value),"Adds an unnamed value to the formatted output. It is strongly encouraged to use add(String, int) instead and give value a readable name."
5290,common/base,com.google.common.base,Class MoreObjects.ToStringHelper,@CanIgnoreReturnValuepublic MoreObjects.ToStringHelper addValue(long value),"Adds an unnamed value to the formatted output. It is strongly encouraged to use add(String, long) instead and give value a readable name."
5291,common/collect,com.google.common.collect,"Interface Multimap<K,V>",int size(),"Returns the number of key-value pairs in this multimap. Note: this method does not return the number of distinct keys in the multimap, which is given by keySet().size() or asMap().size(). See the opening section of the Multimap class documentation for clarification."
5292,common/collect,com.google.common.collect,"Interface Multimap<K,V>",boolean isEmpty(),"Returns true if this multimap contains no key-value pairs. Equivalent to size() == 0, but can in some cases be more efficient."
5293,common/collect,com.google.common.collect,"Interface Multimap<K,V>","boolean containsKey(@CompatibleWith(value=""K"") @Nullable Object key)",Returns true if this multimap contains at least one key-value pair with the key key.
5294,common/collect,com.google.common.collect,"Interface Multimap<K,V>","boolean containsValue(@CompatibleWith(value=""V"") @Nullable Object value)",Returns true if this multimap contains at least one key-value pair with the value value.
5295,common/collect,com.google.common.collect,"Interface Multimap<K,V>","boolean containsEntry(@CompatibleWith(value=""K"") @Nullable Object key, @CompatibleWith(value=""V"") @Nullable Object value)",Returns true if this multimap contains at least one key-value pair with the key key and the value value.
5296,common/collect,com.google.common.collect,"Interface Multimap<K,V>","@CanIgnoreReturnValueboolean put(K key, V value)","Stores a key-value pair in this multimap. Some multimap implementations allow duplicate key-value pairs, in which case put always adds a new key-value pair and increases the multimap size by 1. Other implementations prohibit duplicates, and storing a key-value pair that's already in the multimap has no effect."
5297,common/collect,com.google.common.collect,"Interface Multimap<K,V>","@CanIgnoreReturnValueboolean remove(@CompatibleWith(value=""K"") @Nullable Object key, @CompatibleWith(value=""V"") @Nullable Object value)","Removes a single key-value pair with the key key and the value value from this multimap, if such exists. If multiple key-value pairs in the multimap fit this description, which one is removed is unspecified."
5298,common/collect,com.google.common.collect,"Interface Multimap<K,V>","@CanIgnoreReturnValueboolean putAll(K key, Iterable<? extends V> values)","Stores a key-value pair in this multimap for each of values, all using the same key, key. Equivalent to (but expected to be more efficient than): for (V value : values) { put(key, value); } In particular, this is a no-op if values is empty."
5299,common/collect,com.google.common.collect,"Interface Multimap<K,V>","@CanIgnoreReturnValueboolean putAll(Multimap<? extends K,? extends V> multimap)","Stores all key-value pairs of multimap in this multimap, in the order returned by multimap.entries()."
5300,common/collect,com.google.common.collect,"Interface Multimap<K,V>","@CanIgnoreReturnValueCollection<V> replaceValues(K key, Iterable<? extends V> values)","Stores a collection of values with the same key, replacing any existing values for that key. If values is empty, this is equivalent to removeAll(key)."
5301,common/collect,com.google.common.collect,"Interface Multimap<K,V>","@CanIgnoreReturnValueCollection<V> removeAll(@CompatibleWith(value=""K"") @Nullable Object key)","Removes all values associated with the key key. Once this method returns, key will not be mapped to any values, so it will not appear in keySet(), asMap(), or any other views."
5302,common/collect,com.google.common.collect,"Interface Multimap<K,V>",void clear(),"Removes all key-value pairs from the multimap, leaving it empty."
5303,common/collect,com.google.common.collect,"Interface Multimap<K,V>",Collection<V> get(K key),"Returns a view collection of the values associated with key in this multimap, if any. Note that when containsKey(key) is false, this returns an empty collection, not null. Changes to the returned collection will update the underlying multimap, and vice versa."
5304,common/collect,com.google.common.collect,"Interface Multimap<K,V>",Set<K> keySet(),"Returns a view collection of all distinct keys contained in this multimap. Note that the key set contains a key if and only if this multimap maps that key to at least one value. Changes to the returned set will update the underlying multimap, and vice versa. However, adding to the returned set is not possible."
5305,common/collect,com.google.common.collect,"Interface Multimap<K,V>",Multiset<K> keys(),"Returns a view collection containing the key from each key-value pair in this multimap, without collapsing duplicates. This collection has the same size as this multimap, and keys().count(k) == get(k).size() for all k. Changes to the returned multiset will update the underlying multimap, and vice versa. However, adding to the returned collection is not possible."
5306,common/collect,com.google.common.collect,"Interface Multimap<K,V>",Collection<V> values(),"Returns a view collection containing the value from each key-value pair contained in this multimap, without collapsing duplicates (so values().size() == size()). Changes to the returned collection will update the underlying multimap, and vice versa. However, adding to the returned collection is not possible."
5307,common/collect,com.google.common.collect,"Interface Multimap<K,V>","Collection<Map.Entry<K,V>> entries()","Returns a view collection of all key-value pairs contained in this multimap, as Map.Entry instances. Changes to the returned collection or the entries it contains will update the underlying multimap, and vice versa. However, adding to the returned collection is not possible."
5308,common/collect,com.google.common.collect,"Interface Multimap<K,V>","default void forEach(BiConsumer<? super K,? super V> action)","Performs the given action for all key-value pairs contained in this multimap. If an ordering is specified by the Multimap implementation, actions will be performed in the order of iteration of entries(). Exceptions thrown by the action are relayed to the caller. To loop over all keys and their associated value collections, write Multimaps.asMap(multimap).forEach((key, valueCollection) -> action())."
5309,common/collect,com.google.common.collect,"Interface Multimap<K,V>","Map<K,Collection<V>> asMap()","Returns a view of this multimap as a Map from each distinct key to the nonempty collection of that key's associated values. Note that this.asMap().get(k) is equivalent to this.get(k) only when k is a key contained in the multimap; otherwise it returns null as opposed to an empty collection. Changes to the returned map or the collections that serve as its values will update the underlying multimap, and vice versa. The map does not support put or putAll, nor do its entries support setValue."
5310,common/collect,com.google.common.collect,"Interface Multimap<K,V>",boolean equals(@Nullable Object obj),"Compares the specified object with this multimap for equality. Two multimaps are equal when their map views, as returned by asMap(), are also equal. In general, two multimaps with identical key-value mappings may or may not be equal, depending on the implementation. For example, two SetMultimap instances with the same key-value mappings are equal, but equality of two ListMultimap instances depends on the ordering of the values for each key. A non-empty SetMultimap cannot be equal to a non-empty ListMultimap, since their asMap() views contain unequal collections as values. However, any two empty multimaps are equal, because they both have empty asMap() views."
5311,common/collect,com.google.common.collect,"Class MultimapBuilder<K0,V0>",public static MultimapBuilder.MultimapBuilderWithKeys<Object> hashKeys(),Uses a hash table to map keys to value collections.
5312,common/collect,com.google.common.collect,"Class MultimapBuilder<K0,V0>",public static MultimapBuilder.MultimapBuilderWithKeys<Object> hashKeys(int expectedKeys),"Uses a hash table to map keys to value collections, initialized to expect the specified number of keys."
5313,common/collect,com.google.common.collect,"Class MultimapBuilder<K0,V0>",public static MultimapBuilder.MultimapBuilderWithKeys<Object> linkedHashKeys(),"Uses a hash table to map keys to value collections. The collections returned by Multimap.keySet(), Multimap.keys(), and Multimap.asMap() will iterate through the keys in the order that they were first added to the multimap, save that if all values associated with a key are removed and then the key is added back into the multimap, that key will come last in the key iteration order."
5314,common/collect,com.google.common.collect,"Class MultimapBuilder<K0,V0>",public static MultimapBuilder.MultimapBuilderWithKeys<Object> linkedHashKeys(int expectedKeys),"Uses an hash table to map keys to value collections, initialized to expect the specified number of keys. The collections returned by Multimap.keySet(), Multimap.keys(), and Multimap.asMap() will iterate through the keys in the order that they were first added to the multimap, save that if all values associated with a key are removed and then the key is added back into the multimap, that key will come last in the key iteration order."
5315,common/collect,com.google.common.collect,"Class MultimapBuilder<K0,V0>",public static MultimapBuilder.MultimapBuilderWithKeys<Comparable> treeKeys(),"Uses a naturally-ordered TreeMap to map keys to value collections. The collections returned by Multimap.keySet(), Multimap.keys(), and Multimap.asMap() will iterate through the keys in sorted order. For all multimaps generated by the resulting builder, the Multimap.keySet() can be safely cast to a SortedSet, and the Multimap.asMap() can safely be cast to a SortedMap."
5316,common/collect,com.google.common.collect,"Class MultimapBuilder<K0,V0>",public static <K0> MultimapBuilder.MultimapBuilderWithKeys<K0> treeKeys(Comparator<K0> comparator),"Uses a TreeMap sorted by the specified comparator to map keys to value collections. The collections returned by Multimap.keySet(), Multimap.keys(), and Multimap.asMap() will iterate through the keys in sorted order. For all multimaps generated by the resulting builder, the Multimap.keySet() can be safely cast to a SortedSet, and the Multimap.asMap() can safely be cast to a SortedMap. Multimaps generated by the resulting builder will not be serializable if comparator is not serializable."
5317,common/collect,com.google.common.collect,"Class MultimapBuilder<K0,V0>",public static <K0 extends Enum<K0>> MultimapBuilder.MultimapBuilderWithKeys<K0> enumKeys(Class<K0> keyClass),Uses an EnumMap to map keys to value collections.
5318,common/collect,com.google.common.collect,"Class MultimapBuilder<K0,V0>","public abstract <K extends K0,V extends V0> Multimap<K,V> build()","Returns a new, empty Multimap with the specified implementation."
5319,common/collect,com.google.common.collect,"Class MultimapBuilder.ListMultimapBuilder<K0,V0>","public abstract <K extends K0,V extends V0> ListMultimap<K,V> build()",Description copied from class: MultimapBuilder
5320,common/collect,com.google.common.collect,Class MultimapBuilder.MultimapBuilderWithKeys<K0>,"public MultimapBuilder.ListMultimapBuilder<K0,Object> arrayListValues()",Uses an ArrayList to store value collections.
5321,common/collect,com.google.common.collect,Class MultimapBuilder.MultimapBuilderWithKeys<K0>,"public MultimapBuilder.ListMultimapBuilder<K0,Object> arrayListValues(int expectedValuesPerKey)","Uses an ArrayList to store value collections, initialized to expect the specified number of values per key."
5322,common/collect,com.google.common.collect,Class MultimapBuilder.MultimapBuilderWithKeys<K0>,"public MultimapBuilder.ListMultimapBuilder<K0,Object> linkedListValues()",Uses a LinkedList to store value collections.
5323,common/collect,com.google.common.collect,Class MultimapBuilder.MultimapBuilderWithKeys<K0>,"public MultimapBuilder.SetMultimapBuilder<K0,Object> hashSetValues()",Uses a hash-based Set to store value collections.
5324,common/collect,com.google.common.collect,Class MultimapBuilder.MultimapBuilderWithKeys<K0>,"public MultimapBuilder.SetMultimapBuilder<K0,Object> hashSetValues(int expectedValuesPerKey)","Uses a hash-based Set to store value collections, initialized to expect the specified number of values per key."
5325,common/collect,com.google.common.collect,Class MultimapBuilder.MultimapBuilderWithKeys<K0>,"public MultimapBuilder.SetMultimapBuilder<K0,Object> linkedHashSetValues()",Uses an insertion-ordered hash-based Set to store value collections.
5326,common/collect,com.google.common.collect,Class MultimapBuilder.MultimapBuilderWithKeys<K0>,"public MultimapBuilder.SetMultimapBuilder<K0,Object> linkedHashSetValues(int expectedValuesPerKey)","Uses an insertion-ordered hash-based Set to store value collections, initialized to expect the specified number of values per key."
5327,common/collect,com.google.common.collect,Class MultimapBuilder.MultimapBuilderWithKeys<K0>,"public MultimapBuilder.SortedSetMultimapBuilder<K0,Comparable> treeSetValues()",Uses a naturally-ordered TreeSet to store value collections.
5328,common/collect,com.google.common.collect,Class MultimapBuilder.MultimapBuilderWithKeys<K0>,"public <V0> MultimapBuilder.SortedSetMultimapBuilder<K0,V0> treeSetValues(Comparator<V0> comparator)",Uses a TreeSet ordered by the specified comparator to store value collections. Multimaps generated by the resulting builder will not be serializable if comparator is not serializable.
5329,common/collect,com.google.common.collect,"Class MultimapBuilder.SetMultimapBuilder<K0,V0>","public abstract <K extends K0,V extends V0> SetMultimap<K,V> build()",Description copied from class: MultimapBuilder
5330,common/collect,com.google.common.collect,"Class MultimapBuilder.SortedSetMultimapBuilder<K0,V0>","public abstract <K extends K0,V extends V0> SortedSetMultimap<K,V> build()",Description copied from class: MultimapBuilder
5331,common/collect,com.google.common.collect,Class Multimaps,"public static <T,K,V,M extends Multimap<K,V>> Collector<T,?,M> toMultimap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction, Supplier<M> multimapSupplier)","Returns a Collector accumulating entries into a Multimap generated from the specified supplier. The keys and values of the entries are the result of applying the provided mapping functions to the input elements, accumulated in the encounter order of the stream. Example: static final ListMultimap<Character, String> FIRST_LETTER_MULTIMAP = Stream.of(banana, apple, carrot, asparagus, cherry) .collect( toMultimap( str -> str.charAt(0), str -> str.substring(1), MultimapBuilder.treeKeys().arrayListValues()::build)); // is equivalent to static final ListMultimap<Character, String> FIRST_LETTER_MULTIMAP; static { FIRST_LETTER_MULTIMAP = MultimapBuilder.treeKeys().arrayListValues().build(); FIRST_LETTER_MULTIMAP.put('b', anana); FIRST_LETTER_MULTIMAP.put('a', pple); FIRST_LETTER_MULTIMAP.put('a', sparagus); FIRST_LETTER_MULTIMAP.put('c', arrot); FIRST_LETTER_MULTIMAP.put('c', herry); } "
5332,common/collect,com.google.common.collect,Class Multimaps,"@Betapublic static <T,K,V,M extends Multimap<K,V>> Collector<T,?,M> flatteningToMultimap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends Stream<? extends V>> valueFunction, Supplier<M> multimapSupplier)","Returns a Collector accumulating entries into a Multimap generated from the specified supplier. Each input element is mapped to a key and a stream of values, each of which are put into the resulting Multimap, in the encounter order of the stream and the encounter order of the streams of values. Example: static final ListMultimap<Character, Character> FIRST_LETTER_MULTIMAP = Stream.of(banana, apple, carrot, asparagus, cherry) .collect( flatteningToMultimap( str -> str.charAt(0), str -> str.substring(1).chars().mapToObj(c -> (char) c), MultimapBuilder.linkedHashKeys().arrayListValues()::build)); // is equivalent to static final ListMultimap<Character, Character> FIRST_LETTER_MULTIMAP; static { FIRST_LETTER_MULTIMAP = MultimapBuilder.linkedHashKeys().arrayListValues().build(); FIRST_LETTER_MULTIMAP.putAll('b', Arrays.asList('a', 'n', 'a', 'n', 'a')); FIRST_LETTER_MULTIMAP.putAll('a', Arrays.asList('p', 'p', 'l', 'e')); FIRST_LETTER_MULTIMAP.putAll('c', Arrays.asList('a', 'r', 'r', 'o', 't')); FIRST_LETTER_MULTIMAP.putAll('a', Arrays.asList('s', 'p', 'a', 'r', 'a', 'g', 'u', 's')); FIRST_LETTER_MULTIMAP.putAll('c', Arrays.asList('h', 'e', 'r', 'r', 'y')); } "
5333,common/collect,com.google.common.collect,Class Multimaps,"public static <K,V> Multimap<K,V> newMultimap(Map<K,Collection<V>> map, Supplier<? extends Collection<V>> factory)","Creates a new Multimap backed by map, whose internal value collections are generated by factory. Warning: do not use this method when the collections returned by factory implement either List or Set! Use the more specific method newListMultimap(java.util.Map<K, java.util.Collection<V>>, com.google.common.base.Supplier<? extends java.util.List<V>>), newSetMultimap(java.util.Map<K, java.util.Collection<V>>, com.google.common.base.Supplier<? extends java.util.Set<V>>) or newSortedSetMultimap(java.util.Map<K, java.util.Collection<V>>, com.google.common.base.Supplier<? extends java.util.SortedSet<V>>) instead, to avoid very surprising behavior from Multimap.equals(java.lang.Object). The factory-generated and map classes determine the multimap iteration order. They also specify the behavior of the equals, hashCode, and toString methods for the multimap and its returned views. However, the multimap's get method returns instances of a different class than factory.get() does. The multimap is serializable if map, factory, the collections generated by factory, and the multimap contents are all serializable. The multimap is not threadsafe when any concurrent operations update the multimap, even if map and the instances generated by factory are. Concurrent read operations will work correctly. To allow concurrent update operations, wrap the multimap with a call to synchronizedMultimap(com.google.common.collect.Multimap<K, V>). Call this method only when the simpler methods ArrayListMultimap.create(), HashMultimap.create(), LinkedHashMultimap.create(), LinkedListMultimap.create(), TreeMultimap.create(), and TreeMultimap.create(Comparator, Comparator) won't suffice. Note: the multimap assumes complete ownership over of map and the collections returned by factory. Those objects should not be manually updated and they should not use soft, weak, or phantom references."
5334,common/collect,com.google.common.collect,Class Multimaps,"public static <K,V> ListMultimap<K,V> newListMultimap(Map<K,Collection<V>> map, Supplier<? extends List<V>> factory)","Creates a new ListMultimap that uses the provided map and factory. It can generate a multimap based on arbitrary Map and List classes. The factory-generated and map classes determine the multimap iteration order. They also specify the behavior of the equals, hashCode, and toString methods for the multimap and its returned views. The multimap's get, removeAll, and replaceValues methods return RandomAccess lists if the factory does. However, the multimap's get method returns instances of a different class than does factory.get(). The multimap is serializable if map, factory, the lists generated by factory, and the multimap contents are all serializable. The multimap is not threadsafe when any concurrent operations update the multimap, even if map and the instances generated by factory are. Concurrent read operations will work correctly. To allow concurrent update operations, wrap the multimap with a call to synchronizedListMultimap(com.google.common.collect.ListMultimap<K, V>). Call this method only when the simpler methods ArrayListMultimap.create() and LinkedListMultimap.create() won't suffice. Note: the multimap assumes complete ownership over of map and the lists returned by factory. Those objects should not be manually updated, they should be empty when provided, and they should not use soft, weak, or phantom references."
5335,common/collect,com.google.common.collect,Class Multimaps,"public static <K,V> SetMultimap<K,V> newSetMultimap(Map<K,Collection<V>> map, Supplier<? extends Set<V>> factory)","Creates a new SetMultimap that uses the provided map and factory. It can generate a multimap based on arbitrary Map and Set classes. The factory-generated and map classes determine the multimap iteration order. They also specify the behavior of the equals, hashCode, and toString methods for the multimap and its returned views. However, the multimap's get method returns instances of a different class than factory.get() does. The multimap is serializable if map, factory, the sets generated by factory, and the multimap contents are all serializable. The multimap is not threadsafe when any concurrent operations update the multimap, even if map and the instances generated by factory are. Concurrent read operations will work correctly. To allow concurrent update operations, wrap the multimap with a call to synchronizedSetMultimap(com.google.common.collect.SetMultimap<K, V>). Call this method only when the simpler methods HashMultimap.create(), LinkedHashMultimap.create(), TreeMultimap.create(), and TreeMultimap.create(Comparator, Comparator) won't suffice. Note: the multimap assumes complete ownership over of map and the sets returned by factory. Those objects should not be manually updated and they should not use soft, weak, or phantom references."
5336,common/collect,com.google.common.collect,Class Multimaps,"public static <K,V> SortedSetMultimap<K,V> newSortedSetMultimap(Map<K,Collection<V>> map, Supplier<? extends SortedSet<V>> factory)","Creates a new SortedSetMultimap that uses the provided map and factory. It can generate a multimap based on arbitrary Map and SortedSet classes. The factory-generated and map classes determine the multimap iteration order. They also specify the behavior of the equals, hashCode, and toString methods for the multimap and its returned views. However, the multimap's get method returns instances of a different class than factory.get() does. The multimap is serializable if map, factory, the sets generated by factory, and the multimap contents are all serializable. The multimap is not threadsafe when any concurrent operations update the multimap, even if map and the instances generated by factory are. Concurrent read operations will work correctly. To allow concurrent update operations, wrap the multimap with a call to synchronizedSortedSetMultimap(com.google.common.collect.SortedSetMultimap<K, V>). Call this method only when the simpler methods TreeMultimap.create() and TreeMultimap.create(Comparator, Comparator) won't suffice. Note: the multimap assumes complete ownership over of map and the sets returned by factory. Those objects should not be manually updated and they should not use soft, weak, or phantom references."
5337,common/collect,com.google.common.collect,Class Multimaps,"@CanIgnoreReturnValuepublic static <K,V,M extends Multimap<K,V>> M invertFrom(Multimap<? extends V,? extends K> source, M dest)","Copies each key-value mapping in source into dest, with its key and value reversed. If source is an ImmutableMultimap, consider using ImmutableMultimap.inverse() instead."
5338,common/collect,com.google.common.collect,Class Multimaps,"public static <K,V> Multimap<K,V> synchronizedMultimap(Multimap<K,V> multimap)","Returns a synchronized (thread-safe) multimap backed by the specified multimap. In order to guarantee serial access, it is critical that all access to the backing multimap is accomplished through the returned multimap. It is imperative that the user manually synchronize on the returned multimap when accessing any of its collection views: Multimap<K, V> multimap = Multimaps.synchronizedMultimap( HashMultimap.<K, V>create()); ... Collection<V> values = multimap.get(key); // Needn't be in synchronized block ... synchronized (multimap) { // Synchronizing on multimap, not values! Iterator<V> i = values.iterator(); // Must be in synchronized block while (i.hasNext()) { foo(i.next()); } } Failure to follow this advice may result in non-deterministic behavior. Note that the generated multimap's Multimap.removeAll(java.lang.Object) and Multimap.replaceValues(K, java.lang.Iterable<? extends V>) methods return collections that aren't synchronized. The returned multimap will be serializable if the specified multimap is serializable."
5339,common/collect,com.google.common.collect,Class Multimaps,"public static <K,V> Multimap<K,V> unmodifiableMultimap(Multimap<K,V> delegate)","Returns an unmodifiable view of the specified multimap. Query operations on the returned multimap read through to the specified multimap, and attempts to modify the returned multimap, either directly or through the multimap's views, result in an UnsupportedOperationException. The returned multimap will be serializable if the specified multimap is serializable."
5340,common/collect,com.google.common.collect,Class Multimaps,"@Deprecatedpublic static <K,V> Multimap<K,V> unmodifiableMultimap(ImmutableMultimap<K,V> delegate)",Deprecated. no need to use this
5341,common/collect,com.google.common.collect,Class Multimaps,"public static <K,V> SetMultimap<K,V> synchronizedSetMultimap(SetMultimap<K,V> multimap)","Returns a synchronized (thread-safe) SetMultimap backed by the specified multimap. You must follow the warnings described in synchronizedMultimap(com.google.common.collect.Multimap<K, V>). The returned multimap will be serializable if the specified multimap is serializable."
5342,common/collect,com.google.common.collect,Class Multimaps,"public static <K,V> SetMultimap<K,V> unmodifiableSetMultimap(SetMultimap<K,V> delegate)","Returns an unmodifiable view of the specified SetMultimap. Query operations on the returned multimap read through to the specified multimap, and attempts to modify the returned multimap, either directly or through the multimap's views, result in an UnsupportedOperationException. The returned multimap will be serializable if the specified multimap is serializable."
5343,common/collect,com.google.common.collect,Class Multimaps,"@Deprecatedpublic static <K,V> SetMultimap<K,V> unmodifiableSetMultimap(ImmutableSetMultimap<K,V> delegate)",Deprecated. no need to use this
5344,common/collect,com.google.common.collect,Class Multimaps,"public static <K,V> SortedSetMultimap<K,V> synchronizedSortedSetMultimap(SortedSetMultimap<K,V> multimap)","Returns a synchronized (thread-safe) SortedSetMultimap backed by the specified multimap. You must follow the warnings described in synchronizedMultimap(com.google.common.collect.Multimap<K, V>). The returned multimap will be serializable if the specified multimap is serializable."
5345,common/collect,com.google.common.collect,Class Multimaps,"public static <K,V> SortedSetMultimap<K,V> unmodifiableSortedSetMultimap(SortedSetMultimap<K,V> delegate)","Returns an unmodifiable view of the specified SortedSetMultimap. Query operations on the returned multimap read through to the specified multimap, and attempts to modify the returned multimap, either directly or through the multimap's views, result in an UnsupportedOperationException. The returned multimap will be serializable if the specified multimap is serializable."
5346,common/collect,com.google.common.collect,Class Multimaps,"public static <K,V> ListMultimap<K,V> synchronizedListMultimap(ListMultimap<K,V> multimap)","Returns a synchronized (thread-safe) ListMultimap backed by the specified multimap. You must follow the warnings described in synchronizedMultimap(com.google.common.collect.Multimap<K, V>)."
5347,common/collect,com.google.common.collect,Class Multimaps,"public static <K,V> ListMultimap<K,V> unmodifiableListMultimap(ListMultimap<K,V> delegate)","Returns an unmodifiable view of the specified ListMultimap. Query operations on the returned multimap read through to the specified multimap, and attempts to modify the returned multimap, either directly or through the multimap's views, result in an UnsupportedOperationException. The returned multimap will be serializable if the specified multimap is serializable."
5348,common/collect,com.google.common.collect,Class Multimaps,"@Deprecatedpublic static <K,V> ListMultimap<K,V> unmodifiableListMultimap(ImmutableListMultimap<K,V> delegate)",Deprecated. no need to use this
5349,common/collect,com.google.common.collect,Class Multimaps,"@Betapublic static <K,V> Map<K,List<V>> asMap(ListMultimap<K,V> multimap)","Returns multimap.asMap(), with its type corrected from Map<K, Collection<V>> to Map<K, List<V>>."
5350,common/collect,com.google.common.collect,Class Multimaps,"@Betapublic static <K,V> Map<K,Set<V>> asMap(SetMultimap<K,V> multimap)","Returns multimap.asMap(), with its type corrected from Map<K, Collection<V>> to Map<K, Set<V>>."
5351,common/collect,com.google.common.collect,Class Multimaps,"@Betapublic static <K,V> Map<K,SortedSet<V>> asMap(SortedSetMultimap<K,V> multimap)","Returns multimap.asMap(), with its type corrected from Map<K, Collection<V>> to Map<K, SortedSet<V>>."
5352,common/collect,com.google.common.collect,Class Multimaps,"@Betapublic static <K,V> Map<K,Collection<V>> asMap(Multimap<K,V> multimap)",Returns multimap.asMap(). This is provided for parity with the other more strongly-typed asMap() implementations.
5353,common/collect,com.google.common.collect,Class Multimaps,"public static <K,V> SetMultimap<K,V> forMap(Map<K,V> map)","Returns a multimap view of the specified map. The multimap is backed by the map, so changes to the map are reflected in the multimap, and vice versa. If the map is modified while an iteration over one of the multimap's collection views is in progress (except through the iterator's own remove operation, or through the setValue operation on a map entry returned by the iterator), the results of the iteration are undefined. The multimap supports mapping removal, which removes the corresponding mapping from the map. It does not support any operations which might add mappings, such as put, putAll or replaceValues. The returned multimap will be serializable if the specified map is serializable."
5354,common/collect,com.google.common.collect,Class Multimaps,"public static <K,V1,V2> Multimap<K,V2> transformValues(Multimap<K,V1> fromMultimap, Function<? super V1,V2> function)","Returns a view of a multimap where each value is transformed by a function. All other properties of the multimap, such as iteration order, are left intact. For example, the code: Multimap<String, Integer> multimap = ImmutableSetMultimap.of(a, 2, b, -3, b, -3, a, 4, c, 6); Function<Integer, String> square = new Function<Integer, String>() { public String apply(Integer in) { return Integer.toString(in * in); } }; Multimap<String, String> transformed = Multimaps.transformValues(multimap, square); System.out.println(transformed); ... prints {a=[4, 16], b=[9, 9], c=[36]}. Changes in the underlying multimap are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying multimap. It's acceptable for the underlying multimap to contain null keys, and even null values provided that the function is capable of accepting null input. The transformed multimap might contain null values, if the function sometimes gives a null result. The returned multimap is not thread-safe or serializable, even if the underlying multimap is. The equals and hashCode methods of the returned multimap are meaningless, since there is not a definition of equals or hashCode for general collections, and get() will return a general Collection as opposed to a List or a Set. The function is applied lazily, invoked when needed. This is necessary for the returned multimap to be a view, but it means that the function will be applied many times for bulk operations like Multimap.containsValue(java.lang.Object) and Multimap.toString(). For this to perform well, function should be fast. To avoid lazy evaluation when the returned multimap doesn't need to be a view, copy the returned multimap into a new multimap of your choosing."
5355,common/collect,com.google.common.collect,Class Multimaps,"public static <K,V1,V2> ListMultimap<K,V2> transformValues(ListMultimap<K,V1> fromMultimap, Function<? super V1,V2> function)","Returns a view of a ListMultimap where each value is transformed by a function. All other properties of the multimap, such as iteration order, are left intact. For example, the code: ListMultimap<String, Integer> multimap = ImmutableListMultimap.of(a, 4, a, 16, b, 9); Function<Integer, Double> sqrt = new Function<Integer, Double>() { public Double apply(Integer in) { return Math.sqrt((int) in); } }; ListMultimap<String, Double> transformed = Multimaps.transformValues(map, sqrt); System.out.println(transformed); ... prints {a=[2.0, 4.0], b=[3.0]}. Changes in the underlying multimap are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying multimap. It's acceptable for the underlying multimap to contain null keys, and even null values provided that the function is capable of accepting null input. The transformed multimap might contain null values, if the function sometimes gives a null result. The returned multimap is not thread-safe or serializable, even if the underlying multimap is. The function is applied lazily, invoked when needed. This is necessary for the returned multimap to be a view, but it means that the function will be applied many times for bulk operations like Multimap.containsValue(java.lang.Object) and Multimap.toString(). For this to perform well, function should be fast. To avoid lazy evaluation when the returned multimap doesn't need to be a view, copy the returned multimap into a new multimap of your choosing."
5356,common/collect,com.google.common.collect,Class Multimaps,"public static <K,V1,V2> Multimap<K,V2> transformEntries(Multimap<K,V1> fromMap, Maps.EntryTransformer<? super K,? super V1,V2> transformer)","Returns a view of a multimap whose values are derived from the original multimap's entries. In contrast to transformValues(com.google.common.collect.Multimap<K, V1>, com.google.common.base.Function<? super V1, V2>), this method's entry-transformation logic may depend on the key as well as the value. All other properties of the transformed multimap, such as iteration order, are left intact. For example, the code: SetMultimap<String, Integer> multimap = ImmutableSetMultimap.of(a, 1, a, 4, b, -6); EntryTransformer<String, Integer, String> transformer = new EntryTransformer<String, Integer, String>() { public String transformEntry(String key, Integer value) { return (value >= 0) ? key : no + key; } }; Multimap<String, String> transformed = Multimaps.transformEntries(multimap, transformer); System.out.println(transformed); ... prints {a=[a, a], b=[nob]}. Changes in the underlying multimap are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying multimap. It's acceptable for the underlying multimap to contain null keys and null values provided that the transformer is capable of accepting null inputs. The transformed multimap might contain null values if the transformer sometimes gives a null result. The returned multimap is not thread-safe or serializable, even if the underlying multimap is. The equals and hashCode methods of the returned multimap are meaningless, since there is not a definition of equals or hashCode for general collections, and get() will return a general Collection as opposed to a List or a Set. The transformer is applied lazily, invoked when needed. This is necessary for the returned multimap to be a view, but it means that the transformer will be applied many times for bulk operations like Multimap.containsValue(java.lang.Object) and Object.toString(). For this to perform well, transformer should be fast. To avoid lazy evaluation when the returned multimap doesn't need to be a view, copy the returned multimap into a new multimap of your choosing. Warning: This method assumes that for any instance k of EntryTransformer key type K, k.equals(k2) implies that k2 is also of type K. Using an EntryTransformer key type for which this may not hold, such as ArrayList, may risk a ClassCastException when calling methods on the transformed multimap."
5357,common/collect,com.google.common.collect,Class Multimaps,"public static <K,V1,V2> ListMultimap<K,V2> transformEntries(ListMultimap<K,V1> fromMap, Maps.EntryTransformer<? super K,? super V1,V2> transformer)","Returns a view of a ListMultimap whose values are derived from the original multimap's entries. In contrast to transformValues(ListMultimap, Function), this method's entry-transformation logic may depend on the key as well as the value. All other properties of the transformed multimap, such as iteration order, are left intact. For example, the code: Multimap<String, Integer> multimap = ImmutableMultimap.of(a, 1, a, 4, b, 6); EntryTransformer<String, Integer, String> transformer = new EntryTransformer<String, Integer, String>() { public String transformEntry(String key, Integer value) { return key + value; } }; Multimap<String, String> transformed = Multimaps.transformEntries(multimap, transformer); System.out.println(transformed); ... prints {a=[a1, a4], b=[b6]}. Changes in the underlying multimap are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying multimap. It's acceptable for the underlying multimap to contain null keys and null values provided that the transformer is capable of accepting null inputs. The transformed multimap might contain null values if the transformer sometimes gives a null result. The returned multimap is not thread-safe or serializable, even if the underlying multimap is. The transformer is applied lazily, invoked when needed. This is necessary for the returned multimap to be a view, but it means that the transformer will be applied many times for bulk operations like Multimap.containsValue(java.lang.Object) and Object.toString(). For this to perform well, transformer should be fast. To avoid lazy evaluation when the returned multimap doesn't need to be a view, copy the returned multimap into a new multimap of your choosing. Warning: This method assumes that for any instance k of EntryTransformer key type K, k.equals(k2) implies that k2 is also of type K. Using an EntryTransformer key type for which this may not hold, such as ArrayList, may risk a ClassCastException when calling methods on the transformed multimap."
5358,common/collect,com.google.common.collect,Class Multimaps,"public static <K,V> ImmutableListMultimap<K,V> index(Iterable<V> values, Function<? super V,K> keyFunction)","Creates an index ImmutableListMultimap that contains the results of applying a specified function to each item in an Iterable of values. Each value will be stored as a value in the resulting multimap, yielding a multimap with the same size as the input iterable. The key used to store that value in the multimap will be the result of calling the function on that value. The resulting multimap is created as an immutable snapshot. In the returned multimap, keys appear in the order they are first encountered, and the values corresponding to each key appear in the same order as they are encountered. For example, List<String> badGuys = Arrays.asList(Inky, Blinky, Pinky, Pinky, Clyde); Function<String, Integer> stringLengthFunction = ...; Multimap<Integer, String> index = Multimaps.index(badGuys, stringLengthFunction); System.out.println(index); prints {4=[Inky], 6=[Blinky], 5=[Pinky, Pinky, Clyde]} The returned multimap is serializable if its keys and values are all serializable."
5359,common/collect,com.google.common.collect,Class Multimaps,"public static <K,V> ImmutableListMultimap<K,V> index(Iterator<V> values, Function<? super V,K> keyFunction)","Creates an index ImmutableListMultimap that contains the results of applying a specified function to each item in an Iterator of values. Each value will be stored as a value in the resulting multimap, yielding a multimap with the same size as the input iterator. The key used to store that value in the multimap will be the result of calling the function on that value. The resulting multimap is created as an immutable snapshot. In the returned multimap, keys appear in the order they are first encountered, and the values corresponding to each key appear in the same order as they are encountered. For example, List<String> badGuys = Arrays.asList(Inky, Blinky, Pinky, Pinky, Clyde); Function<String, Integer> stringLengthFunction = ...; Multimap<Integer, String> index = Multimaps.index(badGuys.iterator(), stringLengthFunction); System.out.println(index); prints {4=[Inky], 6=[Blinky], 5=[Pinky, Pinky, Clyde]} The returned multimap is serializable if its keys and values are all serializable."
5360,common/collect,com.google.common.collect,Class Multimaps,"public static <K,V> Multimap<K,V> filterKeys(Multimap<K,V> unfiltered, Predicate<? super K> keyPredicate)","Returns a multimap containing the mappings in unfiltered whose keys satisfy a predicate. The returned multimap is a live view of unfiltered; changes to one affect the other. The resulting multimap's views have iterators that don't support remove(), but all other methods are supported by the multimap and its views. When adding a key that doesn't satisfy the predicate, the multimap's put(), putAll(), and replaceValues() methods throw an IllegalArgumentException. When methods such as removeAll() and clear() are called on the filtered multimap or its views, only mappings whose keys satisfy the filter will be removed from the underlying multimap. The returned multimap isn't threadsafe or serializable, even if unfiltered is. Many of the filtered multimap's methods, such as size(), iterate across every key/value mapping in the underlying multimap and determine which satisfy the filter. When a live view is not needed, it may be faster to copy the filtered multimap and use the copy. Warning: keyPredicate must be consistent with equals, as documented at Predicate.apply(T). Do not provide a predicate such as Predicates.instanceOf(ArrayList.class), which is inconsistent with equals."
5361,common/collect,com.google.common.collect,Class Multimaps,"public static <K,V> SetMultimap<K,V> filterKeys(SetMultimap<K,V> unfiltered, Predicate<? super K> keyPredicate)","Returns a multimap containing the mappings in unfiltered whose keys satisfy a predicate. The returned multimap is a live view of unfiltered; changes to one affect the other. The resulting multimap's views have iterators that don't support remove(), but all other methods are supported by the multimap and its views. When adding a key that doesn't satisfy the predicate, the multimap's put(), putAll(), and replaceValues() methods throw an IllegalArgumentException. When methods such as removeAll() and clear() are called on the filtered multimap or its views, only mappings whose keys satisfy the filter will be removed from the underlying multimap. The returned multimap isn't threadsafe or serializable, even if unfiltered is. Many of the filtered multimap's methods, such as size(), iterate across every key/value mapping in the underlying multimap and determine which satisfy the filter. When a live view is not needed, it may be faster to copy the filtered multimap and use the copy. Warning: keyPredicate must be consistent with equals, as documented at Predicate.apply(T). Do not provide a predicate such as Predicates.instanceOf(ArrayList.class), which is inconsistent with equals."
5362,common/collect,com.google.common.collect,Class Multimaps,"public static <K,V> ListMultimap<K,V> filterKeys(ListMultimap<K,V> unfiltered, Predicate<? super K> keyPredicate)","Returns a multimap containing the mappings in unfiltered whose keys satisfy a predicate. The returned multimap is a live view of unfiltered; changes to one affect the other. The resulting multimap's views have iterators that don't support remove(), but all other methods are supported by the multimap and its views. When adding a key that doesn't satisfy the predicate, the multimap's put(), putAll(), and replaceValues() methods throw an IllegalArgumentException. When methods such as removeAll() and clear() are called on the filtered multimap or its views, only mappings whose keys satisfy the filter will be removed from the underlying multimap. The returned multimap isn't threadsafe or serializable, even if unfiltered is. Many of the filtered multimap's methods, such as size(), iterate across every key/value mapping in the underlying multimap and determine which satisfy the filter. When a live view is not needed, it may be faster to copy the filtered multimap and use the copy. Warning: keyPredicate must be consistent with equals, as documented at Predicate.apply(T). Do not provide a predicate such as Predicates.instanceOf(ArrayList.class), which is inconsistent with equals."
5363,common/collect,com.google.common.collect,Class Multimaps,"public static <K,V> Multimap<K,V> filterValues(Multimap<K,V> unfiltered, Predicate<? super V> valuePredicate)","Returns a multimap containing the mappings in unfiltered whose values satisfy a predicate. The returned multimap is a live view of unfiltered; changes to one affect the other. The resulting multimap's views have iterators that don't support remove(), but all other methods are supported by the multimap and its views. When adding a value that doesn't satisfy the predicate, the multimap's put(), putAll(), and replaceValues() methods throw an IllegalArgumentException. When methods such as removeAll() and clear() are called on the filtered multimap or its views, only mappings whose value satisfy the filter will be removed from the underlying multimap. The returned multimap isn't threadsafe or serializable, even if unfiltered is. Many of the filtered multimap's methods, such as size(), iterate across every key/value mapping in the underlying multimap and determine which satisfy the filter. When a live view is not needed, it may be faster to copy the filtered multimap and use the copy. Warning: valuePredicate must be consistent with equals, as documented at Predicate.apply(T). Do not provide a predicate such as Predicates.instanceOf(ArrayList.class), which is inconsistent with equals."
5364,common/collect,com.google.common.collect,Class Multimaps,"public static <K,V> SetMultimap<K,V> filterValues(SetMultimap<K,V> unfiltered, Predicate<? super V> valuePredicate)","Returns a multimap containing the mappings in unfiltered whose values satisfy a predicate. The returned multimap is a live view of unfiltered; changes to one affect the other. The resulting multimap's views have iterators that don't support remove(), but all other methods are supported by the multimap and its views. When adding a value that doesn't satisfy the predicate, the multimap's put(), putAll(), and replaceValues() methods throw an IllegalArgumentException. When methods such as removeAll() and clear() are called on the filtered multimap or its views, only mappings whose value satisfy the filter will be removed from the underlying multimap. The returned multimap isn't threadsafe or serializable, even if unfiltered is. Many of the filtered multimap's methods, such as size(), iterate across every key/value mapping in the underlying multimap and determine which satisfy the filter. When a live view is not needed, it may be faster to copy the filtered multimap and use the copy. Warning: valuePredicate must be consistent with equals, as documented at Predicate.apply(T). Do not provide a predicate such as Predicates.instanceOf(ArrayList.class), which is inconsistent with equals."
5365,common/collect,com.google.common.collect,Class Multimaps,"public static <K,V> Multimap<K,V> filterEntries(Multimap<K,V> unfiltered, Predicate<? super Map.Entry<K,V>> entryPredicate)","Returns a multimap containing the mappings in unfiltered that satisfy a predicate. The returned multimap is a live view of unfiltered; changes to one affect the other. The resulting multimap's views have iterators that don't support remove(), but all other methods are supported by the multimap and its views. When adding a key/value pair that doesn't satisfy the predicate, multimap's put(), putAll(), and replaceValues() methods throw an IllegalArgumentException. When methods such as removeAll() and clear() are called on the filtered multimap or its views, only mappings whose keys satisfy the filter will be removed from the underlying multimap. The returned multimap isn't threadsafe or serializable, even if unfiltered is. Many of the filtered multimap's methods, such as size(), iterate across every key/value mapping in the underlying multimap and determine which satisfy the filter. When a live view is not needed, it may be faster to copy the filtered multimap and use the copy. Warning: entryPredicate must be consistent with equals, as documented at Predicate.apply(T)."
5366,common/collect,com.google.common.collect,Interface Multiset<E>,int size(),"Returns the total number of all occurrences of all elements in this multiset. Note: this method does not return the number of distinct elements in the multiset, which is given by entrySet().size()."
5367,common/collect,com.google.common.collect,Interface Multiset<E>,"int count(@CompatibleWith(value=""E"") @Nullable Object element)","Returns the number of occurrences of an element in this multiset (the count of the element). Note that for an Object.equals(java.lang.Object)-based multiset, this gives the same result as Collections.frequency(java.util.Collection<?>, java.lang.Object) (which would presumably perform more poorly). Note: the utility method Iterables.frequency(java.lang.Iterable<?>, java.lang.Object) generalizes this operation; it correctly delegates to this method when dealing with a multiset, but it can also accept any other iterable type."
5368,common/collect,com.google.common.collect,Interface Multiset<E>,"@CanIgnoreReturnValueint add(E element, int occurrences)","Adds a number of occurrences of an element to this multiset. Note that if occurrences == 1, this method has the identical effect to add(Object). This method is functionally equivalent (except in the case of overflow) to the call addAll(Collections.nCopies(element, occurrences)), which would presumably perform much more poorly."
5369,common/collect,com.google.common.collect,Interface Multiset<E>,@CanIgnoreReturnValueboolean add(E element),"Adds a single occurrence of the specified element to this multiset. This method refines Collection.add(E), which only ensures the presence of the element, to further specify that a successful call must always increment the count of the element, and the overall size of the collection, by one. To both add the element and obtain the previous count of that element, use add(element, 1) instead."
5370,common/collect,com.google.common.collect,Interface Multiset<E>,"@CanIgnoreReturnValueint remove(@CompatibleWith(value=""E"") @Nullable Object element, int occurrences)","Removes a number of occurrences of the specified element from this multiset. If the multiset contains fewer than this number of occurrences to begin with, all occurrences will be removed. Note that if occurrences == 1, this is functionally equivalent to the call remove(element)."
5371,common/collect,com.google.common.collect,Interface Multiset<E>,@CanIgnoreReturnValueboolean remove(@Nullable Object element),"Removes a single occurrence of the specified element from this multiset, if present. This method refines Collection.remove(java.lang.Object) to further specify that it may not throw an exception in response to element being null or of the wrong type. To both remove the element and obtain the previous count of that element, use remove(element, 1) instead."
5372,common/collect,com.google.common.collect,Interface Multiset<E>,"@CanIgnoreReturnValueint setCount(E element, int count)",Adds or removes the necessary occurrences of an element such that the element attains the desired count.
5373,common/collect,com.google.common.collect,Interface Multiset<E>,"@CanIgnoreReturnValueboolean setCount(E element, int oldCount, int newCount)","Conditionally sets the count of an element to a new value, as described in setCount(Object, int), provided that the element has the expected current count. If the current count is not oldCount, no change is made."
5374,common/collect,com.google.common.collect,Interface Multiset<E>,Set<E> elementSet(),"Returns the set of distinct elements contained in this multiset. The element set is backed by the same data as the multiset, so any change to either is immediately reflected in the other. The order of the elements in the element set is unspecified. If the element set supports any removal operations, these necessarily cause all occurrences of the removed element(s) to be removed from the multiset. Implementations are not expected to support the add operations, although this is possible. A common use for the element set is to find the number of distinct elements in the multiset: elementSet().size()."
5375,common/collect,com.google.common.collect,Interface Multiset<E>,Set<Multiset.Entry<E>> entrySet(),"Returns a view of the contents of this multiset, grouped into Multiset.Entry instances, each providing an element of the multiset and the count of that element. This set contains exactly one entry for each distinct element in the multiset (thus it always has the same size as the elementSet()). The order of the elements in the element set is unspecified. The entry set is backed by the same data as the multiset, so any change to either is immediately reflected in the other. However, multiset changes may or may not be reflected in any Entry instances already retrieved from the entry set (this is implementation-dependent). Furthermore, implementations are not required to support modifications to the entry set at all, and the Entry instances themselves don't even have methods for modification. See the specific implementation class for more details on how its entry set handles modifications."
5376,common/collect,com.google.common.collect,Interface Multiset<E>,@Betadefault void forEachEntry(ObjIntConsumer<? super E> action),"Runs the specified action for each distinct element in this multiset, and the number of occurrences of that element. For some Multiset implementations, this may be more efficient than iterating over the entrySet() either explicitly or with entrySet().forEach(action)."
5377,common/collect,com.google.common.collect,Interface Multiset<E>,boolean equals(@Nullable Object object),"Compares the specified object with this multiset for equality. Returns true if the given object is also a multiset and contains equal elements with equal counts, regardless of order."
5378,common/collect,com.google.common.collect,Interface Multiset<E>,int hashCode(),Returns the hash code for this multiset. This is defined as the sum of ((element == null) ? 0 : element.hashCode()) ^ count(element) over all distinct elements in the multiset. It follows that a multiset and its entry set always have the same hash code.
5379,common/collect,com.google.common.collect,Interface Multiset<E>,String toString(),"Returns a string representation of the object. In general, the toString method returns a string that textually represents this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of: getClass().getName() + '@' + Integer.toHexString(hashCode()) It is recommended, though not mandatory, that this method return the result of invoking toString() on the entrySet(), yielding a result such as [a x 3, c, d x 2, e]."
5380,common/collect,com.google.common.collect,Interface Multiset<E>,Iterator<E> iterator(),"Returns an iterator over the elements in this collection. There are no guarantees concerning the order in which the elements are returned (unless this collection is an instance of some class that provides a guarantee). Elements that occur multiple times in the multiset will appear multiple times in this iterator, though not necessarily sequentially."
5381,common/collect,com.google.common.collect,Interface Multiset<E>,boolean contains(@Nullable Object element),Determines whether this multiset contains the specified element. This method refines Collection.contains(java.lang.Object) to further specify that it may not throw an exception in response to element being null or of the wrong type.
5382,common/collect,com.google.common.collect,Interface Multiset<E>,boolean containsAll(Collection<?> elements),"Returns true if this multiset contains at least one occurrence of each element in the specified collection. This method refines Collection.containsAll(java.util.Collection<?>) to further specify that it may not throw an exception in response to any of elements being null or of the wrong type. Note: this method does not take into account the occurrence count of an element in the two collections; it may still return true even if elements contains several occurrences of an element and this multiset contains only one. This is no different than any other collection type like List, but it may be unexpected to the user of a multiset."
5383,common/collect,com.google.common.collect,Interface Multiset<E>,@CanIgnoreReturnValueboolean removeAll(Collection<?> c),"Removes all of this collection's elements that are also contained in the specified collection (optional operation). After this call returns, this collection will contain no elements in common with the specified collection. Note: This method ignores how often any element might appear in c, and only cares whether or not an element appears at all. If you wish to remove one occurrence in this multiset for every occurrence in c, see Multisets.removeOccurrences(Multiset, Multiset). This method refines Collection.removeAll(java.util.Collection<?>) to further specify that it may not throw an exception in response to any of elements being null or of the wrong type."
5384,common/collect,com.google.common.collect,Interface Multiset<E>,@CanIgnoreReturnValueboolean retainAll(Collection<?> c),"Retains only the elements in this collection that are contained in the specified collection (optional operation). In other words, removes from this collection all of its elements that are not contained in the specified collection. Note: This method ignores how often any element might appear in c, and only cares whether or not an element appears at all. If you wish to remove one occurrence in this multiset for every occurrence in c, see Multisets.retainOccurrences(Multiset, Multiset). This method refines Collection.retainAll(java.util.Collection<?>) to further specify that it may not throw an exception in response to any of elements being null or of the wrong type."
5385,common/collect,com.google.common.collect,Interface Multiset<E>,default void forEach(Consumer<? super E> action),"Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception. Unless otherwise specified by the implementing class, actions are performed in the order of iteration (if an iteration order is specified). Exceptions thrown by the action are relayed to the caller. Elements that occur multiple times in the multiset will be passed to the Consumer correspondingly many times, though not necessarily sequentially."
5386,common/collect,com.google.common.collect,Interface Multiset.Entry<E>,E getElement(),Returns the multiset element corresponding to this entry. Multiple calls to this method always return the same instance.
5387,common/collect,com.google.common.collect,Interface Multiset.Entry<E>,int getCount(),"Returns the count of the associated element in the underlying multiset. This count may either be an unchanging snapshot of the count at the time the entry was retrieved, or a live view of the current count of the element in the multiset, depending on the implementation. Note that in the former case, this method can never return zero, while in the latter, it will return zero if all occurrences of the element were since removed from the multiset."
5388,common/collect,com.google.common.collect,Interface Multiset.Entry<E>,boolean equals(Object o),"Indicates whether some other object is equal to this one. The equals method implements an equivalence relation on non-null object references: It is reflexive: for any non-null reference value x, x.equals(x) should return true. It is symmetric: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is transitive: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is consistent: for any non-null reference values x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes. Returns true if the given object is also a multiset entry and the two entries represent the same element and count. That is, two entries a and b are equal if: Objects.equal(a.getElement(), b.getElement()) && a.getCount() == b.getCount() "
5389,common/collect,com.google.common.collect,Interface Multiset.Entry<E>,int hashCode(),"Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by HashMap. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the Object.equals(java.lang.Object) method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java™ programming language.) The hash code of a multiset entry for element element and count count is defined as: ((element == null) ? 0 : element.hashCode()) ^ count "
5390,common/collect,com.google.common.collect,Class Multisets,"public static <T,E,M extends Multiset<E>> Collector<T,?,M> toMultiset(Function<? super T,E> elementFunction, ToIntFunction<? super T> countFunction, Supplier<M> multisetSupplier)","Returns a Collector that accumulates elements into a multiset created via the specified Supplier, whose elements are the result of applying elementFunction to the inputs, with counts equal to the result of applying countFunction to the inputs. Elements are added in encounter order. If the mapped elements contain duplicates (according to Object.equals(java.lang.Object)), the element will be added more than once, with the count summed over all appearances of the element. Note that stream.collect(toMultiset(function, e -> 1, supplier)) is equivalent to stream.map(function).collect(Collectors.toCollection(supplier))."
5391,common/collect,com.google.common.collect,Class Multisets,public static <E> Multiset<E> unmodifiableMultiset(Multiset<? extends E> multiset),"Returns an unmodifiable view of the specified multiset. Query operations on the returned multiset read through to the specified multiset, and attempts to modify the returned multiset result in an UnsupportedOperationException. The returned multiset will be serializable if the specified multiset is serializable."
5392,common/collect,com.google.common.collect,Class Multisets,@Deprecatedpublic static <E> Multiset<E> unmodifiableMultiset(ImmutableMultiset<E> multiset),Deprecated. no need to use this
5393,common/collect,com.google.common.collect,Class Multisets,@Betapublic static <E> SortedMultiset<E> unmodifiableSortedMultiset(SortedMultiset<E> sortedMultiset),"Returns an unmodifiable view of the specified sorted multiset. Query operations on the returned multiset read through to the specified multiset, and attempts to modify the returned multiset result in an UnsupportedOperationException. The returned multiset will be serializable if the specified multiset is serializable."
5394,common/collect,com.google.common.collect,Class Multisets,"public static <E> Multiset.Entry<E> immutableEntry(E e, int n)",Returns an immutable multiset entry with the specified element and count. The entry will be serializable if e is.
5395,common/collect,com.google.common.collect,Class Multisets,"@Betapublic static <E> Multiset<E> filter(Multiset<E> unfiltered, Predicate<? super E> predicate)","Returns a view of the elements of unfiltered that satisfy a predicate. The returned multiset is a live view of unfiltered; changes to one affect the other. The resulting multiset's iterators, and those of its entrySet() and elementSet(), do not support remove(). However, all other multiset methods supported by unfiltered are supported by the returned multiset. When given an element that doesn't satisfy the predicate, the multiset's add() and addAll() methods throw an IllegalArgumentException. When methods such as removeAll() and clear() are called on the filtered multiset, only elements that satisfy the filter will be removed from the underlying multiset. The returned multiset isn't threadsafe or serializable, even if unfiltered is. Many of the filtered multiset's methods, such as size(), iterate across every element in the underlying multiset and determine which elements satisfy the filter. When a live view is not needed, it may be faster to copy the returned multiset and use the copy. Warning: predicate must be consistent with equals, as documented at Predicate.apply(T). Do not provide a predicate such as Predicates.instanceOf(ArrayList.class), which is inconsistent with equals. (See Iterables.filter(Iterable, Class) for related functionality.)"
5396,common/collect,com.google.common.collect,Class Multisets,"@Betapublic static <E> Multiset<E> union(Multiset<? extends E> multiset1, Multiset<? extends E> multiset2)","Returns an unmodifiable view of the union of two multisets. In the returned multiset, the count of each element is the maximum of its counts in the two backing multisets. The iteration order of the returned multiset matches that of the element set of multiset1 followed by the members of the element set of multiset2 that are not contained in multiset1, with repeated occurrences of the same element appearing consecutively. Results are undefined if multiset1 and multiset2 are based on different equivalence relations (as HashMultiset and TreeMultiset are)."
5397,common/collect,com.google.common.collect,Class Multisets,"public static <E> Multiset<E> intersection(Multiset<E> multiset1, Multiset<?> multiset2)","Returns an unmodifiable view of the intersection of two multisets. In the returned multiset, the count of each element is the minimum of its counts in the two backing multisets, with elements that would have a count of 0 not included. The iteration order of the returned multiset matches that of the element set of multiset1, with repeated occurrences of the same element appearing consecutively. Results are undefined if multiset1 and multiset2 are based on different equivalence relations (as HashMultiset and TreeMultiset are)."
5398,common/collect,com.google.common.collect,Class Multisets,"@Betapublic static <E> Multiset<E> sum(Multiset<? extends E> multiset1, Multiset<? extends E> multiset2)","Returns an unmodifiable view of the sum of two multisets. In the returned multiset, the count of each element is the sum of its counts in the two backing multisets. The iteration order of the returned multiset matches that of the element set of multiset1 followed by the members of the element set of multiset2 that are not contained in multiset1, with repeated occurrences of the same element appearing consecutively. Results are undefined if multiset1 and multiset2 are based on different equivalence relations (as HashMultiset and TreeMultiset are)."
5399,common/collect,com.google.common.collect,Class Multisets,"@Betapublic static <E> Multiset<E> difference(Multiset<E> multiset1, Multiset<?> multiset2)","Returns an unmodifiable view of the difference of two multisets. In the returned multiset, the count of each element is the result of the zero-truncated subtraction of its count in the second multiset from its count in the first multiset, with elements that would have a count of 0 not included. The iteration order of the returned multiset matches that of the element set of multiset1, with repeated occurrences of the same element appearing consecutively. Results are undefined if multiset1 and multiset2 are based on different equivalence relations (as HashMultiset and TreeMultiset are)."
5400,common/collect,com.google.common.collect,Class Multisets,"@CanIgnoreReturnValuepublic static boolean containsOccurrences(Multiset<?> superMultiset, Multiset<?> subMultiset)",Returns true if subMultiset.count(o) <= superMultiset.count(o) for all o.
5401,common/collect,com.google.common.collect,Class Multisets,"@CanIgnoreReturnValuepublic static boolean retainOccurrences(Multiset<?> multisetToModify, Multiset<?> multisetToRetain)","Modifies multisetToModify so that its count for an element e is at most multisetToRetain.count(e). To be precise, multisetToModify.count(e) is set to Math.min(multisetToModify.count(e), multisetToRetain.count(e)). This is similar to intersection (multisetToModify, multisetToRetain), but mutates multisetToModify instead of returning a view. In contrast, multisetToModify.retainAll(multisetToRetain) keeps all occurrences of elements that appear at all in multisetToRetain, and deletes all occurrences of all other elements."
5402,common/collect,com.google.common.collect,Class Multisets,"@CanIgnoreReturnValuepublic static boolean removeOccurrences(Multiset<?> multisetToModify, Iterable<?> occurrencesToRemove)","For each occurrence of an element e in occurrencesToRemove, removes one occurrence of e in multisetToModify. Equivalently, this method modifies multisetToModify so that multisetToModify.count(e) is set to Math.max(0, multisetToModify.count(e) - Iterables.frequency(occurrencesToRemove, e)). This is not the same as multisetToModify. removeAll(occurrencesToRemove), which removes all occurrences of elements that appear in occurrencesToRemove. However, this operation is equivalent to, albeit sometimes more efficient than, the following: for (E e : occurrencesToRemove) { multisetToModify.remove(e); } "
5403,common/collect,com.google.common.collect,Class Multisets,"@CanIgnoreReturnValuepublic static boolean removeOccurrences(Multiset<?> multisetToModify, Multiset<?> occurrencesToRemove)","For each occurrence of an element e in occurrencesToRemove, removes one occurrence of e in multisetToModify. Equivalently, this method modifies multisetToModify so that multisetToModify.count(e) is set to Math.max(0, multisetToModify.count(e) - occurrencesToRemove.count(e)). This is not the same as multisetToModify. removeAll(occurrencesToRemove), which removes all occurrences of elements that appear in occurrencesToRemove. However, this operation is equivalent to, albeit sometimes more efficient than, the following: for (E e : occurrencesToRemove) { multisetToModify.remove(e); } "
5404,common/collect,com.google.common.collect,Class MutableClassToInstanceMap<B>,public static <B> MutableClassToInstanceMap<B> create(),Returns a new MutableClassToInstanceMap instance backed by a HashMap using the default initial capacity and load factor.
5405,common/collect,com.google.common.collect,Class MutableClassToInstanceMap<B>,"public static <B> MutableClassToInstanceMap<B> create(Map<Class<? extends B>,B> backingMap)","Returns a new MutableClassToInstanceMap instance backed by a given empty backingMap. The caller surrenders control of the backing map, and thus should not allow any direct references to it to remain accessible."
5406,common/collect,com.google.common.collect,Class MutableClassToInstanceMap<B>,"protected Map<Class<? extends B>,B> delegate()",Description copied from class: ForwardingObject
5407,common/collect,com.google.common.collect,Class MutableClassToInstanceMap<B>,"public Set<Map.Entry<Class<? extends B>,B>> entrySet()",Description copied from interface: java.util.Map
5408,common/collect,com.google.common.collect,Class MutableClassToInstanceMap<B>,"@CanIgnoreReturnValuepublic B put(Class<? extends B> key, B value)",Description copied from interface: java.util.Map
5409,common/collect,com.google.common.collect,Class MutableClassToInstanceMap<B>,"public void putAll(Map<? extends Class<? extends B>,? extends B> map)",Description copied from interface: java.util.Map
5410,common/collect,com.google.common.collect,Class MutableClassToInstanceMap<B>,"@CanIgnoreReturnValuepublic <T extends B> T putInstance(Class<T> type, T value)",Description copied from interface: ClassToInstanceMap
5411,common/graph,com.google.common.graph,Interface MutableGraph<N>,@CanIgnoreReturnValueboolean addNode(N node),"Adds node if it is not already present. Nodes must be unique, just as Map keys must be. They must also be non-null."
5412,common/graph,com.google.common.graph,Interface MutableGraph<N>,"@CanIgnoreReturnValueboolean putEdge(N nodeU, N nodeV)","Adds an edge connecting nodeU to nodeV if one is not already present. If the graph is directed, the resultant edge will be directed; otherwise, it will be undirected. If nodeU and nodeV are not already present in this graph, this method will silently add nodeU and nodeV to the graph."
5413,common/graph,com.google.common.graph,Interface MutableGraph<N>,@CanIgnoreReturnValueboolean putEdge(EndpointPair<N> endpoints),"Adds an edge connecting endpoints (in the order, if any, specified by endpoints) if one is not already present. If this graph is directed, endpoints must be ordered and the added edge will be directed; if it is undirected, the added edge will be undirected. If this graph is directed, endpoints must be ordered. If either or both endpoints are not already present in this graph, this method will silently add each missing endpoint to the graph."
5414,common/graph,com.google.common.graph,Interface MutableGraph<N>,@CanIgnoreReturnValueboolean removeNode(N node),Removes node if it is present; all edges incident to node will also be removed.
5415,common/graph,com.google.common.graph,Interface MutableGraph<N>,"@CanIgnoreReturnValueboolean removeEdge(N nodeU, N nodeV)","Removes the edge connecting nodeU to nodeV, if it is present."
5416,common/graph,com.google.common.graph,"Interface MutableNetwork<N,E>",@CanIgnoreReturnValueboolean addNode(N node),"Adds node if it is not already present. Nodes must be unique, just as Map keys must be. They must also be non-null."
5417,common/graph,com.google.common.graph,"Interface MutableNetwork<N,E>","@CanIgnoreReturnValueboolean addEdge(N nodeU, N nodeV, E edge)","Adds edge connecting nodeU to nodeV. If the graph is directed, edge will be directed in this graph; otherwise, it will be undirected. edge must be unique to this graph, just as a Map key must be. It must also be non-null. If nodeU and nodeV are not already present in this graph, this method will silently add nodeU and nodeV to the graph. If edge already connects nodeU to nodeV (in the specified order if this network Network.isDirected(), else in any order), then this method will have no effect."
5418,common/graph,com.google.common.graph,"Interface MutableNetwork<N,E>","@CanIgnoreReturnValueboolean addEdge(EndpointPair<N> endpoints, E edge)","Adds edge connecting endpoints. In an undirected network, edge will also connect nodeV to nodeU. If this graph is directed, edge will be directed in this graph; if it is undirected, edge will be undirected in this graph. If this graph is directed, endpoints must be ordered. edge must be unique to this graph, just as a Map key must be. It must also be non-null. If either or both endpoints are not already present in this graph, this method will silently add each missing endpoint to the graph. If edge already connects an endpoint pair equal to endpoints, then this method will have no effect."
5419,common/graph,com.google.common.graph,"Interface MutableNetwork<N,E>",@CanIgnoreReturnValueboolean removeNode(N node),Removes node if it is present; all edges incident to node will also be removed.
5420,common/reflect,com.google.common.reflect,Class MutableTypeToInstanceMap<B>,public <T extends B> T getInstance(Class<T> type),Description copied from interface: TypeToInstanceMap
5421,common/reflect,com.google.common.reflect,Class MutableTypeToInstanceMap<B>,public <T extends B> T getInstance(TypeToken<T> type),Description copied from interface: TypeToInstanceMap
5422,common/reflect,com.google.common.reflect,Class MutableTypeToInstanceMap<B>,"@CanIgnoreReturnValuepublic <T extends B> T putInstance(Class<T> type, T value)",Description copied from interface: TypeToInstanceMap
5423,common/reflect,com.google.common.reflect,Class MutableTypeToInstanceMap<B>,"@CanIgnoreReturnValuepublic <T extends B> T putInstance(TypeToken<T> type, T value)",Description copied from interface: TypeToInstanceMap
5424,common/reflect,com.google.common.reflect,Class MutableTypeToInstanceMap<B>,"@CanIgnoreReturnValue @Deprecatedpublic B put(TypeToken<? extends B> key, B value)",Deprecated. unsupported operation
5425,common/reflect,com.google.common.reflect,Class MutableTypeToInstanceMap<B>,"@Deprecatedpublic void putAll(Map<? extends TypeToken<? extends B>,? extends B> map)",Deprecated. unsupported operation
5426,common/reflect,com.google.common.reflect,Class MutableTypeToInstanceMap<B>,"public Set<Map.Entry<TypeToken<? extends B>,B>> entrySet()",Description copied from interface: java.util.Map
5427,common/graph,com.google.common.graph,"Interface MutableValueGraph<N,V>",@CanIgnoreReturnValueboolean addNode(N node),"Adds node if it is not already present. Nodes must be unique, just as Map keys must be. They must also be non-null."
5428,common/graph,com.google.common.graph,"Interface MutableValueGraph<N,V>","@CanIgnoreReturnValueV putEdgeValue(N nodeU, N nodeV, V value)","Adds an edge connecting nodeU to nodeV if one is not already present, and sets a value for that edge to value (overwriting the existing value, if any). If the graph is directed, the resultant edge will be directed; otherwise, it will be undirected. Values do not have to be unique. However, values must be non-null. If nodeU and nodeV are not already present in this graph, this method will silently add nodeU and nodeV to the graph."
5429,common/graph,com.google.common.graph,"Interface MutableValueGraph<N,V>","@CanIgnoreReturnValueV putEdgeValue(EndpointPair<N> endpoints, V value)","Adds an edge connecting endpoints if one is not already present, and sets a value for that edge to value (overwriting the existing value, if any). If the graph is directed, the resultant edge will be directed; otherwise, it will be undirected. If this graph is directed, endpoints must be ordered. Values do not have to be unique. However, values must be non-null. If either or both endpoints are not already present in this graph, this method will silently add each missing endpoint to the graph."
5430,common/graph,com.google.common.graph,"Interface MutableValueGraph<N,V>",@CanIgnoreReturnValueboolean removeNode(N node),Removes node if it is present; all edges incident to node will also be removed.
5431,common/graph,com.google.common.graph,"Interface MutableValueGraph<N,V>","@CanIgnoreReturnValueV removeEdge(N nodeU, N nodeV)","Removes the edge connecting nodeU to nodeV, if it is present."
5432,common/graph,com.google.common.graph,"Interface Network<N,E>",Set<N> nodes(),"Returns all nodes in this network, in the order specified by nodeOrder()."
5433,common/graph,com.google.common.graph,"Interface Network<N,E>",Set<E> edges(),"Returns all edges in this network, in the order specified by edgeOrder()."
5434,common/graph,com.google.common.graph,"Interface Network<N,E>",Graph<N> asGraph(),"Returns a live view of this network as a Graph. The resulting Graph will have an edge connecting node A to node B if this Network has an edge connecting A to B. If this network allows parallel edges, parallel edges will be treated as if collapsed into a single edge. For example, the degree(Object) of a node in the Graph view may be less than the degree of the same node in this Network."
5435,common/graph,com.google.common.graph,"Interface Network<N,E>",boolean isDirected(),"Returns true if the edges in this network are directed. Directed edges connect a source node to a target node, while undirected edges connect a pair of nodes to each other."
5436,common/graph,com.google.common.graph,"Interface Network<N,E>",boolean allowsParallelEdges(),Returns true if this network allows parallel edges. Attempting to add a parallel edge to a network that does not allow them will throw an IllegalArgumentException.
5437,common/graph,com.google.common.graph,"Interface Network<N,E>",boolean allowsSelfLoops(),Returns true if this network allows self-loops (edges that connect a node to itself). Attempting to add a self-loop to a network that does not allow them will throw an IllegalArgumentException.
5438,common/graph,com.google.common.graph,"Interface Network<N,E>",ElementOrder<N> nodeOrder(),Returns the order of iteration for the elements of nodes().
5439,common/graph,com.google.common.graph,"Interface Network<N,E>",ElementOrder<E> edgeOrder(),Returns the order of iteration for the elements of edges().
5440,common/graph,com.google.common.graph,"Interface Network<N,E>",Set<N> adjacentNodes(N node),Returns the nodes which have an incident edge in common with node in this network. This is equal to the union of predecessors(Object) and successors(Object).
5441,common/graph,com.google.common.graph,"Interface Network<N,E>",Set<N> predecessors(N node),"Returns all nodes in this network adjacent to node which can be reached by traversing node's incoming edges against the direction (if any) of the edge. In an undirected network, this is equivalent to adjacentNodes(Object)."
5442,common/graph,com.google.common.graph,"Interface Network<N,E>",Set<N> successors(N node),"Returns all nodes in this network adjacent to node which can be reached by traversing node's outgoing edges in the direction (if any) of the edge. In an undirected network, this is equivalent to adjacentNodes(Object). This is not the same as all nodes reachable from node by following outgoing edges. For that functionality, see Graphs.reachableNodes(Graph, Object)."
5443,common/graph,com.google.common.graph,"Interface Network<N,E>",Set<E> incidentEdges(N node),Returns the edges whose incident nodes in this network include node. This is equal to the union of inEdges(Object) and outEdges(Object).
5444,common/graph,com.google.common.graph,"Interface Network<N,E>",Set<E> inEdges(N node),"Returns all edges in this network which can be traversed in the direction (if any) of the edge to end at node. In a directed network, an incoming edge's EndpointPair.target() equals node. In an undirected network, this is equivalent to incidentEdges(Object)."
5445,common/graph,com.google.common.graph,"Interface Network<N,E>",Set<E> outEdges(N node),"Returns all edges in this network which can be traversed in the direction (if any) of the edge starting from node. In a directed network, an outgoing edge's EndpointPair.source() equals node. In an undirected network, this is equivalent to incidentEdges(Object)."
5446,common/graph,com.google.common.graph,"Interface Network<N,E>",int degree(N node),"Returns the count of node's incident edges, counting self-loops twice (equivalently, the number of times an edge touches node). For directed networks, this is equal to inDegree(node) + outDegree(node). For undirected networks, this is equal to incidentEdges(node).size() + (number of self-loops incident to node). If the count is greater than Integer.MAX_VALUE, returns Integer.MAX_VALUE."
5447,common/graph,com.google.common.graph,"Interface Network<N,E>",int inDegree(N node),"Returns the count of node's incoming edges in a directed network. In an undirected network, returns the degree(Object). If the count is greater than Integer.MAX_VALUE, returns Integer.MAX_VALUE."
5448,common/graph,com.google.common.graph,"Interface Network<N,E>",int outDegree(N node),"Returns the count of node's outgoing edges in a directed network. In an undirected network, returns the degree(Object). If the count is greater than Integer.MAX_VALUE, returns Integer.MAX_VALUE."
5449,common/graph,com.google.common.graph,"Interface Network<N,E>",EndpointPair<N> incidentNodes(E edge),Returns the nodes which are the endpoints of edge in this network.
5450,common/graph,com.google.common.graph,"Interface Network<N,E>",Set<E> adjacentEdges(E edge),Returns the edges which have an incident node in common with edge. An edge is not considered adjacent to itself.
5451,common/graph,com.google.common.graph,"Interface Network<N,E>","Set<E> edgesConnecting(N nodeU, N nodeV)","Returns the set of edges that each directly connect nodeU to nodeV. In an undirected network, this is equal to edgesConnecting(nodeV, nodeU). The resulting set of edges will be parallel (i.e. have equal incidentNodes(Object). If this network does not allow parallel edges, the resulting set will contain at most one edge (equivalent to edgeConnecting(nodeU, nodeV).asSet())."
5452,common/graph,com.google.common.graph,"Interface Network<N,E>",Set<E> edgesConnecting(EndpointPair<N> endpoints),"Returns the set of edges that each directly connect endpoints (in the order, if any, specified by endpoints). The resulting set of edges will be parallel (i.e. have equal incidentNodes(Object). If this network does not allow parallel edges, the resulting set will contain at most one edge (equivalent to edgeConnecting(endpoints).asSet()). If this network is directed, endpoints must be ordered."
5453,common/graph,com.google.common.graph,"Interface Network<N,E>","Optional<E> edgeConnecting(N nodeU, N nodeV)","Returns the single edge that directly connects nodeU to nodeV, if one is present, or Optional.empty() if no such edge exists. In an undirected network, this is equal to edgeConnecting(nodeV, nodeU)."
5454,common/graph,com.google.common.graph,"Interface Network<N,E>",Optional<E> edgeConnecting(EndpointPair<N> endpoints),"Returns the single edge that directly connects endpoints (in the order, if any, specified by endpoints), if one is present, or Optional.empty() if no such edge exists. If this graph is directed, the endpoints must be ordered."
5455,common/graph,com.google.common.graph,"Interface Network<N,E>","E edgeConnectingOrNull(N nodeU, N nodeV)","Returns the single edge that directly connects nodeU to nodeV, if one is present, or null if no such edge exists. In an undirected network, this is equal to edgeConnectingOrNull(nodeV, nodeU)."
5456,common/graph,com.google.common.graph,"Interface Network<N,E>",E edgeConnectingOrNull(EndpointPair<N> endpoints),"Returns the single edge that directly connects endpoints (in the order, if any, specified by endpoints), if one is present, or null if no such edge exists. If this graph is directed, the endpoints must be ordered."
5457,common/graph,com.google.common.graph,"Interface Network<N,E>","boolean hasEdgeConnecting(N nodeU, N nodeV)","Returns true if there is an edge that directly connects nodeU to nodeV. This is equivalent to nodes().contains(nodeU) && successors(nodeU).contains(nodeV), and to edgeConnectingOrNull(nodeU, nodeV) != null. In an undirected graph, this is equal to hasEdgeConnecting(nodeV, nodeU)."
5458,common/graph,com.google.common.graph,"Interface Network<N,E>",boolean hasEdgeConnecting(EndpointPair<N> endpoints),"Returns true if there is an edge that directly connects endpoints (in the order, if any, specified by endpoints). Unlike the other EndpointPair-accepting methods, this method does not throw if the endpoints are unordered and the graph is directed; it simply returns false. This is for consistency with Graph.hasEdgeConnecting(EndpointPair) and ValueGraph.hasEdgeConnecting(EndpointPair)."
5459,common/graph,com.google.common.graph,"Interface Network<N,E>",boolean equals(@Nullable Object object),"Returns true iff object is a Network that has the same elements and the same structural relationships as those in this network. Thus, two networks A and B are equal if all of the following are true: A and B have equal directedness. A and B have equal node sets. A and B have equal edge sets. Every edge in A and B connects the same nodes in the same direction (if any). Network properties besides directedness do not affect equality. For example, two networks may be considered equal even if one allows parallel edges and the other doesn't. Additionally, the order in which nodes or edges are added to the network, and the order in which they are iterated over, are irrelevant. A reference implementation of this is provided by AbstractNetwork.equals(Object)."
5460,common/graph,com.google.common.graph,"Class NetworkBuilder<N,E>","public static NetworkBuilder<Object,Object> directed()",Returns a NetworkBuilder for building directed networks.
5461,common/graph,com.google.common.graph,"Class NetworkBuilder<N,E>","public static NetworkBuilder<Object,Object> undirected()",Returns a NetworkBuilder for building undirected networks.
5462,common/graph,com.google.common.graph,"Class NetworkBuilder<N,E>","public static <N,E> NetworkBuilder<N,E> from(Network<N,E> network)","Returns a NetworkBuilder initialized with all properties queryable from network. The queryable properties are those that are exposed through the Network interface, such as Network.isDirected(). Other properties, such as expectedNodeCount(int), are not set in the new builder."
5463,common/graph,com.google.common.graph,"Class NetworkBuilder<N,E>","public <N1 extends N,E1 extends E> ImmutableNetwork.Builder<N1,E1> immutable()",Returns an ImmutableNetwork.Builder with the properties of this NetworkBuilder. The returned builder can be used for populating an ImmutableNetwork.
5464,common/graph,com.google.common.graph,"Class NetworkBuilder<N,E>","public NetworkBuilder<N,E> allowsParallelEdges(boolean allowsParallelEdges)",Specifies whether the network will allow parallel edges. Attempting to add a parallel edge to a network that does not allow them will throw an UnsupportedOperationException. The default value is false.
5465,common/graph,com.google.common.graph,"Class NetworkBuilder<N,E>","public NetworkBuilder<N,E> allowsSelfLoops(boolean allowsSelfLoops)",Specifies whether the network will allow self-loops (edges that connect a node to itself). Attempting to add a self-loop to a network that does not allow them will throw an UnsupportedOperationException. The default value is false.
5466,common/graph,com.google.common.graph,"Class NetworkBuilder<N,E>","public NetworkBuilder<N,E> expectedNodeCount(int expectedNodeCount)",Specifies the expected number of nodes in the network.
5467,common/graph,com.google.common.graph,"Class NetworkBuilder<N,E>","public NetworkBuilder<N,E> expectedEdgeCount(int expectedEdgeCount)",Specifies the expected number of edges in the network.
5468,common/graph,com.google.common.graph,"Class NetworkBuilder<N,E>","public <N1 extends N> NetworkBuilder<N1,E> nodeOrder(ElementOrder<N1> nodeOrder)",Specifies the order of iteration for the elements of Network.nodes(). The default value is insertion order.
5469,common/graph,com.google.common.graph,"Class NetworkBuilder<N,E>","public <E1 extends E> NetworkBuilder<N,E1> edgeOrder(ElementOrder<E1> edgeOrder)",Specifies the order of iteration for the elements of Network.edges(). The default value is insertion order.
5470,common/collect,com.google.common.collect,Class ObjectArrays,"@GwtIncompatiblepublic static <T> T[] newArray(Class<T> type, int length)",Returns a new array of the given length with the specified component type.
5471,common/collect,com.google.common.collect,Class ObjectArrays,"public static <T> T[] newArray(T[] reference, int length)",Returns a new array of the given length with the same type as a reference array.
5472,common/collect,com.google.common.collect,Class ObjectArrays,"@GwtIncompatiblepublic static <T> T[] concat(T[] first, T[] second, Class<T> type)",Returns a new array that contains the concatenated contents of two arrays.
5473,common/collect,com.google.common.collect,Class ObjectArrays,"public static <T> T[] concat(T element, T[] array)",Returns a new array that prepends element to array.
5474,common/base,com.google.common.base,Class Objects,"public static boolean equal(@Nullable Object a, @Nullable Object b)","Determines whether two possibly-null objects are equal. Returns: true if a and b are both null. true if a and b are both non-null and they are equal according to Object.equals(Object). false in all other situations. This assumes that any non-null objects passed to this function conform to the equals() contract. Note for Java 7 and later: This method should be treated as deprecated; use Objects.equals(java.lang.Object, java.lang.Object) instead."
5475,common/base,com.google.common.base,Class Optional<T>,public static <T> Optional<T> absent(),Returns an Optional instance with no contained reference. Comparison to java.util.Optional: this method is equivalent to Java 8's Optional.empty.
5476,common/base,com.google.common.base,Class Optional<T>,public static <T> Optional<T> of(T reference),"Returns an Optional instance containing the given non-null reference. To have null treated as absent(), use fromNullable(T) instead. Comparison to java.util.Optional: no differences."
5477,common/base,com.google.common.base,Class Optional<T>,public static <T> Optional<T> fromNullable(T nullableReference),"If nullableReference is non-null, returns an Optional instance containing that reference; otherwise returns absent(). Comparison to java.util.Optional: this method is equivalent to Java 8's Optional.ofNullable."
5478,common/base,com.google.common.base,Class Optional<T>,public static <T> @Nullable Optional<T> fromJavaUtil(Optional<T> javaUtilOptional),"Returns the equivalent com.google.common.base.Optional value to the given java.util.Optional, or null if the argument is null."
5479,common/base,com.google.common.base,Class Optional<T>,public static <T> Optional<T> toJavaUtil(@Nullable Optional<T> googleOptional),"Returns the equivalent java.util.Optional value to the given com.google.common.base.Optional, or null if the argument is null. If googleOptional is known to be non-null, use googleOptional.toJavaUtil() instead. Unfortunately, the method reference Optional::toJavaUtil will not work, because it could refer to either the static or instance version of this method. Write out the lambda expression o -> Optional.toJavaUtil(o) instead."
5480,common/base,com.google.common.base,Class Optional<T>,public Optional<T> toJavaUtil(),"Returns the equivalent java.util.Optional value to this optional. Unfortunately, the method reference Optional::toJavaUtil will not work, because it could refer to either the static or instance version of this method. Write out the lambda expression o -> o.toJavaUtil() instead."
5481,common/base,com.google.common.base,Class Optional<T>,public abstract boolean isPresent(),Returns true if this holder contains a (non-null) instance. Comparison to java.util.Optional: no differences.
5482,common/base,com.google.common.base,Class Optional<T>,public abstract T get(),"Returns the contained instance, which must be present. If the instance might be absent, use or(Object) or orNull() instead. Comparison to java.util.Optional: when the value is absent, this method throws IllegalStateException, whereas the Java 8 counterpart throws NoSuchElementException."
5483,common/base,com.google.common.base,Class Optional<T>,public abstract T or(T defaultValue),"Returns the contained instance if it is present; defaultValue otherwise. If no default value should be required because the instance is known to be present, use get() instead. For a default value of null, use orNull(). Note about generics: The signature public T or(T defaultValue) is overly restrictive. However, the ideal signature, public <S super T> S or(S), is not legal Java. As a result, some sensible operations involving subtypes are compile errors: Optional<Integer> optionalInt = getSomeOptionalInt(); Number value = optionalInt.or(0.5); // error FluentIterable<? extends Number> numbers = getSomeNumbers(); Optional<? extends Number> first = numbers.first(); Number value = first.or(0.5); // error As a workaround, it is always safe to cast an Optional<? extends T> to Optional<T>. Casting either of the above example Optional instances to Optional<Number> (where Number is the desired output type) solves the problem: Optional<Number> optionalInt = (Optional) getSomeOptionalInt(); Number value = optionalInt.or(0.5); // fine FluentIterable<? extends Number> numbers = getSomeNumbers(); Optional<Number> first = (Optional) numbers.first(); Number value = first.or(0.5); // fine Comparison to java.util.Optional: this method is similar to Java 8's Optional.orElse, but will not accept null as a defaultValue (orNull() must be used instead). As a result, the value returned by this method is guaranteed non-null, which is not the case for the java.util equivalent."
5484,common/base,com.google.common.base,Class Optional<T>,public abstract Optional<T> or(Optional<? extends T> secondChoice),Returns this Optional if it has a value present; secondChoice otherwise. Comparison to java.util.Optional: this method has no equivalent in Java 8's Optional class; write thisOptional.isPresent() ? thisOptional : secondChoice instead.
5485,common/base,com.google.common.base,Class Optional<T>,@Betapublic abstract T or(Supplier<? extends T> supplier),"Returns the contained instance if it is present; supplier.get() otherwise. Comparison to java.util.Optional: this method is similar to Java 8's Optional.orElseGet, except when supplier returns null. In this case this method throws an exception, whereas the Java 8 method returns the null to the caller."
5486,common/base,com.google.common.base,Class Optional<T>,public abstract T orNull(),"Returns the contained instance if it is present; null otherwise. If the instance is known to be present, use get() instead. Comparison to java.util.Optional: this method is equivalent to Java 8's Optional.orElse(null)."
5487,common/base,com.google.common.base,Class Optional<T>,public abstract Set<T> asSet(),"Returns an immutable singleton Set whose only element is the contained instance if it is present; an empty immutable Set otherwise. Comparison to java.util.Optional: this method has no equivalent in Java 8's Optional class. However, this common usage: for (Foo foo : possibleFoo.asSet()) { doSomethingWith(foo); } ... can be replaced with: possibleFoo.ifPresent(foo -> doSomethingWith(foo)); Java 9 users: some use cases can be written with calls to optional.stream()."
5488,common/base,com.google.common.base,Class Optional<T>,"public abstract <V> Optional<V> transform(Function<? super T,V> function)","If the instance is present, it is transformed with the given Function; otherwise, absent() is returned. Comparison to java.util.Optional: this method is similar to Java 8's Optional.map, except when function returns null. In this case this method throws an exception, whereas the Java 8 method returns Optional.absent()."
5489,common/base,com.google.common.base,Class Optional<T>,public abstract boolean equals(@Nullable Object object),"Returns true if object is an Optional instance, and either the contained references are equal to each other or both are absent. Note that Optional instances of differing parameterized types can be equal. Comparison to java.util.Optional: no differences."
5490,common/base,com.google.common.base,Class Optional<T>,public abstract int hashCode(),"Returns a hash code for this instance. Comparison to java.util.Optional: this class leaves the specific choice of hash code unspecified, unlike the Java 8 equivalent."
5491,common/base,com.google.common.base,Class Optional<T>,public abstract String toString(),"Returns a string representation for this instance. Comparison to java.util.Optional: this class leaves the specific string representation unspecified, unlike the Java 8 equivalent."
5492,common/collect,com.google.common.collect,Class Ordering<T>,@GwtCompatible(serializable=true)public static <C extends Comparable> Ordering<C> natural(),"Returns a serializable ordering that uses the natural order of the values. The ordering throws a NullPointerException when passed a null parameter. The type specification is <C extends Comparable>, instead of the technically correct <C extends Comparable<? super C>>, to support legacy types from before Java 5. Java 8 users: use Comparator.naturalOrder() instead."
5493,common/collect,com.google.common.collect,Class Ordering<T>,@GwtCompatible(serializable=true)public static <T> Ordering<T> from(Comparator<T> comparator),"Returns an ordering based on an existing comparator instance. Note that it is unnecessary to create a new anonymous inner class implementing Comparator just to pass it in here. Instead, simply subclass Ordering and implement its compare method directly. Java 8 users: this class is now obsolete as explained in the class documentation, so there is no need to use this method."
5494,common/collect,com.google.common.collect,Class Ordering<T>,@GwtCompatible(serializable=true) @Deprecatedpublic static <T> Ordering<T> from(Ordering<T> ordering),Deprecated. no need to use this
5495,common/collect,com.google.common.collect,Class Ordering<T>,@GwtCompatible(serializable=true)public static <T> Ordering<T> explicit(List<T> valuesInOrder),Returns an ordering that compares objects according to the order in which they appear in the given list. Only objects present in the list (according to Object.equals(java.lang.Object)) may be compared. This comparator imposes a partial ordering over the type T. Subsequent changes to the valuesInOrder list will have no effect on the returned comparator. Null values in the list are not supported. The returned comparator throws a ClassCastException when it receives an input parameter that isn't among the provided values. The generated comparator is serializable if all the provided values are serializable.
5496,common/collect,com.google.common.collect,Class Ordering<T>,"@GwtCompatible(serializable=true)public static <T> Ordering<T> explicit(T leastValue, T... remainingValuesInOrder)",Returns an ordering that compares objects according to the order in which they are given to this method. Only objects present in the argument list (according to Object.equals(java.lang.Object)) may be compared. This comparator imposes a partial ordering over the type T. Null values in the argument list are not supported. The returned comparator throws a ClassCastException when it receives an input parameter that isn't among the provided values. The generated comparator is serializable if all the provided values are serializable.
5497,common/collect,com.google.common.collect,Class Ordering<T>,@GwtCompatible(serializable=true)public static Ordering<Object> allEqual(),"Returns an ordering which treats all values as equal, indicating no ordering. Passing this ordering to any stable sort algorithm results in no change to the order of elements. Note especially that sortedCopy(java.lang.Iterable<E>) and immutableSortedCopy(java.lang.Iterable<E>) are stable, and in the returned instance these are implemented by simply copying the source list. Example: Ordering.allEqual().nullsLast().sortedCopy( asList(t, null, e, s, null, t, null)) Assuming t, e and s are non-null, this returns [t, e, s, t, null, null, null] regardless of the true comparison order of those three values (which might not even implement Comparable at all). Warning: by definition, this comparator is not consistent with equals (as defined here). Avoid its use in APIs, such as TreeSet(Comparator), where such consistency is expected. The returned comparator is serializable. Java 8 users: Use the lambda expression (a, b) -> 0 instead (in certain cases you may need to cast that to Comparator<YourType>)."
5498,common/collect,com.google.common.collect,Class Ordering<T>,@GwtCompatible(serializable=true)public static Ordering<Object> usingToString(),Returns an ordering that compares objects by the natural ordering of their string representations as returned by toString(). It does not support null values. The comparator is serializable. Java 8 users: Use Comparator.comparing(Object::toString) instead.
5499,common/collect,com.google.common.collect,Class Ordering<T>,public static Ordering<Object> arbitrary(),"Returns an arbitrary ordering over all objects, for which compare(a, b) == 0 implies a == b (identity equality). There is no meaning whatsoever to the order imposed, but it is constant for the life of the VM. Because the ordering is identity-based, it is not consistent with Object.equals(Object) as defined by Comparator. Use caution when building a SortedSet or SortedMap from it, as the resulting collection will not behave exactly according to spec. This ordering is not serializable, as its implementation relies on System.identityHashCode(Object), so its behavior cannot be preserved across serialization."
5500,common/collect,com.google.common.collect,Class Ordering<T>,@GwtCompatible(serializable=true)public <S extends T> Ordering<S> reverse(),Returns the reverse of this ordering; the Ordering equivalent to Collections.reverseOrder(Comparator). Java 8 users: Use thisComparator.reversed() instead.
5501,common/collect,com.google.common.collect,Class Ordering<T>,@GwtCompatible(serializable=true)public <S extends T> Ordering<S> nullsFirst(),Returns an ordering that treats null as less than all other values and uses this to compare non-null values. Java 8 users: Use Comparator.nullsFirst(thisComparator) instead.
5502,common/collect,com.google.common.collect,Class Ordering<T>,@GwtCompatible(serializable=true)public <S extends T> Ordering<S> nullsLast(),Returns an ordering that treats null as greater than all other values and uses this ordering to compare non-null values. Java 8 users: Use Comparator.nullsLast(thisComparator) instead.
5503,common/collect,com.google.common.collect,Class Ordering<T>,"@GwtCompatible(serializable=true)public <F> Ordering<F> onResultOf(Function<F,? extends T> function)","Returns a new ordering on F which orders elements by first applying a function to them, then comparing those results using this. For example, to compare objects by their string forms, in a case-insensitive manner, use: Ordering.from(String.CASE_INSENSITIVE_ORDER) .onResultOf(Functions.toStringFunction()) Java 8 users: Use Comparator.comparing(function, thisComparator) instead (you can omit the comparator if it is the natural order)."
5504,common/collect,com.google.common.collect,Class Ordering<T>,@GwtCompatible(serializable=true)public <U extends T> Ordering<U> compound(Comparator<? super U> secondaryComparator),"Returns an ordering which first uses the ordering this, but which in the event of a tie, then delegates to secondaryComparator. For example, to sort a bug list first by status and second by priority, you might use byStatus.compound(byPriority). For a compound ordering with three or more components, simply chain multiple calls to this method. An ordering produced by this method, or a chain of calls to this method, is equivalent to one created using compound(Iterable) on the same component comparators. Java 8 users: Use thisComparator.thenComparing(secondaryComparator) instead. Depending on what secondaryComparator is, one of the other overloads of thenComparing may be even more useful."
5505,common/collect,com.google.common.collect,Class Ordering<T>,@GwtCompatible(serializable=true)public static <T> Ordering<T> compound(Iterable<? extends Comparator<? super T>> comparators),"Returns an ordering which tries each given comparator in order until a non-zero result is found, returning that result, and returning zero only if all comparators return zero. The returned ordering is based on the state of the comparators iterable at the time it was provided to this method. The returned ordering is equivalent to that produced using Ordering.from(comp1).compound(comp2).compound(comp3) . . .. Warning: Supplying an argument with undefined iteration order, such as a HashSet, will produce non-deterministic results. Java 8 users: Use a chain of calls to Comparator.thenComparing(Comparator), or comparatorCollection.stream().reduce(Comparator::thenComparing).get() (if the collection might be empty, also provide a default comparator as the identity parameter to reduce)."
5506,common/collect,com.google.common.collect,Class Ordering<T>,@GwtCompatible(serializable=true)public <S extends T> Ordering<Iterable<S>> lexicographical(),"Returns a new ordering which sorts iterables by comparing corresponding elements pairwise until a nonzero result is found; imposes dictionary order. If the end of one iterable is reached, but not the other, the shorter iterable is considered to be less than the longer one. For example, a lexicographical natural ordering over integers considers [] < [1] < [1, 1] < [1, 2] < [2]. Note that ordering.lexicographical().reverse() is not equivalent to ordering.reverse().lexicographical() (consider how each would order [1] and [1, 1]). Java 8 users: Use Comparators.lexicographical(Comparator) instead."
5507,common/collect,com.google.common.collect,Class Ordering<T>,"@CanIgnoreReturnValuepublic abstract int compare(T left, T right)",Description copied from interface: java.util.Comparator
5508,common/collect,com.google.common.collect,Class Ordering<T>,public <E extends T> E min(Iterator<E> iterator),"Returns the least of the specified values according to this ordering. If there are multiple least values, the first of those is returned. The iterator will be left exhausted: its hasNext() method will return false. Java 8 users: Use Streams.stream(iterator).min(thisComparator).get() instead (but note that it does not guarantee which tied minimum element is returned)."
5509,common/collect,com.google.common.collect,Class Ordering<T>,public <E extends T> E min(Iterable<E> iterable),"Returns the least of the specified values according to this ordering. If there are multiple least values, the first of those is returned. Java 8 users: If iterable is a Collection, use Collections.min(collection, thisComparator) instead. Otherwise, use Streams.stream(iterable).min(thisComparator).get() instead. Note that these alternatives do not guarantee which tied minimum element is returned)"
5510,common/collect,com.google.common.collect,Class Ordering<T>,"public <E extends T> E min(E a, E b)","Returns the lesser of the two values according to this ordering. If the values compare as 0, the first is returned. Implementation note: this method is invoked by the default implementations of the other min overloads, so overriding it will affect their behavior. Note: Consider using Comparators.min(a, b, thisComparator) instead. If thisComparator is natural(), then use Comparators.min(a, b)."
5511,common/collect,com.google.common.collect,Class Ordering<T>,"public <E extends T> E min(E a, E b, E c, E... rest)","Returns the least of the specified values according to this ordering. If there are multiple least values, the first of those is returned. Java 8 users: Use Collections.min(Arrays.asList(a, b, c...), thisComparator) instead (but note that it does not guarantee which tied minimum element is returned)."
5512,common/collect,com.google.common.collect,Class Ordering<T>,public <E extends T> E max(Iterator<E> iterator),"Returns the greatest of the specified values according to this ordering. If there are multiple greatest values, the first of those is returned. The iterator will be left exhausted: its hasNext() method will return false. Java 8 users: Use Streams.stream(iterator).max(thisComparator).get() instead (but note that it does not guarantee which tied maximum element is returned)."
5513,common/collect,com.google.common.collect,Class Ordering<T>,public <E extends T> E max(Iterable<E> iterable),"Returns the greatest of the specified values according to this ordering. If there are multiple greatest values, the first of those is returned. Java 8 users: If iterable is a Collection, use Collections.max(collection, thisComparator) instead. Otherwise, use Streams.stream(iterable).max(thisComparator).get() instead. Note that these alternatives do not guarantee which tied maximum element is returned)"
5514,common/collect,com.google.common.collect,Class Ordering<T>,"public <E extends T> E max(E a, E b)","Returns the greater of the two values according to this ordering. If the values compare as 0, the first is returned. Implementation note: this method is invoked by the default implementations of the other max overloads, so overriding it will affect their behavior. Note: Consider using Comparators.max(a, b, thisComparator) instead. If thisComparator is natural(), then use Comparators.max(a, b)."
5515,common/collect,com.google.common.collect,Class Ordering<T>,"public <E extends T> E max(E a, E b, E c, E... rest)","Returns the greatest of the specified values according to this ordering. If there are multiple greatest values, the first of those is returned. Java 8 users: Use Collections.max(Arrays.asList(a, b, c...), thisComparator) instead (but note that it does not guarantee which tied maximum element is returned)."
5516,common/collect,com.google.common.collect,Class Ordering<T>,"public <E extends T> List<E> leastOf(Iterable<E> iterable, int k)","Returns the k least elements of the given iterable according to this ordering, in order from least to greatest. If there are fewer than k elements present, all will be included. The implementation does not necessarily use a stable sorting algorithm; when multiple elements are equivalent, it is undefined which will come first. Java 8 users: Use Streams.stream(iterable).collect(Comparators.least(k, thisComparator)) instead."
5517,common/collect,com.google.common.collect,Class Ordering<T>,"public <E extends T> List<E> leastOf(Iterator<E> iterator, int k)","Returns the k least elements from the given iterator according to this ordering, in order from least to greatest. If there are fewer than k elements present, all will be included. The implementation does not necessarily use a stable sorting algorithm; when multiple elements are equivalent, it is undefined which will come first. Java 8 users: Use Streams.stream(iterator).collect(Comparators.least(k, thisComparator)) instead."
5518,common/collect,com.google.common.collect,Class Ordering<T>,"public <E extends T> List<E> greatestOf(Iterable<E> iterable, int k)","Returns the k greatest elements of the given iterable according to this ordering, in order from greatest to least. If there are fewer than k elements present, all will be included. The implementation does not necessarily use a stable sorting algorithm; when multiple elements are equivalent, it is undefined which will come first. Java 8 users: Use Streams.stream(iterable).collect(Comparators.greatest(k, thisComparator)) instead."
5519,common/collect,com.google.common.collect,Class Ordering<T>,"public <E extends T> List<E> greatestOf(Iterator<E> iterator, int k)","Returns the k greatest elements from the given iterator according to this ordering, in order from greatest to least. If there are fewer than k elements present, all will be included. The implementation does not necessarily use a stable sorting algorithm; when multiple elements are equivalent, it is undefined which will come first. Java 8 users: Use Streams.stream(iterator).collect(Comparators.greatest(k, thisComparator)) instead."
5520,common/collect,com.google.common.collect,Class Ordering<T>,public <E extends T> List<E> sortedCopy(Iterable<E> elements),"Returns a mutable list containing elements sorted by this ordering; use this only when the resulting list may need further modification, or may contain null. The input is not modified. The returned list is serializable and has random access. Unlike Sets.newTreeSet(Iterable), this method does not discard elements that are duplicates according to the comparator. The sort performed is stable, meaning that such elements will appear in the returned list in the same order they appeared in elements. Performance note: According to our benchmarking on Open JDK 7, immutableSortedCopy(java.lang.Iterable<E>) generally performs better (in both time and space) than this method, and this method in turn generally performs better than copying the list and calling Collections.sort(List)."
5521,common/collect,com.google.common.collect,Class Ordering<T>,public <E extends T> ImmutableList<E> immutableSortedCopy(Iterable<E> elements),"Returns an immutable list containing elements sorted by this ordering. The input is not modified. Unlike Sets.newTreeSet(Iterable), this method does not discard elements that are duplicates according to the comparator. The sort performed is stable, meaning that such elements will appear in the returned list in the same order they appeared in elements. Performance note: According to our benchmarking on Open JDK 7, this method is the most efficient way to make a sorted copy of a collection."
5522,common/collect,com.google.common.collect,Class Ordering<T>,public boolean isOrdered(Iterable<? extends T> iterable),"Returns true if each element in iterable after the first is greater than or equal to the element that preceded it, according to this ordering. Note that this is always true when the iterable has fewer than two elements. Java 8 users: Use the equivalent Comparators.isInOrder(Iterable, Comparator) instead, since the rest of Ordering is mostly obsolete (as explained in the class documentation)."
5523,common/collect,com.google.common.collect,Class Ordering<T>,public boolean isStrictlyOrdered(Iterable<? extends T> iterable),"Returns true if each element in iterable after the first is strictly greater than the element that preceded it, according to this ordering. Note that this is always true when the iterable has fewer than two elements. Java 8 users: Use the equivalent Comparators.isInStrictOrder(Iterable, Comparator) instead, since the rest of Ordering is mostly obsolete (as explained in the class documentation)."
5524,common/math,com.google.common.math,Class PairedStats,public long count(),Returns the number of pairs in the dataset.
5525,common/math,com.google.common.math,Class PairedStats,public Stats xStats(),Returns the statistics on the x values alone.
5526,common/math,com.google.common.math,Class PairedStats,public Stats yStats(),Returns the statistics on the y values alone.
5527,common/math,com.google.common.math,Class PairedStats,public double populationCovariance(),"Returns the population covariance of the values. The count must be non-zero. This is guaranteed to return zero if the dataset contains a single pair of finite values. It is not guaranteed to return zero when the dataset consists of the same pair of values multiple times, due to numerical errors. Non-finite valuesIf the dataset contains any non-finite values (Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, or Double.NaN) then the result is Double.NaN."
5528,common/math,com.google.common.math,Class PairedStats,public double sampleCovariance(),"Returns the sample covariance of the values. The count must be greater than one. This is not guaranteed to return zero when the dataset consists of the same pair of values multiple times, due to numerical errors. Non-finite valuesIf the dataset contains any non-finite values (Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, or Double.NaN) then the result is Double.NaN."
5529,common/math,com.google.common.math,Class PairedStats,public double pearsonsCorrelationCoefficient(),"Returns the Pearson's or product-moment correlation coefficient of the values. The count must greater than one, and the x and y values must both have non-zero population variance (i.e. xStats().populationVariance() > 0.0 && yStats().populationVariance() > 0.0). The result is not guaranteed to be exactly +/-1 even when the data are perfectly (anti-)correlated, due to numerical errors. However, it is guaranteed to be in the inclusive range [-1, +1]. Non-finite valuesIf the dataset contains any non-finite values (Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, or Double.NaN) then the result is Double.NaN."
5530,common/math,com.google.common.math,Class PairedStats,public LinearTransformation leastSquaresFit(),"Returns a linear transformation giving the best fit to the data according to Ordinary Least Squares linear regression of y as a function of x. The count must be greater than one, and either the x or y data must have a non-zero population variance (i.e. xStats().populationVariance() > 0.0 || yStats().populationVariance() > 0.0). The result is guaranteed to be horizontal if there is variance in the x data but not the y data, and vertical if there is variance in the y data but not the x data. This fit minimizes the root-mean-square error in y as a function of x. This error is defined as the square root of the mean of the squares of the differences between the actual y values of the data and the values predicted by the fit for the x values (i.e. it is the square root of the mean of the squares of the vertical distances between the data points and the best fit line). For this fit, this error is a fraction sqrt(1 - R*R) of the population standard deviation of y, where R is the Pearson's correlation coefficient (as given by pearsonsCorrelationCoefficient()). The corresponding root-mean-square error in x as a function of y is a fraction sqrt(1/(R*R) - 1) of the population standard deviation of x. This fit does not normally minimize that error: to do that, you should swap the roles of x and y. Non-finite valuesIf the dataset contains any non-finite values (Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, or Double.NaN) then the result is LinearTransformation.forNaN()."
5531,common/math,com.google.common.math,Class PairedStats,public boolean equals(@Nullable Object obj),"Indicates whether some other object is equal to this one. The equals method implements an equivalence relation on non-null object references: It is reflexive: for any non-null reference value x, x.equals(x) should return true. It is symmetric: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is transitive: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is consistent: for any non-null reference values x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes. Note: This tests exact equality of the calculated statistics, including the floating point values. Two instances are guaranteed to be considered equal if one is copied from the other using second = new PairedStatsAccumulator().addAll(first).snapshot(), if both were obtained by calling snapshot() on the same PairedStatsAccumulator without adding any values in between the two calls, or if one is obtained from the other after round-tripping through java serialization. However, floating point rounding errors mean that it may be false for some instances where the statistics are mathematically equal, including instances constructed from the same values in a different order... or (in the general case) even in the same order. (It is guaranteed to return true for instances constructed from the same values in the same order if strictfp is in effect, or if the system architecture guarantees strictfp-like semantics.)"
5532,common/math,com.google.common.math,Class PairedStats,public int hashCode(),"Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by HashMap. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the Object.equals(java.lang.Object) method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java™ programming language.) Note: This hash code is consistent with exact equality of the calculated statistics, including the floating point values. See the note on equals(java.lang.Object) for details."
5533,common/math,com.google.common.math,Class PairedStats,public String toString(),Description copied from class: java.lang.Object
5534,common/math,com.google.common.math,Class PairedStats,public byte[] toByteArray(),Gets a byte array representation of this instance. Note: No guarantees are made regarding stability of the representation between versions.
5535,common/math,com.google.common.math,Class PairedStatsAccumulator,"public void add(double x, double y)",Adds the given pair of values to the dataset.
5536,common/math,com.google.common.math,Class PairedStatsAccumulator,public void addAll(PairedStats values),"Adds the given statistics to the dataset, as if the individual values used to compute the statistics had been added directly."
5537,common/math,com.google.common.math,Class PairedStatsAccumulator,public PairedStats snapshot(),Returns an immutable snapshot of the current statistics.
5538,common/math,com.google.common.math,Class PairedStatsAccumulator,public long count(),Returns the number of pairs in the dataset.
5539,common/math,com.google.common.math,Class PairedStatsAccumulator,public Stats xStats(),Returns an immutable snapshot of the statistics on the x values alone.
5540,common/math,com.google.common.math,Class PairedStatsAccumulator,public Stats yStats(),Returns an immutable snapshot of the statistics on the y values alone.
5541,common/math,com.google.common.math,Class PairedStatsAccumulator,public double populationCovariance(),"Returns the population covariance of the values. The count must be non-zero. This is guaranteed to return zero if the dataset contains a single pair of finite values. It is not guaranteed to return zero when the dataset consists of the same pair of values multiple times, due to numerical errors. Non-finite valuesIf the dataset contains any non-finite values (Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, or Double.NaN) then the result is Double.NaN."
5542,common/math,com.google.common.math,Class PairedStatsAccumulator,public final double sampleCovariance(),"Returns the sample covariance of the values. The count must be greater than one. This is not guaranteed to return zero when the dataset consists of the same pair of values multiple times, due to numerical errors. Non-finite valuesIf the dataset contains any non-finite values (Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, or Double.NaN) then the result is Double.NaN."
5543,common/math,com.google.common.math,Class PairedStatsAccumulator,public final double pearsonsCorrelationCoefficient(),"Returns the Pearson's or product-moment correlation coefficient of the values. The count must greater than one, and the x and y values must both have non-zero population variance (i.e. xStats().populationVariance() > 0.0 && yStats().populationVariance() > 0.0). The result is not guaranteed to be exactly +/-1 even when the data are perfectly (anti-)correlated, due to numerical errors. However, it is guaranteed to be in the inclusive range [-1, +1]. Non-finite valuesIf the dataset contains any non-finite values (Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, or Double.NaN) then the result is Double.NaN."
5544,common/reflect,com.google.common.reflect,Class Parameter,public TypeToken<?> getType(),Returns the type of the parameter.
5545,common/reflect,com.google.common.reflect,Class Parameter,"public Invokable<?,?> getDeclaringInvokable()",Returns the Invokable that declares this parameter.
5546,common/reflect,com.google.common.reflect,Class Parameter,public boolean isAnnotationPresent(Class<? extends Annotation> annotationType),Description copied from interface: java.lang.reflect.AnnotatedElement
5547,common/reflect,com.google.common.reflect,Class Parameter,public <A extends Annotation> A getAnnotation(Class<A> annotationType),Description copied from interface: java.lang.reflect.AnnotatedElement
5548,common/reflect,com.google.common.reflect,Class Parameter,public Annotation[] getAnnotations(),Description copied from interface: java.lang.reflect.AnnotatedElement
5549,common/reflect,com.google.common.reflect,Class Parameter,public <A extends Annotation> A[] getAnnotationsByType(Class<A> annotationType),Description copied from interface: java.lang.reflect.AnnotatedElement
5550,common/reflect,com.google.common.reflect,Class Parameter,public Annotation[] getDeclaredAnnotations(),Description copied from interface: java.lang.reflect.AnnotatedElement
5551,common/reflect,com.google.common.reflect,Class Parameter,public <A extends Annotation> A getDeclaredAnnotation(Class<A> annotationType),Description copied from interface: java.lang.reflect.AnnotatedElement
5552,common/reflect,com.google.common.reflect,Class Parameter,public <A extends Annotation> A[] getDeclaredAnnotationsByType(Class<A> annotationType),Description copied from interface: java.lang.reflect.AnnotatedElement
5553,common/reflect,com.google.common.reflect,Class Parameter,public AnnotatedType getAnnotatedType(),
5554,common/reflect,com.google.common.reflect,Class Parameter,public boolean equals(@Nullable Object obj),Description copied from class: java.lang.Object
5555,common/reflect,com.google.common.reflect,Class Parameter,public int hashCode(),Description copied from class: java.lang.Object
5556,common/io,com.google.common.io,Class PatternFilenameFilter,public PatternFilenameFilter(String patternStr),Constructs a pattern file name filter object.
5557,common/collect,com.google.common.collect,Interface PeekingIterator<E>,E peek(),"Returns the next element in the iteration, without advancing the iteration. Calls to peek() should not change the state of the iteration, except that it may prevent removal of the most recent element via remove()."
5558,common/collect,com.google.common.collect,Interface PeekingIterator<E>,@CanIgnoreReturnValueE next(),Returns the next element in the iteration. The objects returned by consecutive calls to peek() then next() are guaranteed to be equal to each other.
5559,common/net,com.google.common.net,Class PercentEscaper,"protected int nextEscapeIndex(CharSequence csq, int index, int end)",Description copied from class: UnicodeEscaper
5560,common/net,com.google.common.net,Class PercentEscaper,public String escape(String s),Description copied from class: UnicodeEscaper
5561,common/base,com.google.common.base,Class Preconditions,public static void checkArgument(boolean expression),Ensures the truth of an expression involving one or more parameters to the calling method.
5562,common/base,com.google.common.base,Class Preconditions,"public static void checkArgument(boolean expression, @Nullable Object errorMessage)",Ensures the truth of an expression involving one or more parameters to the calling method.
5563,common/base,com.google.common.base,Class Preconditions,"public static void checkArgument(boolean expression, @Nullable String errorMessageTemplate, Object... errorMessageArgs)",Ensures the truth of an expression involving one or more parameters to the calling method.
5564,common/base,com.google.common.base,Class Preconditions,"public static void checkArgument(boolean b, @Nullable String errorMessageTemplate, char p1)","Ensures the truth of an expression involving one or more parameters to the calling method. See checkArgument(boolean, String, Object...) for details."
5565,common/base,com.google.common.base,Class Preconditions,"public static void checkArgument(boolean b, @Nullable String errorMessageTemplate, int p1)","Ensures the truth of an expression involving one or more parameters to the calling method. See checkArgument(boolean, String, Object...) for details."
5566,common/base,com.google.common.base,Class Preconditions,"public static void checkArgument(boolean b, @Nullable String errorMessageTemplate, long p1)","Ensures the truth of an expression involving one or more parameters to the calling method. See checkArgument(boolean, String, Object...) for details."
5567,common/base,com.google.common.base,Class Preconditions,"public static void checkArgument(boolean b, @Nullable String errorMessageTemplate, @Nullable Object p1)","Ensures the truth of an expression involving one or more parameters to the calling method. See checkArgument(boolean, String, Object...) for details."
5568,common/base,com.google.common.base,Class Preconditions,"public static void checkArgument(boolean b, @Nullable String errorMessageTemplate, char p1, char p2)","Ensures the truth of an expression involving one or more parameters to the calling method. See checkArgument(boolean, String, Object...) for details."
5569,common/base,com.google.common.base,Class Preconditions,"public static void checkArgument(boolean b, @Nullable String errorMessageTemplate, char p1, int p2)","Ensures the truth of an expression involving one or more parameters to the calling method. See checkArgument(boolean, String, Object...) for details."
5570,common/base,com.google.common.base,Class Preconditions,"public static void checkArgument(boolean b, @Nullable String errorMessageTemplate, char p1, long p2)","Ensures the truth of an expression involving one or more parameters to the calling method. See checkArgument(boolean, String, Object...) for details."
5571,common/base,com.google.common.base,Class Preconditions,"public static void checkArgument(boolean b, @Nullable String errorMessageTemplate, char p1, @Nullable Object p2)","Ensures the truth of an expression involving one or more parameters to the calling method. See checkArgument(boolean, String, Object...) for details."
5572,common/base,com.google.common.base,Class Preconditions,"public static void checkArgument(boolean b, @Nullable String errorMessageTemplate, int p1, char p2)","Ensures the truth of an expression involving one or more parameters to the calling method. See checkArgument(boolean, String, Object...) for details."
5573,common/base,com.google.common.base,Class Preconditions,"public static void checkArgument(boolean b, @Nullable String errorMessageTemplate, int p1, int p2)","Ensures the truth of an expression involving one or more parameters to the calling method. See checkArgument(boolean, String, Object...) for details."
5574,common/base,com.google.common.base,Class Preconditions,"public static void checkArgument(boolean b, @Nullable String errorMessageTemplate, int p1, long p2)","Ensures the truth of an expression involving one or more parameters to the calling method. See checkArgument(boolean, String, Object...) for details."
5575,common/base,com.google.common.base,Class Preconditions,"public static void checkArgument(boolean b, @Nullable String errorMessageTemplate, int p1, @Nullable Object p2)","Ensures the truth of an expression involving one or more parameters to the calling method. See checkArgument(boolean, String, Object...) for details."
5576,common/base,com.google.common.base,Class Preconditions,"public static void checkArgument(boolean b, @Nullable String errorMessageTemplate, long p1, char p2)","Ensures the truth of an expression involving one or more parameters to the calling method. See checkArgument(boolean, String, Object...) for details."
5577,common/base,com.google.common.base,Class Preconditions,"public static void checkArgument(boolean b, @Nullable String errorMessageTemplate, long p1, int p2)","Ensures the truth of an expression involving one or more parameters to the calling method. See checkArgument(boolean, String, Object...) for details."
5578,common/base,com.google.common.base,Class Preconditions,"public static void checkArgument(boolean b, @Nullable String errorMessageTemplate, long p1, long p2)","Ensures the truth of an expression involving one or more parameters to the calling method. See checkArgument(boolean, String, Object...) for details."
5579,common/base,com.google.common.base,Class Preconditions,"public static void checkArgument(boolean b, @Nullable String errorMessageTemplate, long p1, @Nullable Object p2)","Ensures the truth of an expression involving one or more parameters to the calling method. See checkArgument(boolean, String, Object...) for details."
5580,common/base,com.google.common.base,Class Preconditions,"public static void checkArgument(boolean b, @Nullable String errorMessageTemplate, @Nullable Object p1, char p2)","Ensures the truth of an expression involving one or more parameters to the calling method. See checkArgument(boolean, String, Object...) for details."
5581,common/base,com.google.common.base,Class Preconditions,"public static void checkArgument(boolean b, @Nullable String errorMessageTemplate, @Nullable Object p1, int p2)","Ensures the truth of an expression involving one or more parameters to the calling method. See checkArgument(boolean, String, Object...) for details."
5582,common/base,com.google.common.base,Class Preconditions,"public static void checkArgument(boolean b, @Nullable String errorMessageTemplate, @Nullable Object p1, long p2)","Ensures the truth of an expression involving one or more parameters to the calling method. See checkArgument(boolean, String, Object...) for details."
5583,common/base,com.google.common.base,Class Preconditions,"public static void checkArgument(boolean b, @Nullable String errorMessageTemplate, @Nullable Object p1, @Nullable Object p2)","Ensures the truth of an expression involving one or more parameters to the calling method. See checkArgument(boolean, String, Object...) for details."
5584,common/base,com.google.common.base,Class Preconditions,"public static void checkArgument(boolean b, @Nullable String errorMessageTemplate, @Nullable Object p1, @Nullable Object p2, @Nullable Object p3)","Ensures the truth of an expression involving one or more parameters to the calling method. See checkArgument(boolean, String, Object...) for details."
5585,common/base,com.google.common.base,Class Preconditions,"public static void checkArgument(boolean b, @Nullable String errorMessageTemplate, @Nullable Object p1, @Nullable Object p2, @Nullable Object p3, @Nullable Object p4)","Ensures the truth of an expression involving one or more parameters to the calling method. See checkArgument(boolean, String, Object...) for details."
5586,common/base,com.google.common.base,Class Preconditions,public static void checkState(boolean expression),"Ensures the truth of an expression involving the state of the calling instance, but not involving any parameters to the calling method."
5587,common/base,com.google.common.base,Class Preconditions,"public static void checkState(boolean expression, @Nullable Object errorMessage)","Ensures the truth of an expression involving the state of the calling instance, but not involving any parameters to the calling method."
5588,common/base,com.google.common.base,Class Preconditions,"public static void checkState(boolean expression, @Nullable String errorMessageTemplate, Object... errorMessageArgs)","Ensures the truth of an expression involving the state of the calling instance, but not involving any parameters to the calling method."
5589,common/base,com.google.common.base,Class Preconditions,"public static void checkState(boolean b, @Nullable String errorMessageTemplate, char p1)","Ensures the truth of an expression involving the state of the calling instance, but not involving any parameters to the calling method. See checkState(boolean, String, Object...) for details."
5590,common/base,com.google.common.base,Class Preconditions,"public static void checkState(boolean b, @Nullable String errorMessageTemplate, int p1)","Ensures the truth of an expression involving the state of the calling instance, but not involving any parameters to the calling method. See checkState(boolean, String, Object...) for details."
5591,common/base,com.google.common.base,Class Preconditions,"public static void checkState(boolean b, @Nullable String errorMessageTemplate, long p1)","Ensures the truth of an expression involving the state of the calling instance, but not involving any parameters to the calling method. See checkState(boolean, String, Object...) for details."
5592,common/base,com.google.common.base,Class Preconditions,"public static void checkState(boolean b, @Nullable String errorMessageTemplate, @Nullable Object p1)","Ensures the truth of an expression involving the state of the calling instance, but not involving any parameters to the calling method. See checkState(boolean, String, Object...) for details."
5593,common/base,com.google.common.base,Class Preconditions,"public static void checkState(boolean b, @Nullable String errorMessageTemplate, char p1, char p2)","Ensures the truth of an expression involving the state of the calling instance, but not involving any parameters to the calling method. See checkState(boolean, String, Object...) for details."
5594,common/base,com.google.common.base,Class Preconditions,"public static void checkState(boolean b, @Nullable String errorMessageTemplate, char p1, int p2)","Ensures the truth of an expression involving the state of the calling instance, but not involving any parameters to the calling method. See checkState(boolean, String, Object...) for details."
5595,common/base,com.google.common.base,Class Preconditions,"public static void checkState(boolean b, @Nullable String errorMessageTemplate, char p1, long p2)","Ensures the truth of an expression involving the state of the calling instance, but not involving any parameters to the calling method. See checkState(boolean, String, Object...) for details."
5596,common/base,com.google.common.base,Class Preconditions,"public static void checkState(boolean b, @Nullable String errorMessageTemplate, char p1, @Nullable Object p2)","Ensures the truth of an expression involving the state of the calling instance, but not involving any parameters to the calling method. See checkState(boolean, String, Object...) for details."
5597,common/base,com.google.common.base,Class Preconditions,"public static void checkState(boolean b, @Nullable String errorMessageTemplate, int p1, char p2)","Ensures the truth of an expression involving the state of the calling instance, but not involving any parameters to the calling method. See checkState(boolean, String, Object...) for details."
5598,common/base,com.google.common.base,Class Preconditions,"public static void checkState(boolean b, @Nullable String errorMessageTemplate, int p1, int p2)","Ensures the truth of an expression involving the state of the calling instance, but not involving any parameters to the calling method. See checkState(boolean, String, Object...) for details."
5599,common/base,com.google.common.base,Class Preconditions,"public static void checkState(boolean b, @Nullable String errorMessageTemplate, int p1, long p2)","Ensures the truth of an expression involving the state of the calling instance, but not involving any parameters to the calling method. See checkState(boolean, String, Object...) for details."
5600,common/base,com.google.common.base,Class Preconditions,"public static void checkState(boolean b, @Nullable String errorMessageTemplate, int p1, @Nullable Object p2)","Ensures the truth of an expression involving the state of the calling instance, but not involving any parameters to the calling method. See checkState(boolean, String, Object...) for details."
5601,common/base,com.google.common.base,Class Preconditions,"public static void checkState(boolean b, @Nullable String errorMessageTemplate, long p1, char p2)","Ensures the truth of an expression involving the state of the calling instance, but not involving any parameters to the calling method. See checkState(boolean, String, Object...) for details."
5602,common/base,com.google.common.base,Class Preconditions,"public static void checkState(boolean b, @Nullable String errorMessageTemplate, long p1, int p2)","Ensures the truth of an expression involving the state of the calling instance, but not involving any parameters to the calling method. See checkState(boolean, String, Object...) for details."
5603,common/base,com.google.common.base,Class Preconditions,"public static void checkState(boolean b, @Nullable String errorMessageTemplate, long p1, long p2)","Ensures the truth of an expression involving the state of the calling instance, but not involving any parameters to the calling method. See checkState(boolean, String, Object...) for details."
5604,common/base,com.google.common.base,Class Preconditions,"public static void checkState(boolean b, @Nullable String errorMessageTemplate, long p1, @Nullable Object p2)","Ensures the truth of an expression involving the state of the calling instance, but not involving any parameters to the calling method. See checkState(boolean, String, Object...) for details."
5605,common/base,com.google.common.base,Class Preconditions,"public static void checkState(boolean b, @Nullable String errorMessageTemplate, @Nullable Object p1, char p2)","Ensures the truth of an expression involving the state of the calling instance, but not involving any parameters to the calling method. See checkState(boolean, String, Object...) for details."
5606,common/base,com.google.common.base,Class Preconditions,"public static void checkState(boolean b, @Nullable String errorMessageTemplate, @Nullable Object p1, int p2)","Ensures the truth of an expression involving the state of the calling instance, but not involving any parameters to the calling method. See checkState(boolean, String, Object...) for details."
5607,common/base,com.google.common.base,Class Preconditions,"public static void checkState(boolean b, @Nullable String errorMessageTemplate, @Nullable Object p1, long p2)","Ensures the truth of an expression involving the state of the calling instance, but not involving any parameters to the calling method. See checkState(boolean, String, Object...) for details."
5608,common/base,com.google.common.base,Class Preconditions,"public static void checkState(boolean b, @Nullable String errorMessageTemplate, @Nullable Object p1, @Nullable Object p2)","Ensures the truth of an expression involving the state of the calling instance, but not involving any parameters to the calling method. See checkState(boolean, String, Object...) for details."
5609,common/base,com.google.common.base,Class Preconditions,"public static void checkState(boolean b, @Nullable String errorMessageTemplate, @Nullable Object p1, @Nullable Object p2, @Nullable Object p3)","Ensures the truth of an expression involving the state of the calling instance, but not involving any parameters to the calling method. See checkState(boolean, String, Object...) for details."
5610,common/base,com.google.common.base,Class Preconditions,"public static void checkState(boolean b, @Nullable String errorMessageTemplate, @Nullable Object p1, @Nullable Object p2, @Nullable Object p3, @Nullable Object p4)","Ensures the truth of an expression involving the state of the calling instance, but not involving any parameters to the calling method. See checkState(boolean, String, Object...) for details."
5611,common/base,com.google.common.base,Class Preconditions,@CanIgnoreReturnValuepublic static <T> T checkNotNull(T reference),Ensures that an object reference passed as a parameter to the calling method is not null.
5612,common/base,com.google.common.base,Class Preconditions,"@CanIgnoreReturnValuepublic static <T> T checkNotNull(T reference, @Nullable Object errorMessage)",Ensures that an object reference passed as a parameter to the calling method is not null.
5613,common/base,com.google.common.base,Class Preconditions,"@CanIgnoreReturnValuepublic static <T> T checkNotNull(T reference, @Nullable String errorMessageTemplate, Object... errorMessageArgs)",Ensures that an object reference passed as a parameter to the calling method is not null.
5614,common/base,com.google.common.base,Class Preconditions,"@CanIgnoreReturnValuepublic static <T> T checkNotNull(T obj, @Nullable String errorMessageTemplate, char p1)","Ensures that an object reference passed as a parameter to the calling method is not null. See checkNotNull(Object, String, Object...) for details."
5615,common/base,com.google.common.base,Class Preconditions,"@CanIgnoreReturnValuepublic static <T> T checkNotNull(T obj, @Nullable String errorMessageTemplate, int p1)","Ensures that an object reference passed as a parameter to the calling method is not null. See checkNotNull(Object, String, Object...) for details."
5616,common/base,com.google.common.base,Class Preconditions,"@CanIgnoreReturnValuepublic static <T> T checkNotNull(T obj, @Nullable String errorMessageTemplate, long p1)","Ensures that an object reference passed as a parameter to the calling method is not null. See checkNotNull(Object, String, Object...) for details."
5617,common/base,com.google.common.base,Class Preconditions,"@CanIgnoreReturnValuepublic static <T> T checkNotNull(T obj, @Nullable String errorMessageTemplate, @Nullable Object p1)","Ensures that an object reference passed as a parameter to the calling method is not null. See checkNotNull(Object, String, Object...) for details."
5618,common/base,com.google.common.base,Class Preconditions,"@CanIgnoreReturnValuepublic static <T> T checkNotNull(T obj, @Nullable String errorMessageTemplate, char p1, char p2)","Ensures that an object reference passed as a parameter to the calling method is not null. See checkNotNull(Object, String, Object...) for details."
5619,common/base,com.google.common.base,Class Preconditions,"@CanIgnoreReturnValuepublic static <T> T checkNotNull(T obj, @Nullable String errorMessageTemplate, char p1, int p2)","Ensures that an object reference passed as a parameter to the calling method is not null. See checkNotNull(Object, String, Object...) for details."
5620,common/base,com.google.common.base,Class Preconditions,"@CanIgnoreReturnValuepublic static <T> T checkNotNull(T obj, @Nullable String errorMessageTemplate, char p1, long p2)","Ensures that an object reference passed as a parameter to the calling method is not null. See checkNotNull(Object, String, Object...) for details."
5621,common/base,com.google.common.base,Class Preconditions,"@CanIgnoreReturnValuepublic static <T> T checkNotNull(T obj, @Nullable String errorMessageTemplate, char p1, @Nullable Object p2)","Ensures that an object reference passed as a parameter to the calling method is not null. See checkNotNull(Object, String, Object...) for details."
5622,common/base,com.google.common.base,Class Preconditions,"@CanIgnoreReturnValuepublic static <T> T checkNotNull(T obj, @Nullable String errorMessageTemplate, int p1, char p2)","Ensures that an object reference passed as a parameter to the calling method is not null. See checkNotNull(Object, String, Object...) for details."
5623,common/base,com.google.common.base,Class Preconditions,"@CanIgnoreReturnValuepublic static <T> T checkNotNull(T obj, @Nullable String errorMessageTemplate, int p1, int p2)","Ensures that an object reference passed as a parameter to the calling method is not null. See checkNotNull(Object, String, Object...) for details."
5624,common/base,com.google.common.base,Class Preconditions,"@CanIgnoreReturnValuepublic static <T> T checkNotNull(T obj, @Nullable String errorMessageTemplate, int p1, long p2)","Ensures that an object reference passed as a parameter to the calling method is not null. See checkNotNull(Object, String, Object...) for details."
5625,common/base,com.google.common.base,Class Preconditions,"@CanIgnoreReturnValuepublic static <T> T checkNotNull(T obj, @Nullable String errorMessageTemplate, int p1, @Nullable Object p2)","Ensures that an object reference passed as a parameter to the calling method is not null. See checkNotNull(Object, String, Object...) for details."
5626,common/base,com.google.common.base,Class Preconditions,"@CanIgnoreReturnValuepublic static <T> T checkNotNull(T obj, @Nullable String errorMessageTemplate, long p1, char p2)","Ensures that an object reference passed as a parameter to the calling method is not null. See checkNotNull(Object, String, Object...) for details."
5627,common/base,com.google.common.base,Class Preconditions,"@CanIgnoreReturnValuepublic static <T> T checkNotNull(T obj, @Nullable String errorMessageTemplate, long p1, int p2)","Ensures that an object reference passed as a parameter to the calling method is not null. See checkNotNull(Object, String, Object...) for details."
5628,common/base,com.google.common.base,Class Preconditions,"@CanIgnoreReturnValuepublic static <T> T checkNotNull(T obj, @Nullable String errorMessageTemplate, long p1, long p2)","Ensures that an object reference passed as a parameter to the calling method is not null. See checkNotNull(Object, String, Object...) for details."
5629,common/base,com.google.common.base,Class Preconditions,"@CanIgnoreReturnValuepublic static <T> T checkNotNull(T obj, @Nullable String errorMessageTemplate, long p1, @Nullable Object p2)","Ensures that an object reference passed as a parameter to the calling method is not null. See checkNotNull(Object, String, Object...) for details."
5630,common/base,com.google.common.base,Class Preconditions,"@CanIgnoreReturnValuepublic static <T> T checkNotNull(T obj, @Nullable String errorMessageTemplate, @Nullable Object p1, char p2)","Ensures that an object reference passed as a parameter to the calling method is not null. See checkNotNull(Object, String, Object...) for details."
5631,common/base,com.google.common.base,Class Preconditions,"@CanIgnoreReturnValuepublic static <T> T checkNotNull(T obj, @Nullable String errorMessageTemplate, @Nullable Object p1, int p2)","Ensures that an object reference passed as a parameter to the calling method is not null. See checkNotNull(Object, String, Object...) for details."
5632,common/base,com.google.common.base,Class Preconditions,"@CanIgnoreReturnValuepublic static <T> T checkNotNull(T obj, @Nullable String errorMessageTemplate, @Nullable Object p1, long p2)","Ensures that an object reference passed as a parameter to the calling method is not null. See checkNotNull(Object, String, Object...) for details."
5633,common/base,com.google.common.base,Class Preconditions,"@CanIgnoreReturnValuepublic static <T> T checkNotNull(T obj, @Nullable String errorMessageTemplate, @Nullable Object p1, @Nullable Object p2)","Ensures that an object reference passed as a parameter to the calling method is not null. See checkNotNull(Object, String, Object...) for details."
5634,common/base,com.google.common.base,Class Preconditions,"@CanIgnoreReturnValuepublic static <T> T checkNotNull(T obj, @Nullable String errorMessageTemplate, @Nullable Object p1, @Nullable Object p2, @Nullable Object p3)","Ensures that an object reference passed as a parameter to the calling method is not null. See checkNotNull(Object, String, Object...) for details."
5635,common/base,com.google.common.base,Class Preconditions,"@CanIgnoreReturnValuepublic static <T> T checkNotNull(T obj, @Nullable String errorMessageTemplate, @Nullable Object p1, @Nullable Object p2, @Nullable Object p3, @Nullable Object p4)","Ensures that an object reference passed as a parameter to the calling method is not null. See checkNotNull(Object, String, Object...) for details."
5636,common/base,com.google.common.base,Class Preconditions,"@CanIgnoreReturnValuepublic static int checkElementIndex(int index, int size)","Ensures that index specifies a valid element in an array, list or string of size size. An element index may range from zero, inclusive, to size, exclusive."
5637,common/base,com.google.common.base,Class Preconditions,"@CanIgnoreReturnValuepublic static int checkElementIndex(int index, int size, @Nullable String desc)","Ensures that index specifies a valid element in an array, list or string of size size. An element index may range from zero, inclusive, to size, exclusive."
5638,common/base,com.google.common.base,Class Preconditions,"@CanIgnoreReturnValuepublic static int checkPositionIndex(int index, int size)","Ensures that index specifies a valid position in an array, list or string of size size. A position index may range from zero to size, inclusive."
5639,common/base,com.google.common.base,Class Preconditions,"@CanIgnoreReturnValuepublic static int checkPositionIndex(int index, int size, @Nullable String desc)","Ensures that index specifies a valid position in an array, list or string of size size. A position index may range from zero to size, inclusive."
5640,common/base,com.google.common.base,Interface Predicate<T>,@CanIgnoreReturnValueboolean apply(T input),"Returns the result of applying this predicate to input (Java 8 users, see notes in the class documentation above). This method is generally expected, but not absolutely required, to have the following properties: Its execution does not cause any observable side effects. The computation is consistent with equals; that is, Objects.equal(a, b) implies that predicate.apply(a) == predicate.apply(b)). "
5641,common/base,com.google.common.base,Interface Predicate<T>,boolean equals(@Nullable Object object),"Indicates whether another object is equal to this predicate. Most implementations will have no reason to override the behavior of Object.equals(java.lang.Object). However, an implementation may also choose to return true whenever object is a Predicate that it considers interchangeable with this one. Interchangeable typically means that this.apply(t) == that.apply(t) for all t of type T). Note that a false result from this method does not imply that the predicates are known not to be interchangeable."
5642,common/base,com.google.common.base,Class Predicates,@GwtCompatible(serializable=true)public static <T> Predicate<T> alwaysTrue(),Returns a predicate that always evaluates to true.
5643,common/base,com.google.common.base,Class Predicates,@GwtCompatible(serializable=true)public static <T> Predicate<T> alwaysFalse(),Returns a predicate that always evaluates to false.
5644,common/base,com.google.common.base,Class Predicates,@GwtCompatible(serializable=true)public static <T> Predicate<T> isNull(),Returns a predicate that evaluates to true if the object reference being tested is null.
5645,common/base,com.google.common.base,Class Predicates,@GwtCompatible(serializable=true)public static <T> Predicate<T> notNull(),Returns a predicate that evaluates to true if the object reference being tested is not null.
5646,common/base,com.google.common.base,Class Predicates,public static <T> Predicate<T> not(Predicate<T> predicate),Returns a predicate that evaluates to true if the given predicate evaluates to false.
5647,common/base,com.google.common.base,Class Predicates,public static <T> Predicate<T> and(Iterable<? extends Predicate<? super T>> components),"Returns a predicate that evaluates to true if each of its components evaluates to true. The components are evaluated in order, and evaluation will be short-circuited as soon as a false predicate is found. It defensively copies the iterable passed in, so future changes to it won't alter the behavior of this predicate. If components is empty, the returned predicate will always evaluate to true."
5648,common/base,com.google.common.base,Class Predicates,@SafeVarargspublic static <T> Predicate<T> and(Predicate<? super T>... components),"Returns a predicate that evaluates to true if each of its components evaluates to true. The components are evaluated in order, and evaluation will be short-circuited as soon as a false predicate is found. It defensively copies the array passed in, so future changes to it won't alter the behavior of this predicate. If components is empty, the returned predicate will always evaluate to true."
5649,common/base,com.google.common.base,Class Predicates,"public static <T> Predicate<T> and(Predicate<? super T> first, Predicate<? super T> second)","Returns a predicate that evaluates to true if both of its components evaluate to true. The components are evaluated in order, and evaluation will be short-circuited as soon as a false predicate is found."
5650,common/base,com.google.common.base,Class Predicates,public static <T> Predicate<T> or(Iterable<? extends Predicate<? super T>> components),"Returns a predicate that evaluates to true if any one of its components evaluates to true. The components are evaluated in order, and evaluation will be short-circuited as soon as a true predicate is found. It defensively copies the iterable passed in, so future changes to it won't alter the behavior of this predicate. If components is empty, the returned predicate will always evaluate to false."
5651,common/base,com.google.common.base,Class Predicates,@SafeVarargspublic static <T> Predicate<T> or(Predicate<? super T>... components),"Returns a predicate that evaluates to true if any one of its components evaluates to true. The components are evaluated in order, and evaluation will be short-circuited as soon as a true predicate is found. It defensively copies the array passed in, so future changes to it won't alter the behavior of this predicate. If components is empty, the returned predicate will always evaluate to false."
5652,common/base,com.google.common.base,Class Predicates,"public static <T> Predicate<T> or(Predicate<? super T> first, Predicate<? super T> second)","Returns a predicate that evaluates to true if either of its components evaluates to true. The components are evaluated in order, and evaluation will be short-circuited as soon as a true predicate is found."
5653,common/base,com.google.common.base,Class Predicates,public static <T> Predicate<T> equalTo(T target),Returns a predicate that evaluates to true if the object being tested equals() the given target or both are null.
5654,common/base,com.google.common.base,Class Predicates,@GwtIncompatiblepublic static Predicate<Object> instanceOf(Class<?> clazz),"Returns a predicate that evaluates to true if the object being tested is an instance of the given class. If the object being tested is null this predicate evaluates to false. If you want to filter an Iterable to narrow its type, consider using Iterables.filter(Iterable, Class) in preference. Warning: contrary to the typical assumptions about predicates (as documented at Predicate.apply(T)), the returned predicate may not be consistent with equals. For example, instanceOf(ArrayList.class) will yield different results for the two equal instances Lists.newArrayList(1) and Arrays.asList(1)."
5655,common/base,com.google.common.base,Class Predicates,@GwtIncompatible @Betapublic static Predicate<Class<?>> subtypeOf(Class<?> clazz),"Returns a predicate that evaluates to true if the class being tested is assignable to (is a subtype of) clazz. Example: List<Class<?>> classes = Arrays.asList( Object.class, String.class, Number.class, Long.class); return Iterables.filter(classes, subtypeOf(Number.class)); The code above returns an iterable containing Number.class and Long.class."
5656,common/base,com.google.common.base,Class Predicates,public static <T> Predicate<T> in(Collection<? extends T> target),"Returns a predicate that evaluates to true if the object reference being tested is a member of the given collection. It does not defensively copy the collection passed in, so future changes to it will alter the behavior of the predicate. This method can technically accept any Collection<?>, but using a typed collection helps prevent bugs. This approach doesn't block any potential users since it is always possible to use Predicates.<Object>in()."
5657,common/base,com.google.common.base,Class Predicates,"public static <A,B> Predicate<A> compose(Predicate<B> predicate, Function<A,? extends B> function)","Returns the composition of a function and a predicate. For every x, the generated predicate returns predicate(function(x))."
5658,common/base,com.google.common.base,Class Predicates,@GwtIncompatiblepublic static Predicate<CharSequence> containsPattern(String pattern),Returns a predicate that evaluates to true if the CharSequence being tested contains any match for the given regular expression pattern. The test used is equivalent to Pattern.compile(pattern).matcher(arg).find()
5659,common/primitives,com.google.common.primitives,Class Primitives,public static Set<Class<?>> allPrimitiveTypes(),Returns an immutable set of all nine primitive types (including void). Note that a simpler way to test whether a Class instance is a member of this set is to call Class.isPrimitive().
5660,common/primitives,com.google.common.primitives,Class Primitives,public static Set<Class<?>> allWrapperTypes(),Returns an immutable set of all nine primitive-wrapper types (including Void).
5661,common/primitives,com.google.common.primitives,Class Primitives,public static boolean isWrapperType(Class<?> type),"Returns true if type is one of the nine primitive-wrapper types, such as Integer."
5662,common/primitives,com.google.common.primitives,Class Primitives,public static <T> Class<T> wrap(Class<T> type),Returns the corresponding wrapper type of type if it is a primitive type; otherwise returns type itself. Idempotent. wrap(int.class) == Integer.class wrap(Integer.class) == Integer.class wrap(String.class) == String.class 
5663,common/hash,com.google.common.hash,Interface PrimitiveSink,PrimitiveSink putByte(byte b),Puts a byte into this sink.
5664,common/hash,com.google.common.hash,Interface PrimitiveSink,PrimitiveSink putBytes(byte[] bytes),Puts an array of bytes into this sink.
5665,common/hash,com.google.common.hash,Interface PrimitiveSink,"PrimitiveSink putBytes(byte[] bytes, int off, int len)","Puts a chunk of an array of bytes into this sink. bytes[off] is the first byte written, bytes[off + len - 1] is the last."
5666,common/hash,com.google.common.hash,Interface PrimitiveSink,PrimitiveSink putBytes(ByteBuffer bytes),"Puts the remaining bytes of a byte buffer into this sink. bytes.position() is the first byte written, bytes.limit() - 1 is the last. The position of the buffer will be equal to the limit when this method returns."
5667,common/hash,com.google.common.hash,Interface PrimitiveSink,PrimitiveSink putShort(short s),Puts a short into this sink.
5668,common/hash,com.google.common.hash,Interface PrimitiveSink,PrimitiveSink putInt(int i),Puts an int into this sink.
5669,common/hash,com.google.common.hash,Interface PrimitiveSink,PrimitiveSink putLong(long l),Puts a long into this sink.
5670,common/hash,com.google.common.hash,Interface PrimitiveSink,PrimitiveSink putFloat(float f),Puts a float into this sink.
5671,common/hash,com.google.common.hash,Interface PrimitiveSink,PrimitiveSink putDouble(double d),Puts a double into this sink.
5672,common/hash,com.google.common.hash,Interface PrimitiveSink,PrimitiveSink putBoolean(boolean b),Puts a boolean into this sink.
5673,common/hash,com.google.common.hash,Interface PrimitiveSink,PrimitiveSink putChar(char c),Puts a character into this sink.
5674,common/hash,com.google.common.hash,Interface PrimitiveSink,PrimitiveSink putUnencodedChars(CharSequence charSequence),"Puts each 16-bit code unit from the CharSequence into this sink. Warning: This method will produce different output than most other languages do when running on the equivalent input. For cross-language compatibility, use putString(java.lang.CharSequence, java.nio.charset.Charset), usually with a charset of UTF-8. For other use cases, use putUnencodedChars."
5675,common/math,com.google.common.math,Class Quantiles,public static Quantiles.ScaleAndIndex median(),Specifies the computation of a median (i.e. the 1st 2-quantile).
5676,common/math,com.google.common.math,Class Quantiles,public static Quantiles.Scale quartiles(),Specifies the computation of quartiles (i.e. 4-quantiles).
5677,common/math,com.google.common.math,Class Quantiles,public static Quantiles.Scale percentiles(),Specifies the computation of percentiles (i.e. 100-quantiles).
5678,common/math,com.google.common.math,Class Quantiles.Scale,public Quantiles.ScaleAndIndex index(int index),"Specifies a single quantile index to be calculated, i.e. the k in the kth q-quantile."
5679,common/math,com.google.common.math,Class Quantiles.Scale,public Quantiles.ScaleAndIndexes indexes(int... indexes),"Specifies multiple quantile indexes to be calculated, each index being the k in the kth q-quantile."
5680,common/math,com.google.common.math,Class Quantiles.ScaleAndIndex,public double compute(Collection<? extends Number> dataset),Computes the quantile value of the given dataset.
5681,common/math,com.google.common.math,Class Quantiles.ScaleAndIndex,public double compute(double... dataset),Computes the quantile value of the given dataset.
5682,common/math,com.google.common.math,Class Quantiles.ScaleAndIndex,public double compute(long... dataset),Computes the quantile value of the given dataset.
5683,common/math,com.google.common.math,Class Quantiles.ScaleAndIndex,public double compute(int... dataset),Computes the quantile value of the given dataset.
5684,common/math,com.google.common.math,Class Quantiles.ScaleAndIndexes,"public Map<Integer,Double> compute(Collection<? extends Number> dataset)",Computes the quantile values of the given dataset.
5685,common/math,com.google.common.math,Class Quantiles.ScaleAndIndexes,"public Map<Integer,Double> compute(double... dataset)",Computes the quantile values of the given dataset.
5686,common/math,com.google.common.math,Class Quantiles.ScaleAndIndexes,"public Map<Integer,Double> compute(long... dataset)",Computes the quantile values of the given dataset.
5687,common/math,com.google.common.math,Class Quantiles.ScaleAndIndexes,"public Map<Integer,Double> compute(int... dataset)",Computes the quantile values of the given dataset.
5688,common/collect,com.google.common.collect,Class Queues,@GwtIncompatiblepublic static <E> ArrayBlockingQueue<E> newArrayBlockingQueue(int capacity),Creates an empty ArrayBlockingQueue with the given (fixed) capacity and nonfair access policy.
5689,common/collect,com.google.common.collect,Class Queues,public static <E> ArrayDeque<E> newArrayDeque(),Creates an empty ArrayDeque.
5690,common/collect,com.google.common.collect,Class Queues,public static <E> ArrayDeque<E> newArrayDeque(Iterable<? extends E> elements),"Creates an ArrayDeque containing the elements of the specified iterable, in the order they are returned by the iterable's iterator."
5691,common/collect,com.google.common.collect,Class Queues,@GwtIncompatiblepublic static <E> ConcurrentLinkedQueue<E> newConcurrentLinkedQueue(),Creates an empty ConcurrentLinkedQueue.
5692,common/collect,com.google.common.collect,Class Queues,@GwtIncompatiblepublic static <E> ConcurrentLinkedQueue<E> newConcurrentLinkedQueue(Iterable<? extends E> elements),"Creates a ConcurrentLinkedQueue containing the elements of the specified iterable, in the order they are returned by the iterable's iterator."
5693,common/collect,com.google.common.collect,Class Queues,@GwtIncompatiblepublic static <E> LinkedBlockingDeque<E> newLinkedBlockingDeque(),Creates an empty LinkedBlockingDeque with a capacity of Integer.MAX_VALUE.
5694,common/collect,com.google.common.collect,Class Queues,@GwtIncompatiblepublic static <E> LinkedBlockingDeque<E> newLinkedBlockingDeque(int capacity),Creates an empty LinkedBlockingDeque with the given (fixed) capacity.
5695,common/collect,com.google.common.collect,Class Queues,@GwtIncompatiblepublic static <E> LinkedBlockingDeque<E> newLinkedBlockingDeque(Iterable<? extends E> elements),"Creates a LinkedBlockingDeque with a capacity of Integer.MAX_VALUE, containing the elements of the specified iterable, in the order they are returned by the iterable's iterator."
5696,common/collect,com.google.common.collect,Class Queues,@GwtIncompatiblepublic static <E> LinkedBlockingQueue<E> newLinkedBlockingQueue(),Creates an empty LinkedBlockingQueue with a capacity of Integer.MAX_VALUE.
5697,common/collect,com.google.common.collect,Class Queues,@GwtIncompatiblepublic static <E> LinkedBlockingQueue<E> newLinkedBlockingQueue(int capacity),Creates an empty LinkedBlockingQueue with the given (fixed) capacity.
5698,common/collect,com.google.common.collect,Class Queues,@GwtIncompatiblepublic static <E> LinkedBlockingQueue<E> newLinkedBlockingQueue(Iterable<? extends E> elements),"Creates a LinkedBlockingQueue with a capacity of Integer.MAX_VALUE, containing the elements of the specified iterable, in the order they are returned by the iterable's iterator."
5699,common/collect,com.google.common.collect,Class Queues,@GwtIncompatiblepublic static <E extends Comparable> PriorityBlockingQueue<E> newPriorityBlockingQueue(),Creates an empty PriorityBlockingQueue with the ordering given by its elements' natural ordering.
5700,common/collect,com.google.common.collect,Class Queues,@GwtIncompatiblepublic static <E extends Comparable> PriorityBlockingQueue<E> newPriorityBlockingQueue(Iterable<? extends E> elements),"Creates a PriorityBlockingQueue containing the given elements. Note: If the specified iterable is a SortedSet or a PriorityQueue, this priority queue will be ordered according to the same ordering."
5701,common/collect,com.google.common.collect,Class Queues,public static <E extends Comparable> PriorityQueue<E> newPriorityQueue(),Creates an empty PriorityQueue with the ordering given by its elements' natural ordering.
5702,common/collect,com.google.common.collect,Class Queues,public static <E extends Comparable> PriorityQueue<E> newPriorityQueue(Iterable<? extends E> elements),"Creates a PriorityQueue containing the given elements. Note: If the specified iterable is a SortedSet or a PriorityQueue, this priority queue will be ordered according to the same ordering."
5703,common/collect,com.google.common.collect,Class Queues,@GwtIncompatiblepublic static <E> SynchronousQueue<E> newSynchronousQueue(),Creates an empty SynchronousQueue with nonfair access policy.
5704,common/collect,com.google.common.collect,Class Queues,"@Beta @CanIgnoreReturnValue @GwtIncompatiblepublic static <E> int drain(BlockingQueue<E> q, Collection<? super E> buffer, int numElements, Duration timeout) throws InterruptedException","Drains the queue as BlockingQueue.drainTo(Collection, int), but if the requested numElements elements are not available, it will wait for them up to the specified timeout."
5705,common/collect,com.google.common.collect,Class Queues,"@Beta @CanIgnoreReturnValue @GwtIncompatiblepublic static <E> int drain(BlockingQueue<E> q, Collection<? super E> buffer, int numElements, long timeout, TimeUnit unit) throws InterruptedException","Drains the queue as BlockingQueue.drainTo(Collection, int), but if the requested numElements elements are not available, it will wait for them up to the specified timeout."
5706,common/collect,com.google.common.collect,Class Queues,"@Beta @CanIgnoreReturnValue @GwtIncompatiblepublic static <E> int drainUninterruptibly(BlockingQueue<E> q, Collection<? super E> buffer, int numElements, Duration timeout)","Drains the queue as drain(BlockingQueue, Collection, int, Duration), but with a different behavior in case it is interrupted while waiting. In that case, the operation will continue as usual, and in the end the thread's interruption status will be set (no InterruptedException is thrown)."
5707,common/collect,com.google.common.collect,Class Queues,"@Beta @CanIgnoreReturnValue @GwtIncompatiblepublic static <E> int drainUninterruptibly(BlockingQueue<E> q, Collection<? super E> buffer, int numElements, long timeout, TimeUnit unit)","Drains the queue as drain(BlockingQueue, Collection, int, long, TimeUnit), but with a different behavior in case it is interrupted while waiting. In that case, the operation will continue as usual, and in the end the thread's interruption status will be set (no InterruptedException is thrown)."
5708,common/collect,com.google.common.collect,Class Queues,public static <E> Queue<E> synchronizedQueue(Queue<E> queue),"Returns a synchronized (thread-safe) queue backed by the specified queue. In order to guarantee serial access, it is critical that all access to the backing queue is accomplished through the returned queue. It is imperative that the user manually synchronize on the returned queue when accessing the queue's iterator: Queue<E> queue = Queues.synchronizedQueue(MinMaxPriorityQueue.<E>create()); ... queue.add(element); // Needn't be in synchronized block ... synchronized (queue) { // Must synchronize on queue! Iterator<E> i = queue.iterator(); // Must be in synchronized block while (i.hasNext()) { foo(i.next()); } } Failure to follow this advice may result in non-deterministic behavior. The returned queue will be serializable if the specified queue is serializable."
5709,common/collect,com.google.common.collect,Class Range<C extends Comparable>,"public static <C extends Comparable<?>> Range<C> open(C lower, C upper)",Returns a range that contains all values strictly greater than lower and strictly less than upper.
5710,common/collect,com.google.common.collect,Class Range<C extends Comparable>,"public static <C extends Comparable<?>> Range<C> closed(C lower, C upper)",Returns a range that contains all values greater than or equal to lower and less than or equal to upper.
5711,common/collect,com.google.common.collect,Class Range<C extends Comparable>,"public static <C extends Comparable<?>> Range<C> closedOpen(C lower, C upper)",Returns a range that contains all values greater than or equal to lower and strictly less than upper.
5712,common/collect,com.google.common.collect,Class Range<C extends Comparable>,"public static <C extends Comparable<?>> Range<C> openClosed(C lower, C upper)",Returns a range that contains all values strictly greater than lower and less than or equal to upper.
5713,common/collect,com.google.common.collect,Class Range<C extends Comparable>,"public static <C extends Comparable<?>> Range<C> range(C lower, BoundType lowerType, C upper, BoundType upperType)","Returns a range that contains any value from lower to upper, where each endpoint may be either inclusive (closed) or exclusive (open)."
5714,common/collect,com.google.common.collect,Class Range<C extends Comparable>,public static <C extends Comparable<?>> Range<C> lessThan(C endpoint),Returns a range that contains all values strictly less than endpoint.
5715,common/collect,com.google.common.collect,Class Range<C extends Comparable>,public static <C extends Comparable<?>> Range<C> atMost(C endpoint),Returns a range that contains all values less than or equal to endpoint.
5716,common/collect,com.google.common.collect,Class Range<C extends Comparable>,"public static <C extends Comparable<?>> Range<C> upTo(C endpoint, BoundType boundType)","Returns a range with no lower bound up to the given endpoint, which may be either inclusive (closed) or exclusive (open)."
5717,common/collect,com.google.common.collect,Class Range<C extends Comparable>,public static <C extends Comparable<?>> Range<C> greaterThan(C endpoint),Returns a range that contains all values strictly greater than endpoint.
5718,common/collect,com.google.common.collect,Class Range<C extends Comparable>,public static <C extends Comparable<?>> Range<C> atLeast(C endpoint),Returns a range that contains all values greater than or equal to endpoint.
5719,common/collect,com.google.common.collect,Class Range<C extends Comparable>,"public static <C extends Comparable<?>> Range<C> downTo(C endpoint, BoundType boundType)","Returns a range from the given endpoint, which may be either inclusive (closed) or exclusive (open), with no upper bound."
5720,common/collect,com.google.common.collect,Class Range<C extends Comparable>,public static <C extends Comparable<?>> Range<C> all(),Returns a range that contains every value of type C.
5721,common/collect,com.google.common.collect,Class Range<C extends Comparable>,public static <C extends Comparable<?>> Range<C> singleton(C value),Returns a range that contains only the given value. The returned range is closed on both ends.
5722,common/collect,com.google.common.collect,Class Range<C extends Comparable>,public static <C extends Comparable<?>> Range<C> encloseAll(Iterable<C> values),Returns the minimal range that contains all of the given values. The returned range is closed on both ends.
5723,common/collect,com.google.common.collect,Class Range<C extends Comparable>,public boolean hasLowerBound(),Returns true if this range has a lower endpoint.
5724,common/collect,com.google.common.collect,Class Range<C extends Comparable>,public C lowerEndpoint(),Returns the lower endpoint of this range.
5725,common/collect,com.google.common.collect,Class Range<C extends Comparable>,public BoundType lowerBoundType(),"Returns the type of this range's lower bound: BoundType.CLOSED if the range includes its lower endpoint, BoundType.OPEN if it does not."
5726,common/collect,com.google.common.collect,Class Range<C extends Comparable>,public boolean hasUpperBound(),Returns true if this range has an upper endpoint.
5727,common/collect,com.google.common.collect,Class Range<C extends Comparable>,public C upperEndpoint(),Returns the upper endpoint of this range.
5728,common/collect,com.google.common.collect,Class Range<C extends Comparable>,public BoundType upperBoundType(),"Returns the type of this range's upper bound: BoundType.CLOSED if the range includes its upper endpoint, BoundType.OPEN if it does not."
5729,common/collect,com.google.common.collect,Class Range<C extends Comparable>,public boolean isEmpty(),"Returns true if this range is of the form [v..v) or (v..v]. (This does not encompass ranges of the form (v..v), because such ranges are invalid and can't be constructed at all.) Note that certain discrete ranges such as the integer range (3..4) are not considered empty, even though they contain no actual values. In these cases, it may be helpful to preprocess ranges with canonical(DiscreteDomain)."
5730,common/collect,com.google.common.collect,Class Range<C extends Comparable>,public boolean contains(C value),"Returns true if value is within the bounds of this range. For example, on the range [0..2), contains(1) returns true, while contains(2) returns false."
5731,common/collect,com.google.common.collect,Class Range<C extends Comparable>,@Deprecatedpublic boolean apply(C input),Deprecated. Provided only to satisfy the Predicate interface; use contains(C) instead.
5732,common/collect,com.google.common.collect,Class Range<C extends Comparable>,public boolean containsAll(Iterable<? extends C> values),Returns true if every element in values is contained in this range.
5733,common/collect,com.google.common.collect,Class Range<C extends Comparable>,public boolean encloses(Range<C> other),"Returns true if the bounds of other do not extend outside the bounds of this range. Examples: [3..6] encloses [4..5](3..6) encloses (3..6)[3..6] encloses [4..4) (even though the latter is empty) (3..6] does not enclose [3..6][4..5] does not enclose (3..6) (even though it contains every value contained by the latter range) [3..6] does not enclose (1..1] (even though it contains every value contained by the latter range) Note that if a.encloses(b), then b.contains(v) implies a.contains(v), but as the last two examples illustrate, the converse is not always true. Being reflexive, antisymmetric and transitive, the encloses relation defines a partial order over ranges. There exists a unique maximal range according to this relation, and also numerous minimal ranges. Enclosure also implies connectedness."
5734,common/collect,com.google.common.collect,Class Range<C extends Comparable>,public boolean isConnected(Range<C> other),"Returns true if there exists a (possibly empty) range which is enclosed by both this range and other. For example, [2, 4) and [5, 7) are not connected [2, 4) and [3, 5) are connected, because both enclose [3, 4)[2, 4) and [4, 6) are connected, because both enclose the empty range [4, 4)Note that this range and other have a well-defined union and intersection (as a single, possibly-empty range) if and only if this method returns true. The connectedness relation is both reflexive and symmetric, but does not form an equivalence relation as it is not transitive. Note that certain discrete ranges are not considered connected, even though there are no elements between them. For example, [3, 5] is not considered connected to [6, 10]. In these cases, it may be desirable for both input ranges to be preprocessed with canonical(DiscreteDomain) before testing for connectedness."
5735,common/collect,com.google.common.collect,Class Range<C extends Comparable>,public Range<C> intersection(Range<C> connectedRange),"Returns the maximal range enclosed by both this range and connectedRange, if such a range exists. For example, the intersection of [1..5] and (3..7) is (3..5]. The resulting range may be empty; for example, [1..5) intersected with [5..7) yields the empty range [5..5). The intersection exists if and only if the two ranges are connected. The intersection operation is commutative, associative and idempotent, and its identity element is all())."
5736,common/collect,com.google.common.collect,Class Range<C extends Comparable>,public Range<C> gap(Range<C> otherRange),"Returns the maximal range lying between this range and otherRange, if such a range exists. The resulting range may be empty if the two ranges are adjacent but non-overlapping. For example, the gap of [1..5] and (7..10) is (5..7]. The resulting range may be empty; for example, the gap between [1..5) [5..7) yields the empty range [5..5). The gap exists if and only if the two ranges are either disconnected or immediately adjacent (any intersection must be an empty range). The gap operation is commutative."
5737,common/collect,com.google.common.collect,Class Range<C extends Comparable>,public Range<C> span(Range<C> other),"Returns the minimal range that encloses both this range and other. For example, the span of [1..3] and (5..7) is [1..7). If the input ranges are connected, the returned range can also be called their union. If they are not, note that the span might contain values that are not contained in either input range. Like intersection, this operation is commutative, associative and idempotent. Unlike it, it is always well-defined for any two input ranges."
5738,common/collect,com.google.common.collect,Class Range<C extends Comparable>,public Range<C> canonical(DiscreteDomain<C> domain),"Returns the canonical form of this range in the given domain. The canonical form has the following properties: equivalence: a.canonical().contains(v) == a.contains(v) for all v (in other words, ContiguousSet.create(a.canonical(domain), domain).equals( ContiguousSet.create(a, domain))uniqueness: unless a.isEmpty(), ContiguousSet.create(a, domain).equals(ContiguousSet.create(b, domain)) implies a.canonical(domain).equals(b.canonical(domain))idempotence: a.canonical(domain).canonical(domain).equals(a.canonical(domain))Furthermore, this method guarantees that the range returned will be one of the following canonical forms: [start..end) [start..+∞) (-∞..end) (only if type C is unbounded below) (-∞..+∞) (only if type C is unbounded below) "
5739,common/collect,com.google.common.collect,Class Range<C extends Comparable>,public boolean equals(@Nullable Object object),"Returns true if object is a range having the same endpoints and bound types as this range. Note that discrete ranges such as (1..4) and [2..3] are not equal to one another, despite the fact that they each contain precisely the same set of values. Similarly, empty ranges are not equal unless they have exactly the same representation, so [3..3), (3..3], (4..4] are all unequal."
5740,common/collect,com.google.common.collect,Class Range<C extends Comparable>,public int hashCode(),Returns a hash code for this range.
5741,common/collect,com.google.common.collect,"Interface RangeMap<K extends Comparable,V>",V get(K key),"Returns the value associated with the specified key, or null if there is no such value. Specifically, if any range in this range map contains the specified key, the value associated with that range is returned."
5742,common/collect,com.google.common.collect,"Interface RangeMap<K extends Comparable,V>","@Nullable Map.Entry<Range<K>,V> getEntry(K key)","Returns the range containing this key and its associated value, if such a range is present in the range map, or null otherwise."
5743,common/collect,com.google.common.collect,"Interface RangeMap<K extends Comparable,V>",Range<K> span(),Returns the minimal range enclosing the ranges in this RangeMap.
5744,common/collect,com.google.common.collect,"Interface RangeMap<K extends Comparable,V>","void put(Range<K> range, V value)","Maps a range to a specified value (optional operation). Specifically, after a call to put(range, value), if range.contains(k), then get(k) will return value. If range is empty, then this is a no-op."
5745,common/collect,com.google.common.collect,"Interface RangeMap<K extends Comparable,V>","void putCoalescing(Range<K> range, V value)","Maps a range to a specified value, coalescing this range with any existing ranges with the same value that are connected to this range. The behavior of get(k) after calling this method is identical to the behavior described in put(range, value), however the ranges returned from asMapOfRanges() will be different if there were existing entries which connect to the given range and value. Even if the input range is empty, if it is connected on both sides by ranges mapped to the same value those two ranges will be coalesced. Note: coalescing requires calling .equals() on any connected values, which may be expensive depending on the value type. Using this method on range maps with large values such as Collection types is discouraged."
5746,common/collect,com.google.common.collect,"Interface RangeMap<K extends Comparable,V>","void putAll(RangeMap<K,V> rangeMap)",Puts all the associations from rangeMap into this range map (optional operation).
5747,common/collect,com.google.common.collect,"Interface RangeMap<K extends Comparable,V>",void clear(),Removes all associations from this range map (optional operation).
5748,common/collect,com.google.common.collect,"Interface RangeMap<K extends Comparable,V>",void remove(Range<K> range),"Removes all associations from this range map in the specified range (optional operation). If !range.contains(k), get(k) will return the same result before and after a call to remove(range). If range.contains(k), then after a call to remove(range), get(k) will return null."
5749,common/collect,com.google.common.collect,"Interface RangeMap<K extends Comparable,V>","void merge(Range<K> range, V value, BiFunction<? super V,? super V,? extends V> remappingFunction)","Merges a value into the map over a range by applying a remapping function. If any parts of the range are already present in this range map, those parts are mapped to new values by applying the remapping function. Any parts of the range not already present in this range map are mapped to the specified value, unless the value is null. Any existing map entry spanning either range boundary may be split at the boundary, even if the merge does not affect its value. For example, if rangeMap had one entry [1, 5] => 3 then rangeMap.merge(Range.closed(0,2), 3, Math::max) could yield a range map with the entries [0, 1) => 3, [1, 2] => 3, (2, 5] => 3."
5750,common/collect,com.google.common.collect,"Interface RangeMap<K extends Comparable,V>","Map<Range<K>,V> asMapOfRanges()","Returns a view of this range map as an unmodifiable Map<Range<K>, V>. Modifications to this range map are guaranteed to read through to the returned Map. The returned Map iterates over entries in ascending order of the bounds of the Range entries. It is guaranteed that no empty ranges will be in the returned Map."
5751,common/collect,com.google.common.collect,"Interface RangeMap<K extends Comparable,V>","Map<Range<K>,V> asDescendingMapOfRanges()","Returns a view of this range map as an unmodifiable Map<Range<K>, V>. Modifications to this range map are guaranteed to read through to the returned Map. The returned Map iterates over entries in descending order of the bounds of the Range entries. It is guaranteed that no empty ranges will be in the returned Map."
5752,common/collect,com.google.common.collect,"Interface RangeMap<K extends Comparable,V>","RangeMap<K,V> subRangeMap(Range<K> range)","Returns a view of the part of this range map that intersects with range. For example, if rangeMap had the entries [1, 5] => foo, (6, 8) => bar, (10, ∞) => baz then rangeMap.subRangeMap(Range.open(3, 12)) would return a range map with the entries (3, 5] => foo, (6, 8) => bar, (10, 12) => baz. The returned range map supports all optional operations that this range map supports, except for asMapOfRanges().iterator().remove(). The returned range map will throw an IllegalArgumentException on an attempt to insert a range not enclosed by range."
5753,common/collect,com.google.common.collect,"Interface RangeMap<K extends Comparable,V>",boolean equals(@Nullable Object o),Returns true if obj is another RangeMap that has an equivalent asMapOfRanges().
5754,common/collect,com.google.common.collect,"Interface RangeMap<K extends Comparable,V>",int hashCode(),Returns asMapOfRanges().hashCode().
5755,common/collect,com.google.common.collect,Interface RangeSet<C extends Comparable>,boolean contains(C value),Determines whether any of this range set's member ranges contains value.
5756,common/collect,com.google.common.collect,Interface RangeSet<C extends Comparable>,Range<C> rangeContaining(C value),"Returns the unique range from this range set that contains value, or null if this range set does not contain value."
5757,common/collect,com.google.common.collect,Interface RangeSet<C extends Comparable>,boolean intersects(Range<C> otherRange),Returns true if there exists a non-empty range enclosed by both a member range in this range set and the specified range. This is equivalent to calling subRangeSet(otherRange) and testing whether the resulting range set is non-empty.
5758,common/collect,com.google.common.collect,Interface RangeSet<C extends Comparable>,boolean encloses(Range<C> otherRange),Returns true if there exists a member range in this range set which encloses the specified range.
5759,common/collect,com.google.common.collect,Interface RangeSet<C extends Comparable>,boolean enclosesAll(RangeSet<C> other),Returns true if for each member range in other there exists a member range in this range set which encloses it. It follows that this.contains(value) whenever other.contains(value). Returns true if other is empty. This is equivalent to checking if this range set encloses(com.google.common.collect.Range<C>) each of the ranges in other.
5760,common/collect,com.google.common.collect,Interface RangeSet<C extends Comparable>,default boolean enclosesAll(Iterable<Range<C>> other),Returns true if for each range in other there exists a member range in this range set which encloses it. Returns true if other is empty. This is equivalent to checking if this range set encloses(com.google.common.collect.Range<C>) each range in other.
5761,common/collect,com.google.common.collect,Interface RangeSet<C extends Comparable>,boolean isEmpty(),Returns true if this range set contains no ranges.
5762,common/collect,com.google.common.collect,Interface RangeSet<C extends Comparable>,Range<C> span(),Returns the minimal range which encloses all ranges in this range set.
5763,common/collect,com.google.common.collect,Interface RangeSet<C extends Comparable>,Set<Range<C>> asRanges(),"Returns a view of the disconnected ranges that make up this range set. The returned set may be empty. The iterators returned by its Iterable.iterator() method return the ranges in increasing order of lower bound (equivalently, of upper bound)."
5764,common/collect,com.google.common.collect,Interface RangeSet<C extends Comparable>,Set<Range<C>> asDescendingSetOfRanges(),"Returns a descending view of the disconnected ranges that make up this range set. The returned set may be empty. The iterators returned by its Iterable.iterator() method return the ranges in decreasing order of lower bound (equivalently, of upper bound)."
5765,common/collect,com.google.common.collect,Interface RangeSet<C extends Comparable>,RangeSet<C> complement(),"Returns a view of the complement of this RangeSet. The returned view supports the add(com.google.common.collect.Range<C>) operation if this RangeSet supports remove(com.google.common.collect.Range<C>), and vice versa."
5766,common/collect,com.google.common.collect,Interface RangeSet<C extends Comparable>,RangeSet<C> subRangeSet(Range<C> view),"Returns a view of the intersection of this RangeSet with the specified range. The returned view supports all optional operations supported by this RangeSet, with the caveat that an IllegalArgumentException is thrown on an attempt to add any range not enclosed by view."
5767,common/collect,com.google.common.collect,Interface RangeSet<C extends Comparable>,void add(Range<C> range),"Adds the specified range to this RangeSet (optional operation). That is, for equal range sets a and b, the result of a.add(range) is that a will be the minimal range set for which both a.enclosesAll(b) and a.encloses(range). Note that range will be coalesced with any ranges in the range set that are connected with it. Moreover, if range is empty, this is a no-op."
5768,common/collect,com.google.common.collect,Interface RangeSet<C extends Comparable>,void remove(Range<C> range),"Removes the specified range from this RangeSet (optional operation). After this operation, if range.contains(c), this.contains(c) will return false. If range is empty, this is a no-op."
5769,common/collect,com.google.common.collect,Interface RangeSet<C extends Comparable>,void clear(),"Removes all ranges from this RangeSet (optional operation). After this operation, this.contains(c) will return false for all c. This is equivalent to remove(Range.all())."
5770,common/collect,com.google.common.collect,Interface RangeSet<C extends Comparable>,void addAll(RangeSet<C> other),"Adds all of the ranges from the specified range set to this range set (optional operation). After this operation, this range set is the minimal range set that encloses both the original range set and other. This is equivalent to calling add(com.google.common.collect.Range<C>) on each of the ranges in other in turn."
5771,common/collect,com.google.common.collect,Interface RangeSet<C extends Comparable>,default void addAll(Iterable<Range<C>> ranges),"Adds all of the specified ranges to this range set (optional operation). After this operation, this range set is the minimal range set that encloses both the original range set and each range in other. This is equivalent to calling add(com.google.common.collect.Range<C>) on each of the ranges in other in turn."
5772,common/collect,com.google.common.collect,Interface RangeSet<C extends Comparable>,void removeAll(RangeSet<C> other),"Removes all of the ranges from the specified range set from this range set (optional operation). After this operation, if other.contains(c), this.contains(c) will return false. This is equivalent to calling remove(com.google.common.collect.Range<C>) on each of the ranges in other in turn."
5773,common/collect,com.google.common.collect,Interface RangeSet<C extends Comparable>,default void removeAll(Iterable<Range<C>> ranges),Removes all of the specified ranges from this range set (optional operation). This is equivalent to calling remove(com.google.common.collect.Range<C>) on each of the ranges in other in turn.
5774,common/collect,com.google.common.collect,Interface RangeSet<C extends Comparable>,boolean equals(@Nullable Object obj),Returns true if obj is another RangeSet that contains the same ranges according to Range.equals(Object).
5775,common/collect,com.google.common.collect,Interface RangeSet<C extends Comparable>,int hashCode(),Returns asRanges().hashCode().
5776,util/concurrent,com.google.common.util.concurrent,Class RateLimiter,public static RateLimiter create(double permitsPerSecond),"Creates a RateLimiter with the specified stable throughput, given as permits per second (commonly referred to as QPS, queries per second). The returned RateLimiter ensures that on average no more than permitsPerSecond are issued during any given second, with sustained requests being smoothly spread over each second. When the incoming request rate exceeds permitsPerSecond the rate limiter will release one permit every (1.0 / permitsPerSecond) seconds. When the rate limiter is unused, bursts of up to permitsPerSecond permits will be allowed, with subsequent requests being smoothly limited at the stable rate of permitsPerSecond."
5777,util/concurrent,com.google.common.util.concurrent,Class RateLimiter,"public static RateLimiter create(double permitsPerSecond, Duration warmupPeriod)","Creates a RateLimiter with the specified stable throughput, given as permits per second (commonly referred to as QPS, queries per second), and a warmup period, during which the RateLimiter smoothly ramps up its rate, until it reaches its maximum rate at the end of the period (as long as there are enough requests to saturate it). Similarly, if the RateLimiter is left unused for a duration of warmupPeriod, it will gradually return to its cold state, i.e. it will go through the same warming up process as when it was first created. The returned RateLimiter is intended for cases where the resource that actually fulfills the requests (e.g., a remote server) needs warmup time, rather than being immediately accessed at the stable (maximum) rate. The returned RateLimiter starts in a cold state (i.e. the warmup period will follow), and if it is left unused for long enough, it will return to that state."
5778,util/concurrent,com.google.common.util.concurrent,Class RateLimiter,"public static RateLimiter create(double permitsPerSecond, long warmupPeriod, TimeUnit unit)","Creates a RateLimiter with the specified stable throughput, given as permits per second (commonly referred to as QPS, queries per second), and a warmup period, during which the RateLimiter smoothly ramps up its rate, until it reaches its maximum rate at the end of the period (as long as there are enough requests to saturate it). Similarly, if the RateLimiter is left unused for a duration of warmupPeriod, it will gradually return to its cold state, i.e. it will go through the same warming up process as when it was first created. The returned RateLimiter is intended for cases where the resource that actually fulfills the requests (e.g., a remote server) needs warmup time, rather than being immediately accessed at the stable (maximum) rate. The returned RateLimiter starts in a cold state (i.e. the warmup period will follow), and if it is left unused for long enough, it will return to that state."
5779,util/concurrent,com.google.common.util.concurrent,Class RateLimiter,public final void setRate(double permitsPerSecond),"Updates the stable rate of this RateLimiter, that is, the permitsPerSecond argument provided in the factory method that constructed the RateLimiter. Currently throttled threads will not be awakened as a result of this invocation, thus they do not observe the new rate; only subsequent requests will. Note though that, since each request repays (by waiting, if necessary) the cost of the previous request, this means that the very next request after an invocation to setRate will not be affected by the new rate; it will pay the cost of the previous request, which is in terms of the previous rate. The behavior of the RateLimiter is not modified in any other way, e.g. if the RateLimiter was configured with a warmup period of 20 seconds, it still has a warmup period of 20 seconds after this method invocation."
5780,util/concurrent,com.google.common.util.concurrent,Class RateLimiter,public final double getRate(),"Returns the stable rate (as permits per seconds) with which this RateLimiter is configured with. The initial value of this is the same as the permitsPerSecond argument passed in the factory method that produced this RateLimiter, and it is only updated after invocations to setRate(double)."
5781,util/concurrent,com.google.common.util.concurrent,Class RateLimiter,@CanIgnoreReturnValuepublic double acquire(),"Acquires a single permit from this RateLimiter, blocking until the request can be granted. Tells the amount of time slept, if any. This method is equivalent to acquire(1)."
5782,util/concurrent,com.google.common.util.concurrent,Class RateLimiter,@CanIgnoreReturnValuepublic double acquire(int permits),"Acquires the given number of permits from this RateLimiter, blocking until the request can be granted. Tells the amount of time slept, if any."
5783,util/concurrent,com.google.common.util.concurrent,Class RateLimiter,public boolean tryAcquire(Duration timeout),"Acquires a permit from this RateLimiter if it can be obtained without exceeding the specified timeout, or returns false immediately (without waiting) if the permit would not have been granted before the timeout expired. This method is equivalent to tryAcquire(1, timeout)."
5784,util/concurrent,com.google.common.util.concurrent,Class RateLimiter,"public boolean tryAcquire(long timeout, TimeUnit unit)","Acquires a permit from this RateLimiter if it can be obtained without exceeding the specified timeout, or returns false immediately (without waiting) if the permit would not have been granted before the timeout expired. This method is equivalent to tryAcquire(1, timeout, unit)."
5785,util/concurrent,com.google.common.util.concurrent,Class RateLimiter,public boolean tryAcquire(int permits),"Acquires permits from this RateLimiter if it can be acquired immediately without delay. This method is equivalent to tryAcquire(permits, 0, anyUnit)."
5786,util/concurrent,com.google.common.util.concurrent,Class RateLimiter,public boolean tryAcquire(),Acquires a permit from this RateLimiter if it can be acquired immediately without delay. This method is equivalent to tryAcquire(1).
5787,util/concurrent,com.google.common.util.concurrent,Class RateLimiter,"public boolean tryAcquire(int permits, Duration timeout)","Acquires the given number of permits from this RateLimiter if it can be obtained without exceeding the specified timeout, or returns false immediately (without waiting) if the permits would not have been granted before the timeout expired."
5788,util/concurrent,com.google.common.util.concurrent,Class RateLimiter,"public boolean tryAcquire(int permits, long timeout, TimeUnit unit)","Acquires the given number of permits from this RateLimiter if it can be obtained without exceeding the specified timeout, or returns false immediately (without waiting) if the permits would not have been granted before the timeout expired."
5789,common/io,com.google.common.io,Enum RecursiveDeleteOption,public static RecursiveDeleteOption[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (RecursiveDeleteOption c : RecursiveDeleteOption.values())  System.out.println(c);"
5790,common/reflect,com.google.common.reflect,Class Reflection,public static String getPackageName(Class<?> clazz),"Returns the package name of clazz according to the Java Language Specification (section 6.7). Unlike Class.getPackage(), this method only parses the class name, without attempting to define the Package and hence load files."
5791,common/reflect,com.google.common.reflect,Class Reflection,public static String getPackageName(String classFullName),"Returns the package name of classFullName according to the Java Language Specification (section 6.7). Unlike Class.getPackage(), this method only parses the class name, without attempting to define the Package and hence load files."
5792,common/reflect,com.google.common.reflect,Class Reflection,public static void initialize(Class<?>... classes),"Ensures that the given classes are initialized, as described in JLS Section 12.4.2. WARNING: Normally it's a smell if a class needs to be explicitly initialized, because static state hurts system maintainability and testability. In cases when you have no choice while inter-operating with a legacy framework, this method helps to keep the code less ugly."
5793,common/cache,com.google.common.cache,Enum RemovalCause,public static final RemovalCause EXPLICIT,"The entry was manually removed by the user. This can result from the user invoking Cache.invalidate(java.lang.Object), Cache.invalidateAll(Iterable), Cache.invalidateAll(), Map.remove(java.lang.Object), ConcurrentMap.remove(java.lang.Object, java.lang.Object), or Iterator.remove()."
5794,common/cache,com.google.common.cache,Enum RemovalCause,public static final RemovalCause REPLACED,"The entry itself was not actually removed, but its value was replaced by the user. This can result from the user invoking Cache.put(K, V), LoadingCache.refresh(K), Map.put(K, V), Map.putAll(java.util.Map<? extends K, ? extends V>), ConcurrentMap.replace(Object, Object), or ConcurrentMap.replace(Object, Object, Object)."
5795,common/cache,com.google.common.cache,Enum RemovalCause,public static final RemovalCause COLLECTED,"The entry was removed automatically because its key or value was garbage-collected. This can occur when using CacheBuilder.weakKeys(), CacheBuilder.weakValues(), or CacheBuilder.softValues()."
5796,common/cache,com.google.common.cache,Enum RemovalCause,public static final RemovalCause EXPIRED,The entry's expiration timestamp has passed. This can occur when using CacheBuilder.expireAfterWrite(java.time.Duration) or CacheBuilder.expireAfterAccess(java.time.Duration).
5797,common/cache,com.google.common.cache,Enum RemovalCause,public static RemovalCause[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (RemovalCause c : RemovalCause.values())  System.out.println(c);"
5798,common/cache,com.google.common.cache,"Class RemovalNotification<K,V>","public static <K,V> RemovalNotification<K,V> create(K key, V value, RemovalCause cause)","Creates a new RemovalNotification for the given key/value pair, with the given cause for the removal. The key and/or value may be null if they were already garbage collected."
5799,common/cache,com.google.common.cache,"Class RemovalNotification<K,V>",public RemovalCause getCause(),Returns the cause for which the entry was removed.
5800,common/io,com.google.common.io,Class Resources,public static ByteSource asByteSource(URL url),Returns a ByteSource that reads from the given URL.
5801,common/io,com.google.common.io,Class Resources,"public static CharSource asCharSource(URL url, Charset charset)",Returns a CharSource that reads from the given URL using the given character set.
5802,common/io,com.google.common.io,Class Resources,public static byte[] toByteArray(URL url) throws IOException,Reads all bytes from a URL into a byte array.
5803,common/io,com.google.common.io,Class Resources,"public static String toString(URL url, Charset charset) throws IOException","Reads all characters from a URL into a String, using the given character set."
5804,common/io,com.google.common.io,Class Resources,"@CanIgnoreReturnValuepublic static <T> T readLines(URL url, Charset charset, LineProcessor<T> callback) throws IOException","Streams lines from a URL, stopping when our callback returns false, or we have read all of the lines."
5805,common/io,com.google.common.io,Class Resources,"public static List<String> readLines(URL url, Charset charset) throws IOException","Reads all of the lines from a URL. The lines do not include line-termination characters, but do include other leading and trailing whitespace. This method returns a mutable List. For an ImmutableList, use Resources.asCharSource(url, charset).readLines()."
5806,common/io,com.google.common.io,Class Resources,"public static void copy(URL from, OutputStream to) throws IOException",Copies all bytes from a URL to an output stream.
5807,common/io,com.google.common.io,Class Resources,@CanIgnoreReturnValuepublic static URL getResource(String resourceName),"Returns a URL pointing to resourceName if the resource is found using the context class loader. In simple environments, the context class loader will find resources from the class path. In environments where different threads can have different class loaders, for example app servers, the context class loader will typically have been set to an appropriate loader for the current thread. In the unusual case where the context class loader is null, the class loader that loaded this class (Resources) will be used instead."
5808,common/collect,com.google.common.collect,"Interface RowSortedTable<R,C,V>",SortedSet<R> rowKeySet(),"Returns a set of row keys that have one or more values in the table. Changes to the set will update the underlying table, and vice versa. This method returns a SortedSet, instead of the Set specified in the Table interface."
5809,util/concurrent,com.google.common.util.concurrent,Interface Service,@CanIgnoreReturnValueService startAsync(),"If the service state is Service.State.NEW, this initiates service startup and returns immediately. A stopped service may not be restarted."
5810,util/concurrent,com.google.common.util.concurrent,Interface Service,boolean isRunning(),Returns true if this service is running.
5811,util/concurrent,com.google.common.util.concurrent,Interface Service,Service.State state(),Returns the lifecycle state of the service.
5812,util/concurrent,com.google.common.util.concurrent,Interface Service,@CanIgnoreReturnValueService stopAsync(),"If the service is starting or running, this initiates service shutdown and returns immediately. If the service is new, it is terminated without having been started nor stopped. If the service has already been stopped, this method returns immediately without taking action."
5813,util/concurrent,com.google.common.util.concurrent,Interface Service,void awaitRunning(),Waits for the Service to reach the running state.
5814,util/concurrent,com.google.common.util.concurrent,Interface Service,default void awaitRunning(Duration timeout) throws TimeoutException,Waits for the Service to reach the running state for no more than the given time.
5815,util/concurrent,com.google.common.util.concurrent,Interface Service,"void awaitRunning(long timeout, TimeUnit unit) throws TimeoutException",Waits for the Service to reach the running state for no more than the given time.
5816,util/concurrent,com.google.common.util.concurrent,Interface Service,void awaitTerminated(),Waits for the Service to reach the terminated state.
5817,util/concurrent,com.google.common.util.concurrent,Interface Service,default void awaitTerminated(Duration timeout) throws TimeoutException,Waits for the Service to reach a terminal state (either terminated or failed) for no more than the given time.
5818,util/concurrent,com.google.common.util.concurrent,Interface Service,"void awaitTerminated(long timeout, TimeUnit unit) throws TimeoutException",Waits for the Service to reach a terminal state (either terminated or failed) for no more than the given time.
5819,util/concurrent,com.google.common.util.concurrent,Interface Service,Throwable failureCause(),Returns the Throwable that caused this service to fail.
5820,util/concurrent,com.google.common.util.concurrent,Class Service.Listener,public void starting(),Called when the service transitions from NEW to STARTING. This occurs when Service.startAsync() is called the first time.
5821,util/concurrent,com.google.common.util.concurrent,Class Service.Listener,public void running(),Called when the service transitions from STARTING to RUNNING. This occurs when a service has successfully started.
5822,util/concurrent,com.google.common.util.concurrent,Class Service.Listener,public void stopping(Service.State from),Called when the service transitions to the STOPPING state. The only valid values for from are STARTING or RUNNING. This occurs when Service.stopAsync() is called.
5823,util/concurrent,com.google.common.util.concurrent,Class Service.Listener,public void terminated(Service.State from),"Called when the service transitions to the TERMINATED state. The TERMINATED state is a terminal state in the transition diagram. Therefore, if this method is called, no other methods will be called on the Service.Listener."
5824,util/concurrent,com.google.common.util.concurrent,Enum Service.State,public static final Service.State NEW,A service in this state is inactive. It does minimal work and consumes minimal resources.
5825,util/concurrent,com.google.common.util.concurrent,Enum Service.State,public static final Service.State STARTING,A service in this state is transitioning to RUNNING.
5826,util/concurrent,com.google.common.util.concurrent,Enum Service.State,public static final Service.State RUNNING,A service in this state is operational.
5827,util/concurrent,com.google.common.util.concurrent,Enum Service.State,public static final Service.State STOPPING,A service in this state is transitioning to TERMINATED.
5828,util/concurrent,com.google.common.util.concurrent,Enum Service.State,public static final Service.State TERMINATED,A service in this state has completed execution normally. It does minimal work and consumes minimal resources.
5829,util/concurrent,com.google.common.util.concurrent,Enum Service.State,public static Service.State[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (Service.State c : Service.State.values())  System.out.println(c);"
5830,util/concurrent,com.google.common.util.concurrent,Class ServiceManager,"public void addListener(ServiceManager.Listener listener, Executor executor)","Registers a ServiceManager.Listener to be executed on the given executor. The listener will not have previous state changes replayed, so it is suggested that listeners are added before any of the managed services are started. addListener guarantees execution ordering across calls to a given listener but not across calls to multiple listeners. Specifically, a given listener will have its callbacks invoked in the same order as the underlying service enters those states. Additionally, at most one of the listener's callbacks will execute at once. However, multiple listeners' callbacks may execute concurrently, and listeners may execute in an order different from the one in which they were registered. RuntimeExceptions thrown by a listener will be caught and logged. Any exception thrown during Executor.execute (e.g., a RejectedExecutionException) will be caught and logged. When selecting an executor, note that directExecutor is dangerous in some cases. See the discussion in the ListenableFuture.addListener documentation."
5831,util/concurrent,com.google.common.util.concurrent,Class ServiceManager,@CanIgnoreReturnValuepublic ServiceManager startAsync(),Initiates service startup on all the services being managed. It is only valid to call this method if all of the services are new.
5832,util/concurrent,com.google.common.util.concurrent,Class ServiceManager,public void awaitHealthy(),Waits for the ServiceManager to become healthy. The manager will become healthy after all the component services have reached the running state.
5833,util/concurrent,com.google.common.util.concurrent,Class ServiceManager,public void awaitHealthy(Duration timeout) throws TimeoutException,Waits for the ServiceManager to become healthy for no more than the given time. The manager will become healthy after all the component services have reached the running state.
5834,util/concurrent,com.google.common.util.concurrent,Class ServiceManager,"public void awaitHealthy(long timeout, TimeUnit unit) throws TimeoutException",Waits for the ServiceManager to become healthy for no more than the given time. The manager will become healthy after all the component services have reached the running state.
5835,util/concurrent,com.google.common.util.concurrent,Class ServiceManager,@CanIgnoreReturnValuepublic ServiceManager stopAsync(),Initiates service shutdown if necessary on all the services being managed.
5836,util/concurrent,com.google.common.util.concurrent,Class ServiceManager,public void awaitStopped(),Waits for the all the services to reach a terminal state. After this method returns all services will either be terminated or failed.
5837,util/concurrent,com.google.common.util.concurrent,Class ServiceManager,public void awaitStopped(Duration timeout) throws TimeoutException,Waits for the all the services to reach a terminal state for no more than the given time. After this method returns all services will either be terminated or failed.
5838,util/concurrent,com.google.common.util.concurrent,Class ServiceManager,"public void awaitStopped(long timeout, TimeUnit unit) throws TimeoutException",Waits for the all the services to reach a terminal state for no more than the given time. After this method returns all services will either be terminated or failed.
5839,util/concurrent,com.google.common.util.concurrent,Class ServiceManager,public boolean isHealthy(),Returns true if all services are currently in the running state. Users who want more detailed information should use the servicesByState() method to get detailed information about which services are not running.
5840,util/concurrent,com.google.common.util.concurrent,Class ServiceManager,"public ImmutableSetMultimap<Service.State,Service> servicesByState()","Provides a snapshot of the current state of all the services under management. N.B. This snapshot is guaranteed to be consistent, i.e. the set of states returned will correspond to a point in time view of the services."
5841,util/concurrent,com.google.common.util.concurrent,Class ServiceManager,"public ImmutableMap<Service,Long> startupTimes()",Returns the service load times. This value will only return startup times for services that have finished starting.
5842,util/concurrent,com.google.common.util.concurrent,Class ServiceManager.Listener,public void healthy(),Called when the service initially becomes healthy. This will be called at most once after all the services have entered the running state. If any services fail during start up or fail/terminate before all other services have started running then this method will not be called.
5843,util/concurrent,com.google.common.util.concurrent,Class ServiceManager.Listener,public void stopped(),"Called when the all of the component services have reached a terminal state, either terminated or failed."
5844,common/collect,com.google.common.collect,"Interface SetMultimap<K,V>",Set<V> get(K key),"Returns a view collection of the values associated with key in this multimap, if any. Note that when containsKey(key) is false, this returns an empty collection, not null. Changes to the returned collection will update the underlying multimap, and vice versa. Because a SetMultimap has unique values for a given key, this method returns a Set, instead of the Collection specified in the Multimap interface."
5845,common/collect,com.google.common.collect,"Interface SetMultimap<K,V>",@CanIgnoreReturnValueSet<V> removeAll(@Nullable Object key),"Removes all values associated with the key key. Once this method returns, key will not be mapped to any values, so it will not appear in Multimap.keySet(), Multimap.asMap(), or any other views. Because a SetMultimap has unique values for a given key, this method returns a Set, instead of the Collection specified in the Multimap interface."
5846,common/collect,com.google.common.collect,"Interface SetMultimap<K,V>","@CanIgnoreReturnValueSet<V> replaceValues(K key, Iterable<? extends V> values)","Stores a collection of values with the same key, replacing any existing values for that key. If values is empty, this is equivalent to removeAll(key). Because a SetMultimap has unique values for a given key, this method returns a Set, instead of the Collection specified in the Multimap interface. Any duplicates in values will be stored in the multimap once."
5847,common/collect,com.google.common.collect,"Interface SetMultimap<K,V>","Set<Map.Entry<K,V>> entries()","Returns a view collection of all key-value pairs contained in this multimap, as Map.Entry instances. Changes to the returned collection or the entries it contains will update the underlying multimap, and vice versa. However, adding to the returned collection is not possible. Because a SetMultimap has unique values for a given key, this method returns a Set, instead of the Collection specified in the Multimap interface."
5848,common/collect,com.google.common.collect,"Interface SetMultimap<K,V>","Map<K,Collection<V>> asMap()","Returns a view of this multimap as a Map from each distinct key to the nonempty collection of that key's associated values. Note that this.asMap().get(k) is equivalent to this.get(k) only when k is a key contained in the multimap; otherwise it returns null as opposed to an empty collection. Changes to the returned map or the collections that serve as its values will update the underlying multimap, and vice versa. The map does not support put or putAll, nor do its entries support setValue. Note: The returned map's values are guaranteed to be of type Set. To obtain this map with the more specific generic type Map<K, Set<V>>, call Multimaps.asMap(SetMultimap) instead."
5849,common/collect,com.google.common.collect,Class Sets,"@GwtCompatible(serializable=true)public static <E extends Enum<E>> ImmutableSet<E> immutableEnumSet(E anElement, E... otherElements)","Returns an immutable set instance containing the given enum elements. Internally, the returned set will be backed by an EnumSet. The iteration order of the returned set follows the enum's iteration order, not the order in which the elements are provided to the method."
5850,common/collect,com.google.common.collect,Class Sets,@GwtCompatible(serializable=true)public static <E extends Enum<E>> ImmutableSet<E> immutableEnumSet(Iterable<E> elements),"Returns an immutable set instance containing the given enum elements. Internally, the returned set will be backed by an EnumSet. The iteration order of the returned set follows the enum's iteration order, not the order in which the elements appear in the given collection."
5851,common/collect,com.google.common.collect,Class Sets,"public static <E extends Enum<E>> Collector<E,?,ImmutableSet<E>> toImmutableEnumSet()","Returns a Collector that accumulates the input elements into a new ImmutableSet with an implementation specialized for enums. Unlike ImmutableSet.toImmutableSet(), the resulting set will iterate over elements in their enum definition order, not encounter order."
5852,common/collect,com.google.common.collect,Class Sets,"public static <E extends Enum<E>> EnumSet<E> newEnumSet(Iterable<E> iterable, Class<E> elementType)","Returns a new, mutable EnumSet instance containing the given elements in their natural order. This method behaves identically to EnumSet.copyOf(Collection), but also accepts non-Collection iterables and empty iterables."
5853,common/collect,com.google.common.collect,Class Sets,public static <E> HashSet<E> newHashSet(),"Creates a mutable, initially empty HashSet instance. Note: if mutability is not required, use ImmutableSet.of() instead. If E is an Enum type, use EnumSet.noneOf(java.lang.Class<E>) instead. Otherwise, strongly consider using a LinkedHashSet instead, at the cost of increased memory footprint, to get deterministic iteration behavior. Note for Java 7 and later: this method is now unnecessary and should be treated as deprecated. Instead, use the HashSet constructor directly, taking advantage of the new diamond syntax."
5854,common/collect,com.google.common.collect,Class Sets,public static <E> HashSet<E> newHashSet(E... elements),"Creates a mutable HashSet instance initially containing the given elements. Note: if elements are non-null and won't be added or removed after this point, use ImmutableSet.of() or ImmutableSet.copyOf(Object[]) instead. If E is an Enum type, use EnumSet.of(Enum, Enum[]) instead. Otherwise, strongly consider using a LinkedHashSet instead, at the cost of increased memory footprint, to get deterministic iteration behavior. This method is just a small convenience, either for newHashSet(asList(...)), or for creating an empty set then calling Collections.addAll(java.util.Collection<? super T>, T...). This method is not actually very useful and will likely be deprecated in the future."
5855,common/collect,com.google.common.collect,Class Sets,public static <E> HashSet<E> newHashSet(Iterable<? extends E> elements),"Creates a mutable HashSet instance containing the given elements. A very thin convenience for creating an empty set then calling Collection.addAll(java.util.Collection<? extends E>) or Iterables.addAll(java.util.Collection<T>, java.lang.Iterable<? extends T>). Note: if mutability is not required and the elements are non-null, use ImmutableSet.copyOf(Iterable) instead. (Or, change elements to be a FluentIterable and call elements.toSet().) Note: if E is an Enum type, use newEnumSet(Iterable, Class) instead. Note for Java 7 and later: if elements is a Collection, you don't need this method. Instead, use the HashSet constructor directly, taking advantage of the new diamond syntax. Overall, this method is not very useful and will likely be deprecated in the future."
5856,common/collect,com.google.common.collect,Class Sets,public static <E> HashSet<E> newHashSet(Iterator<? extends E> elements),"Creates a mutable HashSet instance containing the given elements. A very thin convenience for creating an empty set and then calling Iterators.addAll(java.util.Collection<T>, java.util.Iterator<? extends T>). Note: if mutability is not required and the elements are non-null, use ImmutableSet.copyOf(Iterator) instead. Note: if E is an Enum type, you should create an EnumSet instead. Overall, this method is not very useful and will likely be deprecated in the future."
5857,common/collect,com.google.common.collect,Class Sets,public static <E> HashSet<E> newHashSetWithExpectedSize(int expectedSize),"Returns a new hash set using the smallest initial table size that can hold expectedSize elements without resizing. Note that this is not what HashSet(int) does, but it is what most users want and expect it to do. This behavior can't be broadly guaranteed, but has been tested with OpenJDK 1.7 and 1.8."
5858,common/collect,com.google.common.collect,Class Sets,public static <E> Set<E> newConcurrentHashSet(),"Creates a thread-safe set backed by a hash map. The set is backed by a ConcurrentHashMap instance, and thus carries the same concurrency guarantees. Unlike HashSet, this class does NOT allow null to be used as an element. The set is serializable."
5859,common/collect,com.google.common.collect,Class Sets,public static <E> Set<E> newConcurrentHashSet(Iterable<? extends E> elements),"Creates a thread-safe set backed by a hash map and containing the given elements. The set is backed by a ConcurrentHashMap instance, and thus carries the same concurrency guarantees. Unlike HashSet, this class does NOT allow null to be used as an element. The set is serializable."
5860,common/collect,com.google.common.collect,Class Sets,public static <E> LinkedHashSet<E> newLinkedHashSet(),"Creates a mutable, empty LinkedHashSet instance. Note: if mutability is not required, use ImmutableSet.of() instead. Note for Java 7 and later: this method is now unnecessary and should be treated as deprecated. Instead, use the LinkedHashSet constructor directly, taking advantage of the new diamond syntax."
5861,common/collect,com.google.common.collect,Class Sets,public static <E> LinkedHashSet<E> newLinkedHashSet(Iterable<? extends E> elements),"Creates a mutable LinkedHashSet instance containing the given elements in order. Note: if mutability is not required and the elements are non-null, use ImmutableSet.copyOf(Iterable) instead. Note for Java 7 and later: if elements is a Collection, you don't need this method. Instead, use the LinkedHashSet constructor directly, taking advantage of the new diamond syntax. Overall, this method is not very useful and will likely be deprecated in the future."
5862,common/collect,com.google.common.collect,Class Sets,public static <E> LinkedHashSet<E> newLinkedHashSetWithExpectedSize(int expectedSize),"Creates a LinkedHashSet instance, with a high enough initial capacity that it should hold expectedSize elements without growth. This behavior cannot be broadly guaranteed, but it is observed to be true for OpenJDK 1.7. It also can't be guaranteed that the method isn't inadvertently oversizing the returned set."
5863,common/collect,com.google.common.collect,Class Sets,public static <E extends Comparable> TreeSet<E> newTreeSet(),"Creates a mutable, empty TreeSet instance sorted by the natural sort ordering of its elements. Note: if mutability is not required, use ImmutableSortedSet.of() instead. Note for Java 7 and later: this method is now unnecessary and should be treated as deprecated. Instead, use the TreeSet constructor directly, taking advantage of the new diamond syntax."
5864,common/collect,com.google.common.collect,Class Sets,public static <E extends Comparable> TreeSet<E> newTreeSet(Iterable<? extends E> elements),"Creates a mutable TreeSet instance containing the given elements sorted by their natural ordering. Note: if mutability is not required, use ImmutableSortedSet.copyOf(Iterable) instead. Note: If elements is a SortedSet with an explicit comparator, this method has different behavior than TreeSet(SortedSet), which returns a TreeSet with that comparator. Note for Java 7 and later: this method is now unnecessary and should be treated as deprecated. Instead, use the TreeSet constructor directly, taking advantage of the new diamond syntax. This method is just a small convenience for creating an empty set and then calling Iterables.addAll(java.util.Collection<T>, java.lang.Iterable<? extends T>). This method is not very useful and will likely be deprecated in the future."
5865,common/collect,com.google.common.collect,Class Sets,public static <E> TreeSet<E> newTreeSet(Comparator<? super E> comparator),"Creates a mutable, empty TreeSet instance with the given comparator. Note: if mutability is not required, use ImmutableSortedSet.orderedBy(comparator).build() instead. Note for Java 7 and later: this method is now unnecessary and should be treated as deprecated. Instead, use the TreeSet constructor directly, taking advantage of the new diamond syntax. One caveat to this is that the TreeSet constructor uses a null Comparator to mean natural ordering, whereas this factory rejects null. Clean your code accordingly."
5866,common/collect,com.google.common.collect,Class Sets,public static <E> Set<E> newIdentityHashSet(),"Creates an empty Set that uses identity to determine equality. It compares object references, instead of calling equals, to determine whether a provided object matches an element in the set. For example, contains returns false when passed an object that equals a set member, but isn't the same instance. This behavior is similar to the way IdentityHashMap handles key lookups."
5867,common/collect,com.google.common.collect,Class Sets,@GwtIncompatiblepublic static <E> CopyOnWriteArraySet<E> newCopyOnWriteArraySet(),"Creates an empty CopyOnWriteArraySet instance. Note: if you need an immutable empty Set, use Collections.emptySet() instead."
5868,common/collect,com.google.common.collect,Class Sets,@GwtIncompatiblepublic static <E> CopyOnWriteArraySet<E> newCopyOnWriteArraySet(Iterable<? extends E> elements),Creates a CopyOnWriteArraySet instance containing the given elements.
5869,common/collect,com.google.common.collect,Class Sets,public static <E extends Enum<E>> EnumSet<E> complementOf(Collection<E> collection),"Creates an EnumSet consisting of all enum values that are not in the specified collection. If the collection is an EnumSet, this method has the same behavior as EnumSet.complementOf(java.util.EnumSet<E>). Otherwise, the specified collection must contain at least one element, in order to determine the element type. If the collection could be empty, use complementOf(Collection, Class) instead of this method."
5870,common/collect,com.google.common.collect,Class Sets,"public static <E extends Enum<E>> EnumSet<E> complementOf(Collection<E> collection, Class<E> type)","Creates an EnumSet consisting of all enum values that are not in the specified collection. This is equivalent to EnumSet.complementOf(java.util.EnumSet<E>), but can act on any input collection, as long as the elements are of enum type."
5871,common/collect,com.google.common.collect,Class Sets,"@Deprecatedpublic static <E> Set<E> newSetFromMap(Map<E,Boolean> map)","Deprecated. Use Collections.newSetFromMap(java.util.Map<E, java.lang.Boolean>) instead."
5872,common/collect,com.google.common.collect,Class Sets,"public static <E> Sets.SetView<E> union(Set<? extends E> set1, Set<? extends E> set2)","Returns an unmodifiable view of the union of two sets. The returned set contains all elements that are contained in either backing set. Iterating over the returned set iterates first over all the elements of set1, then over each element of set2, in order, that is not contained in set1. Results are undefined if set1 and set2 are sets based on different equivalence relations (as HashSet, TreeSet, and the Map.keySet() of an IdentityHashMap all are)."
5873,common/collect,com.google.common.collect,Class Sets,"public static <E> Sets.SetView<E> intersection(Set<E> set1, Set<?> set2)","Returns an unmodifiable view of the intersection of two sets. The returned set contains all elements that are contained by both backing sets. The iteration order of the returned set matches that of set1. Results are undefined if set1 and set2 are sets based on different equivalence relations (as HashSet, TreeSet, and the keySet of an IdentityHashMap all are). Note: The returned view performs slightly better when set1 is the smaller of the two sets. If you have reason to believe one of your sets will generally be smaller than the other, pass it first. Unfortunately, since this method sets the generic type of the returned set based on the type of the first set passed, this could in rare cases force you to make a cast, for example: Set<Object> aFewBadObjects = ... Set<String> manyBadStrings = ... // impossible for a non-String to be in the intersection SuppressWarnings(unchecked) Set<String> badStrings = (Set) Sets.intersection( aFewBadObjects, manyBadStrings); This is unfortunate, but should come up only very rarely."
5874,common/collect,com.google.common.collect,Class Sets,"public static <E> Sets.SetView<E> difference(Set<E> set1, Set<?> set2)","Returns an unmodifiable view of the difference of two sets. The returned set contains all elements that are contained by set1 and not contained by set2. set2 may also contain elements not present in set1; these are simply ignored. The iteration order of the returned set matches that of set1. Results are undefined if set1 and set2 are sets based on different equivalence relations (as HashSet, TreeSet, and the keySet of an IdentityHashMap all are)."
5875,common/collect,com.google.common.collect,Class Sets,"public static <E> Sets.SetView<E> symmetricDifference(Set<? extends E> set1, Set<? extends E> set2)","Returns an unmodifiable view of the symmetric difference of two sets. The returned set contains all elements that are contained in either set1 or set2 but not in both. The iteration order of the returned set is undefined. Results are undefined if set1 and set2 are sets based on different equivalence relations (as HashSet, TreeSet, and the keySet of an IdentityHashMap all are)."
5876,common/collect,com.google.common.collect,Class Sets,"public static <E> Set<E> filter(Set<E> unfiltered, Predicate<? super E> predicate)","Returns the elements of unfiltered that satisfy a predicate. The returned set is a live view of unfiltered; changes to one affect the other. The resulting set's iterator does not support remove(), but all other set methods are supported. When given an element that doesn't satisfy the predicate, the set's add() and addAll() methods throw an IllegalArgumentException. When methods such as removeAll() and clear() are called on the filtered set, only elements that satisfy the filter will be removed from the underlying set. The returned set isn't threadsafe or serializable, even if unfiltered is. Many of the filtered set's methods, such as size(), iterate across every element in the underlying set and determine which elements satisfy the filter. When a live view is not needed, it may be faster to copy Iterables.filter(unfiltered, predicate) and use the copy. Warning: predicate must be consistent with equals, as documented at Predicate.apply(T). Do not provide a predicate such as Predicates.instanceOf(ArrayList.class), which is inconsistent with equals. (See Iterables.filter(Iterable, Class) for related functionality.) Java 8 users: many use cases for this method are better addressed by Stream.filter(java.util.function.Predicate<? super T>). This method is not being deprecated, but we gently encourage you to migrate to streams."
5877,common/collect,com.google.common.collect,Class Sets,"public static <E> SortedSet<E> filter(SortedSet<E> unfiltered, Predicate<? super E> predicate)","Returns the elements of a SortedSet, unfiltered, that satisfy a predicate. The returned set is a live view of unfiltered; changes to one affect the other. The resulting set's iterator does not support remove(), but all other set methods are supported. When given an element that doesn't satisfy the predicate, the set's add() and addAll() methods throw an IllegalArgumentException. When methods such as removeAll() and clear() are called on the filtered set, only elements that satisfy the filter will be removed from the underlying set. The returned set isn't threadsafe or serializable, even if unfiltered is. Many of the filtered set's methods, such as size(), iterate across every element in the underlying set and determine which elements satisfy the filter. When a live view is not needed, it may be faster to copy Iterables.filter(unfiltered, predicate) and use the copy. Warning: predicate must be consistent with equals, as documented at Predicate.apply(T). Do not provide a predicate such as Predicates.instanceOf(ArrayList.class), which is inconsistent with equals. (See Iterables.filter(Iterable, Class) for related functionality.)"
5878,common/collect,com.google.common.collect,Class Sets,"@GwtIncompatiblepublic static <E> NavigableSet<E> filter(NavigableSet<E> unfiltered, Predicate<? super E> predicate)","Returns the elements of a NavigableSet, unfiltered, that satisfy a predicate. The returned set is a live view of unfiltered; changes to one affect the other. The resulting set's iterator does not support remove(), but all other set methods are supported. When given an element that doesn't satisfy the predicate, the set's add() and addAll() methods throw an IllegalArgumentException. When methods such as removeAll() and clear() are called on the filtered set, only elements that satisfy the filter will be removed from the underlying set. The returned set isn't threadsafe or serializable, even if unfiltered is. Many of the filtered set's methods, such as size(), iterate across every element in the underlying set and determine which elements satisfy the filter. When a live view is not needed, it may be faster to copy Iterables.filter(unfiltered, predicate) and use the copy. Warning: predicate must be consistent with equals, as documented at Predicate.apply(T). Do not provide a predicate such as Predicates.instanceOf(ArrayList.class), which is inconsistent with equals. (See Iterables.filter(Iterable, Class) for related functionality.)"
5879,common/collect,com.google.common.collect,Class Sets,public static <B> Set<List<B>> cartesianProduct(List<? extends Set<? extends B>> sets),"Returns every possible list that can be formed by choosing one element from each of the given sets in order; the n-ary Cartesian product of the sets. For example: Sets.cartesianProduct(ImmutableList.of( ImmutableSet.of(1, 2), ImmutableSet.of(A, B, C))) returns a set containing six lists: ImmutableList.of(1, A)ImmutableList.of(1, B)ImmutableList.of(1, C)ImmutableList.of(2, A)ImmutableList.of(2, B)ImmutableList.of(2, C)The result is guaranteed to be in the traditional, lexicographical order for Cartesian products that you would get from nesting for loops: for (B b0 : sets.get(0)) { for (B b1 : sets.get(1)) { ... ImmutableList<B> tuple = ImmutableList.of(b0, b1, ...); // operate on tuple } } Note that if any input set is empty, the Cartesian product will also be empty. If no sets at all are provided (an empty list), the resulting Cartesian product has one element, an empty list (counter-intuitive, but mathematically consistent). Performance notes: while the cartesian product of sets of size m, n, p is a set of size m x n x p, its actual memory consumption is much smaller. When the cartesian set is constructed, the input sets are merely copied. Only as the resulting set is iterated are the individual lists created, and these are not retained after iteration."
5880,common/collect,com.google.common.collect,Class Sets,@SafeVarargspublic static <B> Set<List<B>> cartesianProduct(Set<? extends B>... sets),"Returns every possible list that can be formed by choosing one element from each of the given sets in order; the n-ary Cartesian product of the sets. For example: Sets.cartesianProduct( ImmutableSet.of(1, 2), ImmutableSet.of(A, B, C)) returns a set containing six lists: ImmutableList.of(1, A)ImmutableList.of(1, B)ImmutableList.of(1, C)ImmutableList.of(2, A)ImmutableList.of(2, B)ImmutableList.of(2, C)The result is guaranteed to be in the traditional, lexicographical order for Cartesian products that you would get from nesting for loops: for (B b0 : sets.get(0)) { for (B b1 : sets.get(1)) { ... ImmutableList<B> tuple = ImmutableList.of(b0, b1, ...); // operate on tuple } } Note that if any input set is empty, the Cartesian product will also be empty. If no sets at all are provided (an empty list), the resulting Cartesian product has one element, an empty list (counter-intuitive, but mathematically consistent). Performance notes: while the cartesian product of sets of size m, n, p is a set of size m x n x p, its actual memory consumption is much smaller. When the cartesian set is constructed, the input sets are merely copied. Only as the resulting set is iterated are the individual lists created, and these are not retained after iteration."
5881,common/collect,com.google.common.collect,Class Sets,@GwtCompatible(serializable=false)public static <E> Set<Set<E>> powerSet(Set<E> set),"Returns the set of all possible subsets of set. For example, powerSet(ImmutableSet.of(1, 2)) returns the set {{}, {1}, {2}, {1, 2}}. Elements appear in these subsets in the same iteration order as they appeared in the input set. The order in which these subsets appear in the outer set is undefined. Note that the power set of the empty set is not the empty set, but a one-element set containing the empty set. The returned set and its constituent sets use equals to decide whether two elements are identical, even if the input set uses a different concept of equivalence. Performance notes: while the power set of a set with size n is of size 2^n, its memory usage is only O(n). When the power set is constructed, the input set is merely copied. Only as the power set is iterated are the individual subsets created, and these subsets themselves occupy only a small constant amount of memory."
5882,common/collect,com.google.common.collect,Class Sets,"@Betapublic static <E> Set<Set<E>> combinations(Set<E> set, int size)","Returns the set of all subsets of set of size size. For example, combinations(ImmutableSet.of(1, 2, 3), 2) returns the set {{1, 2}, {1, 3}, {2, 3}}. Elements appear in these subsets in the same iteration order as they appeared in the input set. The order in which these subsets appear in the outer set is undefined. The returned set and its constituent sets use equals to decide whether two elements are identical, even if the input set uses a different concept of equivalence. Performance notes: the memory usage of the returned set is only O(n). When the result set is constructed, the input set is merely copied. Only as the result set is iterated are the individual subsets created. Each of these subsets occupies an additional O(n) memory but only for as long as the user retains a reference to it. That is, the set returned by combinations does not retain the individual subsets."
5883,common/collect,com.google.common.collect,Class Sets,public static <E> NavigableSet<E> unmodifiableNavigableSet(NavigableSet<E> set),"Returns an unmodifiable view of the specified navigable set. This method allows modules to provide users with read-only access to internal navigable sets. Query operations on the returned set read through to the specified set, and attempts to modify the returned set, whether direct or via its collection views, result in an UnsupportedOperationException. The returned navigable set will be serializable if the specified navigable set is serializable."
5884,common/collect,com.google.common.collect,Class Sets,@GwtIncompatiblepublic static <E> NavigableSet<E> synchronizedNavigableSet(NavigableSet<E> navigableSet),"Returns a synchronized (thread-safe) navigable set backed by the specified navigable set. In order to guarantee serial access, it is critical that all access to the backing navigable set is accomplished through the returned navigable set (or its views). It is imperative that the user manually synchronize on the returned sorted set when iterating over it or any of its descendingSet, subSet, headSet, or tailSet views. NavigableSet<E> set = synchronizedNavigableSet(new TreeSet<E>()); ... synchronized (set) { // Must be in the synchronized block Iterator<E> it = set.iterator(); while (it.hasNext()) { foo(it.next()); } } or: NavigableSet<E> set = synchronizedNavigableSet(new TreeSet<E>()); NavigableSet<E> set2 = set.descendingSet().headSet(foo); ... synchronized (set) { // Note: set, not set2!!! // Must be in the synchronized block Iterator<E> it = set2.descendingIterator(); while (it.hasNext()) foo(it.next()); } }Failure to follow this advice may result in non-deterministic behavior. The returned navigable set will be serializable if the specified navigable set is serializable."
5885,common/collect,com.google.common.collect,Class Sets.SetView<E>,public ImmutableSet<E> immutableCopy(),"Returns an immutable copy of the current contents of this set view. Does not support null elements. Warning: this may have unexpected results if a backing set of this view uses a nonstandard notion of equivalence, for example if it is a TreeSet using a comparator that is inconsistent with Object.equals(Object)."
5886,common/collect,com.google.common.collect,Class Sets.SetView<E>,@CanIgnoreReturnValuepublic <S extends Set<E>> S copyInto(S set),"Copies the current contents of this set view into an existing set. This method has equivalent behavior to set.addAll(this), assuming that all the sets involved are based on the same notion of equivalence."
5887,common/collect,com.google.common.collect,Class Sets.SetView<E>,@CanIgnoreReturnValue @Deprecatedpublic final boolean add(E e),Deprecated. Unsupported operation.
5888,common/collect,com.google.common.collect,Class Sets.SetView<E>,@CanIgnoreReturnValue @Deprecatedpublic final boolean remove(Object object),Deprecated. Unsupported operation.
5889,common/collect,com.google.common.collect,Class Sets.SetView<E>,@CanIgnoreReturnValue @Deprecatedpublic final boolean addAll(Collection<? extends E> newElements),Deprecated. Unsupported operation.
5890,common/collect,com.google.common.collect,Class Sets.SetView<E>,@CanIgnoreReturnValue @Deprecatedpublic final boolean removeAll(Collection<?> oldElements),Deprecated. Unsupported operation.
5891,common/collect,com.google.common.collect,Class Sets.SetView<E>,@CanIgnoreReturnValue @Deprecatedpublic final boolean removeIf(Predicate<? super E> filter),Deprecated. Unsupported operation.
5892,common/collect,com.google.common.collect,Class Sets.SetView<E>,@CanIgnoreReturnValue @Deprecatedpublic final boolean retainAll(Collection<?> elementsToKeep),Deprecated. Unsupported operation.
5893,common/collect,com.google.common.collect,Class Sets.SetView<E>,@Deprecatedpublic final void clear(),Deprecated. Unsupported operation.
5894,util/concurrent,com.google.common.util.concurrent,Class SettableFuture<V>,public static <V> SettableFuture<V> create(),Creates a new SettableFuture that can be completed or cancelled by a later method call.
5895,util/concurrent,com.google.common.util.concurrent,Class SettableFuture<V>,@CanIgnoreReturnValuepublic boolean set(V value),Description copied from class: AbstractFuture
5896,util/concurrent,com.google.common.util.concurrent,Class SettableFuture<V>,@CanIgnoreReturnValuepublic boolean setException(Throwable throwable),Description copied from class: AbstractFuture
5897,util/concurrent,com.google.common.util.concurrent,Class SettableFuture<V>,@CanIgnoreReturnValuepublic boolean setFuture(ListenableFuture<? extends V> future),Description copied from class: AbstractFuture
5898,util/concurrent,com.google.common.util.concurrent,Class SettableFuture<V>,"@CanIgnoreReturnValuepublic final V get() throws InterruptedException, ExecutionException",Description copied from class: AbstractFuture
5899,util/concurrent,com.google.common.util.concurrent,Class SettableFuture<V>,"@CanIgnoreReturnValuepublic final V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException",Description copied from class: AbstractFuture
5900,util/concurrent,com.google.common.util.concurrent,Class SettableFuture<V>,public final boolean isDone(),Description copied from interface: java.util.concurrent.Future
5901,util/concurrent,com.google.common.util.concurrent,Class SettableFuture<V>,public final boolean isCancelled(),Description copied from interface: java.util.concurrent.Future
5902,util/concurrent,com.google.common.util.concurrent,Class SettableFuture<V>,"public final void addListener(Runnable listener, Executor executor)",Description copied from class: AbstractFuture
5903,common/primitives,com.google.common.primitives,Class Shorts,public static final int BYTES,The number of bytes required to represent a primitive short value. Java 8 users: use Short.BYTES instead.
5904,common/primitives,com.google.common.primitives,Class Shorts,public static int hashCode(short value),Returns a hash code for value; equal to the result of invoking ((Short) value).hashCode(). Java 8 users: use Short.hashCode(short) instead.
5905,common/primitives,com.google.common.primitives,Class Shorts,public static short checkedCast(long value),"Returns the short value that is equal to value, if possible."
5906,common/primitives,com.google.common.primitives,Class Shorts,public static short saturatedCast(long value),Returns the short nearest in value to value.
5907,common/primitives,com.google.common.primitives,Class Shorts,"public static int compare(short a, short b)","Compares the two specified short values. The sign of the value returned is the same as that of ((Short) a).compareTo(b). Note for Java 7 and later: this method should be treated as deprecated; use the equivalent Short.compare(short, short) method instead."
5908,common/primitives,com.google.common.primitives,Class Shorts,"public static boolean contains(short[] array, short target)",Returns true if target is present as an element anywhere in array.
5909,common/primitives,com.google.common.primitives,Class Shorts,"public static int indexOf(short[] array, short target)",Returns the index of the first appearance of the value target in array.
5910,common/primitives,com.google.common.primitives,Class Shorts,"public static int indexOf(short[] array, short[] target)","Returns the start position of the first occurrence of the specified target within array, or -1 if there is no such occurrence. More formally, returns the lowest index i such that Arrays.copyOfRange(array, i, i + target.length) contains exactly the same elements as target."
5911,common/primitives,com.google.common.primitives,Class Shorts,"public static int lastIndexOf(short[] array, short target)",Returns the index of the last appearance of the value target in array.
5912,common/primitives,com.google.common.primitives,Class Shorts,"@GwtIncompatible(value=""Available in GWT! Annotation is to avoid conflict with GWT specialization of base class."")public static short min(short... array)",Returns the least value present in array.
5913,common/primitives,com.google.common.primitives,Class Shorts,"@GwtIncompatible(value=""Available in GWT! Annotation is to avoid conflict with GWT specialization of base class."")public static short max(short... array)",Returns the greatest value present in array.
5914,common/primitives,com.google.common.primitives,Class Shorts,"@Betapublic static short constrainToRange(short value, short min, short max)","Returns the value nearest to value which is within the closed range [min..max]. If value is within the range [min..max], value is returned unchanged. If value is less than min, min is returned, and if value is greater than max, max is returned."
5915,common/primitives,com.google.common.primitives,Class Shorts,public static short[] concat(short[]... arrays),"Returns the values from each provided array combined into a single array. For example, concat(new short[] {a, b}, new short[] {}, new short[] {c} returns the array {a, b, c}."
5916,common/primitives,com.google.common.primitives,Class Shorts,@GwtIncompatiblepublic static byte[] toByteArray(short value),"Returns a big-endian representation of value in a 2-element byte array; equivalent to ByteBuffer.allocate(2).putShort(value).array(). For example, the input value (short) 0x1234 would yield the byte array {0x12, 0x34}. If you need to convert and concatenate several values (possibly even of different types), use a shared ByteBuffer instance, or use ByteStreams.newDataOutput() to get a growable buffer."
5917,common/primitives,com.google.common.primitives,Class Shorts,@GwtIncompatiblepublic static short fromByteArray(byte[] bytes),"Returns the short value whose big-endian representation is stored in the first 2 bytes of bytes; equivalent to ByteBuffer.wrap(bytes).getShort(). For example, the input byte array {0x54, 0x32} would yield the short value 0x5432. Arguably, it's preferable to use ByteBuffer; that library exposes much more flexibility at little cost in readability."
5918,common/primitives,com.google.common.primitives,Class Shorts,"@GwtIncompatiblepublic static short fromBytes(byte b1, byte b2)","Returns the short value whose byte representation is the given 2 bytes, in big-endian order; equivalent to Shorts.fromByteArray(new byte[] {b1, b2})."
5919,common/primitives,com.google.common.primitives,Class Shorts,"@Betapublic static Converter<String,Short> stringConverter()","Returns a serializable converter object that converts between strings and shorts using Short.decode(java.lang.String) and Short.toString(). The returned converter throws NumberFormatException if the input string is invalid. Warning: please see Short.decode(java.lang.String) to understand exactly how strings are parsed. For example, the string 0123 is treated as octal and converted to the value 83."
5920,common/primitives,com.google.common.primitives,Class Shorts,"public static short[] ensureCapacity(short[] array, int minLength, int padding)","Returns an array containing the same values as array, but guaranteed to be of a specified minimum length. If array already has a length of at least minLength, it is returned directly. Otherwise, a new array of size minLength + padding is returned, containing the values of array, and zeroes in the remaining places."
5921,common/primitives,com.google.common.primitives,Class Shorts,"public static String join(String separator, short... array)","Returns a string containing the supplied short values separated by separator. For example, join(-, (short) 1, (short) 2, (short) 3) returns the string 1-2-3."
5922,common/primitives,com.google.common.primitives,Class Shorts,public static Comparator<short[]> lexicographicalComparator(),"Returns a comparator that compares two short arrays lexicographically. That is, it compares, using compare(short, short)), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example, [] < [(short) 1] < [(short) 1, (short) 2] < [(short) 2]. The returned comparator is inconsistent with Object.equals(Object) (since arrays support only identity equality), but it is consistent with Arrays.equals(short[], short[])."
5923,common/primitives,com.google.common.primitives,Class Shorts,public static void sortDescending(short[] array),Sorts the elements of array in descending order.
5924,common/primitives,com.google.common.primitives,Class Shorts,"public static void sortDescending(short[] array, int fromIndex, int toIndex)",Sorts the elements of array between fromIndex inclusive and toIndex exclusive in descending order.
5925,common/primitives,com.google.common.primitives,Class Shorts,public static void reverse(short[] array),"Reverses the elements of array. This is equivalent to Collections.reverse(Shorts.asList(array)), but is likely to be more efficient."
5926,common/primitives,com.google.common.primitives,Class Shorts,"public static void reverse(short[] array, int fromIndex, int toIndex)","Reverses the elements of array between fromIndex inclusive and toIndex exclusive. This is equivalent to Collections.reverse(Shorts.asList(array).subList(fromIndex, toIndex)), but is likely to be more efficient."
5927,common/primitives,com.google.common.primitives,Class Shorts,public static short[] toArray(Collection<? extends Number> collection),"Returns an array containing each value of collection, converted to a short value in the manner of Number.shortValue(). Elements are copied from the argument collection as if by collection.toArray(). Calling this method is as thread-safe as calling that method."
5928,common/primitives,com.google.common.primitives,Class SignedBytes,public static byte checkedCast(long value),"Returns the byte value that is equal to value, if possible."
5929,common/primitives,com.google.common.primitives,Class SignedBytes,public static byte saturatedCast(long value),Returns the byte nearest in value to value.
5930,common/primitives,com.google.common.primitives,Class SignedBytes,"public static int compare(byte a, byte b)","Compares the two specified byte values. The sign of the value returned is the same as that of ((Byte) a).compareTo(b). Note: this method behaves identically to the JDK 7 method Byte.compare(byte, byte)."
5931,common/primitives,com.google.common.primitives,Class SignedBytes,public static byte min(byte... array),Returns the least value present in array.
5932,common/primitives,com.google.common.primitives,Class SignedBytes,public static byte max(byte... array),Returns the greatest value present in array.
5933,common/primitives,com.google.common.primitives,Class SignedBytes,"public static String join(String separator, byte... array)","Returns a string containing the supplied byte values separated by separator. For example, join(:, 0x01, 0x02, -0x01) returns the string 1:2:-1."
5934,common/primitives,com.google.common.primitives,Class SignedBytes,public static Comparator<byte[]> lexicographicalComparator(),"Returns a comparator that compares two byte arrays lexicographically. That is, it compares, using compare(byte, byte)), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example, [] < [0x01] < [0x01, 0x80] < [0x01, 0x7F] < [0x02]. Values are treated as signed. The returned comparator is inconsistent with Object.equals(Object) (since arrays support only identity equality), but it is consistent with Arrays.equals(byte[], byte[])."
5935,common/primitives,com.google.common.primitives,Class SignedBytes,public static void sortDescending(byte[] array),Sorts the elements of array in descending order.
5936,util/concurrent,com.google.common.util.concurrent,Class SimpleTimeLimiter,public static SimpleTimeLimiter create(ExecutorService executor),"Creates a TimeLimiter instance using the given executor service to execute method calls. Warning: using a bounded executor may be counterproductive! If the thread pool fills up, any time callers spend waiting for a thread may count toward their time limit, and in this case the call may even time out before the target method is ever invoked."
5937,util/concurrent,com.google.common.util.concurrent,Class SimpleTimeLimiter,"public <T> T newProxy(T target, Class<T> interfaceType, long timeoutDuration, TimeUnit timeoutUnit)",Description copied from interface: TimeLimiter
5938,util/concurrent,com.google.common.util.concurrent,Class SimpleTimeLimiter,"@CanIgnoreReturnValuepublic <T> T callWithTimeout(Callable<T> callable, long timeoutDuration, TimeUnit timeoutUnit) throws TimeoutException, InterruptedException, ExecutionException",Description copied from interface: TimeLimiter
5939,util/concurrent,com.google.common.util.concurrent,Class SimpleTimeLimiter,"@CanIgnoreReturnValuepublic <T> T callUninterruptiblyWithTimeout(Callable<T> callable, long timeoutDuration, TimeUnit timeoutUnit) throws TimeoutException, ExecutionException",Description copied from interface: TimeLimiter
5940,util/concurrent,com.google.common.util.concurrent,Class SimpleTimeLimiter,"public void runWithTimeout(Runnable runnable, long timeoutDuration, TimeUnit timeoutUnit) throws TimeoutException, InterruptedException",Description copied from interface: TimeLimiter
5941,common/collect,com.google.common.collect,"Interface SortedMapDifference<K,V>","SortedMap<K,V> entriesOnlyOnLeft()",Description copied from interface: MapDifference
5942,common/collect,com.google.common.collect,"Interface SortedMapDifference<K,V>","SortedMap<K,V> entriesOnlyOnRight()",Description copied from interface: MapDifference
5943,common/collect,com.google.common.collect,"Interface SortedMapDifference<K,V>","SortedMap<K,V> entriesInCommon()",Description copied from interface: MapDifference
5944,common/collect,com.google.common.collect,Interface SortedMultiset<E>,Comparator<? super E> comparator(),"Returns the comparator that orders this multiset, or Ordering.natural() if the natural ordering of the elements is used."
5945,common/collect,com.google.common.collect,Interface SortedMultiset<E>,Multiset.Entry<E> firstEntry(),"Returns the entry of the first element in this multiset, or null if this multiset is empty."
5946,common/collect,com.google.common.collect,Interface SortedMultiset<E>,Multiset.Entry<E> lastEntry(),"Returns the entry of the last element in this multiset, or null if this multiset is empty."
5947,common/collect,com.google.common.collect,Interface SortedMultiset<E>,Multiset.Entry<E> pollFirstEntry(),"Returns and removes the entry associated with the lowest element in this multiset, or returns null if this multiset is empty."
5948,common/collect,com.google.common.collect,Interface SortedMultiset<E>,Multiset.Entry<E> pollLastEntry(),"Returns and removes the entry associated with the greatest element in this multiset, or returns null if this multiset is empty."
5949,common/collect,com.google.common.collect,Interface SortedMultiset<E>,NavigableSet<E> elementSet(),Returns a NavigableSet view of the distinct elements in this multiset.
5950,common/collect,com.google.common.collect,Interface SortedMultiset<E>,Set<Multiset.Entry<E>> entrySet(),"Returns a view of the contents of this multiset, grouped into Multiset.Entry instances, each providing an element of the multiset and the count of that element. This set contains exactly one entry for each distinct element in the multiset (thus it always has the same size as the Multiset.elementSet()). The order of the elements in the element set is unspecified. The entry set is backed by the same data as the multiset, so any change to either is immediately reflected in the other. However, multiset changes may or may not be reflected in any Entry instances already retrieved from the entry set (this is implementation-dependent). Furthermore, implementations are not required to support modifications to the entry set at all, and the Entry instances themselves don't even have methods for modification. See the specific implementation class for more details on how its entry set handles modifications. The entrySet's iterator returns entries in ascending element order according to the this multiset's comparator."
5951,common/collect,com.google.common.collect,Interface SortedMultiset<E>,Iterator<E> iterator(),"Returns an iterator over the elements in this collection. There are no guarantees concerning the order in which the elements are returned (unless this collection is an instance of some class that provides a guarantee). Elements that occur multiple times in the multiset will appear multiple times in this iterator, though not necessarily sequentially. The iterator returns the elements in ascending order according to this multiset's comparator."
5952,common/collect,com.google.common.collect,Interface SortedMultiset<E>,SortedMultiset<E> descendingMultiset(),Returns a descending view of this multiset. Modifications made to either map will be reflected in the other.
5953,common/collect,com.google.common.collect,Interface SortedMultiset<E>,"SortedMultiset<E> headMultiset(E upperBound, BoundType boundType)","Returns a view of this multiset restricted to the elements less than upperBound, optionally including upperBound itself. The returned multiset is a view of this multiset, so changes to one will be reflected in the other. The returned multiset supports all operations that this multiset supports. The returned multiset will throw an IllegalArgumentException on attempts to add elements outside its range."
5954,common/collect,com.google.common.collect,Interface SortedMultiset<E>,"SortedMultiset<E> subMultiset(E lowerBound, BoundType lowerBoundType, E upperBound, BoundType upperBoundType)","Returns a view of this multiset restricted to the range between lowerBound and upperBound. The returned multiset is a view of this multiset, so changes to one will be reflected in the other. The returned multiset supports all operations that this multiset supports. The returned multiset will throw an IllegalArgumentException on attempts to add elements outside its range. This method is equivalent to tailMultiset(lowerBound, lowerBoundType).headMultiset(upperBound, upperBoundType)."
5955,common/collect,com.google.common.collect,"Interface SortedSetMultimap<K,V>",SortedSet<V> get(K key),"Returns a collection view of all values associated with a key. If no mappings in the multimap have the provided key, an empty collection is returned. Changes to the returned collection will update the underlying multimap, and vice versa. Because a SortedSetMultimap has unique sorted values for a given key, this method returns a SortedSet, instead of the Collection specified in the Multimap interface."
5956,common/collect,com.google.common.collect,"Interface SortedSetMultimap<K,V>",@CanIgnoreReturnValueSortedSet<V> removeAll(@Nullable Object key),"Removes all values associated with a given key. Because a SortedSetMultimap has unique sorted values for a given key, this method returns a SortedSet, instead of the Collection specified in the Multimap interface."
5957,common/collect,com.google.common.collect,"Interface SortedSetMultimap<K,V>","@CanIgnoreReturnValueSortedSet<V> replaceValues(K key, Iterable<? extends V> values)","Stores a collection of values with the same key, replacing any existing values for that key. Because a SortedSetMultimap has unique sorted values for a given key, this method returns a SortedSet, instead of the Collection specified in the Multimap interface. Any duplicates in values will be stored in the multimap once."
5958,common/collect,com.google.common.collect,"Interface SortedSetMultimap<K,V>","Map<K,Collection<V>> asMap()","Returns a map view that associates each key with the corresponding values in the multimap. Changes to the returned map, such as element removal, will update the underlying multimap. The map does not support setValue() on its entries, put, or putAll. When passed a key that is present in the map, asMap().get(Object) has the same behavior as get(K), returning a live collection. When passed a key that is not present, however, asMap().get(Object) returns null instead of an empty collection. Note: The returned map's values are guaranteed to be of type SortedSet. To obtain this map with the more specific generic type Map<K, SortedSet<V>>, call Multimaps.asMap(SortedSetMultimap) instead. However, the returned map itself is not necessarily a SortedMap: A SortedSetMultimap must expose the values for a given key in sorted order, but it need not expose the keys in sorted order. Individual SortedSetMultimap implementations, like those built with MultimapBuilder.treeKeys(), may make additional guarantees."
5959,common/base,com.google.common.base,Class Splitter,public static Splitter on(char separator),"Returns a splitter that uses the given single-character separator. For example, Splitter.on(',').split(foo,,bar) returns an iterable containing [foo, , bar]."
5960,common/base,com.google.common.base,Class Splitter,public static Splitter on(CharMatcher separatorMatcher),"Returns a splitter that considers any single character matched by the given CharMatcher to be a separator. For example, Splitter.on(CharMatcher.anyOf(;,)).split(foo,;bar,quux) returns an iterable containing [foo, , bar, quux]."
5961,common/base,com.google.common.base,Class Splitter,public static Splitter on(String separator),"Returns a splitter that uses the given fixed string as a separator. For example, Splitter.on(, ).split(foo, bar,baz) returns an iterable containing [foo, bar,baz]."
5962,common/base,com.google.common.base,Class Splitter,@GwtIncompatiblepublic static Splitter on(Pattern separatorPattern),"Returns a splitter that considers any subsequence matching pattern to be a separator. For example, Splitter.on(Pattern.compile(\r?\n)).split(entireFile) splits a string into lines whether it uses DOS-style or UNIX-style line terminators."
5963,common/base,com.google.common.base,Class Splitter,@GwtIncompatiblepublic static Splitter onPattern(String separatorPattern),"Returns a splitter that considers any subsequence matching a given pattern (regular expression) to be a separator. For example, Splitter.onPattern(\r?\n).split(entireFile) splits a string into lines whether it uses DOS-style or UNIX-style line terminators. This is equivalent to Splitter.on(Pattern.compile(pattern))."
5964,common/base,com.google.common.base,Class Splitter,public static Splitter fixedLength(int length),"Returns a splitter that divides strings into pieces of the given length. For example, Splitter.fixedLength(2).split(abcde) returns an iterable containing [ab, cd, e]. The last piece can be smaller than length but will never be empty. Note: if fixedLength(int) is used in conjunction with limit, the final split piece may be longer than the specified fixed length. This is because the splitter will stop splitting when the limit is reached, and just return the final piece as-is. Exception: for consistency with separator-based splitters, split() does not yield an empty iterable, but an iterable containing . This is the only case in which Iterables.size(split(input)) does not equal IntMath.divide(input.length(), length, CEILING). To avoid this behavior, use omitEmptyStrings."
5965,common/base,com.google.common.base,Class Splitter,public Splitter omitEmptyStrings(),"Returns a splitter that behaves equivalently to this splitter, but automatically omits empty strings from the results. For example, Splitter.on(',').omitEmptyStrings().split(,a,,,b,c,,) returns an iterable containing only [a, b, c]. If either trimResults option is also specified when creating a splitter, that splitter always trims results first before checking for emptiness. So, for example, Splitter.on(':').omitEmptyStrings().trimResults().split(: : : ) returns an empty iterable. Note that it is ordinarily not possible for split(CharSequence) to return an empty iterable, but when using this option, it can (if the input sequence consists of nothing but separators)."
5966,common/base,com.google.common.base,Class Splitter,public Splitter limit(int maxItems),"Returns a splitter that behaves equivalently to this splitter but stops splitting after it reaches the limit. The limit defines the maximum number of items returned by the iterator, or the maximum size of the list returned by splitToList(java.lang.CharSequence). For example, Splitter.on(',').limit(3).split(a,b,c,d) returns an iterable containing [a, b, c,d]. When omitting empty strings, the omitted strings do not count. Hence, Splitter.on(',').limit(3).omitEmptyStrings().split(a,,,b,,,c,d) returns an iterable containing [a, b, c,d. When trim is requested, all entries are trimmed, including the last. Hence Splitter.on(',').limit(3).trimResults().split( a , b , c , d ) results in [a, b, c , d]."
5967,common/base,com.google.common.base,Class Splitter,public Splitter trimResults(),"Returns a splitter that behaves equivalently to this splitter, but automatically removes leading and trailing whitespace from each returned substring; equivalent to trimResults(CharMatcher.whitespace()). For example, Splitter.on(',').trimResults().split( a, b ,c ) returns an iterable containing [a, b, c]."
5968,common/base,com.google.common.base,Class Splitter,public Splitter trimResults(CharMatcher trimmer),"Returns a splitter that behaves equivalently to this splitter, but removes all leading or trailing characters matching the given CharMatcher from each returned substring. For example, Splitter.on(',').trimResults(CharMatcher.is('_')).split(_a ,_b_ ,c__) returns an iterable containing [a , b_ , c]."
5969,common/base,com.google.common.base,Class Splitter,public Iterable<String> split(CharSequence sequence),"Splits sequence into string components and makes them available through an Iterator, which may be lazily evaluated. If you want an eagerly computed List, use splitToList(CharSequence). Java 8 users may prefer splitToStream(java.lang.CharSequence) instead."
5970,common/base,com.google.common.base,Class Splitter,public List<String> splitToList(CharSequence sequence),"Splits sequence into string components and returns them as an immutable list. If you want an Iterable which may be lazily evaluated, use split(CharSequence)."
5971,common/base,com.google.common.base,Class Splitter,@Betapublic Stream<String> splitToStream(CharSequence sequence),"Splits sequence into string components and makes them available through an Stream, which may be lazily evaluated. If you want an eagerly computed List, use splitToList(CharSequence)."
5972,common/base,com.google.common.base,Class Splitter,@Betapublic Splitter.MapSplitter withKeyValueSeparator(String separator),"Returns a MapSplitter which splits entries based on this splitter, and splits entries into keys and values using the specified separator."
5973,common/base,com.google.common.base,Class Splitter,@Betapublic Splitter.MapSplitter withKeyValueSeparator(char separator),"Returns a MapSplitter which splits entries based on this splitter, and splits entries into keys and values using the specified separator."
5974,common/base,com.google.common.base,Enum StandardSystemProperty,public static final StandardSystemProperty JAVA_VERSION,Java Runtime Environment version.
5975,common/base,com.google.common.base,Enum StandardSystemProperty,public static final StandardSystemProperty JAVA_VENDOR,Java Runtime Environment vendor.
5976,common/base,com.google.common.base,Enum StandardSystemProperty,public static final StandardSystemProperty JAVA_VENDOR_URL,Java vendor URL.
5977,common/base,com.google.common.base,Enum StandardSystemProperty,public static final StandardSystemProperty JAVA_HOME,Java installation directory.
5978,common/base,com.google.common.base,Enum StandardSystemProperty,public static final StandardSystemProperty JAVA_VM_SPECIFICATION_VERSION,Java Virtual Machine specification version.
5979,common/base,com.google.common.base,Enum StandardSystemProperty,public static final StandardSystemProperty JAVA_VM_SPECIFICATION_VENDOR,Java Virtual Machine specification vendor.
5980,common/base,com.google.common.base,Enum StandardSystemProperty,public static final StandardSystemProperty JAVA_VM_SPECIFICATION_NAME,Java Virtual Machine specification name.
5981,common/base,com.google.common.base,Enum StandardSystemProperty,public static final StandardSystemProperty JAVA_VM_VERSION,Java Virtual Machine implementation version.
5982,common/base,com.google.common.base,Enum StandardSystemProperty,public static final StandardSystemProperty JAVA_VM_VENDOR,Java Virtual Machine implementation vendor.
5983,common/base,com.google.common.base,Enum StandardSystemProperty,public static final StandardSystemProperty JAVA_VM_NAME,Java Virtual Machine implementation name.
5984,common/base,com.google.common.base,Enum StandardSystemProperty,public static final StandardSystemProperty JAVA_SPECIFICATION_VERSION,Java Runtime Environment specification version.
5985,common/base,com.google.common.base,Enum StandardSystemProperty,public static final StandardSystemProperty JAVA_SPECIFICATION_VENDOR,Java Runtime Environment specification vendor.
5986,common/base,com.google.common.base,Enum StandardSystemProperty,public static final StandardSystemProperty JAVA_SPECIFICATION_NAME,Java Runtime Environment specification name.
5987,common/base,com.google.common.base,Enum StandardSystemProperty,public static final StandardSystemProperty JAVA_CLASS_VERSION,Java class format version number.
5988,common/base,com.google.common.base,Enum StandardSystemProperty,public static final StandardSystemProperty JAVA_CLASS_PATH,Java class path.
5989,common/base,com.google.common.base,Enum StandardSystemProperty,public static final StandardSystemProperty JAVA_LIBRARY_PATH,List of paths to search when loading libraries.
5990,common/base,com.google.common.base,Enum StandardSystemProperty,public static final StandardSystemProperty JAVA_IO_TMPDIR,Default temp file path.
5991,common/base,com.google.common.base,Enum StandardSystemProperty,public static final StandardSystemProperty JAVA_COMPILER,Name of JIT compiler to use.
5992,common/base,com.google.common.base,Enum StandardSystemProperty,public static final StandardSystemProperty JAVA_EXT_DIRS,Path of extension directory or directories.
5993,common/base,com.google.common.base,Enum StandardSystemProperty,public static final StandardSystemProperty OS_NAME,Operating system name.
5994,common/base,com.google.common.base,Enum StandardSystemProperty,public static final StandardSystemProperty OS_ARCH,Operating system architecture.
5995,common/base,com.google.common.base,Enum StandardSystemProperty,public static final StandardSystemProperty OS_VERSION,Operating system version.
5996,common/base,com.google.common.base,Enum StandardSystemProperty,public static final StandardSystemProperty FILE_SEPARATOR,File separator (/ on UNIX).
5997,common/base,com.google.common.base,Enum StandardSystemProperty,public static final StandardSystemProperty PATH_SEPARATOR,Path separator (: on UNIX).
5998,common/base,com.google.common.base,Enum StandardSystemProperty,public static final StandardSystemProperty LINE_SEPARATOR,Line separator (\n on UNIX).
5999,common/base,com.google.common.base,Enum StandardSystemProperty,public static final StandardSystemProperty USER_NAME,User's account name.
6000,common/base,com.google.common.base,Enum StandardSystemProperty,public static final StandardSystemProperty USER_HOME,User's home directory.
6001,common/base,com.google.common.base,Enum StandardSystemProperty,public static StandardSystemProperty[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (StandardSystemProperty c : StandardSystemProperty.values())  System.out.println(c);"
6002,common/base,com.google.common.base,Enum StandardSystemProperty,public static StandardSystemProperty valueOf(String name),Returns the enum constant of this type with the specified name.The string must match exactly an identifier used to declare anenum constant in this type. (Extraneous whitespace characters are not permitted.)
6003,common/base,com.google.common.base,Enum StandardSystemProperty,public String key(),Returns the key used to lookup this system property.
6004,common/base,com.google.common.base,Enum StandardSystemProperty,public @Nullable String value(),Returns the current value for this system property by delegating to System.getProperty(String).
6005,common/math,com.google.common.math,Class Stats,public static Stats of(Iterable<? extends Number> values),Returns statistics over a dataset containing the given values.
6006,common/math,com.google.common.math,Class Stats,public static Stats of(Iterator<? extends Number> values),Returns statistics over a dataset containing the given values. The iterator will be completely consumed by this method.
6007,common/math,com.google.common.math,Class Stats,public static Stats of(double... values),Returns statistics over a dataset containing the given values.
6008,common/math,com.google.common.math,Class Stats,public static Stats of(int... values),Returns statistics over a dataset containing the given values.
6009,common/math,com.google.common.math,Class Stats,public static Stats of(long... values),Returns statistics over a dataset containing the given values.
6010,common/math,com.google.common.math,Class Stats,public static Stats of(DoubleStream values),"Returns statistics over a dataset containing the given values. The stream will be completely consumed by this method. If you have a Stream<Double> rather than a DoubleStream, you should collect the values using toStats() instead."
6011,common/math,com.google.common.math,Class Stats,public static Stats of(IntStream values),"Returns statistics over a dataset containing the given values. The stream will be completely consumed by this method. If you have a Stream<Integer> rather than an IntStream, you should collect the values using toStats() instead."
6012,common/math,com.google.common.math,Class Stats,public static Stats of(LongStream values),"Returns statistics over a dataset containing the given values. The stream will be completely consumed by this method. If you have a Stream<Long> rather than a LongStream, you should collect the values using toStats() instead."
6013,common/math,com.google.common.math,Class Stats,"public static Collector<Number,StatsAccumulator,Stats> toStats()","Returns a Collector which accumulates statistics from a Stream of any type of boxed Number into a Stats. Use by calling boxedNumericStream.collect(toStats()). The numbers will be converted to double values (which may cause loss of precision). If you have any of the primitive streams DoubleStream, IntStream, or LongStream, you should use the factory method of(java.lang.Iterable<? extends java.lang.Number>) instead."
6014,common/math,com.google.common.math,Class Stats,public long count(),Returns the number of values.
6015,common/math,com.google.common.math,Class Stats,public double mean(),"Returns the arithmetic mean of the values. The count must be non-zero. If these values are a sample drawn from a population, this is also an unbiased estimator of the arithmetic mean of the population. Non-finite valuesIf the dataset contains Double.NaN then the result is Double.NaN. If it contains both Double.POSITIVE_INFINITY and Double.NEGATIVE_INFINITY then the result is Double.NaN. If it contains Double.POSITIVE_INFINITY and finite values only or Double.POSITIVE_INFINITY only, the result is Double.POSITIVE_INFINITY. If it contains Double.NEGATIVE_INFINITY and finite values only or Double.NEGATIVE_INFINITY only, the result is Double.NEGATIVE_INFINITY. If you only want to calculate the mean, use meanOf(java.lang.Iterable<? extends java.lang.Number>) instead of creating a Stats instance."
6016,common/math,com.google.common.math,Class Stats,public double sum(),"Returns the sum of the values. Non-finite valuesIf the dataset contains Double.NaN then the result is Double.NaN. If it contains both Double.POSITIVE_INFINITY and Double.NEGATIVE_INFINITY then the result is Double.NaN. If it contains Double.POSITIVE_INFINITY and finite values only or Double.POSITIVE_INFINITY only, the result is Double.POSITIVE_INFINITY. If it contains Double.NEGATIVE_INFINITY and finite values only or Double.NEGATIVE_INFINITY only, the result is Double.NEGATIVE_INFINITY."
6017,common/math,com.google.common.math,Class Stats,public double populationVariance(),"Returns the population variance of the values. The count must be non-zero. This is guaranteed to return zero if the dataset contains only exactly one finite value. It is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. Non-finite valuesIf the dataset contains any non-finite values (Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, or Double.NaN) then the result is Double.NaN."
6018,common/math,com.google.common.math,Class Stats,public double populationStandardDeviation(),"Returns the population standard deviation of the values. The count must be non-zero. This is guaranteed to return zero if the dataset contains only exactly one finite value. It is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. Non-finite valuesIf the dataset contains any non-finite values (Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, or Double.NaN) then the result is Double.NaN."
6019,common/math,com.google.common.math,Class Stats,public double sampleVariance(),"Returns the unbiased sample variance of the values. If this dataset is a sample drawn from a population, this is an unbiased estimator of the population variance of the population. The count must be greater than one. This is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. Non-finite valuesIf the dataset contains any non-finite values (Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, or Double.NaN) then the result is Double.NaN."
6020,common/math,com.google.common.math,Class Stats,public double sampleStandardDeviation(),"Returns the corrected sample standard deviation of the values. If this dataset is a sample drawn from a population, this is an estimator of the population standard deviation of the population which is less biased than populationStandardDeviation() (the unbiased estimator depends on the distribution). The count must be greater than one. This is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. Non-finite valuesIf the dataset contains any non-finite values (Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, or Double.NaN) then the result is Double.NaN."
6021,common/math,com.google.common.math,Class Stats,public double min(),Returns the lowest value in the dataset. The count must be non-zero. Non-finite valuesIf the dataset contains Double.NaN then the result is Double.NaN. If it contains Double.NEGATIVE_INFINITY and not Double.NaN then the result is Double.NEGATIVE_INFINITY. If it contains Double.POSITIVE_INFINITY and finite values only then the result is the lowest finite value. If it contains Double.POSITIVE_INFINITY only then the result is Double.POSITIVE_INFINITY.
6022,common/math,com.google.common.math,Class Stats,public double max(),Returns the highest value in the dataset. The count must be non-zero. Non-finite valuesIf the dataset contains Double.NaN then the result is Double.NaN. If it contains Double.POSITIVE_INFINITY and not Double.NaN then the result is Double.POSITIVE_INFINITY. If it contains Double.NEGATIVE_INFINITY and finite values only then the result is the highest finite value. If it contains Double.NEGATIVE_INFINITY only then the result is Double.NEGATIVE_INFINITY.
6023,common/math,com.google.common.math,Class Stats,public boolean equals(@Nullable Object obj),"Indicates whether some other object is equal to this one. The equals method implements an equivalence relation on non-null object references: It is reflexive: for any non-null reference value x, x.equals(x) should return true. It is symmetric: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is transitive: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is consistent: for any non-null reference values x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes. Note: This tests exact equality of the calculated statistics, including the floating point values. Two instances are guaranteed to be considered equal if one is copied from the other using second = new StatsAccumulator().addAll(first).snapshot(), if both were obtained by calling snapshot() on the same StatsAccumulator without adding any values in between the two calls, or if one is obtained from the other after round-tripping through java serialization. However, floating point rounding errors mean that it may be false for some instances where the statistics are mathematically equal, including instances constructed from the same values in a different order... or (in the general case) even in the same order. (It is guaranteed to return true for instances constructed from the same values in the same order if strictfp is in effect, or if the system architecture guarantees strictfp-like semantics.)"
6024,common/math,com.google.common.math,Class Stats,public int hashCode(),"Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by HashMap. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the Object.equals(java.lang.Object) method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java™ programming language.) Note: This hash code is consistent with exact equality of the calculated statistics, including the floating point values. See the note on equals(java.lang.Object) for details."
6025,common/math,com.google.common.math,Class Stats,public String toString(),Description copied from class: java.lang.Object
6026,common/math,com.google.common.math,Class Stats,public static double meanOf(Iterable<? extends Number> values),Returns the arithmetic mean of the values. The count must be non-zero. The definition of the mean is the same as mean.
6027,common/math,com.google.common.math,Class Stats,public static double meanOf(Iterator<? extends Number> values),Returns the arithmetic mean of the values. The count must be non-zero. The definition of the mean is the same as mean.
6028,common/math,com.google.common.math,Class Stats,public static double meanOf(double... values),Returns the arithmetic mean of the values. The count must be non-zero. The definition of the mean is the same as mean.
6029,common/math,com.google.common.math,Class Stats,public static double meanOf(int... values),Returns the arithmetic mean of the values. The count must be non-zero. The definition of the mean is the same as mean.
6030,common/math,com.google.common.math,Class Stats,public static double meanOf(long... values),Returns the arithmetic mean of the values. The count must be non-zero. The definition of the mean is the same as mean.
6031,common/math,com.google.common.math,Class Stats,public byte[] toByteArray(),Gets a byte array representation of this instance. Note: No guarantees are made regarding stability of the representation between versions.
6032,common/math,com.google.common.math,Class StatsAccumulator,public void add(double value),Adds the given value to the dataset.
6033,common/math,com.google.common.math,Class StatsAccumulator,public void addAll(Iterable<? extends Number> values),Adds the given values to the dataset.
6034,common/math,com.google.common.math,Class StatsAccumulator,public void addAll(Iterator<? extends Number> values),Adds the given values to the dataset.
6035,common/math,com.google.common.math,Class StatsAccumulator,public void addAll(double... values),Adds the given values to the dataset.
6036,common/math,com.google.common.math,Class StatsAccumulator,public void addAll(int... values),Adds the given values to the dataset.
6037,common/math,com.google.common.math,Class StatsAccumulator,public void addAll(long... values),Adds the given values to the dataset.
6038,common/math,com.google.common.math,Class StatsAccumulator,public void addAll(DoubleStream values),Adds the given values to the dataset. The stream will be completely consumed by this method.
6039,common/math,com.google.common.math,Class StatsAccumulator,public void addAll(IntStream values),Adds the given values to the dataset. The stream will be completely consumed by this method.
6040,common/math,com.google.common.math,Class StatsAccumulator,public void addAll(LongStream values),Adds the given values to the dataset. The stream will be completely consumed by this method.
6041,common/math,com.google.common.math,Class StatsAccumulator,public void addAll(Stats values),"Adds the given statistics to the dataset, as if the individual values used to compute the statistics had been added directly."
6042,common/math,com.google.common.math,Class StatsAccumulator,public void addAll(StatsAccumulator values),"Adds the given statistics to the dataset, as if the individual values used to compute the statistics had been added directly."
6043,common/math,com.google.common.math,Class StatsAccumulator,public Stats snapshot(),Returns an immutable snapshot of the current statistics.
6044,common/math,com.google.common.math,Class StatsAccumulator,public long count(),Returns the number of values.
6045,common/math,com.google.common.math,Class StatsAccumulator,public double mean(),"Returns the arithmetic mean of the values. The count must be non-zero. If these values are a sample drawn from a population, this is also an unbiased estimator of the arithmetic mean of the population. Non-finite valuesIf the dataset contains Double.NaN then the result is Double.NaN. If it contains both Double.POSITIVE_INFINITY and Double.NEGATIVE_INFINITY then the result is Double.NaN. If it contains Double.POSITIVE_INFINITY and finite values only or Double.POSITIVE_INFINITY only, the result is Double.POSITIVE_INFINITY. If it contains Double.NEGATIVE_INFINITY and finite values only or Double.NEGATIVE_INFINITY only, the result is Double.NEGATIVE_INFINITY."
6046,common/math,com.google.common.math,Class StatsAccumulator,public final double sum(),"Returns the sum of the values. Non-finite valuesIf the dataset contains Double.NaN then the result is Double.NaN. If it contains both Double.POSITIVE_INFINITY and Double.NEGATIVE_INFINITY then the result is Double.NaN. If it contains Double.POSITIVE_INFINITY and finite values only or Double.POSITIVE_INFINITY only, the result is Double.POSITIVE_INFINITY. If it contains Double.NEGATIVE_INFINITY and finite values only or Double.NEGATIVE_INFINITY only, the result is Double.NEGATIVE_INFINITY."
6047,common/math,com.google.common.math,Class StatsAccumulator,public final double populationVariance(),"Returns the population variance of the values. The count must be non-zero. This is guaranteed to return zero if the dataset contains only exactly one finite value. It is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. Non-finite valuesIf the dataset contains any non-finite values (Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, or Double.NaN) then the result is Double.NaN."
6048,common/math,com.google.common.math,Class StatsAccumulator,public final double populationStandardDeviation(),"Returns the population standard deviation of the values. The count must be non-zero. This is guaranteed to return zero if the dataset contains only exactly one finite value. It is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. Non-finite valuesIf the dataset contains any non-finite values (Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, or Double.NaN) then the result is Double.NaN."
6049,common/math,com.google.common.math,Class StatsAccumulator,public final double sampleVariance(),"Returns the unbiased sample variance of the values. If this dataset is a sample drawn from a population, this is an unbiased estimator of the population variance of the population. The count must be greater than one. This is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. Non-finite valuesIf the dataset contains any non-finite values (Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, or Double.NaN) then the result is Double.NaN."
6050,common/math,com.google.common.math,Class StatsAccumulator,public final double sampleStandardDeviation(),"Returns the corrected sample standard deviation of the values. If this dataset is a sample drawn from a population, this is an estimator of the population standard deviation of the population which is less biased than populationStandardDeviation() (the unbiased estimator depends on the distribution). The count must be greater than one. This is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. Non-finite valuesIf the dataset contains any non-finite values (Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, or Double.NaN) then the result is Double.NaN."
6051,common/math,com.google.common.math,Class StatsAccumulator,public double min(),Returns the lowest value in the dataset. The count must be non-zero. Non-finite valuesIf the dataset contains Double.NaN then the result is Double.NaN. If it contains Double.NEGATIVE_INFINITY and not Double.NaN then the result is Double.NEGATIVE_INFINITY. If it contains Double.POSITIVE_INFINITY and finite values only then the result is the lowest finite value. If it contains Double.POSITIVE_INFINITY only then the result is Double.POSITIVE_INFINITY.
6052,common/base,com.google.common.base,Class Stopwatch,public static Stopwatch createUnstarted(),Creates (but does not start) a new stopwatch using System.nanoTime() as its time source.
6053,common/base,com.google.common.base,Class Stopwatch,public static Stopwatch createUnstarted(Ticker ticker),"Creates (but does not start) a new stopwatch, using the specified time source."
6054,common/base,com.google.common.base,Class Stopwatch,public static Stopwatch createStarted(),Creates (and starts) a new stopwatch using System.nanoTime() as its time source.
6055,common/base,com.google.common.base,Class Stopwatch,public static Stopwatch createStarted(Ticker ticker),"Creates (and starts) a new stopwatch, using the specified time source."
6056,common/base,com.google.common.base,Class Stopwatch,public boolean isRunning(),"Returns true if start() has been called on this stopwatch, and stop() has not been called since the last call to start()."
6057,common/base,com.google.common.base,Class Stopwatch,@CanIgnoreReturnValuepublic Stopwatch start(),Starts the stopwatch.
6058,common/base,com.google.common.base,Class Stopwatch,@CanIgnoreReturnValuepublic Stopwatch stop(),Stops the stopwatch. Future reads will return the fixed duration that had elapsed up to this point.
6059,common/base,com.google.common.base,Class Stopwatch,@CanIgnoreReturnValuepublic Stopwatch reset(),"Sets the elapsed time for this stopwatch to zero, and places it in a stopped state."
6060,common/base,com.google.common.base,Class Stopwatch,public long elapsed(TimeUnit desiredUnit),"Returns the current elapsed time shown on this stopwatch, expressed in the desired time unit, with any fraction rounded down. Note: the overhead of measurement can be more than a microsecond, so it is generally not useful to specify TimeUnit.NANOSECONDS precision here. It is generally not a good idea to use an ambiguous, unitless long to represent elapsed time. Therefore, we recommend using elapsed() instead, which returns a strongly-typed Duration instance."
6061,common/base,com.google.common.base,Class Stopwatch,@GwtIncompatiblepublic Duration elapsed(),"Returns the current elapsed time shown on this stopwatch as a Duration. Unlike elapsed(TimeUnit), this method does not lose any precision due to rounding."
6062,common/collect,com.google.common.collect,Class Streams,public static <T> Stream<T> stream(Iterable<T> iterable),"Returns a sequential Stream of the contents of iterable, delegating to Collection.stream() if possible."
6063,common/collect,com.google.common.collect,Class Streams,@Beta @Deprecatedpublic static <T> Stream<T> stream(Collection<T> collection),Deprecated. There is no reason to use this; just invoke collection.stream() directly.
6064,common/collect,com.google.common.collect,Class Streams,@Betapublic static <T> Stream<T> stream(Iterator<T> iterator),Returns a sequential Stream of the remaining contents of iterator. Do not use iterator directly after passing it to this method.
6065,common/collect,com.google.common.collect,Class Streams,@Betapublic static <T> Stream<T> stream(Optional<T> optional),"If a value is present in optional, returns a stream containing only that element, otherwise returns an empty stream."
6066,common/collect,com.google.common.collect,Class Streams,@Betapublic static <T> Stream<T> stream(Optional<T> optional),"If a value is present in optional, returns a stream containing only that element, otherwise returns an empty stream. Java 9 users: use optional.stream() instead."
6067,common/collect,com.google.common.collect,Class Streams,@Betapublic static IntStream stream(OptionalInt optional),"If a value is present in optional, returns a stream containing only that element, otherwise returns an empty stream. Java 9 users: use optional.stream() instead."
6068,common/collect,com.google.common.collect,Class Streams,@Betapublic static LongStream stream(OptionalLong optional),"If a value is present in optional, returns a stream containing only that element, otherwise returns an empty stream. Java 9 users: use optional.stream() instead."
6069,common/collect,com.google.common.collect,Class Streams,@Betapublic static DoubleStream stream(OptionalDouble optional),"If a value is present in optional, returns a stream containing only that element, otherwise returns an empty stream. Java 9 users: use optional.stream() instead."
6070,common/collect,com.google.common.collect,Class Streams,@SafeVarargspublic static <T> Stream<T> concat(Stream<? extends T>... streams),"Returns a Stream containing the elements of the first stream, followed by the elements of the second stream, and so on. This is equivalent to Stream.of(streams).flatMap(stream -> stream), but the returned stream may perform better."
6071,common/collect,com.google.common.collect,Class Streams,public static IntStream concat(IntStream... streams),"Returns an IntStream containing the elements of the first stream, followed by the elements of the second stream, and so on. This is equivalent to Stream.of(streams).flatMapToInt(stream -> stream), but the returned stream may perform better."
6072,common/collect,com.google.common.collect,Class Streams,public static LongStream concat(LongStream... streams),"Returns a LongStream containing the elements of the first stream, followed by the elements of the second stream, and so on. This is equivalent to Stream.of(streams).flatMapToLong(stream -> stream), but the returned stream may perform better."
6073,common/collect,com.google.common.collect,Class Streams,public static DoubleStream concat(DoubleStream... streams),"Returns a DoubleStream containing the elements of the first stream, followed by the elements of the second stream, and so on. This is equivalent to Stream.of(streams).flatMapToDouble(stream -> stream), but the returned stream may perform better."
6074,common/collect,com.google.common.collect,Class Streams,"@Betapublic static <A,B,R> Stream<R> zip(Stream<A> streamA, Stream<B> streamB, BiFunction<? super A,? super B,R> function)","Returns a stream in which each element is the result of passing the corresponding element of each of streamA and streamB to function. For example: Streams.zip( Stream.of(foo1, foo2, foo3), Stream.of(bar1, bar2), (arg1, arg2) -> arg1 + : + arg2) will return Stream.of(foo1:bar1, foo2:bar2). The resulting stream will only be as long as the shorter of the two input streams; if one stream is longer, its extra elements will be ignored. Note that if you are calling Stream.forEach(java.util.function.Consumer<? super T>) on the resulting stream, you might want to consider using forEachPair(java.util.stream.Stream<A>, java.util.stream.Stream<B>, java.util.function.BiConsumer<? super A, ? super B>) instead of this method. Performance note: The resulting stream is not efficiently splittable. This may harm parallel performance."
6075,common/collect,com.google.common.collect,Class Streams,"@Betapublic static <A,B> void forEachPair(Stream<A> streamA, Stream<B> streamB, BiConsumer<? super A,? super B> consumer)","Invokes consumer once for each pair of corresponding elements in streamA and streamB. If one stream is longer than the other, the extra elements are silently ignored. Elements passed to the consumer are guaranteed to come from the same position in their respective source streams. For example: Streams.forEachPair( Stream.of(foo1, foo2, foo3), Stream.of(bar1, bar2), (arg1, arg2) -> System.out.println(arg1 + : + arg2) will print: foo1:bar1 foo2:bar2 Warning: If either supplied stream is a parallel stream, the same correspondence between elements will be made, but the order in which those pairs of elements are passed to the consumer is not defined. Note that many usages of this method can be replaced with simpler calls to zip(java.util.stream.Stream<A>, java.util.stream.Stream<B>, java.util.function.BiFunction<? super A, ? super B, R>). This method behaves equivalently to zipping the stream elements into temporary pair objects and then using Stream.forEach(java.util.function.Consumer<? super T>) on that stream."
6076,common/collect,com.google.common.collect,Class Streams,"@Betapublic static <T,R> Stream<R> mapWithIndex(Stream<T> stream, Streams.FunctionWithIndex<? super T,? extends R> function)","Returns a stream consisting of the results of applying the given function to the elements of stream and their indices in the stream. For example, mapWithIndex( Stream.of(a, b, c), (str, index) -> str + : + index) would return Stream.of(a:0, b:1, c:2). The resulting stream is efficiently splittable if and only if stream was efficiently splittable and its underlying spliterator reported Spliterator.SUBSIZED. This is generally the case if the underlying stream comes from a data structure supporting efficient indexed random access, typically an array or list. The order of the resulting stream is defined if and only if the order of the original stream was defined."
6077,common/collect,com.google.common.collect,Class Streams,"@Betapublic static <R> Stream<R> mapWithIndex(IntStream stream, Streams.IntFunctionWithIndex<R> function)","Returns a stream consisting of the results of applying the given function to the elements of stream and their indexes in the stream. For example, mapWithIndex( IntStream.of(0, 1, 2), (i, index) -> i + : + index) ...would return Stream.of(0:0, 1:1, 2:2). The resulting stream is efficiently splittable if and only if stream was efficiently splittable and its underlying spliterator reported Spliterator.SUBSIZED. This is generally the case if the underlying stream comes from a data structure supporting efficient indexed random access, typically an array or list. The order of the resulting stream is defined if and only if the order of the original stream was defined."
6078,common/collect,com.google.common.collect,Class Streams,"@Betapublic static <R> Stream<R> mapWithIndex(LongStream stream, Streams.LongFunctionWithIndex<R> function)","Returns a stream consisting of the results of applying the given function to the elements of stream and their indexes in the stream. For example, mapWithIndex( LongStream.of(0, 1, 2), (i, index) -> i + : + index) ...would return Stream.of(0:0, 1:1, 2:2). The resulting stream is efficiently splittable if and only if stream was efficiently splittable and its underlying spliterator reported Spliterator.SUBSIZED. This is generally the case if the underlying stream comes from a data structure supporting efficient indexed random access, typically an array or list. The order of the resulting stream is defined if and only if the order of the original stream was defined."
6079,common/collect,com.google.common.collect,Class Streams,"@Betapublic static <R> Stream<R> mapWithIndex(DoubleStream stream, Streams.DoubleFunctionWithIndex<R> function)","Returns a stream consisting of the results of applying the given function to the elements of stream and their indexes in the stream. For example, mapWithIndex( DoubleStream.of(0, 1, 2), (x, index) -> x + : + index) ...would return Stream.of(0.0:0, 1.0:1, 2.0:2). The resulting stream is efficiently splittable if and only if stream was efficiently splittable and its underlying spliterator reported Spliterator.SUBSIZED. This is generally the case if the underlying stream comes from a data structure supporting efficient indexed random access, typically an array or list. The order of the resulting stream is defined if and only if the order of the original stream was defined."
6080,common/collect,com.google.common.collect,Class Streams,@Betapublic static <T> Optional<T> findLast(Stream<T> stream),"Returns the last element of the specified stream, or Optional.empty() if the stream is empty. Equivalent to stream.reduce((a, b) -> b), but may perform significantly better. This method's runtime will be between O(log n) and O(n), performing better on efficiently splittable streams. If the stream has nondeterministic order, this has equivalent semantics to Stream.findAny() (which you might as well use)."
6081,common/collect,com.google.common.collect,Class Streams,@Betapublic static OptionalInt findLast(IntStream stream),"Returns the last element of the specified stream, or OptionalInt.empty() if the stream is empty. Equivalent to stream.reduce((a, b) -> b), but may perform significantly better. This method's runtime will be between O(log n) and O(n), performing better on efficiently splittable streams."
6082,common/collect,com.google.common.collect,Class Streams,@Betapublic static OptionalLong findLast(LongStream stream),"Returns the last element of the specified stream, or OptionalLong.empty() if the stream is empty. Equivalent to stream.reduce((a, b) -> b), but may perform significantly better. This method's runtime will be between O(log n) and O(n), performing better on efficiently splittable streams."
6083,common/base,com.google.common.base,Class Strings,public static String nullToEmpty(@Nullable String string),Returns the given string if it is non-null; the empty string otherwise.
6084,common/base,com.google.common.base,Class Strings,public static @Nullable String emptyToNull(@Nullable String string),Returns the given string if it is nonempty; null otherwise.
6085,common/base,com.google.common.base,Class Strings,public static boolean isNullOrEmpty(@Nullable String string),"Returns true if the given string is null or is the empty string. Consider normalizing your string references with nullToEmpty(java.lang.String). If you do, you can use String.isEmpty() instead of this method, and you won't need special null-safe forms of methods like String.toUpperCase(java.util.Locale) either. Or, if you'd like to normalize in the other direction, converting empty strings to null, you can use emptyToNull(java.lang.String)."
6086,common/base,com.google.common.base,Class Strings,"public static String padStart(String string, int minLength, char padChar)","Returns a string, of length at least minLength, consisting of string prepended with as many copies of padChar as are necessary to reach that length. For example, padStart(7, 3, '0') returns 007padStart(2010, 3, '0') returns 2010See Formatter for a richer set of formatting capabilities."
6087,common/base,com.google.common.base,Class Strings,"public static String padEnd(String string, int minLength, char padChar)","Returns a string, of length at least minLength, consisting of string appended with as many copies of padChar as are necessary to reach that length. For example, padEnd(4., 5, '0') returns 4.000padEnd(2010, 3, '!') returns 2010See Formatter for a richer set of formatting capabilities."
6088,common/base,com.google.common.base,Class Strings,"public static String repeat(String string, int count)","Returns a string consisting of a specific number of concatenated copies of an input string. For example, repeat(hey, 3) returns the string heyheyhey."
6089,common/base,com.google.common.base,Class Strings,"public static String commonPrefix(CharSequence a, CharSequence b)","Returns the longest string prefix such that a.toString().startsWith(prefix) && b.toString().startsWith(prefix), taking care not to split surrogate pairs. If a and b have no common prefix, returns the empty string."
6090,common/base,com.google.common.base,Class Strings,"public static String commonSuffix(CharSequence a, CharSequence b)","Returns the longest string suffix such that a.toString().endsWith(suffix) && b.toString().endsWith(suffix), taking care not to split surrogate pairs. If a and b have no common suffix, returns the empty string."
6091,util/concurrent,com.google.common.util.concurrent,Class Striped<L>,public abstract L get(Object key),"Returns the stripe that corresponds to the passed key. It is always guaranteed that if key1.equals(key2), then get(key1) == get(key2)."
6092,util/concurrent,com.google.common.util.concurrent,Class Striped<L>,public abstract L getAt(int index),"Returns the stripe at the specified index. Valid indexes are 0, inclusively, to size(), exclusively."
6093,util/concurrent,com.google.common.util.concurrent,Class Striped<L>,public abstract int size(),Returns the total number of stripes in this instance.
6094,util/concurrent,com.google.common.util.concurrent,Class Striped<L>,public Iterable<L> bulkGet(Iterable<?> keys),"Returns the stripes that correspond to the passed objects, in ascending (as per getAt(int)) order. Thus, threads that use the stripes in the order returned by this method are guaranteed to not deadlock each other. It should be noted that using a Striped<L> with relatively few stripes, and bulkGet(keys) with a relative large number of keys can cause an excessive number of shared stripes (much like the birthday paradox, where much fewer than anticipated birthdays are needed for a pair of them to match). Please consider carefully the implications of the number of stripes, the intended concurrency level, and the typical number of keys used in a bulkGet(keys) operation. See Balls in Bins model for mathematical formulas that can be used to estimate the probability of collisions."
6095,util/concurrent,com.google.common.util.concurrent,Class Striped<L>,public static Striped<Lock> lock(int stripes),"Creates a Striped<Lock> with eagerly initialized, strongly referenced locks. Every lock is reentrant."
6096,util/concurrent,com.google.common.util.concurrent,Class Striped<L>,public static Striped<Lock> lazyWeakLock(int stripes),"Creates a Striped<Lock> with lazily initialized, weakly referenced locks. Every lock is reentrant."
6097,util/concurrent,com.google.common.util.concurrent,Class Striped<L>,"public static Striped<Semaphore> semaphore(int stripes, int permits)","Creates a Striped<Semaphore> with eagerly initialized, strongly referenced semaphores, with the specified number of permits."
6098,util/concurrent,com.google.common.util.concurrent,Class Striped<L>,"public static Striped<Semaphore> lazyWeakSemaphore(int stripes, int permits)","Creates a Striped<Semaphore> with lazily initialized, weakly referenced semaphores, with the specified number of permits."
6099,util/concurrent,com.google.common.util.concurrent,Class Striped<L>,public static Striped<ReadWriteLock> readWriteLock(int stripes),"Creates a Striped<ReadWriteLock> with eagerly initialized, strongly referenced read-write locks. Every lock is reentrant."
6100,common/eventbus,com.google.common.eventbus,Class SubscriberExceptionContext,public EventBus getEventBus(),
6101,common/eventbus,com.google.common.eventbus,Class SubscriberExceptionContext,public Object getEvent(),
6102,common/eventbus,com.google.common.eventbus,Class SubscriberExceptionContext,public Object getSubscriber(),
6103,common/base,com.google.common.base,Class Suppliers,"public static <F,T> Supplier<T> compose(Function<? super F,T> function, Supplier<F> supplier)","Returns a new supplier which is the composition of the provided function and supplier. In other words, the new supplier's value will be computed by retrieving the value from supplier, and then applying function to that value. Note that the resulting supplier will not call supplier or invoke function until it is called."
6104,common/base,com.google.common.base,Class Suppliers,public static <T> Supplier<T> memoize(Supplier<T> delegate),"Returns a supplier which caches the instance retrieved during the first call to get() and returns that value on subsequent calls to get(). See: memoizationThe returned supplier is thread-safe. The delegate's get() method will be invoked at most once unless the underlying get() throws an exception. The supplier's serialized form does not contain the cached value, which will be recalculated when get() is called on the reserialized instance. When the underlying delegate throws an exception then this memoizing supplier will keep delegating calls until it returns valid data. If delegate is an instance created by an earlier call to memoize, it is returned directly."
6105,common/base,com.google.common.base,Class Suppliers,"public static <T> Supplier<T> memoizeWithExpiration(Supplier<T> delegate, long duration, TimeUnit unit)","Returns a supplier that caches the instance supplied by the delegate and removes the cached value after the specified time has passed. Subsequent calls to get() return the cached value if the expiration time has not passed. After the expiration time, a new value is retrieved, cached, and returned. See: memoizationThe returned supplier is thread-safe. The supplier's serialized form does not contain the cached value, which will be recalculated when get() is called on the reserialized instance. The actual memoization does not happen when the underlying delegate throws an exception. When the underlying delegate throws an exception then this memoizing supplier will keep delegating calls until it returns valid data."
6106,common/base,com.google.common.base,Class Suppliers,public static <T> Supplier<T> ofInstance(T instance),Returns a supplier that always supplies instance.
6107,common/base,com.google.common.base,Class Suppliers,public static <T> Supplier<T> synchronizedSupplier(Supplier<T> delegate),"Returns a supplier whose get() method synchronizes on delegate before calling it, making it thread-safe."
6108,common/collect,com.google.common.collect,"Interface Table<R,C,V>","boolean contains(@CompatibleWith(value=""R"") @Nullable Object rowKey, @CompatibleWith(value=""C"") @Nullable Object columnKey)",Returns true if the table contains a mapping with the specified row and column keys.
6109,common/collect,com.google.common.collect,"Interface Table<R,C,V>","boolean containsRow(@CompatibleWith(value=""R"") @Nullable Object rowKey)",Returns true if the table contains a mapping with the specified row key.
6110,common/collect,com.google.common.collect,"Interface Table<R,C,V>","boolean containsColumn(@CompatibleWith(value=""C"") @Nullable Object columnKey)",Returns true if the table contains a mapping with the specified column.
6111,common/collect,com.google.common.collect,"Interface Table<R,C,V>","boolean containsValue(@CompatibleWith(value=""V"") @Nullable Object value)",Returns true if the table contains a mapping with the specified value.
6112,common/collect,com.google.common.collect,"Interface Table<R,C,V>","V get(@CompatibleWith(value=""R"") @Nullable Object rowKey, @CompatibleWith(value=""C"") @Nullable Object columnKey)","Returns the value corresponding to the given row and column keys, or null if no such mapping exists."
6113,common/collect,com.google.common.collect,"Interface Table<R,C,V>",boolean isEmpty(),Returns true if the table contains no mappings.
6114,common/collect,com.google.common.collect,"Interface Table<R,C,V>",int size(),Returns the number of row key / column key / value mappings in the table.
6115,common/collect,com.google.common.collect,"Interface Table<R,C,V>",boolean equals(@Nullable Object obj),"Compares the specified object with this table for equality. Two tables are equal when their cell views, as returned by cellSet(), are equal."
6116,common/collect,com.google.common.collect,"Interface Table<R,C,V>",int hashCode(),"Returns the hash code for this table. The hash code of a table is defined as the hash code of its cell view, as returned by cellSet()."
6117,common/collect,com.google.common.collect,"Interface Table<R,C,V>",void clear(),Removes all mappings from the table.
6118,common/collect,com.google.common.collect,"Interface Table<R,C,V>","@CanIgnoreReturnValueV put(R rowKey, C columnKey, V value)","Associates the specified value with the specified keys. If the table already contained a mapping for those keys, the old value is replaced with the specified value."
6119,common/collect,com.google.common.collect,"Interface Table<R,C,V>","void putAll(Table<? extends R,? extends C,? extends V> table)","Copies all mappings from the specified table to this table. The effect is equivalent to calling put(R, C, V) with each row key / column key / value mapping in table."
6120,common/collect,com.google.common.collect,"Interface Table<R,C,V>","@CanIgnoreReturnValueV remove(@CompatibleWith(value=""R"") @Nullable Object rowKey, @CompatibleWith(value=""C"") @Nullable Object columnKey)","Removes the mapping, if any, associated with the given keys."
6121,common/collect,com.google.common.collect,"Interface Table<R,C,V>","Map<C,V> row(R rowKey)","Returns a view of all mappings that have the given row key. For each row key / column key / value mapping in the table with that row key, the returned map associates the column key with the value. If no mappings in the table have the provided row key, an empty map is returned. Changes to the returned map will update the underlying table, and vice versa."
6122,common/collect,com.google.common.collect,"Interface Table<R,C,V>","Map<R,V> column(C columnKey)","Returns a view of all mappings that have the given column key. For each row key / column key / value mapping in the table with that column key, the returned map associates the row key with the value. If no mappings in the table have the provided column key, an empty map is returned. Changes to the returned map will update the underlying table, and vice versa."
6123,common/collect,com.google.common.collect,"Interface Table<R,C,V>","Set<Table.Cell<R,C,V>> cellSet()","Returns a set of all row key / column key / value triplets. Changes to the returned set will update the underlying table, and vice versa. The cell set does not support the add or addAll methods."
6124,common/collect,com.google.common.collect,"Interface Table<R,C,V>",Set<R> rowKeySet(),"Returns a set of row keys that have one or more values in the table. Changes to the set will update the underlying table, and vice versa."
6125,common/collect,com.google.common.collect,"Interface Table<R,C,V>",Set<C> columnKeySet(),"Returns a set of column keys that have one or more values in the table. Changes to the set will update the underlying table, and vice versa."
6126,common/collect,com.google.common.collect,"Interface Table<R,C,V>",Collection<V> values(),"Returns a collection of all values, which may contain duplicates. Changes to the returned collection will update the underlying table, and vice versa."
6127,common/collect,com.google.common.collect,"Interface Table<R,C,V>","Map<R,Map<C,V>> rowMap()","Returns a view that associates each row key with the corresponding map from column keys to values. Changes to the returned map will update this table. The returned map does not support put() or putAll(), or setValue() on its entries. In contrast, the maps returned by rowMap().get() have the same behavior as those returned by row(R). Those maps may support setValue(), put(), and putAll()."
6128,common/collect,com.google.common.collect,"Interface Table.Cell<R,C,V>",R getRowKey(),Returns the row key of this cell.
6129,common/collect,com.google.common.collect,"Interface Table.Cell<R,C,V>",C getColumnKey(),Returns the column key of this cell.
6130,common/collect,com.google.common.collect,"Interface Table.Cell<R,C,V>",V getValue(),Returns the value of this cell.
6131,common/collect,com.google.common.collect,"Interface Table.Cell<R,C,V>",boolean equals(@Nullable Object obj),"Compares the specified object with this cell for equality. Two cells are equal when they have equal row keys, column keys, and values."
6132,common/collect,com.google.common.collect,Class Tables,"@Betapublic static <T,R,C,V,I extends Table<R,C,V>> Collector<T,?,I> toTable(Function<? super T,? extends R> rowFunction, Function<? super T,? extends C> columnFunction, Function<? super T,? extends V> valueFunction, Supplier<I> tableSupplier)","Returns a Collector that accumulates elements into a Table created using the specified supplier, whose cells are generated by applying the provided mapping functions to the input elements. Cells are inserted into the generated Table in encounter order. If multiple input elements map to the same row and column, an IllegalStateException is thrown when the collection operation is performed."
6133,common/collect,com.google.common.collect,Class Tables,"public static <T,R,C,V,I extends Table<R,C,V>> Collector<T,?,I> toTable(Function<? super T,? extends R> rowFunction, Function<? super T,? extends C> columnFunction, Function<? super T,? extends V> valueFunction, BinaryOperator<V> mergeFunction, Supplier<I> tableSupplier)","Returns a Collector that accumulates elements into a Table created using the specified supplier, whose cells are generated by applying the provided mapping functions to the input elements. Cells are inserted into the generated Table in encounter order. If multiple input elements map to the same row and column, the specified merging function is used to combine the values. Like Collectors.toMap(java.util.function.Function, java.util.function.Function, BinaryOperator, java.util.function.Supplier), this Collector throws a NullPointerException on null values returned from valueFunction, and treats nulls returned from mergeFunction as removals of that row/column pair."
6134,common/collect,com.google.common.collect,Class Tables,"public static <R,C,V> Table.Cell<R,C,V> immutableCell(R rowKey, C columnKey, V value)","Returns an immutable cell with the specified row key, column key, and value. The returned cell is serializable."
6135,common/collect,com.google.common.collect,Class Tables,"public static <R,C,V> Table<C,R,V> transpose(Table<R,C,V> table)","Creates a transposed view of a given table that flips its row and column keys. In other words, calling get(columnKey, rowKey) on the generated table always returns the same value as calling get(rowKey, columnKey) on the original table. Updating the original table changes the contents of the transposed table and vice versa. The returned table supports update operations as long as the input table supports the analogous operation with swapped rows and columns. For example, in a HashBasedTable instance, rowKeySet().iterator() supports remove() but columnKeySet().iterator() doesn't. With a transposed HashBasedTable, it's the other way around."
6136,common/collect,com.google.common.collect,Class Tables,"@Betapublic static <R,C,V> Table<R,C,V> newCustomTable(Map<R,Map<C,V>> backingMap, Supplier<? extends Map<C,V>> factory)","Creates a table that uses the specified backing map and factory. It can generate a table based on arbitrary Map classes. The factory-generated and backingMap classes determine the table iteration order. However, the table's row() method returns instances of a different class than factory.get() does. Call this method only when the simpler factory methods in classes like HashBasedTable and TreeBasedTable won't suffice. The views returned by the Table methods Table.column(C), Table.columnKeySet(), and Table.columnMap() have iterators that don't support remove(). Otherwise, all optional operations are supported. Null row keys, columns keys, and values are not supported. Lookups by row key are often faster than lookups by column key, because the data is stored in a Map<R, Map<C, V>>. A method call like column(columnKey).get(rowKey) still runs quickly, since the row key is provided. However, column(columnKey).size() takes longer, since an iteration across all row keys occurs. Note that this implementation is not synchronized. If multiple threads access this table concurrently and one of the threads modifies the table, it must be synchronized externally. The table is serializable if backingMap, factory, the maps generated by factory, and the table contents are all serializable. Note: the table assumes complete ownership over of backingMap and the maps returned by factory. Those objects should not be manually updated and they should not use soft, weak, or phantom references."
6137,common/collect,com.google.common.collect,Class Tables,"@Betapublic static <R,C,V1,V2> Table<R,C,V2> transformValues(Table<R,C,V1> fromTable, Function<? super V1,V2> function)","Returns a view of a table where each value is transformed by a function. All other properties of the table, such as iteration order, are left intact. Changes in the underlying table are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying table. It's acceptable for the underlying table to contain null keys, and even null values provided that the function is capable of accepting null input. The transformed table might contain null values, if the function sometimes gives a null result. The returned table is not thread-safe or serializable, even if the underlying table is. The function is applied lazily, invoked when needed. This is necessary for the returned table to be a view, but it means that the function will be applied many times for bulk operations like Table.containsValue(java.lang.Object) and Table.toString(). For this to perform well, function should be fast. To avoid lazy evaluation when the returned table doesn't need to be a view, copy the returned table into a new table of your choosing."
6138,common/collect,com.google.common.collect,Class Tables,"public static <R,C,V> Table<R,C,V> unmodifiableTable(Table<? extends R,? extends C,? extends V> table)","Returns an unmodifiable view of the specified table. This method allows modules to provide users with read-only access to internal tables. Query operations on the returned table read through to the specified table, and attempts to modify the returned table, whether direct or via its collection views, result in an UnsupportedOperationException. The returned table will be serializable if the specified table is serializable. Consider using an ImmutableTable, which is guaranteed never to change."
6139,common/collect,com.google.common.collect,Class Tables,"@Betapublic static <R,C,V> RowSortedTable<R,C,V> unmodifiableRowSortedTable(RowSortedTable<R,? extends C,? extends V> table)","Returns an unmodifiable view of the specified row-sorted table. This method allows modules to provide users with read-only access to internal tables. Query operations on the returned table read through to the specified table, and attempts to modify the returned table, whether direct or via its collection views, result in an UnsupportedOperationException. The returned table will be serializable if the specified table is serializable."
6140,util/concurrent,com.google.common.util.concurrent,Class ThreadFactoryBuilder,public ThreadFactoryBuilder setNameFormat(String nameFormat),Sets the naming format to use when naming threads (Thread.setName(java.lang.String)) which are created with this ThreadFactory.
6141,util/concurrent,com.google.common.util.concurrent,Class ThreadFactoryBuilder,public ThreadFactoryBuilder setDaemon(boolean daemon),Sets daemon or not for new threads created with this ThreadFactory.
6142,util/concurrent,com.google.common.util.concurrent,Class ThreadFactoryBuilder,public ThreadFactoryBuilder setPriority(int priority),Sets the priority for new threads created with this ThreadFactory.
6143,util/concurrent,com.google.common.util.concurrent,Class ThreadFactoryBuilder,public ThreadFactoryBuilder setUncaughtExceptionHandler(Thread.UncaughtExceptionHandler uncaughtExceptionHandler),Sets the Thread.UncaughtExceptionHandler for new threads created with this ThreadFactory.
6144,util/concurrent,com.google.common.util.concurrent,Class ThreadFactoryBuilder,public ThreadFactoryBuilder setThreadFactory(ThreadFactory backingThreadFactory),Sets the backing ThreadFactory for new threads created with this ThreadFactory. Threads will be created by invoking #newThread(Runnable) on this backing ThreadFactory.
6145,common/base,com.google.common.base,Class Throwables,"@GwtIncompatiblepublic static <X extends Throwable> void throwIfInstanceOf(Throwable throwable, Class<X> declaredType) throws X extends Throwable","Throws throwable if it is an instance of declaredType. Example usage: for (Foo foo : foos) { try { foo.bar(); } catch (BarException | RuntimeException | Error t) { failure = t; } } if (failure != null) { throwIfInstanceOf(failure, BarException.class); throwIfUnchecked(failure); throw new AssertionError(failure); } "
6146,common/base,com.google.common.base,Class Throwables,"@Deprecated @GwtIncompatiblepublic static <X extends Throwable> void propagateIfInstanceOf(@Nullable Throwable throwable, Class<X> declaredType) throws X extends Throwable","Deprecated. Use throwIfInstanceOf(java.lang.Throwable, java.lang.Class<X>), which has the same behavior but rejects null."
6147,common/base,com.google.common.base,Class Throwables,public static void throwIfUnchecked(Throwable throwable),Throws throwable if it is a RuntimeException or Error. Example usage: for (Foo foo : foos) { try { foo.bar(); } catch (RuntimeException | Error t) { failure = t; } } if (failure != null) { throwIfUnchecked(failure); throw new AssertionError(failure); } 
6148,common/base,com.google.common.base,Class Throwables,@Deprecated @GwtIncompatiblepublic static void propagateIfPossible(@Nullable Throwable throwable),"Deprecated. Use throwIfUnchecked(java.lang.Throwable), which has the same behavior but rejects null."
6149,common/base,com.google.common.base,Class Throwables,"@GwtIncompatiblepublic static <X extends Throwable> void propagateIfPossible(@Nullable Throwable throwable, Class<X> declaredType) throws X extends Throwable","Propagates throwable exactly as-is, if and only if it is an instance of RuntimeException, Error, or declaredType. Example usage: try { someMethodThatCouldThrowAnything(); } catch (IKnowWhatToDoWithThisException e) { handle(e); } catch (Throwable t) { Throwables.propagateIfPossible(t, OtherException.class); throw new RuntimeException(unexpected, t); } "
6150,common/base,com.google.common.base,Class Throwables,"@GwtIncompatiblepublic static <X1 extends Throwable,X2 extends Throwable> void propagateIfPossible(@Nullable Throwable throwable, Class<X1> declaredType1, Class<X2> declaredType2) throws X1 extends Throwable, X2 extends Throwable","Propagates throwable exactly as-is, if and only if it is an instance of RuntimeException, Error, declaredType1, or declaredType2. In the unlikely case that you have three or more declared checked exception types, you can handle them all by invoking these methods repeatedly. See usage example in propagateIfPossible(Throwable, Class)."
6151,common/base,com.google.common.base,Class Throwables,@CanIgnoreReturnValue @GwtIncompatible @Deprecatedpublic static RuntimeException propagate(Throwable throwable),"Deprecated. Use throw e or throw new RuntimeException(e) directly, or use a combination of throwIfUnchecked(java.lang.Throwable) and throw new RuntimeException(e). For background on the deprecation, read Why we deprecated Throwables.propagate."
6152,common/base,com.google.common.base,Class Throwables,public static Throwable getRootCause(Throwable throwable),"Returns the innermost cause of throwable. The first throwable in a chain provides context from when the error or exception was initially detected. Example usage: assertEquals(Unable to assign a customer id, Throwables.getRootCause(e).getMessage()); "
6153,common/base,com.google.common.base,Class Throwables,@Betapublic static List<Throwable> getCausalChain(Throwable throwable),"Gets a Throwable cause chain as a list. The first entry in the list will be throwable followed by its cause hierarchy. Note that this is a snapshot of the cause chain and will not reflect any subsequent changes to the cause chain. Here's an example of how it can be used to find specific types of exceptions in the cause chain: Iterables.filter(Throwables.getCausalChain(e), IOException.class)); "
6154,common/base,com.google.common.base,Class Throwables,"@Beta @GwtIncompatiblepublic static <X extends Throwable> X getCauseAs(Throwable throwable, Class<X> expectedCauseType)","Returns throwable's cause, cast to expectedCauseType. Prefer this method instead of manually casting an exception's cause. For example, (IOException) e.getCause() throws a ClassCastException that discards the original exception e if the cause is not an IOException, but Throwables.getCauseAs(e, IOException.class) keeps e as the ClassCastException's cause."
6155,common/base,com.google.common.base,Class Throwables,@GwtIncompatiblepublic static String getStackTraceAsString(Throwable throwable),"Returns a string containing the result of toString(), followed by the full, recursive stack trace of throwable. Note that you probably should not be parsing the resulting string; if you need programmatic access to the stack frames, you can call Throwable.getStackTrace()."
6156,common/base,com.google.common.base,Class Throwables,@Beta @GwtIncompatiblepublic static List<StackTraceElement> lazyStackTrace(Throwable throwable),"Returns the stack trace of throwable, possibly providing slower iteration over the full trace but faster iteration over parts of the trace. Here, slower and faster are defined in comparison to the normal way to access the stack trace, throwable.getStackTrace(). Note, however, that this method's special implementation is not available for all platforms and configurations. If that implementation is unavailable, this method falls back to getStackTrace. Callers that require the special implementation can check its availability with lazyStackTraceIsLazy(). The expected (but not guaranteed) performance of the special implementation differs from getStackTrace in one main way: The lazyStackTrace call itself returns quickly by delaying the per-stack-frame work until each element is accessed. Roughly speaking: getStackTrace takes stackSize time to return but then negligible time to retrieve each element of the returned list. lazyStackTrace takes negligible time to return but then 1/stackSize time to retrieve each element of the returned list (probably slightly more than 1/stackSize). Note: The special implementation does not respect calls to throwable.setStackTrace. Instead, it always reflects the original stack trace from the exception's creation."
6157,common/base,com.google.common.base,Class Ticker,public abstract long read(),Returns the number of nanoseconds elapsed since this ticker's fixed point of reference.
6158,util/concurrent,com.google.common.util.concurrent,Interface TimeLimiter,"<T> T newProxy(T target, Class<T> interfaceType, long timeoutDuration, TimeUnit timeoutUnit)","Returns an instance of interfaceType that delegates all method calls to the target object, enforcing the specified time limit on each call. This time-limited delegation is also performed for calls to Object.equals(java.lang.Object), Object.hashCode(), and Object.toString(). If the target method call finishes before the limit is reached, the return value or exception is propagated to the caller exactly as-is. If, on the other hand, the time limit is reached, the proxy will attempt to abort the call to the target, and will throw an UncheckedTimeoutException to the caller. It is important to note that the primary purpose of the proxy object is to return control to the caller when the timeout elapses; aborting the target method call is of secondary concern. The particular nature and strength of the guarantees made by the proxy is implementation-dependent. However, it is important that each of the methods on the target object behaves appropriately when its thread is interrupted. For example, to return the value of target.someMethod(), but substitute DEFAULT_VALUE if this method call takes over 50 ms, you can use this code: TimeLimiter limiter = . . .; TargetType proxy = limiter.newProxy( target, TargetType.class, 50, TimeUnit.MILLISECONDS); try { return proxy.someMethod(); } catch (UncheckedTimeoutException e) { return DEFAULT_VALUE; } "
6159,util/concurrent,com.google.common.util.concurrent,Interface TimeLimiter,"default <T> T newProxy(T target, Class<T> interfaceType, Duration timeout)","Returns an instance of interfaceType that delegates all method calls to the target object, enforcing the specified time limit on each call. This time-limited delegation is also performed for calls to Object.equals(java.lang.Object), Object.hashCode(), and Object.toString(). If the target method call finishes before the limit is reached, the return value or exception is propagated to the caller exactly as-is. If, on the other hand, the time limit is reached, the proxy will attempt to abort the call to the target, and will throw an UncheckedTimeoutException to the caller. It is important to note that the primary purpose of the proxy object is to return control to the caller when the timeout elapses; aborting the target method call is of secondary concern. The particular nature and strength of the guarantees made by the proxy is implementation-dependent. However, it is important that each of the methods on the target object behaves appropriately when its thread is interrupted. For example, to return the value of target.someMethod(), but substitute DEFAULT_VALUE if this method call takes over 50 ms, you can use this code: TimeLimiter limiter = . . .; TargetType proxy = limiter.newProxy(target, TargetType.class, Duration.ofMillis(50)); try { return proxy.someMethod(); } catch (UncheckedTimeoutException e) { return DEFAULT_VALUE; } "
6160,util/concurrent,com.google.common.util.concurrent,Interface TimeLimiter,"@CanIgnoreReturnValue<T> T callWithTimeout(Callable<T> callable, long timeoutDuration, TimeUnit timeoutUnit) throws TimeoutException, InterruptedException, ExecutionException","Invokes a specified Callable, timing out after the specified time limit. If the target method call finishes before the limit is reached, the return value or a wrapped exception is propagated. If, on the other hand, the time limit is reached, we attempt to abort the call to the target, and throw a TimeoutException to the caller."
6161,util/concurrent,com.google.common.util.concurrent,Interface TimeLimiter,"@CanIgnoreReturnValuedefault <T> T callWithTimeout(Callable<T> callable, Duration timeout) throws TimeoutException, InterruptedException, ExecutionException","Invokes a specified Callable, timing out after the specified time limit. If the target method call finishes before the limit is reached, the return value or a wrapped exception is propagated. If, on the other hand, the time limit is reached, we attempt to abort the call to the target, and throw a TimeoutException to the caller."
6162,util/concurrent,com.google.common.util.concurrent,Interface TimeLimiter,"@CanIgnoreReturnValue<T> T callUninterruptiblyWithTimeout(Callable<T> callable, long timeoutDuration, TimeUnit timeoutUnit) throws TimeoutException, ExecutionException","Invokes a specified Callable, timing out after the specified time limit. If the target method call finishes before the limit is reached, the return value or a wrapped exception is propagated. If, on the other hand, the time limit is reached, we attempt to abort the call to the target, and throw a TimeoutException to the caller. The difference with callWithTimeout(Callable, long, TimeUnit) is that this method will ignore interrupts on the current thread."
6163,util/concurrent,com.google.common.util.concurrent,Interface TimeLimiter,"@CanIgnoreReturnValuedefault <T> T callUninterruptiblyWithTimeout(Callable<T> callable, Duration timeout) throws TimeoutException, ExecutionException","Invokes a specified Callable, timing out after the specified time limit. If the target method call finishes before the limit is reached, the return value or a wrapped exception is propagated. If, on the other hand, the time limit is reached, we attempt to abort the call to the target, and throw a TimeoutException to the caller. The difference with callWithTimeout(Callable, Duration) is that this method will ignore interrupts on the current thread."
6164,util/concurrent,com.google.common.util.concurrent,Interface TimeLimiter,"void runWithTimeout(Runnable runnable, long timeoutDuration, TimeUnit timeoutUnit) throws TimeoutException, InterruptedException","Invokes a specified Runnable, timing out after the specified time limit. If the target method run finishes before the limit is reached, this method returns or a wrapped exception is propagated. If, on the other hand, the time limit is reached, we attempt to abort the run, and throw a TimeoutException to the caller."
6165,util/concurrent,com.google.common.util.concurrent,Interface TimeLimiter,"default void runWithTimeout(Runnable runnable, Duration timeout) throws TimeoutException, InterruptedException","Invokes a specified Runnable, timing out after the specified time limit. If the target method run finishes before the limit is reached, this method returns or a wrapped exception is propagated. If, on the other hand, the time limit is reached, we attempt to abort the run, and throw a TimeoutException to the caller."
6166,util/concurrent,com.google.common.util.concurrent,Interface TimeLimiter,"void runUninterruptiblyWithTimeout(Runnable runnable, long timeoutDuration, TimeUnit timeoutUnit) throws TimeoutException","Invokes a specified Runnable, timing out after the specified time limit. If the target method run finishes before the limit is reached, this method returns or a wrapped exception is propagated. If, on the other hand, the time limit is reached, we attempt to abort the run, and throw a TimeoutException to the caller. The difference with runWithTimeout(Runnable, long, TimeUnit) is that this method will ignore interrupts on the current thread."
6167,common/graph,com.google.common.graph,Class Traverser<N>,public static <N> Traverser<N> forGraph(SuccessorsFunction<N> graph),"Creates a new traverser for the given general graph. Traversers created using this method are guaranteed to visit each node reachable from the start node(s) at most once. If you know that no node in graph is reachable by more than one path from the start node(s), consider using forTree(SuccessorsFunction) instead. Performance notesTraversals require O(n) time (where n is the number of nodes reachable from the start node), assuming that the node objects have O(1) equals() and hashCode() implementations. (See the notes on element objects for more information.) While traversing, the traverser will use O(n) space (where n is the number of nodes that have thus far been visited), plus O(H) space (where H is the number of nodes that have been seen but not yet visited, that is, the horizon). "
6168,common/graph,com.google.common.graph,Class Traverser<N>,public static <N> Traverser<N> forTree(SuccessorsFunction<N> tree),"Creates a new traverser for a directed acyclic graph that has at most one path from the start node(s) to any node reachable from the start node(s), and has no paths from any start node to any other start node, such as a tree or forest. forTree() is especially useful (versus forGraph()) in cases where the data structure being traversed is, in addition to being a tree/forest, also defined recursively. This is because the forTree()-based implementations don't keep track of visited nodes, and therefore don't need to call `equals()` or `hashCode()` on the node objects; this saves both time and space versus traversing the same graph using forGraph(). Providing a graph to be traversed for which there is more than one path from the start node(s) to any node may lead to: Traversal not terminating (if the graph has cycles) Nodes being visited multiple times (if multiple paths exist from any start node to any node reachable from any start node) Performance notesTraversals require O(n) time (where n is the number of nodes reachable from the start node). While traversing, the traverser will use O(H) space (where H is the number of nodes that have been seen but not yet visited, that is, the horizon). Examples (all edges are directed facing downwards) The graph below would be valid input with start nodes of a, f, c. However, if b were also a start node, then there would be multiple paths to reach e and h. a b c / \ / \ | / \ / \ | d e f g | | h . The graph below would be a valid input with start nodes of a, f. However, if b were a start node, there would be multiple paths to f. a b / \ / \ / \ / \ c d e \ / \ / f Note on binary treesThis method can be used to traverse over a binary tree. Given methods leftChild(node) and rightChild(node), this method can be called as Traverser.forTree(node -> ImmutableList.of(leftChild(node), rightChild(node))); "
6169,common/graph,com.google.common.graph,Class Traverser<N>,public final Iterable<N> breadthFirst(N startNode),"Returns an unmodifiable Iterable over the nodes reachable from startNode, in the order of a breadth-first traversal. That is, all the nodes of depth 0 are returned, then depth 1, then 2, and so on. Example: The following graph with startNode a would return nodes in the order abcdef (assuming successors are returned in alphabetical order). b ---- a ---- d | | | | e ---- c ---- f The behavior of this method is undefined if the nodes, or the topology of the graph, change while iteration is in progress. The returned Iterable can be iterated over multiple times. Every iterator will compute its next element on the fly. It is thus possible to limit the traversal to a certain number of nodes as follows: Iterables.limit(Traverser.forGraph(graph).breadthFirst(node), maxNumberOfNodes); See Wikipedia for more info."
6170,common/graph,com.google.common.graph,Class Traverser<N>,public final Iterable<N> breadthFirst(Iterable<? extends N> startNodes),"Returns an unmodifiable Iterable over the nodes reachable from any of the startNodes, in the order of a breadth-first traversal. This is equivalent to a breadth-first traversal of a graph with an additional root node whose successors are the listed startNodes."
6171,common/graph,com.google.common.graph,Class Traverser<N>,public final Iterable<N> depthFirstPreOrder(N startNode),"Returns an unmodifiable Iterable over the nodes reachable from startNode, in the order of a depth-first pre-order traversal. Pre-order implies that nodes appear in the Iterable in the order in which they are first visited. Example: The following graph with startNode a would return nodes in the order abecfd (assuming successors are returned in alphabetical order). b ---- a ---- d | | | | e ---- c ---- f The behavior of this method is undefined if the nodes, or the topology of the graph, change while iteration is in progress. The returned Iterable can be iterated over multiple times. Every iterator will compute its next element on the fly. It is thus possible to limit the traversal to a certain number of nodes as follows: Iterables.limit( Traverser.forGraph(graph).depthFirstPreOrder(node), maxNumberOfNodes); See Wikipedia for more info."
6172,common/graph,com.google.common.graph,Class Traverser<N>,public final Iterable<N> depthFirstPreOrder(Iterable<? extends N> startNodes),"Returns an unmodifiable Iterable over the nodes reachable from any of the startNodes, in the order of a depth-first pre-order traversal. This is equivalent to a depth-first pre-order traversal of a graph with an additional root node whose successors are the listed startNodes."
6173,common/graph,com.google.common.graph,Class Traverser<N>,public final Iterable<N> depthFirstPostOrder(N startNode),"Returns an unmodifiable Iterable over the nodes reachable from startNode, in the order of a depth-first post-order traversal. Post-order implies that nodes appear in the Iterable in the order in which they are visited for the last time. Example: The following graph with startNode a would return nodes in the order fcebda (assuming successors are returned in alphabetical order). b ---- a ---- d | | | | e ---- c ---- f The behavior of this method is undefined if the nodes, or the topology of the graph, change while iteration is in progress. The returned Iterable can be iterated over multiple times. Every iterator will compute its next element on the fly. It is thus possible to limit the traversal to a certain number of nodes as follows: Iterables.limit( Traverser.forGraph(graph).depthFirstPostOrder(node), maxNumberOfNodes); See Wikipedia for more info."
6174,common/collect,com.google.common.collect,"Class TreeBasedTable<R,C,V>","public static <R extends Comparable,C extends Comparable,V> TreeBasedTable<R,C,V> create()","Creates an empty TreeBasedTable that uses the natural orderings of both row and column keys. The method signature specifies R extends Comparable with a raw Comparable, instead of R extends Comparable<? super R>, and the same for C. That's necessary to support classes defined without generics."
6175,common/collect,com.google.common.collect,"Class TreeBasedTable<R,C,V>","public static <R,C,V> TreeBasedTable<R,C,V> create(Comparator<? super R> rowComparator, Comparator<? super C> columnComparator)",Creates an empty TreeBasedTable that is ordered by the specified comparators.
6176,common/collect,com.google.common.collect,"Class TreeBasedTable<R,C,V>","public static <R,C,V> TreeBasedTable<R,C,V> create(TreeBasedTable<R,C,? extends V> table)",Creates a TreeBasedTable with the same mappings and sort order as the specified TreeBasedTable.
6177,common/collect,com.google.common.collect,"Class TreeBasedTable<R,C,V>",@Deprecatedpublic Comparator<? super R> rowComparator(),Deprecated. Use table.rowKeySet().comparator() instead.
6178,common/collect,com.google.common.collect,"Class TreeBasedTable<R,C,V>",@Deprecatedpublic Comparator<? super C> columnComparator(),"Deprecated. Store the Comparator alongside the Table. Or, if you know that the Table contains at least one value, you can retrieve the Comparator with: ((SortedMap<C, V>) table.rowMap().values().iterator().next()).comparator();."
6179,common/collect,com.google.common.collect,"Class TreeBasedTable<R,C,V>","public SortedMap<C,V> row(R rowKey)","Returns a view of all mappings that have the given row key. For each row key / column key / value mapping in the table with that row key, the returned map associates the column key with the value. If no mappings in the table have the provided row key, an empty map is returned. Changes to the returned map will update the underlying table, and vice versa. Because a TreeBasedTable has unique sorted values for a given row, this method returns a SortedMap, instead of the Map specified in the Table interface."
6180,common/collect,com.google.common.collect,"Class TreeBasedTable<R,C,V>",public SortedSet<R> rowKeySet(),"Returns a set of row keys that have one or more values in the table. Changes to the set will update the underlying table, and vice versa. This method returns a SortedSet, instead of the Set specified in the Table interface."
6181,common/collect,com.google.common.collect,"Class TreeBasedTable<R,C,V>","public SortedMap<R,Map<C,V>> rowMap()","Returns a view that associates each row key with the corresponding map from column keys to values. Changes to the returned map will update this table. The returned map does not support put() or putAll(), or setValue() on its entries. In contrast, the maps returned by rowMap().get() have the same behavior as those returned by Table.row(R). Those maps may support setValue(), put(), and putAll(). This method returns a SortedMap, instead of the Map specified in the Table interface."
6182,common/collect,com.google.common.collect,"Class TreeBasedTable<R,C,V>","public boolean contains(@Nullable Object rowKey, @Nullable Object columnKey)",Description copied from interface: Table
6183,common/collect,com.google.common.collect,"Class TreeBasedTable<R,C,V>",public boolean containsColumn(@Nullable Object columnKey),Description copied from interface: Table
6184,common/collect,com.google.common.collect,"Class TreeBasedTable<R,C,V>",public boolean containsRow(@Nullable Object rowKey),Description copied from interface: Table
6185,common/collect,com.google.common.collect,"Class TreeBasedTable<R,C,V>",public boolean containsValue(@Nullable Object value),Description copied from interface: Table
6186,common/collect,com.google.common.collect,"Class TreeBasedTable<R,C,V>","public V get(@Nullable Object rowKey, @Nullable Object columnKey)",Description copied from interface: Table
6187,common/collect,com.google.common.collect,"Class TreeBasedTable<R,C,V>",public boolean isEmpty(),Description copied from interface: Table
6188,common/collect,com.google.common.collect,"Class TreeBasedTable<R,C,V>",public int size(),Description copied from interface: Table
6189,common/collect,com.google.common.collect,"Class TreeBasedTable<R,C,V>",public void clear(),Description copied from interface: Table
6190,common/collect,com.google.common.collect,"Class TreeBasedTable<R,C,V>","@CanIgnoreReturnValuepublic V put(R rowKey, C columnKey, V value)",Description copied from interface: Table
6191,common/collect,com.google.common.collect,"Class TreeBasedTable<R,C,V>","@CanIgnoreReturnValuepublic V remove(@Nullable Object rowKey, @Nullable Object columnKey)",Description copied from interface: Table
6192,common/collect,com.google.common.collect,"Class TreeBasedTable<R,C,V>","public Set<Table.Cell<R,C,V>> cellSet()","Returns a set of all row key / column key / value triplets. Changes to the returned set will update the underlying table, and vice versa. The cell set does not support the add or addAll methods. The set's iterator traverses the mappings for the first row, the mappings for the second row, and so on. Each cell is an immutable snapshot of a row key / column key / value mapping, taken at the time the cell is returned by a method call to the set or its iterator."
6193,common/collect,com.google.common.collect,"Class TreeBasedTable<R,C,V>","public Map<R,V> column(C columnKey)","Returns a view of all mappings that have the given column key. For each row key / column key / value mapping in the table with that column key, the returned map associates the row key with the value. If no mappings in the table have the provided column key, an empty map is returned. Changes to the returned map will update the underlying table, and vice versa. The returned map's views have iterators that don't support remove()."
6194,common/collect,com.google.common.collect,"Class TreeBasedTable<R,C,V>",public Set<C> columnKeySet(),"Returns a set of column keys that have one or more values in the table. Changes to the set will update the underlying table, and vice versa. The returned set has an iterator that does not support remove(). The set's iterator traverses the columns of the first row, the columns of the second row, etc., skipping any columns that have appeared previously."
6195,common/collect,com.google.common.collect,"Class TreeBasedTable<R,C,V>",public Collection<V> values(),"Returns a collection of all values, which may contain duplicates. Changes to the returned collection will update the underlying table, and vice versa. The collection's iterator traverses the values for the first row, the values for the second row, and so on."
6196,common/collect,com.google.common.collect,"Class TreeBasedTable<R,C,V>","public Map<C,Map<R,V>> columnMap()",Description copied from interface: Table
6197,common/collect,com.google.common.collect,"Class TreeBasedTable<R,C,V>","public void putAll(Table<? extends R,? extends C,? extends V> table)",Description copied from interface: Table
6198,common/collect,com.google.common.collect,"Class TreeBasedTable<R,C,V>",public boolean equals(@Nullable Object obj),Description copied from class: java.lang.Object
6199,common/collect,com.google.common.collect,"Class TreeBasedTable<R,C,V>",public int hashCode(),Description copied from class: java.lang.Object
6200,common/collect,com.google.common.collect,"Class TreeMultimap<K,V>","public static <K extends Comparable,V extends Comparable> TreeMultimap<K,V> create()",Creates an empty TreeMultimap ordered by the natural ordering of its keys and values.
6201,common/collect,com.google.common.collect,"Class TreeMultimap<K,V>","public static <K,V> TreeMultimap<K,V> create(Comparator<? super K> keyComparator, Comparator<? super V> valueComparator)",Creates an empty TreeMultimap instance using explicit comparators. Neither comparator may be null; use Ordering.natural() to specify natural order.
6202,common/collect,com.google.common.collect,"Class TreeMultimap<K,V>","public static <K extends Comparable,V extends Comparable> TreeMultimap<K,V> create(Multimap<? extends K,? extends V> multimap)","Constructs a TreeMultimap, ordered by the natural ordering of its keys and values, with the same mappings as the specified multimap."
6203,common/collect,com.google.common.collect,"Class TreeMultimap<K,V>",@Deprecatedpublic Comparator<? super K> keyComparator(),Deprecated. Use ((NavigableSet<K>) multimap.keySet()).comparator() instead.
6204,common/collect,com.google.common.collect,"Class TreeMultimap<K,V>",public Comparator<? super V> valueComparator(),Description copied from interface: SortedSetMultimap
6205,common/collect,com.google.common.collect,"Class TreeMultimap<K,V>",@GwtIncompatiblepublic NavigableSet<V> get(K key),"Returns a collection view of all values associated with a key. If no mappings in the multimap have the provided key, an empty collection is returned. Changes to the returned collection will update the underlying multimap, and vice versa. Because a SortedSetMultimap has unique sorted values for a given key, this method returns a SortedSet, instead of the Collection specified in the Multimap interface."
6206,common/collect,com.google.common.collect,"Class TreeMultimap<K,V>",public NavigableSet<K> keySet(),"Returns a view collection of all distinct keys contained in this multimap. Note that the key set contains a key if and only if this multimap maps that key to at least one value. Changes to the returned set will update the underlying multimap, and vice versa. However, adding to the returned set is not possible. Because a TreeMultimap has unique sorted keys, this method returns a NavigableSet, instead of the Set specified in the Multimap interface."
6207,common/collect,com.google.common.collect,"Class TreeMultimap<K,V>","public NavigableMap<K,Collection<V>> asMap()","Returns a map view that associates each key with the corresponding values in the multimap. Changes to the returned map, such as element removal, will update the underlying multimap. The map does not support setValue on its entries, put, or putAll. When passed a key that is present in the map, asMap().get(Object) has the same behavior as get(K), returning a live collection. When passed a key that is not present, however, asMap().get(Object) returns null instead of an empty collection. Though the method signature doesn't say so explicitly, the returned map has SortedSet values. Because a TreeMultimap has unique sorted keys, this method returns a NavigableMap, instead of the Map specified in the Multimap interface."
6208,common/collect,com.google.common.collect,"Class TreeMultimap<K,V>",@CanIgnoreReturnValuepublic SortedSet<V> removeAll(@Nullable Object key),"Removes all values associated with a given key. The returned collection is immutable. Because a SortedSetMultimap has unique sorted values for a given key, this method returns a SortedSet, instead of the Collection specified in the Multimap interface."
6209,common/collect,com.google.common.collect,"Class TreeMultimap<K,V>","@CanIgnoreReturnValuepublic SortedSet<V> replaceValues(K key, Iterable<? extends V> values)","Stores a collection of values with the same key, replacing any existing values for that key. The returned collection is immutable. Because a SortedSetMultimap has unique sorted values for a given key, this method returns a SortedSet, instead of the Collection specified in the Multimap interface. Any duplicates in values will be stored in the multimap once."
6210,common/collect,com.google.common.collect,"Class TreeMultimap<K,V>",public Collection<V> values(),"Returns a view collection containing the value from each key-value pair contained in this multimap, without collapsing duplicates (so values().size() == size()). Changes to the returned collection will update the underlying multimap, and vice versa. However, adding to the returned collection is not possible. The iterator generated by the returned collection traverses the values for one key, followed by the values of a second key, and so on. Consequently, the values do not follow their natural ordering or the ordering of the value comparator."
6211,common/collect,com.google.common.collect,"Class TreeMultimap<K,V>","public Set<Map.Entry<K,V>> entries()","Returns a view collection of all key-value pairs contained in this multimap, as Map.Entry instances. Changes to the returned collection or the entries it contains will update the underlying multimap, and vice versa. However, adding to the returned collection is not possible. The iterator generated by the returned collection traverses the values for one key, followed by the values of a second key, and so on. Each entry is an immutable snapshot of a key-value mapping in the multimap, taken at the time the entry is returned by a method call to the collection or its iterator. Because a SetMultimap has unique values for a given key, this method returns a Set, instead of the Collection specified in the Multimap interface."
6212,common/collect,com.google.common.collect,"Class TreeMultimap<K,V>","@CanIgnoreReturnValuepublic boolean put(K key, V value)",Stores a key-value pair in the multimap.
6213,common/collect,com.google.common.collect,"Class TreeMultimap<K,V>",public boolean equals(@Nullable Object object),"Compares the specified object to this multimap for equality. Two SetMultimap instances are equal if, for each key, they contain the same values. Equality does not depend on the ordering of keys or values."
6214,common/collect,com.google.common.collect,"Class TreeMultimap<K,V>",public int size(),Description copied from interface: Multimap
6215,common/collect,com.google.common.collect,"Class TreeMultimap<K,V>",public boolean containsKey(@Nullable Object key),Description copied from interface: Multimap
6216,common/collect,com.google.common.collect,"Class TreeMultimap<K,V>",public void clear(),Description copied from interface: Multimap
6217,common/collect,com.google.common.collect,"Class TreeMultimap<K,V>","public void forEach(BiConsumer<? super K,? super V> action)",Description copied from interface: Multimap
6218,common/collect,com.google.common.collect,"Class TreeMultimap<K,V>",public boolean isEmpty(),Description copied from interface: Multimap
6219,common/collect,com.google.common.collect,"Class TreeMultimap<K,V>",public boolean containsValue(@Nullable Object value),Description copied from interface: Multimap
6220,common/collect,com.google.common.collect,"Class TreeMultimap<K,V>","public boolean containsEntry(@Nullable Object key, @Nullable Object value)",Description copied from interface: Multimap
6221,common/collect,com.google.common.collect,"Class TreeMultimap<K,V>","@CanIgnoreReturnValuepublic boolean remove(@Nullable Object key, @Nullable Object value)",Description copied from interface: Multimap
6222,common/collect,com.google.common.collect,"Class TreeMultimap<K,V>","@CanIgnoreReturnValuepublic boolean putAll(K key, Iterable<? extends V> values)",Description copied from interface: Multimap
6223,common/collect,com.google.common.collect,"Class TreeMultimap<K,V>","@CanIgnoreReturnValuepublic boolean putAll(Multimap<? extends K,? extends V> multimap)",Description copied from interface: Multimap
6224,common/collect,com.google.common.collect,"Class TreeMultimap<K,V>",public Multiset<K> keys(),Description copied from interface: Multimap
6225,common/collect,com.google.common.collect,"Class TreeMultimap<K,V>",public int hashCode(),"Returns the hash code for this multimap. The hash code of a multimap is defined as the hash code of the map view, as returned by Multimap.asMap()."
6226,common/collect,com.google.common.collect,Class TreeMultiset<E>,public static <E extends Comparable> TreeMultiset<E> create(),"Creates a new, empty multiset, sorted according to the elements' natural order. All elements inserted into the multiset must implement the Comparable interface. Furthermore, all such elements must be mutually comparable: e1.compareTo(e2) must not throw a ClassCastException for any elements e1 and e2 in the multiset. If the user attempts to add an element to the multiset that violates this constraint (for example, the user attempts to add a string element to a set whose elements are integers), the add(Object) call will throw a ClassCastException. The type specification is <E extends Comparable>, instead of the more specific <E extends Comparable<? super E>>, to support classes defined without generics."
6227,common/collect,com.google.common.collect,Class TreeMultiset<E>,public static <E> TreeMultiset<E> create(@Nullable Comparator<? super E> comparator),"Creates a new, empty multiset, sorted according to the specified comparator. All elements inserted into the multiset must be mutually comparable by the specified comparator: comparator.compare(e1, e2) must not throw a ClassCastException for any elements e1 and e2 in the multiset. If the user attempts to add an element to the multiset that violates this constraint, the add(Object) call will throw a ClassCastException."
6228,common/collect,com.google.common.collect,Class TreeMultiset<E>,public static <E extends Comparable> TreeMultiset<E> create(Iterable<? extends E> elements),"Creates an empty multiset containing the given initial elements, sorted according to the elements' natural order. This implementation is highly efficient when elements is itself a Multiset. The type specification is <E extends Comparable>, instead of the more specific <E extends Comparable<? super E>>, to support classes defined without generics."
6229,common/collect,com.google.common.collect,Class TreeMultiset<E>,public int size(),Description copied from interface: java.util.Collection
6230,common/collect,com.google.common.collect,Class TreeMultiset<E>,public int count(@Nullable Object element),Description copied from interface: Multiset
6231,common/collect,com.google.common.collect,Class TreeMultiset<E>,"@CanIgnoreReturnValuepublic int add(E element, int occurrences)",Description copied from interface: Multiset
6232,common/collect,com.google.common.collect,Class TreeMultiset<E>,"@CanIgnoreReturnValuepublic int remove(@Nullable Object element, int occurrences)",Description copied from interface: Multiset
6233,common/collect,com.google.common.collect,Class TreeMultiset<E>,"@CanIgnoreReturnValuepublic int setCount(E element, int count)",Description copied from interface: Multiset
6234,common/collect,com.google.common.collect,Class TreeMultiset<E>,"@CanIgnoreReturnValuepublic boolean setCount(E element, int oldCount, int newCount)",Description copied from interface: Multiset
6235,common/collect,com.google.common.collect,Class TreeMultiset<E>,public void clear(),Description copied from class: java.util.AbstractCollection
6236,common/collect,com.google.common.collect,Class TreeMultiset<E>,public void forEachEntry(ObjIntConsumer<? super E> action),Description copied from interface: Multiset
6237,common/collect,com.google.common.collect,Class TreeMultiset<E>,public Iterator<E> iterator(),Description copied from class: java.util.AbstractCollection
6238,common/collect,com.google.common.collect,Class TreeMultiset<E>,"public SortedMultiset<E> headMultiset(E upperBound, BoundType boundType)",Description copied from interface: SortedMultiset
6239,common/collect,com.google.common.collect,Class TreeMultiset<E>,"public SortedMultiset<E> tailMultiset(E lowerBound, BoundType boundType)",Description copied from interface: SortedMultiset
6240,common/collect,com.google.common.collect,Class TreeMultiset<E>,public NavigableSet<E> elementSet(),Description copied from interface: Multiset
6241,common/collect,com.google.common.collect,Class TreeMultiset<E>,public Comparator<? super E> comparator(),Description copied from interface: SortedMultiset
6242,common/collect,com.google.common.collect,Class TreeMultiset<E>,public Multiset.Entry<E> firstEntry(),Description copied from interface: SortedMultiset
6243,common/collect,com.google.common.collect,Class TreeMultiset<E>,public Multiset.Entry<E> lastEntry(),Description copied from interface: SortedMultiset
6244,common/collect,com.google.common.collect,Class TreeMultiset<E>,public Multiset.Entry<E> pollFirstEntry(),Description copied from interface: SortedMultiset
6245,common/collect,com.google.common.collect,Class TreeMultiset<E>,public Multiset.Entry<E> pollLastEntry(),Description copied from interface: SortedMultiset
6246,common/collect,com.google.common.collect,Class TreeMultiset<E>,"public SortedMultiset<E> subMultiset(E fromElement, BoundType fromBoundType, E toElement, BoundType toBoundType)",Description copied from interface: SortedMultiset
6247,common/collect,com.google.common.collect,Class TreeMultiset<E>,public SortedMultiset<E> descendingMultiset(),Description copied from interface: SortedMultiset
6248,common/collect,com.google.common.collect,Class TreeMultiset<E>,public boolean isEmpty(),Description copied from class: java.util.AbstractCollection
6249,common/collect,com.google.common.collect,Class TreeMultiset<E>,public boolean contains(@Nullable Object element),Description copied from class: java.util.AbstractCollection
6250,common/collect,com.google.common.collect,Class TreeMultiset<E>,@CanIgnoreReturnValuepublic final boolean add(E element),Description copied from class: java.util.AbstractCollection
6251,common/collect,com.google.common.collect,Class TreeMultiset<E>,@CanIgnoreReturnValuepublic final boolean remove(@Nullable Object element),Description copied from class: java.util.AbstractCollection
6252,common/collect,com.google.common.collect,Class TreeMultiset<E>,@CanIgnoreReturnValuepublic final boolean addAll(Collection<? extends E> elementsToAdd),"Adds all of the elements in the specified collection to this collection (optional operation). The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (This implies that the behavior of this call is undefined if the specified collection is this collection, and this collection is nonempty.) This implementation iterates over the specified collection, and adds each object returned by the iterator to this collection, in turn. Note that this implementation will throw an UnsupportedOperationException unless add is overridden (assuming the specified collection is non-empty). This implementation is highly efficient when elementsToAdd is itself a Multiset."
6253,common/collect,com.google.common.collect,Class TreeMultiset<E>,@CanIgnoreReturnValuepublic final boolean removeAll(Collection<?> elementsToRemove),Description copied from class: java.util.AbstractCollection
6254,common/collect,com.google.common.collect,Class TreeMultiset<E>,@CanIgnoreReturnValuepublic final boolean retainAll(Collection<?> elementsToRetain),Description copied from class: java.util.AbstractCollection
6255,common/collect,com.google.common.collect,Class TreeMultiset<E>,public Set<Multiset.Entry<E>> entrySet(),Description copied from interface: Multiset
6256,common/collect,com.google.common.collect,Class TreeMultiset<E>,public final boolean equals(@Nullable Object object),"Indicates whether some other object is equal to this one. The equals method implements an equivalence relation on non-null object references: It is reflexive: for any non-null reference value x, x.equals(x) should return true. It is symmetric: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is transitive: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is consistent: for any non-null reference values x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes. This implementation returns true if object is a multiset of the same size and if, for each element, the two multisets have the same count."
6257,common/collect,com.google.common.collect,Class TreeMultiset<E>,public final int hashCode(),"Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by HashMap. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the Object.equals(java.lang.Object) method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java™ programming language.) This implementation returns the hash code of Multiset.entrySet()."
6258,common/collect,com.google.common.collect,"Class TreeRangeMap<K extends Comparable,V>","public static <K extends Comparable,V> TreeRangeMap<K,V> create()",
6259,common/collect,com.google.common.collect,"Class TreeRangeMap<K extends Comparable,V>",public V get(K key),Description copied from interface: RangeMap
6260,common/collect,com.google.common.collect,"Class TreeRangeMap<K extends Comparable,V>","public @Nullable Map.Entry<Range<K>,V> getEntry(K key)",Description copied from interface: RangeMap
6261,common/collect,com.google.common.collect,"Class TreeRangeMap<K extends Comparable,V>","public void put(Range<K> range, V value)",Description copied from interface: RangeMap
6262,common/collect,com.google.common.collect,"Class TreeRangeMap<K extends Comparable,V>","public void putCoalescing(Range<K> range, V value)",Description copied from interface: RangeMap
6263,common/collect,com.google.common.collect,"Class TreeRangeMap<K extends Comparable,V>","public void putAll(RangeMap<K,V> rangeMap)",Description copied from interface: RangeMap
6264,common/collect,com.google.common.collect,"Class TreeRangeMap<K extends Comparable,V>",public void clear(),Description copied from interface: RangeMap
6265,common/collect,com.google.common.collect,"Class TreeRangeMap<K extends Comparable,V>",public Range<K> span(),Description copied from interface: RangeMap
6266,common/collect,com.google.common.collect,"Class TreeRangeMap<K extends Comparable,V>",public void remove(Range<K> rangeToRemove),Description copied from interface: RangeMap
6267,common/collect,com.google.common.collect,"Class TreeRangeMap<K extends Comparable,V>","public void merge(Range<K> range, V value, BiFunction<? super V,? super V,? extends V> remappingFunction)",Description copied from interface: RangeMap
6268,common/collect,com.google.common.collect,"Class TreeRangeMap<K extends Comparable,V>","public Map<Range<K>,V> asMapOfRanges()",Description copied from interface: RangeMap
6269,common/collect,com.google.common.collect,"Class TreeRangeMap<K extends Comparable,V>","public Map<Range<K>,V> asDescendingMapOfRanges()",Description copied from interface: RangeMap
6270,common/collect,com.google.common.collect,"Class TreeRangeMap<K extends Comparable,V>","public RangeMap<K,V> subRangeMap(Range<K> subRange)",Description copied from interface: RangeMap
6271,common/collect,com.google.common.collect,"Class TreeRangeMap<K extends Comparable,V>",public boolean equals(@Nullable Object o),Description copied from class: java.lang.Object
6272,common/collect,com.google.common.collect,"Class TreeRangeMap<K extends Comparable,V>",public int hashCode(),Description copied from class: java.lang.Object
6273,common/collect,com.google.common.collect,Class TreeRangeSet<C extends Comparable<?>>,public static <C extends Comparable<?>> TreeRangeSet<C> create(),Creates an empty TreeRangeSet instance.
6274,common/collect,com.google.common.collect,Class TreeRangeSet<C extends Comparable<?>>,public static <C extends Comparable<?>> TreeRangeSet<C> create(RangeSet<C> rangeSet),Returns a TreeRangeSet initialized with the ranges in the specified range set.
6275,common/collect,com.google.common.collect,Class TreeRangeSet<C extends Comparable<?>>,public static <C extends Comparable<?>> TreeRangeSet<C> create(Iterable<Range<C>> ranges),Returns a TreeRangeSet representing the union of the specified ranges. This is the smallest RangeSet which encloses each of the specified ranges. An element will be contained in this RangeSet if and only if it is contained in at least one Range in ranges.
6276,common/collect,com.google.common.collect,Class TreeRangeSet<C extends Comparable<?>>,public Set<Range<C>> asRanges(),Description copied from interface: RangeSet
6277,common/collect,com.google.common.collect,Class TreeRangeSet<C extends Comparable<?>>,public Set<Range<C>> asDescendingSetOfRanges(),Description copied from interface: RangeSet
6278,common/collect,com.google.common.collect,Class TreeRangeSet<C extends Comparable<?>>,public @Nullable Range<C> rangeContaining(C value),Description copied from interface: RangeSet
6279,common/collect,com.google.common.collect,Class TreeRangeSet<C extends Comparable<?>>,public boolean intersects(Range<C> range),Description copied from interface: RangeSet
6280,common/collect,com.google.common.collect,Class TreeRangeSet<C extends Comparable<?>>,public boolean encloses(Range<C> range),Description copied from interface: RangeSet
6281,common/collect,com.google.common.collect,Class TreeRangeSet<C extends Comparable<?>>,public Range<C> span(),Description copied from interface: RangeSet
6282,common/collect,com.google.common.collect,Class TreeRangeSet<C extends Comparable<?>>,public void add(Range<C> rangeToAdd),Description copied from interface: RangeSet
6283,common/collect,com.google.common.collect,Class TreeRangeSet<C extends Comparable<?>>,public void remove(Range<C> rangeToRemove),Description copied from interface: RangeSet
6284,common/collect,com.google.common.collect,Class TreeRangeSet<C extends Comparable<?>>,public RangeSet<C> complement(),Description copied from interface: RangeSet
6285,common/collect,com.google.common.collect,Class TreeRangeSet<C extends Comparable<?>>,public RangeSet<C> subRangeSet(Range<C> view),Description copied from interface: RangeSet
6286,common/collect,com.google.common.collect,Class TreeRangeSet<C extends Comparable<?>>,public boolean contains(C value),Description copied from interface: RangeSet
6287,common/collect,com.google.common.collect,Class TreeRangeSet<C extends Comparable<?>>,public boolean isEmpty(),Description copied from interface: RangeSet
6288,common/collect,com.google.common.collect,Class TreeRangeSet<C extends Comparable<?>>,public void clear(),Description copied from interface: RangeSet
6289,common/collect,com.google.common.collect,Class TreeRangeSet<C extends Comparable<?>>,public boolean enclosesAll(RangeSet<C> other),Description copied from interface: RangeSet
6290,common/collect,com.google.common.collect,Class TreeRangeSet<C extends Comparable<?>>,public void addAll(RangeSet<C> other),Description copied from interface: RangeSet
6291,common/collect,com.google.common.collect,Class TreeRangeSet<C extends Comparable<?>>,public void removeAll(RangeSet<C> other),Description copied from interface: RangeSet
6292,common/collect,com.google.common.collect,Class TreeRangeSet<C extends Comparable<?>>,public boolean equals(@Nullable Object obj),Description copied from class: java.lang.Object
6293,common/collect,com.google.common.collect,Class TreeRangeSet<C extends Comparable<?>>,public final int hashCode(),Description copied from class: java.lang.Object
6294,common/collect,com.google.common.collect,Class TreeTraverser<T>,"@Deprecatedpublic static <T> TreeTraverser<T> using(Function<T,? extends Iterable<T>> nodeToChildrenFunction)","Deprecated. Use Traverser.forTree(com.google.common.graph.SuccessorsFunction<N>) instead. If you are using a lambda, these methods have exactly the same signature."
6295,common/collect,com.google.common.collect,Class TreeTraverser<T>,public abstract Iterable<T> children(T root),Deprecated. 
6296,common/collect,com.google.common.collect,Class TreeTraverser<T>,@Deprecatedpublic final FluentIterable<T> preOrderTraversal(T root),"Deprecated. Use Traverser.depthFirstPreOrder(N) instead, which has the same behavior."
6297,common/collect,com.google.common.collect,Class TreeTraverser<T>,@Deprecatedpublic final FluentIterable<T> postOrderTraversal(T root),"Deprecated. Use Traverser.depthFirstPostOrder(N) instead, which has the same behavior."
6298,common/reflect,com.google.common.reflect,Class TypeParameter<T>,public final int hashCode(),Description copied from class: java.lang.Object
6299,common/reflect,com.google.common.reflect,Class TypeParameter<T>,public final boolean equals(@Nullable Object o),Description copied from class: java.lang.Object
6300,common/reflect,com.google.common.reflect,Class TypeResolver,"public TypeResolver where(Type formal, Type actual)","Returns a new TypeResolver with type variables in formal mapping to types in actual. For example, if formal is a TypeVariable T, and actual is String.class, then new TypeResolver().where(formal, actual) will resolve ParameterizedType List<T> to List<String>, and resolve Map<T, Something> to Map<String, Something> etc. Similarly, formal and actual can be Map<K, V> and Map<String, Integer> respectively, or they can be E[] and String[] respectively, or even any arbitrary combination thereof."
6301,common/reflect,com.google.common.reflect,Interface TypeToInstanceMap<B>,<T extends B> T getInstance(Class<T> type),"Returns the value the specified class is mapped to, or null if no entry for this class is present. This will only return a value that was bound to this specific class, not a value that may have been bound to a subtype. getInstance(Foo.class) is equivalent to getInstance(TypeToken.of(Foo.class))."
6302,common/reflect,com.google.common.reflect,Interface TypeToInstanceMap<B>,<T extends B> T getInstance(TypeToken<T> type),"Returns the value the specified type is mapped to, or null if no entry for this type is present. This will only return a value that was bound to this specific type, not a value that may have been bound to a subtype."
6303,common/reflect,com.google.common.reflect,Interface TypeToInstanceMap<B>,"@CanIgnoreReturnValue<T extends B> T putInstance(Class<T> type, T value)","Maps the specified class to the specified value. Does not associate this value with any of the class's supertypes. putInstance(Foo.class, foo) is equivalent to putInstance(TypeToken.of(Foo.class), foo)."
6304,common/reflect,com.google.common.reflect,Class TypeToken<T>,protected TypeToken(),Constructs a new type token of T. Clients create an empty anonymous subclass. Doing so embeds the type parameter in the anonymous class's type hierarchy so we can reconstitute it at runtime despite erasure. For example: TypeToken<List<String>> t = new TypeToken<List<String>>() {}; 
6305,common/reflect,com.google.common.reflect,Class TypeToken<T>,public static <T> TypeToken<T> of(Class<T> type),Returns an instance of type token that wraps type.
6306,common/reflect,com.google.common.reflect,Class TypeToken<T>,public static TypeToken<?> of(Type type),Returns an instance of type token that wraps type.
6307,common/reflect,com.google.common.reflect,Class TypeToken<T>,public final Class<? super T> getRawType(),"Returns the raw type of T. Formally speaking, if T is returned by Method.getGenericReturnType(), the raw type is what's returned by Method.getReturnType() of the same method object. Specifically: If T is a Class itself, T itself is returned. If T is a ParameterizedType, the raw type of the parameterized type is returned. If T is a GenericArrayType, the returned type is the corresponding array class. For example: List<Integer>[] => List[]. If T is a type variable or a wildcard type, the raw type of the first upper bound is returned. For example: <X extends Foo> => Foo. "
6308,common/reflect,com.google.common.reflect,Class TypeToken<T>,public final Type getType(),Returns the represented type.
6309,common/reflect,com.google.common.reflect,Class TypeToken<T>,"public final <X> TypeToken<T> where(TypeParameter<X> typeParam, TypeToken<X> typeArg)","Returns a new TypeToken where type variables represented by typeParam are substituted by typeArg. For example, it can be used to construct Map<K, V> for any K and V type: static <K, V> TypeToken<Map<K, V>> mapOf( TypeToken<K> keyType, TypeToken<V> valueType) { return new TypeToken<Map<K, V>>() {} .where(new TypeParameter<K>() {}, keyType) .where(new TypeParameter<V>() {}, valueType); } "
6310,common/reflect,com.google.common.reflect,Class TypeToken<T>,"public final <X> TypeToken<T> where(TypeParameter<X> typeParam, Class<X> typeArg)","Returns a new TypeToken where type variables represented by typeParam are substituted by typeArg. For example, it can be used to construct Map<K, V> for any K and V type: static <K, V> TypeToken<Map<K, V>> mapOf( Class<K> keyType, Class<V> valueType) { return new TypeToken<Map<K, V>>() {} .where(new TypeParameter<K>() {}, keyType) .where(new TypeParameter<V>() {}, valueType); } "
6311,common/reflect,com.google.common.reflect,Class TypeToken<T>,public final TypeToken<?> resolveType(Type type),"Resolves the given type against the type context represented by this type. For example: new TypeToken<List<String>>() {}.resolveType( List.class.getMethod(get, int.class).getGenericReturnType()) => String.class "
6312,common/reflect,com.google.common.reflect,Class TypeToken<T>,public final TypeToken.TypeSet getTypes(),"Returns the set of interfaces and classes that this type is or is a subtype of. The returned types are parameterized with proper type arguments. Subtypes are always listed before supertypes. But the reverse is not true. A type isn't necessarily a subtype of all the types following. Order between types without subtype relationship is arbitrary and not guaranteed. If this type is a type variable or wildcard, upper bounds that are themselves type variables aren't included (their super interfaces and superclasses are)."
6313,common/reflect,com.google.common.reflect,Class TypeToken<T>,public final TypeToken<? super T> getSupertype(Class<? super T> superclass),"Returns the generic form of superclass. For example, if this is ArrayList<String>, Iterable<String> is returned given the input Iterable.class."
6314,common/reflect,com.google.common.reflect,Class TypeToken<T>,public final TypeToken<? extends T> getSubtype(Class<?> subclass),"Returns subtype of this with subclass as the raw class. For example, if this is Iterable<String> and subclass is List, List<String> is returned."
6315,common/reflect,com.google.common.reflect,Class TypeToken<T>,public final boolean isSupertypeOf(TypeToken<?> type),Returns true if this type is a supertype of the given type. Supertype is defined according to the rules for type arguments introduced with Java generics.
6316,common/reflect,com.google.common.reflect,Class TypeToken<T>,public final boolean isSupertypeOf(Type type),Returns true if this type is a supertype of the given type. Supertype is defined according to the rules for type arguments introduced with Java generics.
6317,common/reflect,com.google.common.reflect,Class TypeToken<T>,public final boolean isSubtypeOf(TypeToken<?> type),Returns true if this type is a subtype of the given type. Subtype is defined according to the rules for type arguments introduced with Java generics.
6318,common/reflect,com.google.common.reflect,Class TypeToken<T>,public final boolean isSubtypeOf(Type supertype),Returns true if this type is a subtype of the given type. Subtype is defined according to the rules for type arguments introduced with Java generics.
6319,common/reflect,com.google.common.reflect,Class TypeToken<T>,public final boolean isArray(),"Returns true if this type is known to be an array type, such as int[], T[], <? extends Map<String, Integer>[]> etc."
6320,common/reflect,com.google.common.reflect,Class TypeToken<T>,public final boolean isPrimitive(),Returns true if this type is one of the nine primitive types (including void).
6321,common/reflect,com.google.common.reflect,Class TypeToken<T>,public final TypeToken<T> wrap(),Returns the corresponding wrapper type if this is a primitive type; otherwise returns this itself. Idempotent.
6322,common/reflect,com.google.common.reflect,Class TypeToken<T>,public final TypeToken<T> unwrap(),Returns the corresponding primitive type if this is a wrapper type; otherwise returns this itself. Idempotent.
6323,common/reflect,com.google.common.reflect,Class TypeToken<T>,public final @Nullable TypeToken<?> getComponentType(),"Returns the array component type if this type represents an array (int[], T[], <? extends Map<String, Integer>[]> etc.), or else null is returned."
6324,common/reflect,com.google.common.reflect,Class TypeToken<T>,"public final Invokable<T,Object> method(Method method)","Returns the Invokable for method, which must be a member of T."
6325,common/reflect,com.google.common.reflect,Class TypeToken<T>,"public final Invokable<T,T> constructor(Constructor<?> constructor)","Returns the Invokable for constructor, which must be a member of T."
6326,common/reflect,com.google.common.reflect,Class TypeToken<T>,public boolean equals(@Nullable Object o),Returns true if o is another TypeToken that represents the same Type.
6327,common/reflect,com.google.common.reflect,Class TypeToken<T>,public int hashCode(),Description copied from class: java.lang.Object
6328,common/reflect,com.google.common.reflect,Class TypeToken<T>,public String toString(),Description copied from class: java.lang.Object
6329,util/concurrent,com.google.common.util.concurrent,Class UncheckedExecutionException,protected UncheckedExecutionException(),Creates a new instance with null as its detail message.
6330,util/concurrent,com.google.common.util.concurrent,Class UncheckedExecutionException,protected UncheckedExecutionException(@Nullable String message),Creates a new instance with the given detail message.
6331,util/concurrent,com.google.common.util.concurrent,Class UncheckedExecutionException,"public UncheckedExecutionException(@Nullable String message, @Nullable Throwable cause)",Creates a new instance with the given detail message and cause.
6332,util/concurrent,com.google.common.util.concurrent,Class UncheckedTimeoutException,public UncheckedTimeoutException(),
6333,util/concurrent,com.google.common.util.concurrent,Class UncheckedTimeoutException,public UncheckedTimeoutException(@Nullable String message),
6334,util/concurrent,com.google.common.util.concurrent,Class UncheckedTimeoutException,public UncheckedTimeoutException(@Nullable Throwable cause),
6335,common/escape,com.google.common.escape,Class UnicodeEscaper,protected abstract char[] escape(int cp),"Returns the escaped form of the given Unicode code point, or null if this code point does not need to be escaped. When called as part of an escaping operation, the given code point is guaranteed to be in the range 0 <= cp <= Character#MAX_CODE_POINT. If an empty array is returned, this effectively strips the input character from the resulting text. If the character does not need to be escaped, this method should return null, rather than an array containing the character representation of the code point. This enables the escaping algorithm to perform more efficiently. If the implementation of this method cannot correctly handle a particular code point then it should either throw an appropriate runtime exception or return a suitable replacement character. It must never silently discard invalid input as this may constitute a security risk."
6336,common/escape,com.google.common.escape,Class UnicodeEscaper,public String escape(String string),"Returns the escaped form of a given literal string. If you are escaping input in arbitrary successive chunks, then it is not generally safe to use this method. If an input string ends with an unmatched high surrogate character, then this method will throw IllegalArgumentException. You should ensure your input is valid UTF-16 before calling this method. Note: When implementing an escaper it is a good idea to override this method for efficiency by inlining the implementation of nextEscapeIndex(CharSequence, int, int) directly. Doing this for PercentEscaper more than doubled the performance for unescaped strings (as measured by CharEscapersBenchmark)."
6337,common/escape,com.google.common.escape,Class UnicodeEscaper,"protected int nextEscapeIndex(CharSequence csq, int start, int end)","Scans a sub-sequence of characters from a given CharSequence, returning the index of the next character that requires escaping. Note: When implementing an escaper, it is a good idea to override this method for efficiency. The base class implementation determines successive Unicode code points and invokes escape(int) for each of them. If the semantics of your escaper are such that code points in the supplementary range are either all escaped or all unescaped, this method can be implemented more efficiently using CharSequence.charAt(int). Note however that if your escaper does not escape characters in the supplementary range, you should either continue to validate the correctness of any surrogate characters encountered or provide a clear warning to users that your escaper does not validate its input. See PercentEscaper for an example."
6338,common/escape,com.google.common.escape,Class UnicodeEscaper,"protected final String escapeSlow(String s, int index)","Returns the escaped form of a given literal string, starting at the given index. This method is called by the escape(String) method when it discovers that escaping is required. It is protected to allow subclasses to override the fastpath escaping function to inline their escaping test. See CharEscaperBuilder for an example usage. This method is not reentrant and may only be invoked by the top level escape(String) method."
6339,util/concurrent,com.google.common.util.concurrent,Class Uninterruptibles,@GwtIncompatiblepublic static void awaitUninterruptibly(CountDownLatch latch),Invokes latch.await() uninterruptibly.
6340,util/concurrent,com.google.common.util.concurrent,Class Uninterruptibles,"@CanIgnoreReturnValue @GwtIncompatible @Betapublic static boolean awaitUninterruptibly(CountDownLatch latch, Duration timeout)","Invokes latch.await(timeout, unit) uninterruptibly."
6341,util/concurrent,com.google.common.util.concurrent,Class Uninterruptibles,"@CanIgnoreReturnValue @GwtIncompatiblepublic static boolean awaitUninterruptibly(CountDownLatch latch, long timeout, TimeUnit unit)","Invokes latch.await(timeout, unit) uninterruptibly."
6342,util/concurrent,com.google.common.util.concurrent,Class Uninterruptibles,"@GwtIncompatible @Betapublic static boolean awaitUninterruptibly(Condition condition, Duration timeout)","Invokes condition.await(timeout, unit) uninterruptibly."
6343,util/concurrent,com.google.common.util.concurrent,Class Uninterruptibles,"@GwtIncompatiblepublic static boolean awaitUninterruptibly(Condition condition, long timeout, TimeUnit unit)","Invokes condition.await(timeout, unit) uninterruptibly."
6344,util/concurrent,com.google.common.util.concurrent,Class Uninterruptibles,@GwtIncompatiblepublic static void joinUninterruptibly(Thread toJoin),Invokes toJoin.join() uninterruptibly.
6345,util/concurrent,com.google.common.util.concurrent,Class Uninterruptibles,"@GwtIncompatible @Betapublic static void joinUninterruptibly(Thread toJoin, Duration timeout)","Invokes unit.timedJoin(toJoin, timeout) uninterruptibly."
6346,util/concurrent,com.google.common.util.concurrent,Class Uninterruptibles,"@GwtIncompatiblepublic static void joinUninterruptibly(Thread toJoin, long timeout, TimeUnit unit)","Invokes unit.timedJoin(toJoin, timeout) uninterruptibly."
6347,util/concurrent,com.google.common.util.concurrent,Class Uninterruptibles,@CanIgnoreReturnValuepublic static <V> V getUninterruptibly(Future<V> future) throws ExecutionException,"Invokes future.get() uninterruptibly. Similar methods: To retrieve a result from a Future that is already done, use Futures.getDone. To treat InterruptedException uniformly with other exceptions, use Futures.getChecked. To get uninterruptibility and remove checked exceptions, use Futures.getUnchecked(java.util.concurrent.Future<V>). "
6348,util/concurrent,com.google.common.util.concurrent,Class Uninterruptibles,"@CanIgnoreReturnValue @GwtIncompatible @Betapublic static <V> V getUninterruptibly(Future<V> future, Duration timeout) throws ExecutionException, TimeoutException","Invokes future.get(timeout, unit) uninterruptibly. Similar methods: To retrieve a result from a Future that is already done, use Futures.getDone. To treat InterruptedException uniformly with other exceptions, use Futures.getChecked. To get uninterruptibility and remove checked exceptions, use Futures.getUnchecked(java.util.concurrent.Future<V>). "
6349,util/concurrent,com.google.common.util.concurrent,Class Uninterruptibles,"@CanIgnoreReturnValue @GwtIncompatiblepublic static <V> V getUninterruptibly(Future<V> future, long timeout, TimeUnit unit) throws ExecutionException, TimeoutException","Invokes future.get(timeout, unit) uninterruptibly. Similar methods: To retrieve a result from a Future that is already done, use Futures.getDone. To treat InterruptedException uniformly with other exceptions, use Futures.getChecked. To get uninterruptibility and remove checked exceptions, use Futures.getUnchecked(java.util.concurrent.Future<V>). "
6350,util/concurrent,com.google.common.util.concurrent,Class Uninterruptibles,@GwtIncompatiblepublic static <E> E takeUninterruptibly(BlockingQueue<E> queue),Invokes queue.take() uninterruptibly.
6351,util/concurrent,com.google.common.util.concurrent,Class Uninterruptibles,"@GwtIncompatiblepublic static <E> void putUninterruptibly(BlockingQueue<E> queue, E element)",Invokes queue.put(element) uninterruptibly.
6352,util/concurrent,com.google.common.util.concurrent,Class Uninterruptibles,@GwtIncompatible @Betapublic static void sleepUninterruptibly(Duration sleepFor),Invokes unit.sleep(sleepFor) uninterruptibly.
6353,util/concurrent,com.google.common.util.concurrent,Class Uninterruptibles,"@GwtIncompatiblepublic static void sleepUninterruptibly(long sleepFor, TimeUnit unit)",Invokes unit.sleep(sleepFor) uninterruptibly.
6354,util/concurrent,com.google.common.util.concurrent,Class Uninterruptibles,"@GwtIncompatible @Betapublic static boolean tryAcquireUninterruptibly(Semaphore semaphore, Duration timeout)","Invokes semaphore.tryAcquire(1, timeout, unit) uninterruptibly."
6355,util/concurrent,com.google.common.util.concurrent,Class Uninterruptibles,"@GwtIncompatiblepublic static boolean tryAcquireUninterruptibly(Semaphore semaphore, long timeout, TimeUnit unit)","Invokes semaphore.tryAcquire(1, timeout, unit) uninterruptibly."
6356,util/concurrent,com.google.common.util.concurrent,Class Uninterruptibles,"@GwtIncompatible @Betapublic static boolean tryAcquireUninterruptibly(Semaphore semaphore, int permits, Duration timeout)","Invokes semaphore.tryAcquire(permits, timeout, unit) uninterruptibly."
6357,util/concurrent,com.google.common.util.concurrent,Class Uninterruptibles,"@GwtIncompatiblepublic static boolean tryAcquireUninterruptibly(Semaphore semaphore, int permits, long timeout, TimeUnit unit)","Invokes semaphore.tryAcquire(permits, timeout, unit) uninterruptibly."
6358,util/concurrent,com.google.common.util.concurrent,Class Uninterruptibles,"@GwtIncompatible @Betapublic static boolean tryLockUninterruptibly(Lock lock, Duration timeout)","Invokes lock.tryLock(timeout, unit) uninterruptibly."
6359,util/concurrent,com.google.common.util.concurrent,Class Uninterruptibles,"@GwtIncompatiblepublic static boolean tryLockUninterruptibly(Lock lock, long timeout, TimeUnit unit)","Invokes lock.tryLock(timeout, unit) uninterruptibly."
6360,util/concurrent,com.google.common.util.concurrent,Class Uninterruptibles,@Beta @GwtIncompatiblepublic static void awaitTerminationUninterruptibly(ExecutorService executor),"Invokes executor.awaitTermination(long, TimeUnit) uninterruptibly with no timeout."
6361,util/concurrent,com.google.common.util.concurrent,Class Uninterruptibles,"@Beta @GwtIncompatiblepublic static boolean awaitTerminationUninterruptibly(ExecutorService executor, Duration timeout)","Invokes executor.awaitTermination(long, TimeUnit) uninterruptibly."
6362,common/collect,com.google.common.collect,Class UnmodifiableListIterator<E>,@Deprecatedpublic final void add(E e),Deprecated. Unsupported operation.
6363,common/primitives,com.google.common.primitives,Class UnsignedBytes,public static final byte MAX_POWER_OF_TWO,The largest power of two that can be represented as an unsigned byte.
6364,common/primitives,com.google.common.primitives,Class UnsignedBytes,public static int toInt(byte value),"Returns the value of the given byte as an integer, when treated as unsigned. That is, returns value + 256 if value is negative; value itself otherwise. Java 8 users: use Byte.toUnsignedInt(byte) instead."
6365,common/primitives,com.google.common.primitives,Class UnsignedBytes,@CanIgnoreReturnValuepublic static byte checkedCast(long value),"Returns the byte value that, when treated as unsigned, is equal to value, if possible."
6366,common/primitives,com.google.common.primitives,Class UnsignedBytes,public static byte saturatedCast(long value),"Returns the byte value that, when treated as unsigned, is nearest in value to value."
6367,common/primitives,com.google.common.primitives,Class UnsignedBytes,"public static int compare(byte a, byte b)","Compares the two specified byte values, treating them as unsigned values between 0 and 255 inclusive. For example, (byte) -127 is considered greater than (byte) 127 because it is seen as having the value of positive 129."
6368,common/primitives,com.google.common.primitives,Class UnsignedBytes,public static byte min(byte... array),"Returns the least value present in array, treating values as unsigned."
6369,common/primitives,com.google.common.primitives,Class UnsignedBytes,public static byte max(byte... array),"Returns the greatest value present in array, treating values as unsigned."
6370,common/primitives,com.google.common.primitives,Class UnsignedBytes,@Betapublic static String toString(byte x),"Returns a string representation of x, where x is treated as unsigned."
6371,common/primitives,com.google.common.primitives,Class UnsignedBytes,"@Betapublic static String toString(byte x, int radix)","Returns a string representation of x for the given radix, where x is treated as unsigned."
6372,common/primitives,com.google.common.primitives,Class UnsignedBytes,@Beta @CanIgnoreReturnValuepublic static byte parseUnsignedByte(String string),Returns the unsigned byte value represented by the given decimal string.
6373,common/primitives,com.google.common.primitives,Class UnsignedBytes,"@Beta @CanIgnoreReturnValuepublic static byte parseUnsignedByte(String string, int radix)",Returns the unsigned byte value represented by a string with the given radix.
6374,common/primitives,com.google.common.primitives,Class UnsignedBytes,"public static String join(String separator, byte... array)","Returns a string containing the supplied byte values separated by separator. For example, join(:, (byte) 1, (byte) 2, (byte) 255) returns the string 1:2:255."
6375,common/primitives,com.google.common.primitives,Class UnsignedBytes,public static Comparator<byte[]> lexicographicalComparator(),"Returns a comparator that compares two byte arrays lexicographically. That is, it compares, using compare(byte, byte)), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example, [] < [0x01] < [0x01, 0x7F] < [0x01, 0x80] < [0x02]. Values are treated as unsigned. The returned comparator is inconsistent with Object.equals(Object) (since arrays support only identity equality), but it is consistent with Arrays.equals(byte[], byte[])."
6376,common/primitives,com.google.common.primitives,Class UnsignedBytes,public static void sort(byte[] array),"Sorts the array, treating its elements as unsigned bytes."
6377,common/primitives,com.google.common.primitives,Class UnsignedBytes,"public static void sort(byte[] array, int fromIndex, int toIndex)","Sorts the array between fromIndex inclusive and toIndex exclusive, treating its elements as unsigned bytes."
6378,common/primitives,com.google.common.primitives,Class UnsignedBytes,public static void sortDescending(byte[] array),"Sorts the elements of array in descending order, interpreting them as unsigned 8-bit integers."
6379,common/primitives,com.google.common.primitives,Class UnsignedInteger,public static final UnsignedInteger ZERO,
6380,common/primitives,com.google.common.primitives,Class UnsignedInteger,public static final UnsignedInteger ONE,
6381,common/primitives,com.google.common.primitives,Class UnsignedInteger,public static UnsignedInteger fromIntBits(int bits),"Returns an UnsignedInteger corresponding to a given bit representation. The argument is interpreted as an unsigned 32-bit value. Specifically, the sign bit of bits is interpreted as a normal bit, and all other bits are treated as usual. If the argument is nonnegative, the returned result will be equal to bits, otherwise, the result will be equal to 2^32 + bits. To represent unsigned decimal constants, consider valueOf(long) instead."
6382,common/primitives,com.google.common.primitives,Class UnsignedInteger,public static UnsignedInteger valueOf(long value),"Returns an UnsignedInteger that is equal to value, if possible. The inverse operation of longValue()."
6383,common/primitives,com.google.common.primitives,Class UnsignedInteger,public static UnsignedInteger valueOf(BigInteger value),Returns a UnsignedInteger representing the same value as the specified BigInteger. This is the inverse operation of bigIntegerValue().
6384,common/primitives,com.google.common.primitives,Class UnsignedInteger,public static UnsignedInteger valueOf(String string),"Returns an UnsignedInteger holding the value of the specified String, parsed as an unsigned int value."
6385,common/primitives,com.google.common.primitives,Class UnsignedInteger,"public static UnsignedInteger valueOf(String string, int radix)","Returns an UnsignedInteger holding the value of the specified String, parsed as an unsigned int value in the specified radix."
6386,common/primitives,com.google.common.primitives,Class UnsignedInteger,public UnsignedInteger plus(UnsignedInteger val),"Returns the result of adding this and val. If the result would have more than 32 bits, returns the low 32 bits of the result."
6387,common/primitives,com.google.common.primitives,Class UnsignedInteger,public UnsignedInteger minus(UnsignedInteger val),"Returns the result of subtracting this and val. If the result would be negative, returns the low 32 bits of the result."
6388,common/primitives,com.google.common.primitives,Class UnsignedInteger,@GwtIncompatiblepublic UnsignedInteger times(UnsignedInteger val),"Returns the result of multiplying this and val. If the result would have more than 32 bits, returns the low 32 bits of the result."
6389,common/primitives,com.google.common.primitives,Class UnsignedInteger,public UnsignedInteger dividedBy(UnsignedInteger val),Returns the result of dividing this by val.
6390,common/primitives,com.google.common.primitives,Class UnsignedInteger,public UnsignedInteger mod(UnsignedInteger val),Returns this mod val.
6391,common/primitives,com.google.common.primitives,Class UnsignedInteger,public int intValue(),"Returns the value of this UnsignedInteger as an int. This is an inverse operation to fromIntBits(int). Note that if this UnsignedInteger holds a value >= 2^31, the returned value will be equal to this - 2^32."
6392,common/primitives,com.google.common.primitives,Class UnsignedInteger,public long longValue(),Returns the value of this UnsignedInteger as a long.
6393,common/primitives,com.google.common.primitives,Class UnsignedInteger,public float floatValue(),"Returns the value of this UnsignedInteger as a float, analogous to a widening primitive conversion from int to float, and correctly rounded."
6394,common/primitives,com.google.common.primitives,Class UnsignedInteger,public double doubleValue(),"Returns the value of this UnsignedInteger as a float, analogous to a widening primitive conversion from int to double, and correctly rounded."
6395,common/primitives,com.google.common.primitives,Class UnsignedInteger,public BigInteger bigIntegerValue(),Returns the value of this UnsignedInteger as a BigInteger.
6396,common/primitives,com.google.common.primitives,Class UnsignedInteger,public int compareTo(UnsignedInteger other),"Compares this unsigned integer to another unsigned integer. Returns 0 if they are equal, a negative number if this < other, and a positive number if this > other."
6397,common/primitives,com.google.common.primitives,Class UnsignedInteger,public int hashCode(),Description copied from class: java.lang.Object
6398,common/primitives,com.google.common.primitives,Class UnsignedInteger,public boolean equals(@Nullable Object obj),Description copied from class: java.lang.Object
6399,common/primitives,com.google.common.primitives,Class UnsignedInteger,public String toString(),"Returns a string representation of the UnsignedInteger value, in base 10."
6400,common/primitives,com.google.common.primitives,Class UnsignedInts,"public static int compare(int a, int b)","Compares the two specified int values, treating them as unsigned values between 0 and 2^32 - 1 inclusive. Java 8 users: use Integer.compareUnsigned(int, int) instead."
6401,common/primitives,com.google.common.primitives,Class UnsignedInts,public static long toLong(int value),"Returns the value of the given int as a long, when treated as unsigned. Java 8 users: use Integer.toUnsignedLong(int) instead."
6402,common/primitives,com.google.common.primitives,Class UnsignedInts,public static int checkedCast(long value),"Returns the int value that, when treated as unsigned, is equal to value, if possible."
6403,common/primitives,com.google.common.primitives,Class UnsignedInts,public static int saturatedCast(long value),"Returns the int value that, when treated as unsigned, is nearest in value to value."
6404,common/primitives,com.google.common.primitives,Class UnsignedInts,public static int min(int... array),"Returns the least value present in array, treating values as unsigned."
6405,common/primitives,com.google.common.primitives,Class UnsignedInts,public static int max(int... array),"Returns the greatest value present in array, treating values as unsigned."
6406,common/primitives,com.google.common.primitives,Class UnsignedInts,"public static String join(String separator, int... array)","Returns a string containing the supplied unsigned int values separated by separator. For example, join(-, 1, 2, 3) returns the string 1-2-3."
6407,common/primitives,com.google.common.primitives,Class UnsignedInts,public static Comparator<int[]> lexicographicalComparator(),"Returns a comparator that compares two arrays of unsigned int values lexicographically. That is, it compares, using compare(int, int)), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example, [] < [1] < [1, 2] < [2] < [1 << 31]. The returned comparator is inconsistent with Object.equals(Object) (since arrays support only identity equality), but it is consistent with Arrays.equals(int[], int[])."
6408,common/primitives,com.google.common.primitives,Class UnsignedInts,public static void sort(int[] array),"Sorts the array, treating its elements as unsigned 32-bit integers."
6409,common/primitives,com.google.common.primitives,Class UnsignedInts,"public static void sort(int[] array, int fromIndex, int toIndex)","Sorts the array between fromIndex inclusive and toIndex exclusive, treating its elements as unsigned 32-bit integers."
6410,common/primitives,com.google.common.primitives,Class UnsignedInts,public static void sortDescending(int[] array),"Sorts the elements of array in descending order, interpreting them as unsigned 32-bit integers."
6411,common/primitives,com.google.common.primitives,Class UnsignedInts,"public static void sortDescending(int[] array, int fromIndex, int toIndex)","Sorts the elements of array between fromIndex inclusive and toIndex exclusive in descending order, interpreting them as unsigned 32-bit integers."
6412,common/primitives,com.google.common.primitives,Class UnsignedInts,"public static int divide(int dividend, int divisor)","Returns dividend / divisor, where the dividend and divisor are treated as unsigned 32-bit quantities. Java 8 users: use Integer.divideUnsigned(int, int) instead."
6413,common/primitives,com.google.common.primitives,Class UnsignedInts,"public static int remainder(int dividend, int divisor)","Returns dividend % divisor, where the dividend and divisor are treated as unsigned 32-bit quantities. Java 8 users: use Integer.remainderUnsigned(int, int) instead."
6414,common/primitives,com.google.common.primitives,Class UnsignedInts,@CanIgnoreReturnValuepublic static int decode(String stringValue),"Returns the unsigned int value represented by the given string. Accepts a decimal, hexadecimal, or octal number given by specifying the following prefix: 0xHexDigits0XHexDigits#HexDigits0OctalDigits"
6415,common/primitives,com.google.common.primitives,Class UnsignedInts,@CanIgnoreReturnValuepublic static int parseUnsignedInt(String s),Returns the unsigned int value represented by the given decimal string. Java 8 users: use Integer.parseUnsignedInt(String) instead.
6416,common/primitives,com.google.common.primitives,Class UnsignedInts,"@CanIgnoreReturnValuepublic static int parseUnsignedInt(String string, int radix)","Returns the unsigned int value represented by a string with the given radix. Java 8 users: use Integer.parseUnsignedInt(String, int) instead."
6417,common/primitives,com.google.common.primitives,Class UnsignedInts,public static String toString(int x),"Returns a string representation of x, where x is treated as unsigned. Java 8 users: use Integer.toUnsignedString(int) instead."
6418,common/primitives,com.google.common.primitives,Class UnsignedLong,public static final UnsignedLong ZERO,
6419,common/primitives,com.google.common.primitives,Class UnsignedLong,public static final UnsignedLong ONE,
6420,common/primitives,com.google.common.primitives,Class UnsignedLong,public static UnsignedLong fromLongBits(long bits),"Returns an UnsignedLong corresponding to a given bit representation. The argument is interpreted as an unsigned 64-bit value. Specifically, the sign bit of bits is interpreted as a normal bit, and all other bits are treated as usual. If the argument is nonnegative, the returned result will be equal to bits, otherwise, the result will be equal to 2^64 + bits. To represent decimal constants less than 2^63, consider valueOf(long) instead."
6421,common/primitives,com.google.common.primitives,Class UnsignedLong,@CanIgnoreReturnValuepublic static UnsignedLong valueOf(long value),Returns an UnsignedLong representing the same value as the specified long.
6422,common/primitives,com.google.common.primitives,Class UnsignedLong,@CanIgnoreReturnValuepublic static UnsignedLong valueOf(BigInteger value),Returns a UnsignedLong representing the same value as the specified BigInteger. This is the inverse operation of bigIntegerValue().
6423,common/primitives,com.google.common.primitives,Class UnsignedLong,@CanIgnoreReturnValuepublic static UnsignedLong valueOf(String string),"Returns an UnsignedLong holding the value of the specified String, parsed as an unsigned long value."
6424,common/primitives,com.google.common.primitives,Class UnsignedLong,"@CanIgnoreReturnValuepublic static UnsignedLong valueOf(String string, int radix)","Returns an UnsignedLong holding the value of the specified String, parsed as an unsigned long value in the specified radix."
6425,common/primitives,com.google.common.primitives,Class UnsignedLong,public UnsignedLong plus(UnsignedLong val),"Returns the result of adding this and val. If the result would have more than 64 bits, returns the low 64 bits of the result."
6426,common/primitives,com.google.common.primitives,Class UnsignedLong,public UnsignedLong minus(UnsignedLong val),"Returns the result of subtracting this and val. If the result would have more than 64 bits, returns the low 64 bits of the result."
6427,common/primitives,com.google.common.primitives,Class UnsignedLong,public UnsignedLong times(UnsignedLong val),"Returns the result of multiplying this and val. If the result would have more than 64 bits, returns the low 64 bits of the result."
6428,common/primitives,com.google.common.primitives,Class UnsignedLong,public UnsignedLong dividedBy(UnsignedLong val),Returns the result of dividing this by val.
6429,common/primitives,com.google.common.primitives,Class UnsignedLong,public UnsignedLong mod(UnsignedLong val),Returns this modulo val.
6430,common/primitives,com.google.common.primitives,Class UnsignedLong,public int intValue(),Returns the value of this UnsignedLong as an int.
6431,common/primitives,com.google.common.primitives,Class UnsignedLong,public long longValue(),"Returns the value of this UnsignedLong as a long. This is an inverse operation to fromLongBits(long). Note that if this UnsignedLong holds a value >= 2^63, the returned value will be equal to this - 2^64."
6432,common/primitives,com.google.common.primitives,Class UnsignedLong,public float floatValue(),"Returns the value of this UnsignedLong as a float, analogous to a widening primitive conversion from long to float, and correctly rounded."
6433,common/primitives,com.google.common.primitives,Class UnsignedLong,public double doubleValue(),"Returns the value of this UnsignedLong as a double, analogous to a widening primitive conversion from long to double, and correctly rounded."
6434,common/primitives,com.google.common.primitives,Class UnsignedLong,public BigInteger bigIntegerValue(),Returns the value of this UnsignedLong as a BigInteger.
6435,common/primitives,com.google.common.primitives,Class UnsignedLong,public int compareTo(UnsignedLong o),Description copied from interface: java.lang.Comparable
6436,common/primitives,com.google.common.primitives,Class UnsignedLong,public int hashCode(),Description copied from class: java.lang.Object
6437,common/primitives,com.google.common.primitives,Class UnsignedLong,public boolean equals(@Nullable Object obj),Description copied from class: java.lang.Object
6438,common/primitives,com.google.common.primitives,Class UnsignedLong,public String toString(),"Returns a string representation of the UnsignedLong value, in base 10."
6439,common/primitives,com.google.common.primitives,Class UnsignedLongs,"public static int compare(long a, long b)","Compares the two specified long values, treating them as unsigned values between 0 and 2^64 - 1 inclusive. Java 8 users: use Long.compareUnsigned(long, long) instead."
6440,common/primitives,com.google.common.primitives,Class UnsignedLongs,public static long min(long... array),"Returns the least value present in array, treating values as unsigned."
6441,common/primitives,com.google.common.primitives,Class UnsignedLongs,public static long max(long... array),"Returns the greatest value present in array, treating values as unsigned."
6442,common/primitives,com.google.common.primitives,Class UnsignedLongs,"public static String join(String separator, long... array)","Returns a string containing the supplied unsigned long values separated by separator. For example, join(-, 1, 2, 3) returns the string 1-2-3."
6443,common/primitives,com.google.common.primitives,Class UnsignedLongs,public static Comparator<long[]> lexicographicalComparator(),"Returns a comparator that compares two arrays of unsigned long values lexicographically. That is, it compares, using compare(long, long)), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example, [] < [1L] < [1L, 2L] < [2L] < [1L << 63]. The returned comparator is inconsistent with Object.equals(Object) (since arrays support only identity equality), but it is consistent with Arrays.equals(long[], long[])."
6444,common/primitives,com.google.common.primitives,Class UnsignedLongs,public static void sort(long[] array),"Sorts the array, treating its elements as unsigned 64-bit integers."
6445,common/primitives,com.google.common.primitives,Class UnsignedLongs,"public static void sort(long[] array, int fromIndex, int toIndex)","Sorts the array between fromIndex inclusive and toIndex exclusive, treating its elements as unsigned 64-bit integers."
6446,common/primitives,com.google.common.primitives,Class UnsignedLongs,public static void sortDescending(long[] array),"Sorts the elements of array in descending order, interpreting them as unsigned 64-bit integers."
6447,common/primitives,com.google.common.primitives,Class UnsignedLongs,"public static void sortDescending(long[] array, int fromIndex, int toIndex)","Sorts the elements of array between fromIndex inclusive and toIndex exclusive in descending order, interpreting them as unsigned 64-bit integers."
6448,common/primitives,com.google.common.primitives,Class UnsignedLongs,"public static long divide(long dividend, long divisor)","Returns dividend / divisor, where the dividend and divisor are treated as unsigned 64-bit quantities. Java 8 users: use Long.divideUnsigned(long, long) instead."
6449,common/primitives,com.google.common.primitives,Class UnsignedLongs,"public static long remainder(long dividend, long divisor)","Returns dividend % divisor, where the dividend and divisor are treated as unsigned 64-bit quantities. Java 8 users: use Long.remainderUnsigned(long, long) instead."
6450,common/primitives,com.google.common.primitives,Class UnsignedLongs,@CanIgnoreReturnValuepublic static long parseUnsignedLong(String string),Returns the unsigned long value represented by the given decimal string. Java 8 users: use Long.parseUnsignedLong(String) instead.
6451,common/primitives,com.google.common.primitives,Class UnsignedLongs,"@CanIgnoreReturnValuepublic static long parseUnsignedLong(String string, int radix)","Returns the unsigned long value represented by a string with the given radix. Java 8 users: use Long.parseUnsignedLong(String, int) instead."
6452,common/primitives,com.google.common.primitives,Class UnsignedLongs,@CanIgnoreReturnValuepublic static long decode(String stringValue),"Returns the unsigned long value represented by the given string. Accepts a decimal, hexadecimal, or octal number given by specifying the following prefix: 0xHexDigits0XHexDigits#HexDigits0OctalDigits"
6453,common/primitives,com.google.common.primitives,Class UnsignedLongs,public static String toString(long x),"Returns a string representation of x, where x is treated as unsigned. Java 8 users: use Long.toUnsignedString(long) instead."
6454,common/net,com.google.common.net,Class UrlEscapers,public static Escaper urlFormParameterEscaper(),"Returns an Escaper instance that escapes strings so they can be safely included in URL form parameter names and values. Escaping is performed with the UTF-8 character encoding. The caller is responsible for replacing any unpaired carriage return or line feed characters with a CR+LF pair on any non-file inputs before escaping them with this escaper. When escaping a String, the following rules apply: The alphanumeric characters a through z, A through Z and 0 through 9 remain the same. The special characters ., -, *, and _ remain the same. The space character   is converted into a plus sign +. All other characters are converted into one or more bytes using UTF-8 encoding and each byte is then represented by the 3-character string %XY, where XY is the two-digit, uppercase, hexadecimal representation of the byte value. This escaper is suitable for escaping parameter names and values even when using the non-standard semicolon, rather than the ampersand, as a parameter delimiter. Nevertheless, we recommend using the ampersand unless you must interoperate with systems that require semicolons. Note: Unlike other escapers, URL escapers produce uppercase hexadecimal sequences."
6455,common/net,com.google.common.net,Class UrlEscapers,public static Escaper urlPathSegmentEscaper(),"Returns an Escaper instance that escapes strings so they can be safely included in URL path segments. The returned escaper escapes all non-ASCII characters, even though many of these are accepted in modern URLs. (If the escaper were to leave these characters unescaped, they would be escaped by the consumer at parse time, anyway.) Additionally, the escaper escapes the slash character (/). While slashes are acceptable in URL paths, they are considered by the specification to be separators between path segments. This implies that, if you wish for your path to contain slashes, you must escape each segment separately and then join them. When escaping a String, the following rules apply: The alphanumeric characters a through z, A through Z and 0 through 9 remain the same. The unreserved characters ., -, ~, and _ remain the same. The general delimiters @ and : remain the same. The subdelimiters !, $, &, ', (, ), *, +, ,, ;, and = remain the same. The space character   is converted into %20. All other characters are converted into one or more bytes using UTF-8 encoding and each byte is then represented by the 3-character string %XY, where XY is the two-digit, uppercase, hexadecimal representation of the byte value. Note: Unlike other escapers, URL escapers produce uppercase hexadecimal sequences."
6456,common/base,com.google.common.base,Class Utf8,public static int encodedLength(CharSequence sequence),"Returns the number of bytes in the UTF-8-encoded form of sequence. For a string, this method is equivalent to string.getBytes(UTF_8).length, but is more efficient in both time and space."
6457,common/base,com.google.common.base,Class Utf8,public static boolean isWellFormed(byte[] bytes),"Returns true if bytes is a well-formed UTF-8 byte sequence according to Unicode 6.0. Note that this is a stronger criterion than simply whether the bytes can be decoded. For example, some versions of the JDK decoder will accept non-shortest form byte sequences, but encoding never reproduces these. Such byte sequences are not considered well-formed. This method returns true if and only if Arrays.equals(bytes, new String(bytes, UTF_8).getBytes(UTF_8)) does, but is more efficient in both time and space."
6458,common/graph,com.google.common.graph,"Interface ValueGraph<N,V>",Set<N> nodes(),"Returns all nodes in this graph, in the order specified by nodeOrder()."
6459,common/graph,com.google.common.graph,"Interface ValueGraph<N,V>",Set<EndpointPair<N>> edges(),Returns all edges in this graph.
6460,common/graph,com.google.common.graph,"Interface ValueGraph<N,V>",Graph<N> asGraph(),Returns a live view of this graph as a Graph. The resulting Graph will have an edge connecting node A to node B if this ValueGraph has an edge connecting A to B.
6461,common/graph,com.google.common.graph,"Interface ValueGraph<N,V>",boolean isDirected(),"Returns true if the edges in this graph are directed. Directed edges connect a source node to a target node, while undirected edges connect a pair of nodes to each other."
6462,common/graph,com.google.common.graph,"Interface ValueGraph<N,V>",boolean allowsSelfLoops(),Returns true if this graph allows self-loops (edges that connect a node to itself). Attempting to add a self-loop to a graph that does not allow them will throw an IllegalArgumentException.
6463,common/graph,com.google.common.graph,"Interface ValueGraph<N,V>",ElementOrder<N> nodeOrder(),Returns the order of iteration for the elements of nodes().
6464,common/graph,com.google.common.graph,"Interface ValueGraph<N,V>",ElementOrder<N> incidentEdgeOrder(),"Returns an ElementOrder that specifies the order of iteration for the elements of edges(), adjacentNodes(Object), predecessors(Object), successors(Object) and incidentEdges(Object)."
6465,common/graph,com.google.common.graph,"Interface ValueGraph<N,V>",Set<N> adjacentNodes(N node),Returns the nodes which have an incident edge in common with node in this graph. This is equal to the union of predecessors(Object) and successors(Object).
6466,common/graph,com.google.common.graph,"Interface ValueGraph<N,V>",Set<N> predecessors(N node),"Returns all nodes in this graph adjacent to node which can be reached by traversing node's incoming edges against the direction (if any) of the edge. In an undirected graph, this is equivalent to adjacentNodes(Object)."
6467,common/graph,com.google.common.graph,"Interface ValueGraph<N,V>",Set<N> successors(N node),"Returns all nodes in this graph adjacent to node which can be reached by traversing node's outgoing edges in the direction (if any) of the edge. In an undirected graph, this is equivalent to adjacentNodes(Object). This is not the same as all nodes reachable from node by following outgoing edges. For that functionality, see Graphs.reachableNodes(Graph, Object)."
6468,common/graph,com.google.common.graph,"Interface ValueGraph<N,V>",Set<EndpointPair<N>> incidentEdges(N node),Returns the edges in this graph whose endpoints include node. This is equal to the union of incoming and outgoing edges.
6469,common/graph,com.google.common.graph,"Interface ValueGraph<N,V>",int degree(N node),"Returns the count of node's incident edges, counting self-loops twice (equivalently, the number of times an edge touches node). For directed graphs, this is equal to inDegree(node) + outDegree(node). For undirected graphs, this is equal to incidentEdges(node).size() + (number of self-loops incident to node). If the count is greater than Integer.MAX_VALUE, returns Integer.MAX_VALUE."
6470,common/graph,com.google.common.graph,"Interface ValueGraph<N,V>",int inDegree(N node),"Returns the count of node's incoming edges (equal to predecessors(node).size()) in a directed graph. In an undirected graph, returns the degree(Object). If the count is greater than Integer.MAX_VALUE, returns Integer.MAX_VALUE."
6471,common/graph,com.google.common.graph,"Interface ValueGraph<N,V>",int outDegree(N node),"Returns the count of node's outgoing edges (equal to successors(node).size()) in a directed graph. In an undirected graph, returns the degree(Object). If the count is greater than Integer.MAX_VALUE, returns Integer.MAX_VALUE."
6472,common/graph,com.google.common.graph,"Interface ValueGraph<N,V>","boolean hasEdgeConnecting(N nodeU, N nodeV)","Returns true if there is an edge that directly connects nodeU to nodeV. This is equivalent to nodes().contains(nodeU) && successors(nodeU).contains(nodeV). In an undirected graph, this is equal to hasEdgeConnecting(nodeV, nodeU)."
6473,common/graph,com.google.common.graph,"Interface ValueGraph<N,V>",boolean hasEdgeConnecting(EndpointPair<N> endpoints),"Returns true if there is an edge that directly connects endpoints (in the order, if any, specified by endpoints). This is equivalent to edges().contains(endpoints). Unlike the other EndpointPair-accepting methods, this method does not throw if the endpoints are unordered and the graph is directed; it simply returns false. This is for consistency with the behavior of Collection.contains(Object) (which does not generally throw if the object cannot be present in the collection), and the desire to have this method's behavior be compatible with edges().contains(endpoints)."
6474,common/graph,com.google.common.graph,"Interface ValueGraph<N,V>","Optional<V> edgeValue(N nodeU, N nodeV)","Returns the value of the edge that connects nodeU to nodeV (in the order, if any, specified by endpoints), if one is present; otherwise, returns Optional.empty()."
6475,common/graph,com.google.common.graph,"Interface ValueGraph<N,V>",Optional<V> edgeValue(EndpointPair<N> endpoints),"Returns the value of the edge that connects endpoints (in the order, if any, specified by endpoints), if one is present; otherwise, returns Optional.empty(). If this graph is directed, the endpoints must be ordered."
6476,common/graph,com.google.common.graph,"Interface ValueGraph<N,V>","V edgeValueOrDefault(N nodeU, N nodeV, V defaultValue)","Returns the value of the edge that connects nodeU to nodeV, if one is present; otherwise, returns defaultValue. In an undirected graph, this is equal to edgeValueOrDefault(nodeV, nodeU, defaultValue)."
6477,common/graph,com.google.common.graph,"Interface ValueGraph<N,V>","V edgeValueOrDefault(EndpointPair<N> endpoints, V defaultValue)","Returns the value of the edge that connects endpoints (in the order, if any, specified by endpoints), if one is present; otherwise, returns defaultValue. If this graph is directed, the endpoints must be ordered."
6478,common/graph,com.google.common.graph,"Interface ValueGraph<N,V>",boolean equals(@Nullable Object object),"Returns true iff object is a ValueGraph that has the same elements and the same structural relationships as those in this graph. Thus, two value graphs A and B are equal if all of the following are true: A and B have equal directedness. A and B have equal node sets. A and B have equal edge sets. The value of a given edge is the same in both A and B. Graph properties besides directedness do not affect equality. For example, two graphs may be considered equal even if one allows self-loops and the other doesn't. Additionally, the order in which nodes or edges are added to the graph, and the order in which they are iterated over, are irrelevant. A reference implementation of this is provided by AbstractValueGraph.equals(Object)."
6479,common/graph,com.google.common.graph,"Class ValueGraphBuilder<N,V>","public static ValueGraphBuilder<Object,Object> directed()",Returns a ValueGraphBuilder for building directed graphs.
6480,common/graph,com.google.common.graph,"Class ValueGraphBuilder<N,V>","public static ValueGraphBuilder<Object,Object> undirected()",Returns a ValueGraphBuilder for building undirected graphs.
6481,common/graph,com.google.common.graph,"Class ValueGraphBuilder<N,V>","public static <N,V> ValueGraphBuilder<N,V> from(ValueGraph<N,V> graph)","Returns a ValueGraphBuilder initialized with all properties queryable from graph. The queryable properties are those that are exposed through the ValueGraph interface, such as ValueGraph.isDirected(). Other properties, such as expectedNodeCount(int), are not set in the new builder."
6482,common/graph,com.google.common.graph,"Class ValueGraphBuilder<N,V>","public <N1 extends N,V1 extends V> ImmutableValueGraph.Builder<N1,V1> immutable()","Returns an ImmutableValueGraph.Builder with the properties of this ValueGraphBuilder. The returned builder can be used for populating an ImmutableValueGraph. Note that the returned builder will always have incidentEdgeOrder(com.google.common.graph.ElementOrder<N1>) set to ElementOrder.stable(), regardless of the value that was set in this builder."
6483,common/graph,com.google.common.graph,"Class ValueGraphBuilder<N,V>","public ValueGraphBuilder<N,V> allowsSelfLoops(boolean allowsSelfLoops)",Specifies whether the graph will allow self-loops (edges that connect a node to itself). Attempting to add a self-loop to a graph that does not allow them will throw an UnsupportedOperationException. The default value is false.
6484,common/graph,com.google.common.graph,"Class ValueGraphBuilder<N,V>","public ValueGraphBuilder<N,V> expectedNodeCount(int expectedNodeCount)",Specifies the expected number of nodes in the graph.
6485,common/graph,com.google.common.graph,"Class ValueGraphBuilder<N,V>","public <N1 extends N> ValueGraphBuilder<N1,V> nodeOrder(ElementOrder<N1> nodeOrder)",Specifies the order of iteration for the elements of Graph.nodes(). The default value is insertion order.
6486,common/graph,com.google.common.graph,"Class ValueGraphBuilder<N,V>","public <N1 extends N> ValueGraphBuilder<N1,V> incidentEdgeOrder(ElementOrder<N1> incidentEdgeOrder)","Specifies the order of iteration for the elements of ValueGraph.edges(), ValueGraph.adjacentNodes(Object), ValueGraph.predecessors(Object), ValueGraph.successors(Object) and ValueGraph.incidentEdges(Object). The default value is unordered for mutable graphs. For immutable graphs, this value is ignored; they always have a stable order."
6487,common/base,com.google.common.base,Class Verify,public static void verify(boolean expression),"Ensures that expression is true, throwing a VerifyException with no message otherwise."
6488,common/base,com.google.common.base,Class Verify,"public static void verify(boolean expression, @Nullable String errorMessageTemplate, Object... errorMessageArgs)","Ensures that expression is true, throwing a VerifyException with a custom message otherwise."
6489,common/base,com.google.common.base,Class Verify,"public static void verify(boolean expression, @Nullable String errorMessageTemplate, char p1)","Ensures that expression is true, throwing a VerifyException with a custom message otherwise. See verify(boolean, String, Object...) for details."
6490,common/base,com.google.common.base,Class Verify,"public static void verify(boolean expression, @Nullable String errorMessageTemplate, int p1)","Ensures that expression is true, throwing a VerifyException with a custom message otherwise. See verify(boolean, String, Object...) for details."
6491,common/base,com.google.common.base,Class Verify,"public static void verify(boolean expression, @Nullable String errorMessageTemplate, long p1)","Ensures that expression is true, throwing a VerifyException with a custom message otherwise. See verify(boolean, String, Object...) for details."
6492,common/base,com.google.common.base,Class Verify,"public static void verify(boolean expression, @Nullable String errorMessageTemplate, @Nullable Object p1)","Ensures that expression is true, throwing a VerifyException with a custom message otherwise. See verify(boolean, String, Object...) for details."
6493,common/base,com.google.common.base,Class Verify,"public static void verify(boolean expression, @Nullable String errorMessageTemplate, char p1, char p2)","Ensures that expression is true, throwing a VerifyException with a custom message otherwise. See verify(boolean, String, Object...) for details."
6494,common/base,com.google.common.base,Class Verify,"public static void verify(boolean expression, @Nullable String errorMessageTemplate, int p1, char p2)","Ensures that expression is true, throwing a VerifyException with a custom message otherwise. See verify(boolean, String, Object...) for details."
6495,common/base,com.google.common.base,Class Verify,"public static void verify(boolean expression, @Nullable String errorMessageTemplate, long p1, char p2)","Ensures that expression is true, throwing a VerifyException with a custom message otherwise. See verify(boolean, String, Object...) for details."
6496,common/base,com.google.common.base,Class Verify,"public static void verify(boolean expression, @Nullable String errorMessageTemplate, @Nullable Object p1, char p2)","Ensures that expression is true, throwing a VerifyException with a custom message otherwise. See verify(boolean, String, Object...) for details."
6497,common/base,com.google.common.base,Class Verify,"public static void verify(boolean expression, @Nullable String errorMessageTemplate, char p1, int p2)","Ensures that expression is true, throwing a VerifyException with a custom message otherwise. See verify(boolean, String, Object...) for details."
6498,common/base,com.google.common.base,Class Verify,"public static void verify(boolean expression, @Nullable String errorMessageTemplate, int p1, int p2)","Ensures that expression is true, throwing a VerifyException with a custom message otherwise. See verify(boolean, String, Object...) for details."
6499,common/base,com.google.common.base,Class Verify,"public static void verify(boolean expression, @Nullable String errorMessageTemplate, long p1, int p2)","Ensures that expression is true, throwing a VerifyException with a custom message otherwise. See verify(boolean, String, Object...) for details."
6500,common/base,com.google.common.base,Class Verify,"public static void verify(boolean expression, @Nullable String errorMessageTemplate, @Nullable Object p1, int p2)","Ensures that expression is true, throwing a VerifyException with a custom message otherwise. See verify(boolean, String, Object...) for details."
6501,common/base,com.google.common.base,Class Verify,"public static void verify(boolean expression, @Nullable String errorMessageTemplate, char p1, long p2)","Ensures that expression is true, throwing a VerifyException with a custom message otherwise. See verify(boolean, String, Object...) for details."
6502,common/base,com.google.common.base,Class Verify,"public static void verify(boolean expression, @Nullable String errorMessageTemplate, int p1, long p2)","Ensures that expression is true, throwing a VerifyException with a custom message otherwise. See verify(boolean, String, Object...) for details."
6503,common/base,com.google.common.base,Class Verify,"public static void verify(boolean expression, @Nullable String errorMessageTemplate, long p1, long p2)","Ensures that expression is true, throwing a VerifyException with a custom message otherwise. See verify(boolean, String, Object...) for details."
6504,common/base,com.google.common.base,Class Verify,"public static void verify(boolean expression, @Nullable String errorMessageTemplate, @Nullable Object p1, long p2)","Ensures that expression is true, throwing a VerifyException with a custom message otherwise. See verify(boolean, String, Object...) for details."
6505,common/base,com.google.common.base,Class Verify,"public static void verify(boolean expression, @Nullable String errorMessageTemplate, char p1, @Nullable Object p2)","Ensures that expression is true, throwing a VerifyException with a custom message otherwise. See verify(boolean, String, Object...) for details."
6506,common/base,com.google.common.base,Class Verify,"public static void verify(boolean expression, @Nullable String errorMessageTemplate, int p1, @Nullable Object p2)","Ensures that expression is true, throwing a VerifyException with a custom message otherwise. See verify(boolean, String, Object...) for details."
6507,common/base,com.google.common.base,Class Verify,"public static void verify(boolean expression, @Nullable String errorMessageTemplate, long p1, @Nullable Object p2)","Ensures that expression is true, throwing a VerifyException with a custom message otherwise. See verify(boolean, String, Object...) for details."
6508,common/base,com.google.common.base,Class Verify,"public static void verify(boolean expression, @Nullable String errorMessageTemplate, @Nullable Object p1, @Nullable Object p2)","Ensures that expression is true, throwing a VerifyException with a custom message otherwise. See verify(boolean, String, Object...) for details."
6509,common/base,com.google.common.base,Class Verify,"public static void verify(boolean expression, @Nullable String errorMessageTemplate, @Nullable Object p1, @Nullable Object p2, @Nullable Object p3)","Ensures that expression is true, throwing a VerifyException with a custom message otherwise. See verify(boolean, String, Object...) for details."
6510,common/base,com.google.common.base,Class Verify,"public static void verify(boolean expression, @Nullable String errorMessageTemplate, @Nullable Object p1, @Nullable Object p2, @Nullable Object p3, @Nullable Object p4)","Ensures that expression is true, throwing a VerifyException with a custom message otherwise. See verify(boolean, String, Object...) for details."
6511,common/base,com.google.common.base,Class Verify,@CanIgnoreReturnValuepublic static <T> T verifyNotNull(T reference),"Ensures that reference is non-null, throwing a VerifyException with a default message otherwise."
6512,common/base,com.google.common.base,Class VerifyException,public VerifyException(),Constructs a VerifyException with no message.
6513,common/base,com.google.common.base,Class VerifyException,public VerifyException(@Nullable String message),Constructs a VerifyException with the message message.
6514,common/base,com.google.common.base,Class VerifyException,public VerifyException(@Nullable Throwable cause),"Constructs a VerifyException with the cause cause and a message that is null if cause is null, and cause.toString() otherwise."
6515,common/xml,com.google.common.xml,Class XmlEscapers,public static Escaper xmlContentEscaper(),"Returns an Escaper instance that escapes special characters in a string so it can safely be included in an XML document as element content. See section 2.4 of the XML specification. Note: Double and single quotes are not escaped, so it is not safe to use this escaper to escape attribute values. Use xmlContentEscaper() if the output can appear in element content or xmlAttributeEscaper() in attribute values. This escaper substitutes 0xFFFD for non-whitespace control characters and the character values 0xFFFE and 0xFFFF which are not permitted in XML. For more detail see section 2.2 of the XML specification. This escaper does not escape non-ASCII characters to their numeric character references (NCR). Any non-ASCII characters appearing in the input will be preserved in the output. Specifically \r (carriage return) is preserved in the output, which may result in it being silently converted to \n when the XML is parsed. This escaper does not treat surrogate pairs specially and does not perform Unicode validation on its input."
6516,core/sift,ch.qos.logback.core.sift,Class AbstractAppenderFactoryUsingJoran<E>,protected String key,
6517,core/sift,ch.qos.logback.core.sift,Class AbstractAppenderFactoryUsingJoran<E>,public abstract SiftingJoranConfiguratorBase<E> getSiftingJoranConfigurator(String k),
6518,core/sift,ch.qos.logback.core.sift,Class AbstractAppenderFactoryUsingJoran<E>,"public Appender<E> buildAppender(Context context, String discriminatingValue) throws JoranException",
6519,core/spi,ch.qos.logback.core.spi,Class AbstractComponentTracker<C>,public static final long LINGERING_TIMEOUT,
6520,core/spi,ch.qos.logback.core.spi,Class AbstractComponentTracker<C>,public static final long WAIT_BETWEEN_SUCCESSIVE_REMOVAL_ITERATIONS,The minimum amount of time that has to elapse between successive removal iterations.
6521,core/spi,ch.qos.logback.core.spi,Class AbstractComponentTracker<C>,protected int maxComponents,
6522,core/spi,ch.qos.logback.core.spi,Class AbstractComponentTracker<C>,protected abstract void processPriorToRemoval(C component),Stop or clean the component.
6523,core/spi,ch.qos.logback.core.spi,Class AbstractComponentTracker<C>,protected abstract C buildComponent(String key),Build a component based on the key.
6524,core/spi,ch.qos.logback.core.spi,Class AbstractComponentTracker<C>,protected abstract boolean isComponentStale(C c),Components can declare themselves stale. Such components may be removed before they time out.
6525,core/spi,ch.qos.logback.core.spi,Class AbstractComponentTracker<C>,public int getComponentCount(),Description copied from interface: ComponentTracker
6526,core/spi,ch.qos.logback.core.spi,Class AbstractComponentTracker<C>,public C find(String key),"Find the component identified by 'key', without updating the timestamp. Returns null if no corresponding component could be found. Note that this method is synchronized."
6527,core/spi,ch.qos.logback.core.spi,Class AbstractComponentTracker<C>,"public C getOrCreate(String key, long timestamp)","Get the component identified by 'key', updating its timestamp in the process. If the corresponding component could not be found, it is created. Note that this method is atomic, i.e. synchronized."
6528,core/spi,ch.qos.logback.core.spi,Class AbstractComponentTracker<C>,public void endOfLife(String key),Mark component identified by 'key' as having reached its end-of-life.
6529,core/spi,ch.qos.logback.core.spi,Class AbstractComponentTracker<C>,public void removeStaleComponents(long now),Clear (and detach) components which are stale. Components which have not been accessed for more than a user-specified duration are deemed stale.
6530,core/spi,ch.qos.logback.core.spi,Class AbstractComponentTracker<C>,public Set<String> allKeys(),Description copied from interface: ComponentTracker
6531,core/spi,ch.qos.logback.core.spi,Class AbstractComponentTracker<C>,public Collection<C> allComponents(),Description copied from interface: ComponentTracker
6532,core/spi,ch.qos.logback.core.spi,Class AbstractComponentTracker<C>,public long getTimeout(),
6533,core/spi,ch.qos.logback.core.spi,Class AbstractComponentTracker<C>,public void setTimeout(long timeout),
6534,core/spi,ch.qos.logback.core.spi,Class AbstractComponentTracker<C>,public int getMaxComponents(),
6535,core/sift,ch.qos.logback.core.sift,Class AbstractDiscriminator<E>,public void start(),
6536,core/sift,ch.qos.logback.core.sift,Class AbstractDiscriminator<E>,public void stop(),
6537,joran/action,ch.qos.logback.core.joran.action,Class AbstractEventEvaluatorAction,"public void begin(InterpretationContext ec, String name, Attributes attributes)",Instantiates an evaluator of the given class and sets its name.
6538,joran/action,ch.qos.logback.core.joran.action,Class AbstractEventEvaluatorAction,protected abstract String defaultClassName(),Returns a default class name in case the class attribute is not specified
6539,joran/action,ch.qos.logback.core.joran.action,Class AbstractEventEvaluatorAction,"public void end(InterpretationContext ec, String e)","Once the children elements are also parsed, now is the time to activate the evaluator options."
6540,core/filter,ch.qos.logback.core.filter,Class AbstractMatcherFilter<E>,protected FilterReply onMatch,
6541,core/filter,ch.qos.logback.core.filter,Class AbstractMatcherFilter<E>,public final void setOnMatch(FilterReply reply),
6542,core/filter,ch.qos.logback.core.filter,Class AbstractMatcherFilter<E>,public final void setOnMismatch(FilterReply reply),
6543,core/filter,ch.qos.logback.core.filter,Class AbstractMatcherFilter<E>,public final FilterReply getOnMatch(),
6544,net/server,ch.qos.logback.core.net.server,Class AbstractServerSocketAppender<E>,public static final int DEFAULT_BACKLOG,Default ServerSocket backlog
6545,net/server,ch.qos.logback.core.net.server,Class AbstractServerSocketAppender<E>,public void start(),
6546,net/server,ch.qos.logback.core.net.server,Class AbstractServerSocketAppender<E>,protected ServerListener<ch.qos.logback.core.net.server.RemoteReceiverClient> createServerListener(ServerSocket socket),
6547,net/server,ch.qos.logback.core.net.server,Class AbstractServerSocketAppender<E>,"protected ServerRunner<ch.qos.logback.core.net.server.RemoteReceiverClient> createServerRunner(ServerListener<ch.qos.logback.core.net.server.RemoteReceiverClient> listener, Executor executor)",
6548,net/server,ch.qos.logback.core.net.server,Class AbstractServerSocketAppender<E>,public void stop(),
6549,net/server,ch.qos.logback.core.net.server,Class AbstractServerSocketAppender<E>,protected void append(E event),
6550,net/server,ch.qos.logback.core.net.server,Class AbstractServerSocketAppender<E>,protected abstract void postProcessEvent(E event),Post process an event received via append().
6551,net/server,ch.qos.logback.core.net.server,Class AbstractServerSocketAppender<E>,protected abstract PreSerializationTransformer<E> getPST(),Gets a transformer that will be used to convert a received event to a Serializable form.
6552,net/server,ch.qos.logback.core.net.server,Class AbstractServerSocketAppender<E>,protected ServerSocketFactory getServerSocketFactory() throws Exception,Gets the factory used to create ServerSocket objects. The default implementation delegates to ServerSocketFactory.getDefault(). Subclasses may override to private a different socket factory implementation.
6553,net/server,ch.qos.logback.core.net.server,Class AbstractServerSocketAppender<E>,protected InetAddress getInetAddress() throws UnknownHostException,Gets the local address for the listener.
6554,net/server,ch.qos.logback.core.net.server,Class AbstractServerSocketAppender<E>,public int getPort(),Gets the local port for the listener.
6555,net/server,ch.qos.logback.core.net.server,Class AbstractServerSocketAppender<E>,public void setPort(int port),Sets the local port for the listener.
6556,net/server,ch.qos.logback.core.net.server,Class AbstractServerSocketAppender<E>,public int getBacklog(),Gets the listener queue depth. This represents the number of connected clients whose connections have not yet been accepted.
6557,net/server,ch.qos.logback.core.net.server,Class AbstractServerSocketAppender<E>,public void setBacklog(int backlog),Sets the listener queue depth. This represents the number of connected clients whose connections have not yet been accepted.
6558,net/server,ch.qos.logback.core.net.server,Class AbstractServerSocketAppender<E>,public String getAddress(),Gets the local address for the listener.
6559,net/server,ch.qos.logback.core.net.server,Class AbstractServerSocketAppender<E>,public void setAddress(String address),Sets the local address for the listener.
6560,net/server,ch.qos.logback.core.net.server,Class AbstractServerSocketAppender<E>,public int getClientQueueSize(),Gets the event queue size used for each client connection.
6561,core/net,ch.qos.logback.core.net,Class AbstractSocketAppender<E>,public static final int DEFAULT_PORT,The default port number of remote logging server (4560).
6562,core/net,ch.qos.logback.core.net,Class AbstractSocketAppender<E>,public static final int DEFAULT_RECONNECTION_DELAY,The default reconnection delay (30000 milliseconds or 30 seconds).
6563,core/net,ch.qos.logback.core.net,Class AbstractSocketAppender<E>,public void start(),
6564,core/net,ch.qos.logback.core.net,Class AbstractSocketAppender<E>,public void stop(),
6565,core/net,ch.qos.logback.core.net,Class AbstractSocketAppender<E>,protected void append(E event),
6566,core/net,ch.qos.logback.core.net,Class AbstractSocketAppender<E>,"public void connectionFailed(SocketConnector connector, Exception ex)",
6567,core/net,ch.qos.logback.core.net,Class AbstractSocketAppender<E>,"protected SocketConnector newConnector(InetAddress address, int port, long initialDelay, long retryDelay)",Creates a new SocketConnector. The default implementation creates an instance of DefaultSocketConnector. A subclass may override to provide a different SocketConnector implementation.
6568,core/net,ch.qos.logback.core.net,Class AbstractSocketAppender<E>,protected SocketFactory getSocketFactory(),Gets the default SocketFactory for the platform. Subclasses may override to provide a custom socket factory.
6569,core/net,ch.qos.logback.core.net,Class AbstractSocketAppender<E>,protected abstract void postProcessEvent(E event),Post-processes an event before it is serialized for delivery to the remote receiver.
6570,core/net,ch.qos.logback.core.net,Class AbstractSocketAppender<E>,protected abstract PreSerializationTransformer<E> getPST(),Get the pre-serialization transformer that will be used to transform each event into a Serializable object before delivery to the remote receiver.
6571,core/net,ch.qos.logback.core.net,Class AbstractSocketAppender<E>,public void setRemoteHost(String host),The RemoteHost property takes the name of of the host where a corresponding server is running.
6572,core/net,ch.qos.logback.core.net,Class AbstractSocketAppender<E>,public String getRemoteHost(),Returns value of the RemoteHost property.
6573,core/net,ch.qos.logback.core.net,Class AbstractSocketAppender<E>,public void setPort(int port),The Port property takes a positive integer representing the port where the server is waiting for connections.
6574,core/net,ch.qos.logback.core.net,Class AbstractSocketAppender<E>,public int getPort(),Returns value of the Port property.
6575,core/net,ch.qos.logback.core.net,Class AbstractSocketAppender<E>,public void setReconnectionDelay(Duration delay),The reconnectionDelay property takes a positive Duration value representing the time to wait between each failed connection attempt to the server. The default value of this option is to 30 seconds. Setting this option to zero turns off reconnection capability.
6576,core/net,ch.qos.logback.core.net,Class AbstractSocketAppender<E>,public Duration getReconnectionDelay(),Returns value of the reconnectionDelay property.
6577,core/net,ch.qos.logback.core.net,Class AbstractSocketAppender<E>,public void setQueueSize(int queueSize),"The queueSize property takes a non-negative integer representing the number of logging events to retain for delivery to the remote receiver. When the deque size is zero, event delivery to the remote receiver is synchronous. When the deque size is greater than zero, the append(Object) method returns immediately after enqueing the event, assuming that there is space available in the deque. Using a non-zero deque length can improve performance by eliminating delays caused by transient network delays."
6578,core/net,ch.qos.logback.core.net,Class AbstractSocketAppender<E>,public int getQueueSize(),Returns the value of the queueSize property.
6579,core/net,ch.qos.logback.core.net,Class AbstractSocketAppender<E>,public void setEventDelayLimit(Duration eventDelayLimit),"The eventDelayLimit takes a non-negative integer representing the number of milliseconds to allow the appender to block if the underlying BlockingQueue is full. Once this limit is reached, the event is dropped."
6580,core/net,ch.qos.logback.core.net,Class AbstractSSLSocketAppender<E>,protected SocketFactory getSocketFactory(),Gets an SocketFactory that produces SSL sockets using an SSLContext that is derived from the appender's configuration.
6581,core/net,ch.qos.logback.core.net,Class AbstractSSLSocketAppender<E>,public void start(),
6582,core/net,ch.qos.logback.core.net,Class AbstractSSLSocketAppender<E>,public SSLConfiguration getSsl(),Gets the SSL configuration.
6583,logback/access,ch.qos.logback.access,Class AccessConstants,public static final String LOGBACK_STATUS_MANAGER_KEY,
6584,logback/access,ch.qos.logback.access,Class AccessConstants,public static final String LB_INPUT_BUFFER,
6585,logback/access,ch.qos.logback.access,Class AccessConstants,public static final String LB_OUTPUT_BUFFER,
6586,logback/access,ch.qos.logback.access,Class AccessConstants,public static final String X_WWW_FORM_URLECODED,
6587,logback/access,ch.qos.logback.access,Class AccessConstants,public static final String IMAGE_CONTENT_TYPE,
6588,logback/access,ch.qos.logback.access,Class AccessConstants,public static final String IMAGE_JPEG,
6589,logback/access,ch.qos.logback.access,Class AccessConstants,public static final String IMAGE_GIF,
6590,logback/access,ch.qos.logback.access,Class AccessConstants,public static final String IMAGE_PNG,
6591,logback/access,ch.qos.logback.access,Class AccessConstants,public static final String TEE_FILTER_INCLUDES_PARAM,
6592,access/spi,ch.qos.logback.access.spi,Class AccessContext,public void callAppenders(IAccessEvent event),
6593,access/spi,ch.qos.logback.access.spi,Class AccessContext,public void addAppender(Appender<IAccessEvent> newAppender),Description copied from interface: AppenderAttachable
6594,access/spi,ch.qos.logback.access.spi,Class AccessContext,public void detachAndStopAllAppenders(),Description copied from interface: AppenderAttachable
6595,access/spi,ch.qos.logback.access.spi,Class AccessContext,public boolean detachAppender(Appender<IAccessEvent> appender),Description copied from interface: AppenderAttachable
6596,access/spi,ch.qos.logback.access.spi,Class AccessContext,public boolean detachAppender(String name),Description copied from interface: AppenderAttachable
6597,access/spi,ch.qos.logback.access.spi,Class AccessContext,public Appender<IAccessEvent> getAppender(String name),Description copied from interface: AppenderAttachable
6598,access/spi,ch.qos.logback.access.spi,Class AccessContext,public boolean isAttached(Appender<IAccessEvent> appender),Description copied from interface: AppenderAttachable
6599,access/spi,ch.qos.logback.access.spi,Class AccessContext,public Iterator<Appender<IAccessEvent>> iteratorForAppenders(),Description copied from interface: AppenderAttachable
6600,access/spi,ch.qos.logback.access.spi,Class AccessContext,public void addFilter(Filter<IAccessEvent> newFilter),Description copied from interface: FilterAttachable
6601,access/spi,ch.qos.logback.access.spi,Class AccessContext,public void clearAllFilters(),
6602,access/spi,ch.qos.logback.access.spi,Class AccessContext,public List<Filter<IAccessEvent>> getCopyOfAttachedFiltersList(),Description copied from interface: FilterAttachable
6603,access/pattern,ch.qos.logback.access.pattern,Class AccessConverter,public static final char SPACE_CHAR,
6604,access/pattern,ch.qos.logback.access.pattern,Class AccessConverter,public void setContext(Context context),
6605,access/pattern,ch.qos.logback.access.pattern,Class AccessConverter,public Context getContext(),
6606,access/pattern,ch.qos.logback.access.pattern,Class AccessConverter,public void addStatus(Status status),
6607,access/pattern,ch.qos.logback.access.pattern,Class AccessConverter,public void addInfo(String msg),
6608,access/pattern,ch.qos.logback.access.pattern,Class AccessConverter,"public void addInfo(String msg, Throwable ex)",
6609,access/pattern,ch.qos.logback.access.pattern,Class AccessConverter,public void addWarn(String msg),
6610,access/pattern,ch.qos.logback.access.pattern,Class AccessConverter,"public void addWarn(String msg, Throwable ex)",
6611,access/pattern,ch.qos.logback.access.pattern,Class AccessConverter,public void addError(String msg),
6612,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public javax.servlet.http.HttpServletRequest getRequest(),Returns the underlying HttpServletRequest. After serialization the returned value will be null.
6613,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public javax.servlet.http.HttpServletResponse getResponse(),Returns the underlying HttpServletResponse. After serialization the returned value will be null.
6614,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public long getTimeStamp(),Description copied from interface: IAccessEvent
6615,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public void setTimeStamp(long timeStamp),
6616,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public void setThreadName(String threadName),
6617,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public String getThreadName(),
6618,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public String getRequestURI(),
6619,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public String getQueryString(),
6620,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public String getRequestURL(),The first line of the request.
6621,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public String getRemoteHost(),
6622,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public String getRemoteUser(),
6623,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public String getProtocol(),
6624,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public String getMethod(),
6625,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public String getSessionID(),
6626,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public String getServerName(),
6627,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public String getRemoteAddr(),
6628,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public String getRequestHeader(String key),
6629,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public Enumeration<String> getRequestHeaderNames(),
6630,access/spi,ch.qos.logback.access.spi,Class AccessEvent,"public Map<String,String> getRequestHeaderMap()",
6631,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public void buildRequestHeaderMap(),
6632,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public void buildRequestParameterMap(),
6633,access/spi,ch.qos.logback.access.spi,Class AccessEvent,"public Map<String,String[]> getRequestParameterMap()",
6634,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public String getAttribute(String key),
6635,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public String[] getRequestParameter(String key),
6636,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public String getCookie(String key),
6637,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public long getContentLength(),
6638,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public int getStatusCode(),
6639,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public long getElapsedSeconds(),Description copied from interface: IAccessEvent
6640,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public long getElapsedTime(),Description copied from interface: IAccessEvent
6641,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public String getRequestContent(),
6642,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public String getResponseContent(),
6643,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public int getLocalPort(),
6644,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public ServerAdapter getServerAdapter(),
6645,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public String getResponseHeader(String key),
6646,access/spi,ch.qos.logback.access.spi,Class AccessEvent,"public Map<String,String> getResponseHeaderMap()",
6647,access/spi,ch.qos.logback.access.spi,Class AccessEvent,public List<String> getResponseHeaderNameList(),
6648,access/sift,ch.qos.logback.access.sift,Class AccessEventDiscriminator,public String getDiscriminatingValue(IAccessEvent acccessEvent),Description copied from interface: Discriminator
6649,access/sift,ch.qos.logback.access.sift,Class AccessEventDiscriminator,public String getRawDiscriminatingValue(IAccessEvent acccessEvent),
6650,access/sift,ch.qos.logback.access.sift,Class AccessEventDiscriminator,public void start(),
6651,access/sift,ch.qos.logback.access.sift,Class AccessEventDiscriminator,public void setFieldName(AccessEventDiscriminator.FieldName fieldName),
6652,access/sift,ch.qos.logback.access.sift,Class AccessEventDiscriminator,public AccessEventDiscriminator.FieldName getFieldName(),
6653,access/sift,ch.qos.logback.access.sift,Class AccessEventDiscriminator,public String getAdditionalKey(),
6654,access/sift,ch.qos.logback.access.sift,Class AccessEventDiscriminator,public void setAdditionalKey(String additionalKey),
6655,access/sift,ch.qos.logback.access.sift,Class AccessEventDiscriminator,public String getDefaultValue(),
6656,access/sift,ch.qos.logback.access.sift,Class AccessEventDiscriminator,public void setDefaultValue(String defaultValue),The default value returned by this discriminator in case it cannot compute the discriminating value from the access event.
6657,access/sift,ch.qos.logback.access.sift,Class AccessEventDiscriminator,public String getKey(),Description copied from interface: Discriminator
6658,access/sift,ch.qos.logback.access.sift,Enum AccessEventDiscriminator.FieldName,public static final AccessEventDiscriminator.FieldName COOKIE,
6659,access/sift,ch.qos.logback.access.sift,Enum AccessEventDiscriminator.FieldName,public static final AccessEventDiscriminator.FieldName REQUEST_ATTRIBUTE,
6660,access/sift,ch.qos.logback.access.sift,Enum AccessEventDiscriminator.FieldName,public static final AccessEventDiscriminator.FieldName SESSION_ATTRIBUTE,
6661,access/sift,ch.qos.logback.access.sift,Enum AccessEventDiscriminator.FieldName,public static final AccessEventDiscriminator.FieldName REMOTE_ADDRESS,
6662,access/sift,ch.qos.logback.access.sift,Enum AccessEventDiscriminator.FieldName,public static final AccessEventDiscriminator.FieldName LOCAL_PORT,
6663,access/sift,ch.qos.logback.access.sift,Enum AccessEventDiscriminator.FieldName,public static AccessEventDiscriminator.FieldName[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (AccessEventDiscriminator.FieldName c : AccessEventDiscriminator.FieldName.values())  System.out.println(c);"
6664,joran/action,ch.qos.logback.core.joran.action,Class Action,public static final String NAME_ATTRIBUTE,
6665,joran/action,ch.qos.logback.core.joran.action,Class Action,public static final String KEY_ATTRIBUTE,
6666,joran/action,ch.qos.logback.core.joran.action,Class Action,public static final String VALUE_ATTRIBUTE,
6667,joran/action,ch.qos.logback.core.joran.action,Class Action,public static final String FILE_ATTRIBUTE,
6668,joran/action,ch.qos.logback.core.joran.action,Class Action,public static final String CLASS_ATTRIBUTE,
6669,joran/action,ch.qos.logback.core.joran.action,Class Action,public static final String PATTERN_ATTRIBUTE,
6670,joran/action,ch.qos.logback.core.joran.action,Class Action,public static final String SCOPE_ATTRIBUTE,
6671,joran/action,ch.qos.logback.core.joran.action,Class Action,"public abstract void begin(InterpretationContext ic, String name, Attributes attributes) throws ActionException",Called when the parser encounters an element matching a Pattern.
6672,joran/action,ch.qos.logback.core.joran.action,Class Action,"public void body(InterpretationContext ic, String body) throws ActionException",Called to pass the body (as text) contained within an element.
6673,joran/action,ch.qos.logback.core.joran.action,Class Action,"public abstract void end(InterpretationContext ic, String name) throws ActionException",
6674,joran/action,ch.qos.logback.core.joran.action,Class Action,public String toString(),
6675,joran/action,ch.qos.logback.core.joran.action,Class Action,protected int getColumnNumber(InterpretationContext ic),
6676,joran/action,ch.qos.logback.core.joran.action,Class Action,protected int getLineNumber(InterpretationContext ic),
6677,joran/action,ch.qos.logback.core.joran.action,Class ActionConst,public static final String APPENDER_TAG,
6678,joran/action,ch.qos.logback.core.joran.action,Class ActionConst,public static final String REF_ATTRIBUTE,
6679,joran/action,ch.qos.logback.core.joran.action,Class ActionConst,public static final String ADDITIVITY_ATTRIBUTE,
6680,joran/action,ch.qos.logback.core.joran.action,Class ActionConst,public static final String LEVEL_ATTRIBUTE,
6681,joran/action,ch.qos.logback.core.joran.action,Class ActionConst,public static final String CONVERTER_CLASS_ATTRIBUTE,
6682,joran/action,ch.qos.logback.core.joran.action,Class ActionConst,public static final String CONVERSION_WORD_ATTRIBUTE,
6683,joran/action,ch.qos.logback.core.joran.action,Class ActionConst,public static final String PATTERN_ATTRIBUTE,
6684,joran/action,ch.qos.logback.core.joran.action,Class ActionConst,public static final String VALUE_ATTR,
6685,joran/action,ch.qos.logback.core.joran.action,Class ActionConst,public static final String ACTION_CLASS_ATTRIBUTE,
6686,joran/action,ch.qos.logback.core.joran.action,Class ActionConst,public static final String INHERITED,
6687,joran/action,ch.qos.logback.core.joran.action,Class ActionConst,public static final String NULL,
6688,joran/spi,ch.qos.logback.core.joran.spi,Class ActionException,public ActionException(),
6689,joran/action,ch.qos.logback.core.joran.action,Class ActionUtil,public static ActionUtil.Scope stringToScope(String scopeStr),Convert a string into a scope. Scole.LOCAL is returned by default.
6690,joran/action,ch.qos.logback.core.joran.action,Class ActionUtil,"public static void setProperty(InterpretationContext ic, String key, String value, ActionUtil.Scope scope)",
6691,joran/action,ch.qos.logback.core.joran.action,Enum ActionUtil.Scope,public static final ActionUtil.Scope LOCAL,
6692,joran/action,ch.qos.logback.core.joran.action,Enum ActionUtil.Scope,public static final ActionUtil.Scope CONTEXT,
6693,joran/action,ch.qos.logback.core.joran.action,Enum ActionUtil.Scope,public static ActionUtil.Scope[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (ActionUtil.Scope c : ActionUtil.Scope.values())  System.out.println(c);"
6694,onJoran/calculator,chapters.onJoran.calculator,Class AddAction,"public void begin(InterpretationContext ic, String name, Attributes attributes)",Description copied from class: Action
6695,core/util,ch.qos.logback.core.util,Enum AggregationType,public static final AggregationType NOT_FOUND,
6696,core/util,ch.qos.logback.core.util,Enum AggregationType,public static final AggregationType AS_BASIC_PROPERTY,
6697,core/util,ch.qos.logback.core.util,Enum AggregationType,public static final AggregationType AS_COMPLEX_PROPERTY,
6698,core/util,ch.qos.logback.core.util,Enum AggregationType,public static final AggregationType AS_BASIC_PROPERTY_COLLECTION,
6699,core/util,ch.qos.logback.core.util,Enum AggregationType,public static AggregationType[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (AggregationType c : AggregationType.values())  System.out.println(c);"
6700,pattern/color,ch.qos.logback.core.pattern.color,Class ANSIConstants,public static final String ESC_START,
6701,pattern/color,ch.qos.logback.core.pattern.color,Class ANSIConstants,public static final String ESC_END,
6702,pattern/color,ch.qos.logback.core.pattern.color,Class ANSIConstants,public static final String BOLD,
6703,pattern/color,ch.qos.logback.core.pattern.color,Class ANSIConstants,public static final String BLACK_FG,
6704,pattern/color,ch.qos.logback.core.pattern.color,Class ANSIConstants,public static final String RED_FG,
6705,pattern/color,ch.qos.logback.core.pattern.color,Class ANSIConstants,public static final String GREEN_FG,
6706,pattern/color,ch.qos.logback.core.pattern.color,Class ANSIConstants,public static final String YELLOW_FG,
6707,pattern/color,ch.qos.logback.core.pattern.color,Class ANSIConstants,public static final String BLUE_FG,
6708,pattern/color,ch.qos.logback.core.pattern.color,Class ANSIConstants,public static final String MAGENTA_FG,
6709,pattern/color,ch.qos.logback.core.pattern.color,Class ANSIConstants,public static final String CYAN_FG,
6710,pattern/color,ch.qos.logback.core.pattern.color,Class ANSIConstants,public static final String WHITE_FG,
6711,logback/core,ch.qos.logback.core,Interface Appender<E>,String getName(),Get the name of this appender. The name uniquely identifies the appender.
6712,logback/core,ch.qos.logback.core,Interface Appender<E>,void doAppend(E event) throws LogbackException,This is where an appender accomplishes its work. Note that the argument is of type Object.
6713,joran/action,ch.qos.logback.core.joran.action,Class AppenderAction<E>,"public void begin(InterpretationContext ec, String localName, Attributes attributes) throws ActionException",Instantiates an appender of the given class and sets its name. The appender thus generated is placed in the InterpretationContext's appender bag.
6714,core/spi,ch.qos.logback.core.spi,Interface AppenderAttachable<E>,void addAppender(Appender<E> newAppender),Add an appender.
6715,core/spi,ch.qos.logback.core.spi,Interface AppenderAttachable<E>,Iterator<Appender<E>> iteratorForAppenders(),Get an iterator for appenders contained in the parent object.
6716,core/spi,ch.qos.logback.core.spi,Interface AppenderAttachable<E>,Appender<E> getAppender(String name),Get an appender by name.
6717,core/spi,ch.qos.logback.core.spi,Interface AppenderAttachable<E>,boolean isAttached(Appender<E> appender),"Returns true if the specified appender is in list of attached attached, false otherwise."
6718,core/spi,ch.qos.logback.core.spi,Interface AppenderAttachable<E>,void detachAndStopAllAppenders(),Detach and processPriorToRemoval all previously added appenders.
6719,core/spi,ch.qos.logback.core.spi,Interface AppenderAttachable<E>,boolean detachAppender(Appender<E> appender),Detach the appender passed as parameter from the list of appenders.
6720,core/spi,ch.qos.logback.core.spi,Class AppenderAttachableImpl<E>,public void addAppender(Appender<E> newAppender),Attach an appender. If the appender is already in the list in won't be added again.
6721,core/spi,ch.qos.logback.core.spi,Class AppenderAttachableImpl<E>,public int appendLoopOnAppenders(E e),Call the doAppend method on all attached appenders.
6722,core/spi,ch.qos.logback.core.spi,Class AppenderAttachableImpl<E>,public Iterator<Appender<E>> iteratorForAppenders(),Get all attached appenders as an Enumeration. If there are no attached appenders null is returned.
6723,core/spi,ch.qos.logback.core.spi,Class AppenderAttachableImpl<E>,public Appender<E> getAppender(String name),Look for an attached appender named as name. Return the appender with that name if in the list. Return null otherwise.
6724,core/spi,ch.qos.logback.core.spi,Class AppenderAttachableImpl<E>,public boolean isAttached(Appender<E> appender),"Returns true if the specified appender is in the list of attached appenders, false otherwise."
6725,core/spi,ch.qos.logback.core.spi,Class AppenderAttachableImpl<E>,public void detachAndStopAllAppenders(),Remove and processPriorToRemoval all previously attached appenders.
6726,core/spi,ch.qos.logback.core.spi,Class AppenderAttachableImpl<E>,public boolean detachAppender(Appender<E> appender),Remove the appender passed as parameter form the list of attached appenders.
6727,logback/core,ch.qos.logback.core,Class AppenderBase<E>,protected volatile boolean started,
6728,logback/core,ch.qos.logback.core,Class AppenderBase<E>,public String getName(),Description copied from interface: Appender
6729,logback/core,ch.qos.logback.core,Class AppenderBase<E>,public void doAppend(E eventObject),Description copied from interface: Appender
6730,logback/core,ch.qos.logback.core,Class AppenderBase<E>,protected abstract void append(E eventObject),
6731,logback/core,ch.qos.logback.core,Class AppenderBase<E>,public void setName(String name),Set the name of this appender.
6732,logback/core,ch.qos.logback.core,Class AppenderBase<E>,public void start(),
6733,logback/core,ch.qos.logback.core,Class AppenderBase<E>,public void stop(),
6734,logback/core,ch.qos.logback.core,Class AppenderBase<E>,public boolean isStarted(),
6735,logback/core,ch.qos.logback.core,Class AppenderBase<E>,public String toString(),
6736,logback/core,ch.qos.logback.core,Class AppenderBase<E>,public void addFilter(Filter<E> newFilter),Description copied from interface: FilterAttachable
6737,logback/core,ch.qos.logback.core,Class AppenderBase<E>,public void clearAllFilters(),
6738,logback/core,ch.qos.logback.core,Class AppenderBase<E>,public List<Filter<E>> getCopyOfAttachedFiltersList(),Description copied from interface: FilterAttachable
6739,joran/action,ch.qos.logback.core.joran.action,Class AppenderRefAction<E>,"public void begin(InterpretationContext ec, String tagName, Attributes attributes)",Description copied from class: Action
6740,core/sift,ch.qos.logback.core.sift,Class AppenderTracker<E>,protected void processPriorToRemoval(Appender<E> component),Description copied from class: AbstractComponentTracker
6741,core/sift,ch.qos.logback.core.sift,Class AppenderTracker<E>,protected Appender<E> buildComponent(String key),Description copied from class: AbstractComponentTracker
6742,rolling/helper,ch.qos.logback.core.rolling.helper,Interface ArchiveRemover,void clean(Date now),
6743,rolling/helper,ch.qos.logback.core.rolling.helper,Interface ArchiveRemover,void setMaxHistory(int maxHistory),
6744,rolling/helper,ch.qos.logback.core.rolling.helper,Interface ArchiveRemover,void setTotalSizeCap(long totalSizeCap),
6745,logback/classic,ch.qos.logback.classic,Class AsyncAppender,protected boolean isDiscardable(ILoggingEvent event),"Events of level TRACE, DEBUG and INFO are deemed to be discardable."
6746,logback/classic,ch.qos.logback.classic,Class AsyncAppender,protected void preprocess(ILoggingEvent eventObject),Description copied from class: AsyncAppenderBase
6747,logback/classic,ch.qos.logback.classic,Class AsyncAppender,public boolean isIncludeCallerData(),
6748,logback/core,ch.qos.logback.core,Class AsyncAppenderBase<E>,public static final int DEFAULT_QUEUE_SIZE,The default buffer size.
6749,logback/core,ch.qos.logback.core,Class AsyncAppenderBase<E>,protected boolean isDiscardable(E eventObject),"Is the eventObject passed as parameter discardable? The base class's implementation of this method always returns 'false' but sub-classes may (and do) override this method. Note that only if the buffer is nearly full are events discarded. Otherwise, when the buffer is not full all events are logged."
6750,logback/core,ch.qos.logback.core,Class AsyncAppenderBase<E>,protected void preprocess(E eventObject),Pre-process the event prior to queueing. The base class does no pre-processing but sub-classes can override this behavior.
6751,logback/core,ch.qos.logback.core,Class AsyncAppenderBase<E>,public void start(),
6752,logback/core,ch.qos.logback.core,Class AsyncAppenderBase<E>,public void stop(),
6753,logback/core,ch.qos.logback.core,Class AsyncAppenderBase<E>,protected void append(E eventObject),
6754,logback/core,ch.qos.logback.core,Class AsyncAppenderBase<E>,public int getQueueSize(),
6755,logback/core,ch.qos.logback.core,Class AsyncAppenderBase<E>,public void setQueueSize(int queueSize),
6756,logback/core,ch.qos.logback.core,Class AsyncAppenderBase<E>,public int getDiscardingThreshold(),
6757,logback/core,ch.qos.logback.core,Class AsyncAppenderBase<E>,public void setDiscardingThreshold(int discardingThreshold),
6758,logback/core,ch.qos.logback.core,Class AsyncAppenderBase<E>,public int getMaxFlushTime(),
6759,logback/core,ch.qos.logback.core,Class AsyncAppenderBase<E>,public void setMaxFlushTime(int maxFlushTime),
6760,logback/core,ch.qos.logback.core,Class AsyncAppenderBase<E>,public int getNumberOfElementsInQueue(),Returns the number of elements currently in the blocking queue.
6761,logback/core,ch.qos.logback.core,Class AsyncAppenderBase<E>,public void setNeverBlock(boolean neverBlock),
6762,logback/core,ch.qos.logback.core,Class AsyncAppenderBase<E>,public boolean isNeverBlock(),
6763,logback/core,ch.qos.logback.core,Class AsyncAppenderBase<E>,public int getRemainingCapacity(),The remaining capacity available in the blocking queue. See also BlockingQueue#remainingCapacity()
6764,logback/core,ch.qos.logback.core,Class AsyncAppenderBase<E>,public void addAppender(Appender<E> newAppender),Description copied from interface: AppenderAttachable
6765,logback/core,ch.qos.logback.core,Class AsyncAppenderBase<E>,public Iterator<Appender<E>> iteratorForAppenders(),Description copied from interface: AppenderAttachable
6766,logback/core,ch.qos.logback.core,Class AsyncAppenderBase<E>,public Appender<E> getAppender(String name),Description copied from interface: AppenderAttachable
6767,logback/core,ch.qos.logback.core,Class AsyncAppenderBase<E>,public boolean isAttached(Appender<E> eAppender),Description copied from interface: AppenderAttachable
6768,logback/core,ch.qos.logback.core,Class AsyncAppenderBase<E>,public void detachAndStopAllAppenders(),Description copied from interface: AppenderAttachable
6769,logback/core,ch.qos.logback.core,Class AsyncAppenderBase<E>,public boolean detachAppender(Appender<E> eAppender),Description copied from interface: AppenderAttachable
6770,sub/sample,chapters.appenders.sub.sample,Class Bar,public String toString(),
6771,logback/core,ch.qos.logback.core,Class BasicStatusManager,public static final int MAX_HEADER_COUNT,
6772,logback/core,ch.qos.logback.core,Class BasicStatusManager,public static final int TAIL_SIZE,
6773,logback/core,ch.qos.logback.core,Class BasicStatusManager,protected final List<Status> statusList,
6774,logback/core,ch.qos.logback.core,Class BasicStatusManager,protected final CyclicBuffer<Status> tailBuffer,
6775,logback/core,ch.qos.logback.core,Class BasicStatusManager,protected final LogbackLock statusListLock,
6776,logback/core,ch.qos.logback.core,Class BasicStatusManager,protected final List<StatusListener> statusListenerList,
6777,logback/core,ch.qos.logback.core,Class BasicStatusManager,public void add(Status newStatus),Add a new status object.
6778,logback/core,ch.qos.logback.core,Class BasicStatusManager,public List<Status> getCopyOfStatusList(),Description copied from interface: StatusManager
6779,logback/core,ch.qos.logback.core,Class BasicStatusManager,public void clear(),Description copied from interface: StatusManager
6780,logback/core,ch.qos.logback.core,Class BasicStatusManager,public int getLevel(),
6781,logback/core,ch.qos.logback.core,Class BasicStatusManager,public int getCount(),Description copied from interface: StatusManager
6782,logback/core,ch.qos.logback.core,Class BasicStatusManager,public boolean add(StatusListener listener),This implementation does not allow duplicate installations of OnConsoleStatusListener
6783,logback/core,ch.qos.logback.core,Class BasicStatusManager,public void remove(StatusListener listener),Description copied from interface: StatusManager
6784,util/beans,ch.qos.logback.core.joran.util.beans,Class BeanDescription,public Class<?> getClazz(),
6785,util/beans,ch.qos.logback.core.joran.util.beans,Class BeanDescription,"public Map<String,Method> getPropertyNameToGetter()",
6786,util/beans,ch.qos.logback.core.joran.util.beans,Class BeanDescription,"public Map<String,Method> getPropertyNameToSetter()",
6787,util/beans,ch.qos.logback.core.joran.util.beans,Class BeanDescription,public Method getGetter(String propertyName),
6788,util/beans,ch.qos.logback.core.joran.util.beans,Class BeanDescription,public Method getSetter(String propertyName),
6789,util/beans,ch.qos.logback.core.joran.util.beans,Class BeanDescription,"public Map<String,Method> getPropertyNameToAdder()",
6790,util/beans,ch.qos.logback.core.joran.util.beans,Class BeanUtil,public static final String PREFIX_GETTER_IS,
6791,util/beans,ch.qos.logback.core.joran.util.beans,Class BeanUtil,public static final String PREFIX_GETTER_GET,
6792,util/beans,ch.qos.logback.core.joran.util.beans,Class BeanUtil,public static final String PREFIX_SETTER,
6793,util/beans,ch.qos.logback.core.joran.util.beans,Class BeanUtil,public static boolean isAdder(Method method),
6794,util/beans,ch.qos.logback.core.joran.util.beans,Class BeanUtil,public static boolean isGetter(Method method),
6795,util/beans,ch.qos.logback.core.joran.util.beans,Class BeanUtil,public static boolean isSetter(Method method),
6796,util/beans,ch.qos.logback.core.joran.util.beans,Class BeanUtil,public static String getPropertyName(Method method),
6797,core/db,ch.qos.logback.core.db,Class BindDataSourceToJNDIAction,"public void begin(InterpretationContext ec, String localName, Attributes attributes)",Instantiates an a data source and bind it to JNDI Most of the required parameters are placed in the ec.substitutionProperties
6798,joran/event,ch.qos.logback.core.joran.event,Class BodyEvent,public String getText(),Always trim trailing spaces from the body text.
6799,joran/event,ch.qos.logback.core.joran.event,Class BodyEvent,public String toString(),
6800,event/stax,ch.qos.logback.core.joran.event.stax,Class BodyEvent,public String getText(),
6801,core/encoder,ch.qos.logback.core.encoder,Class ByteArrayUtil,public static String toHexString(byte[] ba),
6802,core/util,ch.qos.logback.core.util,Class CachingDateFormatter,public final String format(long now),
6803,classic/spi,ch.qos.logback.classic.spi,Class CallerData,public static final String NA,"When caller information is not available this constant is used for file name, method name, etc."
6804,classic/spi,ch.qos.logback.classic.spi,Class CallerData,public static final int LINE_NA,When caller information is not available this constant is used for the line number.
6805,classic/spi,ch.qos.logback.classic.spi,Class CallerData,public static final String CALLER_DATA_NA,
6806,classic/spi,ch.qos.logback.classic.spi,Class CallerData,"public static StackTraceElement[] extract(Throwable t, String fqnOfInvokingClass, int maxDepth, List<String> frameworkPackageList)",Extract caller data information as an array based on a Throwable passed as parameter
6807,classic/pattern,ch.qos.logback.classic.pattern,Class CallerDataConverter,public static final String DEFAULT_CALLER_LINE_PREFIX,
6808,classic/pattern,ch.qos.logback.classic.pattern,Class CallerDataConverter,public void start(),Description copied from class: DynamicConverter
6809,classic/pattern,ch.qos.logback.classic.pattern,Class CallerDataConverter,public String convert(ILoggingEvent le),Description copied from class: Converter
6810,classic/pattern,ch.qos.logback.classic.pattern,Class CallerDataConverter,protected String getCallerLinePrefix(),
6811,logback/classic,ch.qos.logback.classic,Class ClassicConstants,public static final String USER_MDC_KEY,
6812,logback/classic,ch.qos.logback.classic,Class ClassicConstants,public static final String LOGBACK_CONTEXT_SELECTOR,
6813,logback/classic,ch.qos.logback.classic,Class ClassicConstants,public static final String CONFIG_FILE_PROPERTY,
6814,logback/classic,ch.qos.logback.classic,Class ClassicConstants,public static final String JNDI_CONFIGURATION_RESOURCE,
6815,logback/classic,ch.qos.logback.classic,Class ClassicConstants,public static final String JNDI_CONTEXT_NAME,
6816,logback/classic,ch.qos.logback.classic,Class ClassicConstants,public static final int MAX_DOTS,The maximum number of package separators (dots) that abbreviation algorithms can handle. Class or logger names with more separators will have their first MAX_DOTS parts shortened.
6817,logback/classic,ch.qos.logback.classic,Class ClassicConstants,public static final int DEFAULT_MAX_CALLEDER_DATA_DEPTH,The default stack data depth computed during caller data extraction.
6818,logback/classic,ch.qos.logback.classic,Class ClassicConstants,public static final String REQUEST_REMOTE_HOST_MDC_KEY,
6819,logback/classic,ch.qos.logback.classic,Class ClassicConstants,public static final String REQUEST_USER_AGENT_MDC_KEY,
6820,logback/classic,ch.qos.logback.classic,Class ClassicConstants,public static final String REQUEST_REQUEST_URI,
6821,logback/classic,ch.qos.logback.classic,Class ClassicConstants,public static final String REQUEST_QUERY_STRING,
6822,logback/classic,ch.qos.logback.classic,Class ClassicConstants,public static final String REQUEST_REQUEST_URL,
6823,logback/classic,ch.qos.logback.classic,Class ClassicConstants,public static final String REQUEST_METHOD,
6824,logback/classic,ch.qos.logback.classic,Class ClassicConstants,public static final String REQUEST_X_FORWARDED_FOR,
6825,logback/classic,ch.qos.logback.classic,Class ClassicConstants,public static final String GAFFER_CONFIGURATOR_FQCN,
6826,logback/classic,ch.qos.logback.classic,Class ClassicConstants,public static final String FINALIZE_SESSION,
6827,classic/spi,ch.qos.logback.classic.spi,Class ClassPackagingData,"public ClassPackagingData(String codeLocation, String version)",
6828,classic/spi,ch.qos.logback.classic.spi,Class ClassPackagingData,public String getCodeLocation(),
6829,classic/spi,ch.qos.logback.classic.spi,Class ClassPackagingData,public String getVersion(),
6830,classic/spi,ch.qos.logback.classic.spi,Class ClassPackagingData,public boolean isExact(),
6831,classic/spi,ch.qos.logback.classic.spi,Class ClassPackagingData,public int hashCode(),
6832,core/util,ch.qos.logback.core.util,Class CloseUtil,public static void closeQuietly(Closeable closeable),Closes a closeable while suppressing any IOException that occurs.
6833,core/util,ch.qos.logback.core.util,Class CloseUtil,public static void closeQuietly(Socket socket),Closes a socket while suppressing any IOException that occurs.
6834,db/names,ch.qos.logback.classic.db.names,Enum ColumnName,public static final ColumnName EVENT_ID,
6835,db/names,ch.qos.logback.classic.db.names,Enum ColumnName,public static final ColumnName TIMESTMP,
6836,db/names,ch.qos.logback.classic.db.names,Enum ColumnName,public static final ColumnName FORMATTED_MESSAGE,
6837,db/names,ch.qos.logback.classic.db.names,Enum ColumnName,public static final ColumnName LOGGER_NAME,
6838,db/names,ch.qos.logback.classic.db.names,Enum ColumnName,public static final ColumnName LEVEL_STRING,
6839,db/names,ch.qos.logback.classic.db.names,Enum ColumnName,public static final ColumnName THREAD_NAME,
6840,db/names,ch.qos.logback.classic.db.names,Enum ColumnName,public static final ColumnName REFERENCE_FLAG,
6841,db/names,ch.qos.logback.classic.db.names,Enum ColumnName,public static final ColumnName ARG0,
6842,db/names,ch.qos.logback.classic.db.names,Enum ColumnName,public static final ColumnName ARG1,
6843,db/names,ch.qos.logback.classic.db.names,Enum ColumnName,public static final ColumnName ARG2,
6844,db/names,ch.qos.logback.classic.db.names,Enum ColumnName,public static final ColumnName ARG3,
6845,db/names,ch.qos.logback.classic.db.names,Enum ColumnName,public static final ColumnName CALLER_FILENAME,
6846,db/names,ch.qos.logback.classic.db.names,Enum ColumnName,public static final ColumnName CALLER_CLASS,
6847,db/names,ch.qos.logback.classic.db.names,Enum ColumnName,public static final ColumnName CALLER_METHOD,
6848,db/names,ch.qos.logback.classic.db.names,Enum ColumnName,public static final ColumnName CALLER_LINE,
6849,db/names,ch.qos.logback.classic.db.names,Enum ColumnName,public static final ColumnName MAPPED_KEY,
6850,db/names,ch.qos.logback.classic.db.names,Enum ColumnName,public static final ColumnName MAPPED_VALUE,
6851,db/names,ch.qos.logback.classic.db.names,Enum ColumnName,public static final ColumnName I,
6852,db/names,ch.qos.logback.classic.db.names,Enum ColumnName,public static ColumnName[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (ColumnName c : ColumnName.values())  System.out.println(c);"
6853,core/spi,ch.qos.logback.core.spi,Interface ComponentTracker<C>,static final int DEFAULT_TIMEOUT,The default timeout duration is 30 minutes
6854,core/spi,ch.qos.logback.core.spi,Interface ComponentTracker<C>,int getComponentCount(),Returns the number of components tracked.
6855,core/spi,ch.qos.logback.core.spi,Interface ComponentTracker<C>,C find(String key),"Find the component identified by 'key', without updating the timestamp. Returns null if no corresponding component could be found."
6856,core/spi,ch.qos.logback.core.spi,Interface ComponentTracker<C>,"C getOrCreate(String key, long timestamp)","Get the component identified by 'key', updating its timestamp in the process. If the corresponding component could not be found, it is created."
6857,core/spi,ch.qos.logback.core.spi,Interface ComponentTracker<C>,void removeStaleComponents(long now),"Remove components which are deemed stale. Components which have not been accessed for more than a user-specified duration are deemed stale. If the number of components exceeds, getComponentCount(), components in excess will be removed.Depending on the component type, components will be cleared or stopped (as appropriate) right before removal."
6858,core/spi,ch.qos.logback.core.spi,Interface ComponentTracker<C>,void endOfLife(String key),Mark component identified by 'key' as having reached its end-of-life. End-of-lifed components will linger for a few more seconds before being removed.
6859,core/spi,ch.qos.logback.core.spi,Interface ComponentTracker<C>,Collection<C> allComponents(),Returns the collection of all components tracked by this instance.
6860,core/pattern,ch.qos.logback.core.pattern,Class CompositeConverter<E>,public String convert(E event),Description copied from class: Converter
6861,core/pattern,ch.qos.logback.core.pattern,Class CompositeConverter<E>,"protected abstract String transform(E event, String in)",
6862,core/pattern,ch.qos.logback.core.pattern,Class CompositeConverter<E>,public Converter<E> getChildConverter(),
6863,core/pattern,ch.qos.logback.core.pattern,Class CompositeConverter<E>,public void setChildConverter(Converter<E> child),
6864,pattern/parser,ch.qos.logback.core.pattern.parser,Class CompositeNode,public Node getChildNode(),
6865,pattern/parser,ch.qos.logback.core.pattern.parser,Class CompositeNode,public void setChildNode(Node childNode),
6866,pattern/parser,ch.qos.logback.core.pattern.parser,Class CompositeNode,public boolean equals(Object o),
6867,pattern/parser,ch.qos.logback.core.pattern.parser,Class CompositeNode,public int hashCode(),
6868,rolling/helper,ch.qos.logback.core.rolling.helper,Enum CompressionMode,public static final CompressionMode NONE,
6869,rolling/helper,ch.qos.logback.core.rolling.helper,Enum CompressionMode,public static final CompressionMode GZ,
6870,rolling/helper,ch.qos.logback.core.rolling.helper,Enum CompressionMode,public static CompressionMode[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (CompressionMode c : CompressionMode.values())  System.out.println(c);"
6871,rolling/helper,ch.qos.logback.core.rolling.helper,Class Compressor,"public void compress(String nameOfFile2Compress, String nameOfCompressedFile, String innerEntryName)",
6872,rolling/helper,ch.qos.logback.core.rolling.helper,Class Compressor,"public static String computeFileNameStrWithoutCompSuffix(String fileNamePatternStr, CompressionMode compressionMode)",
6873,rolling/helper,ch.qos.logback.core.rolling.helper,Class Compressor,public String toString(),
6874,onJoran/calculator,chapters.onJoran.calculator,Class ComputationAction1,"public void begin(InterpretationContext ec, String name, Attributes attributes)",Store the value of the name attribute for future use.
6875,onJoran/calculator,chapters.onJoran.calculator,Class ComputationAction2,"public void begin(InterpretationContext ec, String name, Attributes attributes)",Description copied from class: Action
6876,net/server,ch.qos.logback.core.net.server,Class ConcurrentServerRunner<T extends Client>,public boolean isRunning(),Gets a flag indicating whether the server is currently running.
6877,net/server,ch.qos.logback.core.net.server,Class ConcurrentServerRunner<T extends Client>,protected void setRunning(boolean running),
6878,net/server,ch.qos.logback.core.net.server,Class ConcurrentServerRunner<T extends Client>,public void stop() throws IOException,"Stops execution of the runner. This method must cause all I/O and thread resources associated with the runner to be released. If the receiver has not been started, this method must have no effect."
6879,net/server,ch.qos.logback.core.net.server,Class ConcurrentServerRunner<T extends Client>,public void accept(ClientVisitor<T> visitor),Presents each connected client to the given visitor.
6880,net/server,ch.qos.logback.core.net.server,Class ConcurrentServerRunner<T extends Client>,public void run(),
6881,net/ssl,ch.qos.logback.core.net.ssl,Class ConfigurableSSLServerSocketFactory,"public ServerSocket createServerSocket(int port, int backlog, InetAddress ifAddress) throws IOException",
6882,net/ssl,ch.qos.logback.core.net.ssl,Class ConfigurableSSLServerSocketFactory,"public ServerSocket createServerSocket(int port, int backlog) throws IOException",
6883,net/ssl,ch.qos.logback.core.net.ssl,Class ConfigurableSSLSocketFactory,"public Socket createSocket(InetAddress address, int port, InetAddress localAddress, int localPort) throws IOException",
6884,net/ssl,ch.qos.logback.core.net.ssl,Class ConfigurableSSLSocketFactory,"public Socket createSocket(InetAddress host, int port) throws IOException",
6885,net/ssl,ch.qos.logback.core.net.ssl,Class ConfigurableSSLSocketFactory,"public Socket createSocket(String host, int port, InetAddress localHost, int localPort) throws IOException, UnknownHostException",
6886,joran/action,ch.qos.logback.access.joran.action,Class ConfigurationAction,"public void begin(InterpretationContext ec, String name, Attributes attributes)",Description copied from class: Action
6887,joran/action,ch.qos.logback.classic.joran.action,Class ConfigurationAction,"public void begin(InterpretationContext ic, String name, Attributes attributes)",Description copied from class: Action
6888,joran/spi,ch.qos.logback.core.joran.spi,Class ConfigurationWatchList,public ConfigurationWatchList buildClone(),
6889,joran/spi,ch.qos.logback.core.joran.spi,Class ConfigurationWatchList,public void clear(),
6890,joran/spi,ch.qos.logback.core.joran.spi,Class ConfigurationWatchList,public void setMainURL(URL mainURL),The mainURL for the configuration file. Null values are allowed.
6891,joran/spi,ch.qos.logback.core.joran.spi,Class ConfigurationWatchList,public void addToWatchList(URL url),
6892,joran/spi,ch.qos.logback.core.joran.spi,Class ConfigurationWatchList,public URL getMainURL(),
6893,joran/spi,ch.qos.logback.core.joran.spi,Class ConfigurationWatchList,public List<File> getCopyOfFileWatchList(),
6894,joran/util,ch.qos.logback.core.joran.util,Class ConfigurationWatchListUtil,"public static void registerConfigurationWatchList(Context context, ConfigurationWatchList cwl)",
6895,joran/util,ch.qos.logback.core.joran.util,Class ConfigurationWatchListUtil,"public static void setMainWatchURL(Context context, URL url)",
6896,joran/util,ch.qos.logback.core.joran.util,Class ConfigurationWatchListUtil,public static URL getMainWatchURL(Context context),
6897,joran/util,ch.qos.logback.core.joran.util,Class ConfigurationWatchListUtil,"public static void addToWatchList(Context context, URL url)",
6898,core/db,ch.qos.logback.core.db,Interface ConnectionSource,Connection getConnection() throws SQLException,Obtain a Connection for use. The client is responsible for closing the Connection when it is no longer required.
6899,core/db,ch.qos.logback.core.db,Interface ConnectionSource,SQLDialectCode getSQLDialectCode(),Get the SQL dialect that should be used for this connection. Note that the dialect is not needed if the JDBC driver supports the getGeneratedKeys method.
6900,core/db,ch.qos.logback.core.db,Interface ConnectionSource,boolean supportsGetGeneratedKeys(),"If the connection supports the JDBC 3.0 getGeneratedKeys method, then we do not need any specific dialect support."
6901,core/db,ch.qos.logback.core.db,Class ConnectionSourceBase,public void discoverConnectionProperties(),Learn relevant information about this connection source.
6902,core/db,ch.qos.logback.core.db,Class ConnectionSourceBase,public final boolean supportsGetGeneratedKeys(),Does this connection support the JDBC Connection.getGeneratedKeys method?
6903,core/db,ch.qos.logback.core.db,Class ConnectionSourceBase,public final SQLDialectCode getSQLDialectCode(),Description copied from interface: ConnectionSource
6904,core/db,ch.qos.logback.core.db,Class ConnectionSourceBase,public final String getPassword(),Get the password for this connection source.
6905,core/db,ch.qos.logback.core.db,Class ConnectionSourceBase,public final void setPassword(String password),Sets the password.
6906,core/db,ch.qos.logback.core.db,Class ConnectionSourceBase,public final String getUser(),Get the user for this connection source.
6907,core/db,ch.qos.logback.core.db,Class ConnectionSourceBase,public final void setUser(String username),Sets the username.
6908,core/db,ch.qos.logback.core.db,Class ConnectionSourceBase,public final boolean supportsBatchUpdates(),Does this connection support batch updates?
6909,core/db,ch.qos.logback.core.db,Class ConnectionSourceBase,public boolean isStarted(),
6910,core/db,ch.qos.logback.core.db,Class ConnectionSourceBase,public void start(),
6911,logback/core,ch.qos.logback.core,Class ConsoleAppender<E>,protected ConsoleTarget target,
6912,logback/core,ch.qos.logback.core,Class ConsoleAppender<E>,public void setTarget(String value),Sets the value of the Target option. Recognized values are System.out and System.err. Any other value will be ignored.
6913,logback/core,ch.qos.logback.core,Class ConsoleAppender<E>,public String getTarget(),Returns the current value of the target property. The default value of the option is System.out. See also setTarget(java.lang.String).
6914,logback/core,ch.qos.logback.core,Class ConsoleAppender<E>,public void start(),Description copied from class: OutputStreamAppender
6915,logback/core,ch.qos.logback.core,Class ConsoleAppender<E>,public boolean isWithJansi(),
6916,joran/action,ch.qos.logback.classic.joran.action,Class ConsolePluginAction,"public void begin(InterpretationContext ec, String name, Attributes attributes) throws ActionException",Description copied from class: Action
6917,joran/spi,ch.qos.logback.core.joran.spi,Enum ConsoleTarget,public static final ConsoleTarget SystemOut,
6918,joran/spi,ch.qos.logback.core.joran.spi,Enum ConsoleTarget,public static ConsoleTarget[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (ConsoleTarget c : ConsoleTarget.values())  System.out.println(c);"
6919,joran/spi,ch.qos.logback.core.joran.spi,Enum ConsoleTarget,public static ConsoleTarget valueOf(String name),Returns the enum constant of this type with the specified name.The string must match exactly an identifier used to declare anenum constant in this type. (Extraneous whitespace characters are not permitted.)
6920,joran/spi,ch.qos.logback.core.joran.spi,Enum ConsoleTarget,public static ConsoleTarget findByName(String name),
6921,joran/spi,ch.qos.logback.core.joran.spi,Enum ConsoleTarget,public String getName(),
6922,joran/spi,ch.qos.logback.core.joran.spi,Enum ConsoleTarget,public OutputStream getStream(),
6923,core/util,ch.qos.logback.core.util,Class ContentTypeUtil,public static boolean isTextual(String contextType),
6924,logback/core,ch.qos.logback.core,Interface Context,StatusManager getStatusManager(),Return the StatusManager instance in use.
6925,logback/core,ch.qos.logback.core,Interface Context,Object getObject(String key),A Context can act as a store for various objects used by LOGBack components.
6926,logback/core,ch.qos.logback.core,Interface Context,"void putObject(String key, Object value)","Store an object under 'key'. If no object can be found, null is returned."
6927,logback/core,ch.qos.logback.core,Interface Context,String getProperty(String key),Get the property of this context.
6928,logback/core,ch.qos.logback.core,Interface Context,"void putProperty(String key, String value)",Set a property of this context.
6929,logback/core,ch.qos.logback.core,Interface Context,"Map<String,String> getCopyOfPropertyMap()",Get a copy of the property map
6930,logback/core,ch.qos.logback.core,Interface Context,String getName(),Contexts are named objects.
6931,logback/core,ch.qos.logback.core,Interface Context,void setName(String name),The name of the context can be set only once.
6932,logback/core,ch.qos.logback.core,Interface Context,long getBirthTime(),"The time at which this context was created, expressed in millisecond elapsed since the epoch (1.1.1970)."
6933,logback/core,ch.qos.logback.core,Interface Context,Object getConfigurationLock(),Object used for synchronization purposes. INTENDED FOR INTERNAL USAGE.
6934,logback/core,ch.qos.logback.core,Interface Context,ScheduledExecutorService getScheduledExecutorService(),Returns the ScheduledExecutorService for this context.
6935,logback/core,ch.qos.logback.core,Interface Context,ExecutorService getExecutorService(),Deprecated. use instead
6936,logback/core,ch.qos.logback.core,Interface Context,void register(LifeCycle component),Register a component that participates in the context's life cycle. All components registered via this method will be stopped and removed from the context when the context is reset.
6937,core/spi,ch.qos.logback.core.spi,Interface ContextAware,void setContext(Context context),
6938,core/spi,ch.qos.logback.core.spi,Interface ContextAware,Context getContext(),
6939,core/spi,ch.qos.logback.core.spi,Interface ContextAware,void addStatus(Status status),
6940,core/spi,ch.qos.logback.core.spi,Interface ContextAware,void addInfo(String msg),
6941,core/spi,ch.qos.logback.core.spi,Interface ContextAware,"void addInfo(String msg, Throwable ex)",
6942,core/spi,ch.qos.logback.core.spi,Interface ContextAware,void addWarn(String msg),
6943,core/spi,ch.qos.logback.core.spi,Interface ContextAware,"void addWarn(String msg, Throwable ex)",
6944,core/spi,ch.qos.logback.core.spi,Interface ContextAware,void addError(String msg),
6945,core/spi,ch.qos.logback.core.spi,Class ContextAwareBase,public ContextAwareBase(),
6946,core/spi,ch.qos.logback.core.spi,Class ContextAwareBase,public void setContext(Context context),
6947,core/spi,ch.qos.logback.core.spi,Class ContextAwareBase,public Context getContext(),
6948,core/spi,ch.qos.logback.core.spi,Class ContextAwareBase,public StatusManager getStatusManager(),
6949,core/spi,ch.qos.logback.core.spi,Class ContextAwareBase,protected Object getDeclaredOrigin(),The declared origin of status messages. By default 'this'. Derived classes may override this method to declare other origin.
6950,core/spi,ch.qos.logback.core.spi,Class ContextAwareBase,public void addStatus(Status status),
6951,core/spi,ch.qos.logback.core.spi,Class ContextAwareBase,public void addInfo(String msg),
6952,core/spi,ch.qos.logback.core.spi,Class ContextAwareBase,"public void addInfo(String msg, Throwable ex)",
6953,core/spi,ch.qos.logback.core.spi,Class ContextAwareBase,public void addWarn(String msg),
6954,core/spi,ch.qos.logback.core.spi,Class ContextAwareBase,"public void addWarn(String msg, Throwable ex)",
6955,core/spi,ch.qos.logback.core.spi,Class ContextAwareBase,public void addError(String msg),
6956,core/spi,ch.qos.logback.core.spi,Class ContextAwareImpl,protected Object getOrigin(),
6957,core/spi,ch.qos.logback.core.spi,Class ContextAwareImpl,public void setContext(Context context),
6958,core/spi,ch.qos.logback.core.spi,Class ContextAwareImpl,public Context getContext(),
6959,core/spi,ch.qos.logback.core.spi,Class ContextAwareImpl,public StatusManager getStatusManager(),
6960,core/spi,ch.qos.logback.core.spi,Class ContextAwareImpl,public void addStatus(Status status),
6961,core/spi,ch.qos.logback.core.spi,Class ContextAwareImpl,public void addInfo(String msg),
6962,core/spi,ch.qos.logback.core.spi,Class ContextAwareImpl,"public void addInfo(String msg, Throwable ex)",
6963,core/spi,ch.qos.logback.core.spi,Class ContextAwareImpl,public void addWarn(String msg),
6964,core/spi,ch.qos.logback.core.spi,Class ContextAwareImpl,"public void addWarn(String msg, Throwable ex)",
6965,core/spi,ch.qos.logback.core.spi,Class ContextAwareImpl,public void addError(String msg),
6966,logback/core,ch.qos.logback.core,Class ContextBase,public StatusManager getStatusManager(),Description copied from interface: Context
6967,logback/core,ch.qos.logback.core,Class ContextBase,public void setStatusManager(StatusManager statusManager),"Set the StatusManager for this context. Note that by default this context is initialized with a BasicStatusManager. A null value for the 'statusManager' argument is not allowed. A malicious attacker can set the status manager to a dummy instance, disabling internal error reporting."
6968,logback/core,ch.qos.logback.core,Class ContextBase,"public Map<String,String> getCopyOfPropertyMap()",Description copied from interface: Context
6969,logback/core,ch.qos.logback.core,Class ContextBase,"public void putProperty(String key, String val)",Description copied from interface: Context
6970,logback/core,ch.qos.logback.core,Class ContextBase,protected void initCollisionMaps(),
6971,logback/core,ch.qos.logback.core,Class ContextBase,public String getProperty(String key),"Given a key, return the corresponding property value. If invoked with the special key CONTEXT_NAME, the name of the context is returned."
6972,logback/core,ch.qos.logback.core,Class ContextBase,public Object getObject(String key),Description copied from interface: Context
6973,logback/core,ch.qos.logback.core,Class ContextBase,"public void putObject(String key, Object value)",Description copied from interface: Context
6974,logback/core,ch.qos.logback.core,Class ContextBase,public void removeObject(String key),
6975,logback/core,ch.qos.logback.core,Class ContextBase,public String getName(),Description copied from interface: Context
6976,logback/core,ch.qos.logback.core,Class ContextBase,public void start(),
6977,logback/core,ch.qos.logback.core,Class ContextBase,public void stop(),
6978,logback/core,ch.qos.logback.core,Class ContextBase,public boolean isStarted(),
6979,logback/core,ch.qos.logback.core,Class ContextBase,public void reset(),Clear the internal objectMap and all properties. Removes any registered shutdown hook.
6980,logback/core,ch.qos.logback.core,Class ContextBase,public void setName(String name) throws IllegalStateException,"The context name can be set only if it is not already set, or if the current name is the default context name, namely default, or if the current name and the old name are the same."
6981,logback/core,ch.qos.logback.core,Class ContextBase,public long getBirthTime(),Description copied from interface: Context
6982,logback/core,ch.qos.logback.core,Class ContextBase,public Object getConfigurationLock(),Description copied from interface: Context
6983,logback/core,ch.qos.logback.core,Class ContextBase,public ExecutorService getExecutorService(),Description copied from interface: Context
6984,logback/core,ch.qos.logback.core,Class ContextBase,public ScheduledExecutorService getScheduledExecutorService(),Description copied from interface: Context
6985,logback/core,ch.qos.logback.core,Class ContextBase,public void register(LifeCycle component),Description copied from interface: Context
6986,logback/core,ch.qos.logback.core,Class ContextBase,public String toString(),
6987,logback/core,ch.qos.logback.core,Class ContextBase,public void addScheduledFuture(ScheduledFuture<?> scheduledFuture),
6988,classic/sift,ch.qos.logback.classic.sift,Class ContextBasedDiscriminator,public String getDiscriminatingValue(ILoggingEvent event),Return the name of the current context name as found in the logging event.
6989,classic/sift,ch.qos.logback.classic.sift,Class ContextBasedDiscriminator,public String getKey(),Description copied from interface: Discriminator
6990,classic/sift,ch.qos.logback.classic.sift,Class ContextBasedDiscriminator,public void setKey(String key),
6991,classic/sift,ch.qos.logback.classic.sift,Class ContextBasedDiscriminator,public String getDefaultValue(),
6992,selector/servlet,ch.qos.logback.classic.selector.servlet,Class ContextDetachingSCL,public void contextInitialized(javax.servlet.ServletContextEvent arg0),
6993,classic/util,ch.qos.logback.classic.util,Class ContextInitializer,public static final String GROOVY_AUTOCONFIG_FILE,
6994,classic/util,ch.qos.logback.classic.util,Class ContextInitializer,public static final String AUTOCONFIG_FILE,
6995,classic/util,ch.qos.logback.classic.util,Class ContextInitializer,public static final String TEST_AUTOCONFIG_FILE,
6996,classic/util,ch.qos.logback.classic.util,Class ContextInitializer,public void configureByResource(URL url) throws JoranException,
6997,classic/util,ch.qos.logback.classic.util,Class ContextInitializer,public URL findURLOfDefaultConfigurationFile(boolean updateStatus),
6998,classic/selector,ch.qos.logback.classic.selector,Class ContextJNDISelector,public LoggerContext getDefaultLoggerContext(),
6999,classic/selector,ch.qos.logback.classic.selector,Class ContextJNDISelector,public LoggerContext detachLoggerContext(String loggerContextName),
7000,classic/selector,ch.qos.logback.classic.selector,Class ContextJNDISelector,public LoggerContext getLoggerContext(),
7001,classic/selector,ch.qos.logback.classic.selector,Class ContextJNDISelector,public List<String> getContextNames(),
7002,classic/selector,ch.qos.logback.classic.selector,Class ContextJNDISelector,public LoggerContext getLoggerContext(String name),
7003,classic/selector,ch.qos.logback.classic.selector,Class ContextJNDISelector,public int getCount(),Returns the number of managed contexts Used for testing purposes
7004,classic/selector,ch.qos.logback.classic.selector,Class ContextJNDISelector,public void setLocalContext(LoggerContext context),"These methods are used by the LoggerContextFilter. They provide a way to tell the selector which context to use, thus saving the cost of a JNDI call at each new request."
7005,joran/action,ch.qos.logback.classic.joran.action,Class ContextNameAction,"public void begin(InterpretationContext ec, String name, Attributes attributes)",Description copied from class: Action
7006,joran/action,ch.qos.logback.classic.joran.action,Class ContextNameAction,"public void body(InterpretationContext ec, String body)",Description copied from class: Action
7007,joran/action,ch.qos.logback.core.joran.action,Class ContextPropertyAction,"public void begin(InterpretationContext ec, String name, Attributes attributes) throws ActionException",Description copied from class: Action
7008,classic/selector,ch.qos.logback.classic.selector,Interface ContextSelector,LoggerContext getLoggerContext(),
7009,classic/selector,ch.qos.logback.classic.selector,Interface ContextSelector,LoggerContext getLoggerContext(String name),
7010,classic/selector,ch.qos.logback.classic.selector,Interface ContextSelector,LoggerContext getDefaultLoggerContext(),
7011,classic/selector,ch.qos.logback.classic.selector,Interface ContextSelector,LoggerContext detachLoggerContext(String loggerContextName),
7012,classic/util,ch.qos.logback.classic.util,Class ContextSelectorStaticBinder,public static ContextSelectorStaticBinder getSingleton(),
7013,classic/util,ch.qos.logback.classic.util,Class ContextSelectorStaticBinder,"public void init(LoggerContext defaultLoggerContext, Object key) throws ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException",FOR INTERNAL USE. This method is intended for use by StaticLoggerBinder.
7014,core/util,ch.qos.logback.core.util,Class ContextUtil,public void addProperties(Properties props),
7015,core/util,ch.qos.logback.core.util,Class ContextUtil,"public static Map<String,String> getFilenameCollisionMap(Context context)",
7016,core/util,ch.qos.logback.core.util,Class ContextUtil,"public static Map<String,FileNamePattern> getFilenamePatternCollisionMap(Context context)",
7017,core/util,ch.qos.logback.core.util,Class ContextUtil,public void addGroovyPackages(List<String> frameworkPackages),
7018,joran/action,ch.qos.logback.core.joran.action,Class ConversionRuleAction,"public void begin(InterpretationContext ec, String localName, Attributes attributes)",Instantiates an layout of the given class and sets its name.
7019,joran/action,ch.qos.logback.core.joran.action,Class ConversionRuleAction,"public void end(InterpretationContext ec, String n)","Once the children elements are also parsed, now is the time to activate the appender options."
7020,core/pattern,ch.qos.logback.core.pattern,Class Converter<E>,public abstract String convert(E event),The convert method is responsible for extracting data from the event and storing it for later use by the write method.
7021,core/pattern,ch.qos.logback.core.pattern,Class Converter<E>,"public void write(StringBuilder buf, E event)","In its simplest incarnation, a convert simply appends the data extracted from the event to the buffer passed as parameter."
7022,core/pattern,ch.qos.logback.core.pattern,Class Converter<E>,public final void setNext(Converter<E> next),
7023,core/pattern,ch.qos.logback.core.pattern,Class ConverterUtil,public static <E> void startConverters(Converter<E> head),Start converters in the chain of converters.
7024,core/pattern,ch.qos.logback.core.pattern,Class ConverterUtil,public static <E> Converter<E> findTail(Converter<E> head),
7025,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String DISABLE_SERVLET_CONTAINER_INITIALIZER_KEY,
7026,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String STATUS_LISTENER_CLASS_KEY,
7027,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String SYSOUT,
7028,logback/core,ch.qos.logback.core,Class CoreConstants,public static final int CORE_POOL_SIZE,Number of idle threads to retain in a context's executor service.
7029,logback/core,ch.qos.logback.core,Class CoreConstants,public static final int SCHEDULED_EXECUTOR_POOL_SIZE,
7030,logback/core,ch.qos.logback.core,Class CoreConstants,public static final int MAX_POOL_SIZE,Maximum number of threads to allow in a context's executor service.
7031,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String LINE_SEPARATOR,
7032,logback/core,ch.qos.logback.core,Class CoreConstants,public static final int LINE_SEPARATOR_LEN,
7033,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String CODES_URL,
7034,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String MANUAL_URL_PREFIX,
7035,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String MORE_INFO_PREFIX,
7036,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String DEFAULT_CONTEXT_NAME,The default context name.
7037,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String PATTERN_RULE_REGISTRY,Customized pattern conversion rules are stored under this key in the Context object store.
7038,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String ISO8601_STR,
7039,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String ISO8601_PATTERN,
7040,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String DAILY_DATE_PATTERN,
7041,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String CLF_DATE_PATTERN,Time format used in Common Log Format
7042,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String EVALUATOR_MAP,The key used in locating the evaluator map in context's object map.
7043,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String FA_FILENAME_COLLISION_MAP,"Key used to locate a map Files used by FileAppender instances in context's object map. Said map consists of entries of the type (appender name, File option)"
7044,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String RFA_FILENAME_PATTERN_COLLISION_MAP,"Key used to locate a collision map for RollingFileAppender instances in context's object map. The collision map consists of entities of the type (appender name, FileNamePattern option)"
7045,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String VALUE_OF,"By convention, we assume that the static method named valueOf taking a string argument can restore a given object from its string representation."
7046,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String EMPTY_STRING,An empty string.
7047,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String[] EMPTY_STRING_ARRAY,An empty string array.
7048,logback/core,ch.qos.logback.core,Class CoreConstants,public static final Class<?>[] EMPTY_CLASS_ARRAY,An empty Class array.
7049,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String CAUSED_BY,
7050,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String SUPPRESSED,
7051,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String WRAPPED_BY,
7052,logback/core,ch.qos.logback.core,Class CoreConstants,public static final char PERCENT_CHAR,
7053,logback/core,ch.qos.logback.core,Class CoreConstants,public static final char LEFT_PARENTHESIS_CHAR,
7054,logback/core,ch.qos.logback.core,Class CoreConstants,public static final char RIGHT_PARENTHESIS_CHAR,
7055,logback/core,ch.qos.logback.core,Class CoreConstants,public static final char ESCAPE_CHAR,
7056,logback/core,ch.qos.logback.core,Class CoreConstants,public static final char CURLY_LEFT,
7057,logback/core,ch.qos.logback.core,Class CoreConstants,public static final char CURLY_RIGHT,
7058,logback/core,ch.qos.logback.core,Class CoreConstants,public static final char COMMA_CHAR,
7059,logback/core,ch.qos.logback.core,Class CoreConstants,public static final char DOUBLE_QUOTE_CHAR,
7060,logback/core,ch.qos.logback.core,Class CoreConstants,public static final char SINGLE_QUOTE_CHAR,
7061,logback/core,ch.qos.logback.core,Class CoreConstants,public static final char COLON_CHAR,
7062,logback/core,ch.qos.logback.core,Class CoreConstants,public static final char DASH_CHAR,
7063,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String DEFAULT_VALUE_SEPARATOR,
7064,logback/core,ch.qos.logback.core,Class CoreConstants,public static final int TABLE_ROW_LIMIT,"Number of rows before in an HTML table before, we close the table and create a new one"
7065,logback/core,ch.qos.logback.core,Class CoreConstants,public static final int OOS_RESET_FREQUENCY,
7066,logback/core,ch.qos.logback.core,Class CoreConstants,public static long REFERENCE_BIPS,The reference bogo instructions per second on Ceki's machine (Orion)
7067,logback/core,ch.qos.logback.core,Class CoreConstants,public static final int MAX_ERROR_COUNT,
7068,logback/core,ch.qos.logback.core,Class CoreConstants,public static final char DOT,
7069,logback/core,ch.qos.logback.core,Class CoreConstants,public static final char TAB,
7070,logback/core,ch.qos.logback.core,Class CoreConstants,public static final char DOLLAR,
7071,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String SEE_FNP_NOT_SET,
7072,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String SEE_MISSING_INTEGER_TOKEN,
7073,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String CONFIGURATION_WATCH_LIST,
7074,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String CONFIGURATION_WATCH_LIST_RESET_X,
7075,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String SAFE_JORAN_CONFIGURATION,
7076,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String XML_PARSING,
7077,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String SHUTDOWN_HOOK_THREAD,
7078,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String HOSTNAME_KEY,The key under which the local host name is registered in the logger context.
7079,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String UNKNOWN_LOCALHOST,
7080,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String CONTEXT_NAME_KEY,The key under which the current context name is registered in the logger context.
7081,logback/core,ch.qos.logback.core,Class CoreConstants,public static final int BYTES_PER_INT,
7082,logback/core,ch.qos.logback.core,Class CoreConstants,public static final long MILLIS_IN_ONE_SECOND,
7083,logback/core,ch.qos.logback.core,Class CoreConstants,public static final long MILLIS_IN_ONE_MINUTE,
7084,logback/core,ch.qos.logback.core,Class CoreConstants,public static final long MILLIS_IN_ONE_HOUR,
7085,logback/core,ch.qos.logback.core,Class CoreConstants,public static final long MILLIS_IN_ONE_DAY,
7086,logback/core,ch.qos.logback.core,Class CoreConstants,public static final long MILLIS_IN_ONE_WEEK,
7087,logback/core,ch.qos.logback.core,Class CoreConstants,public static final int SECONDS_TO_WAIT_FOR_COMPRESSION_JOBS,The number of seconds to wait for compression jobs to finish.
7088,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String CONTEXT_SCOPE_VALUE,
7089,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String RESET_MSG_PREFIX,
7090,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String JNDI_COMP_PREFIX,
7091,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String UNDEFINED_PROPERTY_SUFFIX,
7092,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String LEFT_ACCOLADE,
7093,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String RIGHT_ACCOLADE,
7094,logback/core,ch.qos.logback.core,Class CoreConstants,public static final long UNBOUNDED_TOTAL_SIZE_CAP,
7095,logback/core,ch.qos.logback.core,Class CoreConstants,public static final int UNBOUND_HISTORY,
7096,logback/core,ch.qos.logback.core,Class CoreConstants,public static final String RECONFIGURE_ON_CHANGE_TASK,
7097,appenders/mail,chapters.appenders.mail,Class CounterBasedEvaluator,"public boolean evaluate(Object event) throws NullPointerException, EvaluationException",Description copied from interface: EventEvaluator
7098,appenders/mail,chapters.appenders.mail,Class CounterBasedEvaluator,public String getName(),Description copied from interface: EventEvaluator
7099,appenders/mail,chapters.appenders.mail,Class CounterBasedEvaluator,public void setName(String name),Description copied from interface: EventEvaluator
7100,appenders/mail,chapters.appenders.mail,Class CounterBasedEvaluator,public boolean isStarted(),
7101,appenders/mail,chapters.appenders.mail,Class CounterBasedEvaluator,public void start(),
7102,chapters/appenders,chapters.appenders,Class CountingConsoleAppender,public void setLimit(int limit),
7103,chapters/appenders,chapters.appenders,Class CountingConsoleAppender,public int getLimit(),
7104,chapters/appenders,chapters.appenders,Class CountingConsoleAppender,public void start(),
7105,chapters/appenders,chapters.appenders,Class CountingConsoleAppender,public void append(ILoggingEvent event),
7106,chapters/appenders,chapters.appenders,Class CountingConsoleAppender,public Layout<ILoggingEvent> getLayout(),
7107,access/filter,ch.qos.logback.access.filter,Class CountingFilter,public FilterReply decide(IAccessEvent event),Description copied from class: Filter
7108,access/filter,ch.qos.logback.access.filter,Class CountingFilter,public long getTotal(),
7109,access/filter,ch.qos.logback.access.filter,Class CountingFilter,public void start(),
7110,access/filter,ch.qos.logback.access.filter,Class CountingFilter,public void stop(),
7111,access/filter,ch.qos.logback.access.filter,Class CountingFilter,public String getDomain(),
7112,core/util,ch.qos.logback.core.util,Class COWArrayList<E>,public int size(),
7113,core/util,ch.qos.logback.core.util,Class COWArrayList<E>,public boolean isEmpty(),
7114,core/util,ch.qos.logback.core.util,Class COWArrayList<E>,public boolean contains(Object o),
7115,core/util,ch.qos.logback.core.util,Class COWArrayList<E>,public Iterator<E> iterator(),
7116,core/util,ch.qos.logback.core.util,Class COWArrayList<E>,public Object[] toArray(),
7117,core/util,ch.qos.logback.core.util,Class COWArrayList<E>,public <T> T[] toArray(T[] a),
7118,core/util,ch.qos.logback.core.util,Class COWArrayList<E>,public E[] asTypedArray(),"Return an array of type E[]. The returned array is intended to be iterated over. If the list is modified, subsequent calls to this method will return different/modified array instances."
7119,core/util,ch.qos.logback.core.util,Class COWArrayList<E>,public void addIfAbsent(E e),
7120,core/util,ch.qos.logback.core.util,Class COWArrayList<E>,public boolean add(E e),
7121,core/util,ch.qos.logback.core.util,Class COWArrayList<E>,public boolean remove(Object o),
7122,core/util,ch.qos.logback.core.util,Class COWArrayList<E>,public boolean containsAll(Collection<?> c),
7123,core/util,ch.qos.logback.core.util,Class COWArrayList<E>,public boolean addAll(Collection<? extends E> c),
7124,core/util,ch.qos.logback.core.util,Class COWArrayList<E>,"public boolean addAll(int index, Collection<? extends E> col)",
7125,core/util,ch.qos.logback.core.util,Class COWArrayList<E>,public boolean removeAll(Collection<?> col),
7126,core/util,ch.qos.logback.core.util,Class COWArrayList<E>,public boolean retainAll(Collection<?> col),
7127,core/util,ch.qos.logback.core.util,Class COWArrayList<E>,public void clear(),
7128,core/util,ch.qos.logback.core.util,Class COWArrayList<E>,public E get(int index),
7129,core/util,ch.qos.logback.core.util,Class COWArrayList<E>,"public E set(int index, E element)",
7130,core/util,ch.qos.logback.core.util,Class COWArrayList<E>,"public void add(int index, E element)",
7131,core/util,ch.qos.logback.core.util,Class COWArrayList<E>,public E remove(int index),
7132,core/util,ch.qos.logback.core.util,Class COWArrayList<E>,public int indexOf(Object o),
7133,core/util,ch.qos.logback.core.util,Class COWArrayList<E>,public int lastIndexOf(Object o),
7134,core/util,ch.qos.logback.core.util,Class COWArrayList<E>,public ListIterator<E> listIterator(),
7135,core/util,ch.qos.logback.core.util,Class COWArrayList<E>,public ListIterator<E> listIterator(int index),
7136,core/helpers,ch.qos.logback.core.helpers,Class CyclicBuffer<E>,public CyclicBuffer(int maxSize) throws IllegalArgumentException,Instantiate a new CyclicBuffer of at most maxSize events. The maxSize argument must a positive integer.
7137,core/helpers,ch.qos.logback.core.helpers,Class CyclicBuffer<E>,public void clear(),Clears the buffer and resets all attributes.
7138,core/helpers,ch.qos.logback.core.helpers,Class CyclicBuffer<E>,public void add(E event),Add an event as the last event in the buffer.
7139,core/helpers,ch.qos.logback.core.helpers,Class CyclicBuffer<E>,public E get(int i),"Get the ith oldest event currently in the buffer. If i is outside the range 0 to the number of elements currently in the buffer, then null is returned."
7140,core/helpers,ch.qos.logback.core.helpers,Class CyclicBuffer<E>,public int getMaxSize(),
7141,core/helpers,ch.qos.logback.core.helpers,Class CyclicBuffer<E>,public E get(),Get the oldest (first) element in the buffer. The oldest element is removed from the buffer.
7142,core/helpers,ch.qos.logback.core.helpers,Class CyclicBuffer<E>,public List<E> asList(),
7143,core/helpers,ch.qos.logback.core.helpers,Class CyclicBuffer<E>,public int length(),Get the number of elements in the buffer. This number is guaranteed to be in the range 0 to maxSize (inclusive).
7144,core/read,ch.qos.logback.core.read,Class CyclicBufferAppender<E>,public void start(),
7145,core/read,ch.qos.logback.core.read,Class CyclicBufferAppender<E>,public void stop(),
7146,core/read,ch.qos.logback.core.read,Class CyclicBufferAppender<E>,protected void append(E eventObject),
7147,core/read,ch.qos.logback.core.read,Class CyclicBufferAppender<E>,public int getLength(),
7148,core/read,ch.qos.logback.core.read,Class CyclicBufferAppender<E>,public E get(int i),
7149,core/read,ch.qos.logback.core.read,Class CyclicBufferAppender<E>,public void reset(),
7150,core/read,ch.qos.logback.core.read,Class CyclicBufferAppender<E>,public int getMaxSize(),Set the size of the cyclic buffer.
7151,core/spi,ch.qos.logback.core.spi,Class CyclicBufferTracker<E>,public int getBufferSize(),
7152,core/spi,ch.qos.logback.core.spi,Class CyclicBufferTracker<E>,public void setBufferSize(int bufferSize),
7153,core/spi,ch.qos.logback.core.spi,Class CyclicBufferTracker<E>,protected void processPriorToRemoval(CyclicBuffer<E> component),Description copied from class: AbstractComponentTracker
7154,core/spi,ch.qos.logback.core.spi,Class CyclicBufferTracker<E>,protected CyclicBuffer<E> buildComponent(String key),Description copied from class: AbstractComponentTracker
7155,core/db,ch.qos.logback.core.db,Class DataSourceConnectionSource,public void start(),
7156,core/db,ch.qos.logback.core.db,Class DataSourceConnectionSource,public Connection getConnection() throws SQLException,Description copied from interface: ConnectionSource
7157,core/db,ch.qos.logback.core.db,Class DataSourceConnectionSource,public DataSource getDataSource(),
7158,access/pattern,ch.qos.logback.access.pattern,Class DateConverter,public void start(),Description copied from class: DynamicConverter
7159,classic/pattern,ch.qos.logback.classic.pattern,Class DateConverter,public void start(),Description copied from class: DynamicConverter
7160,rolling/helper,ch.qos.logback.core.rolling.helper,Class DateTokenConverter<E>,public static final String CONVERTER_KEY,The conversion word/character with which this converter is registered.
7161,rolling/helper,ch.qos.logback.core.rolling.helper,Class DateTokenConverter<E>,public static final String AUXILIARY_TOKEN,
7162,rolling/helper,ch.qos.logback.core.rolling.helper,Class DateTokenConverter<E>,public void start(),Description copied from class: DynamicConverter
7163,rolling/helper,ch.qos.logback.core.rolling.helper,Class DateTokenConverter<E>,public String convert(Date date),
7164,rolling/helper,ch.qos.logback.core.rolling.helper,Class DateTokenConverter<E>,public String convert(Object o),Description copied from class: Converter
7165,rolling/helper,ch.qos.logback.core.rolling.helper,Class DateTokenConverter<E>,public String getDatePattern(),Return the date pattern.
7166,rolling/helper,ch.qos.logback.core.rolling.helper,Class DateTokenConverter<E>,public TimeZone getTimeZone(),
7167,rolling/helper,ch.qos.logback.core.rolling.helper,Class DateTokenConverter<E>,public boolean isApplicable(Object o),
7168,rolling/helper,ch.qos.logback.core.rolling.helper,Class DateTokenConverter<E>,public String toRegex(),
7169,access/db,ch.qos.logback.access.db,Class DBAppender,protected static final String insertSQL,
7170,access/db,ch.qos.logback.access.db,Class DBAppender,protected final String insertHeaderSQL,
7171,access/db,ch.qos.logback.access.db,Class DBAppender,"protected void subAppend(IAccessEvent event, Connection connection, PreparedStatement insertStatement) throws Throwable",
7172,access/db,ch.qos.logback.access.db,Class DBAppender,"protected void secondarySubAppend(IAccessEvent event, Connection connection, long eventId) throws Throwable",
7173,access/db,ch.qos.logback.access.db,Class DBAppender,protected Method getGeneratedKeysMethod(),
7174,access/db,ch.qos.logback.access.db,Class DBAppender,protected String getInsertSQL(),
7175,classic/db,ch.qos.logback.classic.db,Class DBAppender,protected String insertPropertiesSQL,
7176,classic/db,ch.qos.logback.classic.db,Class DBAppender,protected String insertExceptionSQL,
7177,classic/db,ch.qos.logback.classic.db,Class DBAppender,protected String insertSQL,
7178,classic/db,ch.qos.logback.classic.db,Class DBAppender,public void setDbNameResolver(DBNameResolver dbNameResolver),
7179,classic/db,ch.qos.logback.classic.db,Class DBAppender,public void start(),
7180,classic/db,ch.qos.logback.classic.db,Class DBAppender,"protected void subAppend(ILoggingEvent event, Connection connection, PreparedStatement insertStatement) throws Throwable",
7181,classic/db,ch.qos.logback.classic.db,Class DBAppender,"protected void secondarySubAppend(ILoggingEvent event, Connection connection, long eventId) throws Throwable",
7182,classic/db,ch.qos.logback.classic.db,Class DBAppender,protected Method getGeneratedKeysMethod(),
7183,classic/db,ch.qos.logback.classic.db,Class DBAppender,protected String getInsertSQL(),
7184,classic/db,ch.qos.logback.classic.db,Class DBAppender,"protected void insertProperties(Map<String,String> mergedMap, Connection connection, long eventId) throws SQLException",
7185,core/db,ch.qos.logback.core.db,Class DBAppenderBase<E>,protected ConnectionSource connectionSource,
7186,core/db,ch.qos.logback.core.db,Class DBAppenderBase<E>,protected boolean cnxSupportsGetGeneratedKeys,
7187,core/db,ch.qos.logback.core.db,Class DBAppenderBase<E>,protected boolean cnxSupportsBatchUpdates,
7188,core/db,ch.qos.logback.core.db,Class DBAppenderBase<E>,protected abstract Method getGeneratedKeysMethod(),
7189,core/db,ch.qos.logback.core.db,Class DBAppenderBase<E>,protected abstract String getInsertSQL(),
7190,core/db,ch.qos.logback.core.db,Class DBAppenderBase<E>,public void start(),
7191,core/db,ch.qos.logback.core.db,Class DBAppenderBase<E>,public ConnectionSource getConnectionSource(),
7192,core/db,ch.qos.logback.core.db,Class DBAppenderBase<E>,public void setConnectionSource(ConnectionSource connectionSource),
7193,core/db,ch.qos.logback.core.db,Class DBAppenderBase<E>,public void append(E eventObject),
7194,core/db,ch.qos.logback.core.db,Class DBAppenderBase<E>,"protected abstract void subAppend(E eventObject, Connection connection, PreparedStatement statement) throws Throwable",
7195,core/db,ch.qos.logback.core.db,Class DBAppenderBase<E>,"protected abstract void secondarySubAppend(E eventObject, Connection connection, long eventId) throws Throwable",
7196,core/db,ch.qos.logback.core.db,Class DBAppenderBase<E>,"protected long selectEventId(PreparedStatement insertStatement, Connection connection) throws SQLException, InvocationTargetException",
7197,classic/db,ch.qos.logback.classic.db,Class DBHelper,public static final short PROPERTIES_EXIST,
7198,core/db,ch.qos.logback.core.db,Class DBHelper,public static void closeConnection(Connection connection),
7199,db/names,ch.qos.logback.classic.db.names,Interface DBNameResolver,<N extends Enum<?>> String getTableName(N tableName),
7200,db/dialect,ch.qos.logback.core.db.dialect,Class DBUtil,public static SQLDialectCode discoverSQLDialect(DatabaseMetaData meta),
7201,db/dialect,ch.qos.logback.core.db.dialect,Class DBUtil,public static SQLDialect getDialectFromCode(SQLDialectCode sqlDialectType),
7202,db/dialect,ch.qos.logback.core.db.dialect,Class DBUtil,public boolean supportsGetGeneratedKeys(DatabaseMetaData meta),This method handles cases where the DatabaseMetaData.supportsGetGeneratedKeys() method is missing in the JDBC driver implementation.
7203,classic/selector,ch.qos.logback.classic.selector,Class DefaultContextSelector,public LoggerContext getLoggerContext(),
7204,classic/selector,ch.qos.logback.classic.selector,Class DefaultContextSelector,public LoggerContext getDefaultLoggerContext(),
7205,classic/selector,ch.qos.logback.classic.selector,Class DefaultContextSelector,public LoggerContext detachLoggerContext(String loggerContextName),
7206,classic/selector,ch.qos.logback.classic.selector,Class DefaultContextSelector,public List<String> getContextNames(),
7207,db/names,ch.qos.logback.classic.db.names,Class DefaultDBNameResolver,public <N extends Enum<?>> String getTableName(N tableName),
7208,core/sift,ch.qos.logback.core.sift,Class DefaultDiscriminator<E>,public String getDiscriminatingValue(E e),Description copied from interface: Discriminator
7209,core/util,ch.qos.logback.core.util,Class DefaultInvocationGate,public DefaultInvocationGate(),
7210,core/util,ch.qos.logback.core.util,Class DefaultInvocationGate,public final boolean isTooSoon(long currentTime),Description copied from interface: InvocationGate
7211,joran/spi,ch.qos.logback.core.joran.spi,Class DefaultNestedComponentRegistry,"public void add(Class<?> hostClass, String propertyName, Class<?> componentClass)",
7212,core/hook,ch.qos.logback.core.hook,Class DefaultShutdownHook,public Duration getDelay(),
7213,core/hook,ch.qos.logback.core.hook,Class DefaultShutdownHook,public void setDelay(Duration delay),The duration to wait before shutting down the current logback context.
7214,core/net,ch.qos.logback.core.net,Class DefaultSocketConnector,"public DefaultSocketConnector(InetAddress address, int port, long initialDelay, long retryDelay)",Constructs a new connector.
7215,core/net,ch.qos.logback.core.net,Class DefaultSocketConnector,public Socket call() throws InterruptedException,Loops until the desired connection is established and returns the resulting connector.
7216,core/net,ch.qos.logback.core.net,Class DefaultSocketConnector,public void setExceptionHandler(SocketConnector.ExceptionHandler exceptionHandler),Sets the connector's exception handler. The handler must be set before the SocketConnector.call() method is invoked.
7217,classic/html,ch.qos.logback.classic.html,Class DefaultThrowableRenderer,"public void render(StringBuilder sbuf, ILoggingEvent event)",
7218,core/rolling,ch.qos.logback.core.rolling,Class DefaultTimeBasedFileNamingAndTriggeringPolicy<E>,public void start(),
7219,core/rolling,ch.qos.logback.core.rolling,Class DefaultTimeBasedFileNamingAndTriggeringPolicy<E>,"public boolean isTriggeringEvent(File activeFile, E event)",Description copied from interface: TriggeringPolicy
7220,joran/action,ch.qos.logback.core.joran.action,Class DefinePropertyAction,"public void begin(InterpretationContext ec, String localName, Attributes attributes) throws ActionException",Description copied from class: Action
7221,core/sift,ch.qos.logback.core.sift,Interface Discriminator<E>,String getDiscriminatingValue(E e),Given event 'e' return a discriminating value.
7222,core/db,ch.qos.logback.core.db,Class DriverManagerConnectionSource,public void start(),
7223,core/db,ch.qos.logback.core.db,Class DriverManagerConnectionSource,public Connection getConnection() throws SQLException,Description copied from interface: ConnectionSource
7224,core/db,ch.qos.logback.core.db,Class DriverManagerConnectionSource,public String getUrl(),Returns the url.
7225,core/db,ch.qos.logback.core.db,Class DriverManagerConnectionSource,public void setUrl(String url),Sets the url.
7226,core/db,ch.qos.logback.core.db,Class DriverManagerConnectionSource,public String getDriverClass(),Returns the name of the driver class.
7227,classic/turbo,ch.qos.logback.classic.turbo,Class DuplicateMessageFilter,public static final int DEFAULT_CACHE_SIZE,The default cache size.
7228,classic/turbo,ch.qos.logback.classic.turbo,Class DuplicateMessageFilter,public static final int DEFAULT_ALLOWED_REPETITIONS,The default number of allows repetitions.
7229,classic/turbo,ch.qos.logback.classic.turbo,Class DuplicateMessageFilter,public int allowedRepetitions,
7230,classic/turbo,ch.qos.logback.classic.turbo,Class DuplicateMessageFilter,public void start(),
7231,classic/turbo,ch.qos.logback.classic.turbo,Class DuplicateMessageFilter,public void stop(),
7232,classic/turbo,ch.qos.logback.classic.turbo,Class DuplicateMessageFilter,"public FilterReply decide(org.slf4j.Marker marker, Logger logger, Level level, String format, Object[] params, Throwable t)",Description copied from class: TurboFilter
7233,classic/turbo,ch.qos.logback.classic.turbo,Class DuplicateMessageFilter,public int getAllowedRepetitions(),
7234,classic/turbo,ch.qos.logback.classic.turbo,Class DuplicateMessageFilter,public void setAllowedRepetitions(int allowedRepetitions),The allowed number of repetitions before
7235,classic/turbo,ch.qos.logback.classic.turbo,Class DuplicateMessageFilter,public int getCacheSize(),
7236,core/util,ch.qos.logback.core.util,Class Duration,public static Duration buildByMilliseconds(double value),
7237,core/util,ch.qos.logback.core.util,Class Duration,public static Duration buildBySeconds(double value),
7238,core/util,ch.qos.logback.core.util,Class Duration,public static Duration buildByMinutes(double value),
7239,core/util,ch.qos.logback.core.util,Class Duration,public static Duration buildByHours(double value),
7240,core/util,ch.qos.logback.core.util,Class Duration,public static Duration buildByDays(double value),
7241,core/util,ch.qos.logback.core.util,Class Duration,public static Duration buildUnbounded(),
7242,core/util,ch.qos.logback.core.util,Class Duration,public long getMilliseconds(),
7243,core/util,ch.qos.logback.core.util,Class Duration,public static Duration valueOf(String durationStr),
7244,core/pattern,ch.qos.logback.core.pattern,Class DynamicConverter<E>,public void start(),"Components that depend on options passed during configuration can override this method in order to make appropriate use of those options. For simpler components, the trivial implementation found in this abstract class will be sufficient."
7245,core/pattern,ch.qos.logback.core.pattern,Class DynamicConverter<E>,public void stop(),
7246,core/pattern,ch.qos.logback.core.pattern,Class DynamicConverter<E>,public boolean isStarted(),
7247,core/pattern,ch.qos.logback.core.pattern,Class DynamicConverter<E>,public void setOptionList(List<String> optionList),
7248,core/pattern,ch.qos.logback.core.pattern,Class DynamicConverter<E>,public String getFirstOption(),Return the first option passed to this component. The returned value may be null if there are no options.
7249,core/pattern,ch.qos.logback.core.pattern,Class DynamicConverter<E>,protected List<String> getOptionList(),
7250,core/pattern,ch.qos.logback.core.pattern,Class DynamicConverter<E>,public void setContext(Context context),
7251,core/pattern,ch.qos.logback.core.pattern,Class DynamicConverter<E>,public Context getContext(),
7252,core/pattern,ch.qos.logback.core.pattern,Class DynamicConverter<E>,public void addStatus(Status status),
7253,core/pattern,ch.qos.logback.core.pattern,Class DynamicConverter<E>,public void addInfo(String msg),
7254,core/pattern,ch.qos.logback.core.pattern,Class DynamicConverter<E>,"public void addInfo(String msg, Throwable ex)",
7255,core/pattern,ch.qos.logback.core.pattern,Class DynamicConverter<E>,public void addWarn(String msg),
7256,core/pattern,ch.qos.logback.core.pattern,Class DynamicConverter<E>,"public void addWarn(String msg, Throwable ex)",
7257,core/pattern,ch.qos.logback.core.pattern,Class DynamicConverter<E>,public void addError(String msg),
7258,classic/turbo,ch.qos.logback.classic.turbo,Class DynamicThresholdFilter,public String getKey(),Get the MDC key whose value will be used as a level threshold
7259,classic/turbo,ch.qos.logback.classic.turbo,Class DynamicThresholdFilter,public void setKey(String key),
7260,classic/turbo,ch.qos.logback.classic.turbo,Class DynamicThresholdFilter,public Level getDefaultThreshold(),Get the default threshold value when the MDC key is not set.
7261,classic/turbo,ch.qos.logback.classic.turbo,Class DynamicThresholdFilter,public void setDefaultThreshold(Level defaultThreshold),
7262,classic/turbo,ch.qos.logback.classic.turbo,Class DynamicThresholdFilter,public FilterReply getOnHigherOrEqual(),Get the FilterReply when the effective level is higher or equal to the level of current logging request
7263,classic/turbo,ch.qos.logback.classic.turbo,Class DynamicThresholdFilter,public void setOnHigherOrEqual(FilterReply onHigherOrEqual),
7264,classic/turbo,ch.qos.logback.classic.turbo,Class DynamicThresholdFilter,public FilterReply getOnLower(),Get the FilterReply when the effective level is lower than the level of current logging request
7265,classic/turbo,ch.qos.logback.classic.turbo,Class DynamicThresholdFilter,public void setOnLower(FilterReply onLower),
7266,classic/turbo,ch.qos.logback.classic.turbo,Class DynamicThresholdFilter,public void addMDCValueLevelPair(MDCValueLevelPair mdcValueLevelPair),Add a new MDCValuePair
7267,classic/turbo,ch.qos.logback.classic.turbo,Class DynamicThresholdFilter,public void start(),
7268,core/encoder,ch.qos.logback.core.encoder,Class EchoEncoder<E>,public byte[] encode(E event),Description copied from interface: Encoder
7269,core/encoder,ch.qos.logback.core.encoder,Class EchoEncoder<E>,public byte[] footerBytes(),Description copied from interface: Encoder
7270,joran/spi,ch.qos.logback.core.joran.spi,Class ElementPath,public ElementPath(),
7271,joran/spi,ch.qos.logback.core.joran.spi,Class ElementPath,public ElementPath(List<String> list),
7272,joran/spi,ch.qos.logback.core.joran.spi,Class ElementPath,public ElementPath duplicate(),
7273,joran/spi,ch.qos.logback.core.joran.spi,Class ElementPath,public boolean equals(Object o),
7274,joran/spi,ch.qos.logback.core.joran.spi,Class ElementPath,public List<String> getCopyOfPartList(),
7275,joran/spi,ch.qos.logback.core.joran.spi,Class ElementPath,public void push(String s),
7276,joran/spi,ch.qos.logback.core.joran.spi,Class ElementPath,public String get(int i),
7277,joran/spi,ch.qos.logback.core.joran.spi,Class ElementPath,public void pop(),
7278,joran/spi,ch.qos.logback.core.joran.spi,Class ElementPath,public String peekLast(),
7279,joran/spi,ch.qos.logback.core.joran.spi,Class ElementPath,public int size(),
7280,joran/spi,ch.qos.logback.core.joran.spi,Class ElementPath,protected String toStableString(),
7281,joran/spi,ch.qos.logback.core.joran.spi,Class ElementSelector,public ElementSelector(),
7282,joran/spi,ch.qos.logback.core.joran.spi,Class ElementSelector,public ElementSelector(List<String> list),
7283,joran/spi,ch.qos.logback.core.joran.spi,Class ElementSelector,public boolean fullPathMatch(ElementPath path),
7284,joran/spi,ch.qos.logback.core.joran.spi,Class ElementSelector,public int getTailMatchLength(ElementPath p),Returns the number of tail components that this pattern has in common with the pattern p passed as parameter. By tail components we mean the components at the end of the pattern.
7285,joran/spi,ch.qos.logback.core.joran.spi,Class ElementSelector,public boolean isContainedIn(ElementPath p),
7286,joran/spi,ch.qos.logback.core.joran.spi,Class ElementSelector,public int getPrefixMatchLength(ElementPath p),Returns the number of prefix components that this pattern has in common with the pattern p passed as parameter. By prefix components we mean the components at the beginning of the pattern.
7287,joran/spi,ch.qos.logback.core.joran.spi,Class ElementSelector,public boolean equals(Object o),
7288,core/encoder,ch.qos.logback.core.encoder,Interface Encoder<E>,byte[] headerBytes(),Get header bytes. This method is typically called upon opening of an output stream.
7289,core/encoder,ch.qos.logback.core.encoder,Interface Encoder<E>,byte[] encode(E event),Encode an event as bytes.
7290,core/encoder,ch.qos.logback.core.encoder,Class EncoderBase<E>,public boolean isStarted(),
7291,core/encoder,ch.qos.logback.core.encoder,Class EncoderBase<E>,public void start(),
7292,classic/pattern,ch.qos.logback.classic.pattern,Class EnsureExceptionHandling,"public void process(Context context, Converter<ILoggingEvent> head)","This implementation checks if any of the converters in the chain handles exceptions. If not, then this method adds a ExtendedThrowableProxyConverter instance to the end of the chain. This allows appenders using this layout to output exception information event if the user forgets to add %ex to the pattern. Note that the appenders defined in the Core package are not aware of exceptions nor LoggingEvents. If for some reason the user wishes to NOT print exceptions, then she can add %nopex to the pattern."
7293,classic/util,ch.qos.logback.classic.util,Class EnvUtil,public static boolean isGroovyAvailable(),
7294,core/util,ch.qos.logback.core.util,Class EnvUtil,public static int getJDKVersion(String javaVersionStr),
7295,core/util,ch.qos.logback.core.util,Class EnvUtil,public static boolean isJDK5(),
7296,core/util,ch.qos.logback.core.util,Class EnvUtil,public static boolean isJDK6OrHigher(),
7297,core/util,ch.qos.logback.core.util,Class EnvUtil,public static boolean isJDK7OrHigher(),
7298,core/util,ch.qos.logback.core.util,Class EnvUtil,public static boolean isJaninoAvailable(),
7299,core/status,ch.qos.logback.core.status,Class ErrorStatus,"public ErrorStatus(String msg, Object origin)",
7300,core/boolex,ch.qos.logback.core.boolex,Class EvaluationException,public EvaluationException(String msg),
7301,core/boolex,ch.qos.logback.core.boolex,Class EvaluationException,"public EvaluationException(String msg, Throwable cause)",
7302,core/filter,ch.qos.logback.core.filter,Class EvaluatorFilter<E>,public void start(),
7303,core/filter,ch.qos.logback.core.filter,Class EvaluatorFilter<E>,public EventEvaluator<E> getEvaluator(),
7304,core/filter,ch.qos.logback.core.filter,Class EvaluatorFilter<E>,public void setEvaluator(EventEvaluator<E> evaluator),
7305,classic/spi,ch.qos.logback.classic.spi,Class EventArgUtil,public static final Throwable extractThrowable(Object[] argArray),
7306,classic/spi,ch.qos.logback.classic.spi,Class EventArgUtil,public static Object[] trimmedCopy(Object[] argArray),This method should be called only if successfulExtraction(Throwable) returns true.
7307,classic/spi,ch.qos.logback.classic.spi,Class EventArgUtil,public static Object[] arrangeArguments(Object[] argArray),
7308,core/boolex,ch.qos.logback.core.boolex,Interface EventEvaluator<E>,"boolean evaluate(E event) throws NullPointerException, EvaluationException","Evaluates whether the event passed as parameter matches some user-specified criteria. The Evaluator is free to evaluate the event as it pleases. In particular, the evaluation results may depend on previous events."
7309,core/boolex,ch.qos.logback.core.boolex,Interface EventEvaluator<E>,String getName(),Evaluators are named entities.
7310,core/boolex,ch.qos.logback.core.boolex,Class EventEvaluatorBase<E>,public String getName(),Description copied from interface: EventEvaluator
7311,core/boolex,ch.qos.logback.core.boolex,Class EventEvaluatorBase<E>,public void setName(String name),Description copied from interface: EventEvaluator
7312,core/boolex,ch.qos.logback.core.boolex,Class EventEvaluatorBase<E>,public boolean isStarted(),
7313,core/boolex,ch.qos.logback.core.boolex,Class EventEvaluatorBase<E>,public void start(),
7314,joran/spi,ch.qos.logback.core.joran.spi,Class EventPlayer,public List<SaxEvent> getCopyOfPlayerEventList(),Return a copy of the current event list in the player.
7315,joran/spi,ch.qos.logback.core.joran.spi,Class EventPlayer,public void play(List<SaxEvent> aSaxEventList),
7316,core/util,ch.qos.logback.core.util,Class ExecutorServiceUtil,public static ScheduledExecutorService newScheduledExecutorService(),
7317,core/util,ch.qos.logback.core.util,Class ExecutorServiceUtil,public static ExecutorService newExecutorService(),Creates an executor service suitable for use by logback components.
7318,classic/pattern,ch.qos.logback.classic.pattern,Class ExtendedThrowableProxyConverter,"protected void extraData(StringBuilder builder, StackTraceElementProxy step)",
7319,logback/core,ch.qos.logback.core,Class FileAppender<E>,public static final long DEFAULT_BUFFER_SIZE,
7320,logback/core,ch.qos.logback.core,Class FileAppender<E>,protected static String COLLISION_WITH_EARLIER_APPENDER_URL,
7321,logback/core,ch.qos.logback.core,Class FileAppender<E>,protected boolean append,"Append to or truncate the file? The default value for this variable is true, meaning that by default a FileAppender will append to an existing file and not truncate it."
7322,logback/core,ch.qos.logback.core,Class FileAppender<E>,public void setFile(String file),The File property takes a string value which should be the name of the file to append to.
7323,logback/core,ch.qos.logback.core,Class FileAppender<E>,public boolean isAppend(),Returns the value of the Append property.
7324,logback/core,ch.qos.logback.core,Class FileAppender<E>,public final String rawFileProperty(),This method is used by derived classes to obtain the raw file property. Regular users should not be calling this method.
7325,logback/core,ch.qos.logback.core,Class FileAppender<E>,public String getFile(),Returns the value of the File property. This method may be overridden by derived classes.
7326,logback/core,ch.qos.logback.core,Class FileAppender<E>,public void start(),"If the value of File is not null, then openFile(java.lang.String) is called with the values of File and Append properties."
7327,logback/core,ch.qos.logback.core,Class FileAppender<E>,public void stop(),Description copied from class: OutputStreamAppender
7328,logback/core,ch.qos.logback.core,Class FileAppender<E>,protected boolean checkForFileCollisionInPreviousFileAppenders(),
7329,logback/core,ch.qos.logback.core,Class FileAppender<E>,"protected void addErrorForCollision(String optionName, String optionValue, String appenderName)",
7330,logback/core,ch.qos.logback.core,Class FileAppender<E>,public void openFile(String file_name) throws IOException," Sets and opens the file where the log output will go. The specified file must be writable. If there was already an opened file, then the previous file is closed first. Do not use this method directly. To configure a FileAppender or one of its subclasses, set its properties one by one and then call start()."
7331,logback/core,ch.qos.logback.core,Class FileAppender<E>,public boolean isPrudent(),
7332,logback/core,ch.qos.logback.core,Class FileAppender<E>,public void setPrudent(boolean prudent),"When prudent is set to true, file appenders from multiple JVMs can safely write to the same file."
7333,logback/core,ch.qos.logback.core,Class FileAppender<E>,public void setAppend(boolean append),
7334,logback/core,ch.qos.logback.core,Class FileAppender<E>,public void setBufferSize(FileSize bufferSize),
7335,core/property,ch.qos.logback.core.property,Class FileExistsPropertyDefiner,public String getPath(),
7336,core/property,ch.qos.logback.core.property,Class FileExistsPropertyDefiner,public void setPath(String path),The path for the file to search for.
7337,rolling/helper,ch.qos.logback.core.rolling.helper,Class FileFilterUtil,public static void sortFileArrayByName(File[] fileArray),
7338,rolling/helper,ch.qos.logback.core.rolling.helper,Class FileFilterUtil,public static void reverseSortFileArrayByName(File[] fileArray),
7339,rolling/helper,ch.qos.logback.core.rolling.helper,Class FileFilterUtil,public static String afterLastSlash(String sregex),
7340,rolling/helper,ch.qos.logback.core.rolling.helper,Class FileFilterUtil,public static boolean isEmptyDirectory(File dir),
7341,rolling/helper,ch.qos.logback.core.rolling.helper,Class FileFilterUtil,"public static File[] filesInFolderMatchingStemRegex(File file, String stemRegex)",Return the set of files matching the stemRegex as found in 'directory'. A stemRegex does not contain any slash characters or any folder separators.
7342,rolling/helper,ch.qos.logback.core.rolling.helper,Class FileFilterUtil,"public static int findHighestCounter(File[] matchingFileArray, String stemRegex)",
7343,rolling/helper,ch.qos.logback.core.rolling.helper,Class FileFilterUtil,"public static int extractCounter(File file, String stemRegex)",
7344,rolling/helper,ch.qos.logback.core.rolling.helper,Class FileFilterUtil,public static String slashify(String in),
7345,rolling/helper,ch.qos.logback.core.rolling.helper,Class FileNamePattern,public String toString(),
7346,rolling/helper,ch.qos.logback.core.rolling.helper,Class FileNamePattern,public int hashCode(),
7347,rolling/helper,ch.qos.logback.core.rolling.helper,Class FileNamePattern,public boolean equals(Object obj),
7348,rolling/helper,ch.qos.logback.core.rolling.helper,Class FileNamePattern,public DateTokenConverter<Object> getPrimaryDateTokenConverter(),
7349,rolling/helper,ch.qos.logback.core.rolling.helper,Class FileNamePattern,public IntegerTokenConverter getIntegerTokenConverter(),
7350,rolling/helper,ch.qos.logback.core.rolling.helper,Class FileNamePattern,public boolean hasIntegerTokenCOnverter(),
7351,rolling/helper,ch.qos.logback.core.rolling.helper,Class FileNamePattern,public String convertMultipleArguments(Object... objectList),
7352,rolling/helper,ch.qos.logback.core.rolling.helper,Class FileNamePattern,public String convert(Object o),
7353,rolling/helper,ch.qos.logback.core.rolling.helper,Class FileNamePattern,public String convertInt(int i),
7354,rolling/helper,ch.qos.logback.core.rolling.helper,Class FileNamePattern,public void setPattern(String pattern),
7355,rolling/helper,ch.qos.logback.core.rolling.helper,Class FileNamePattern,public String getPattern(),
7356,rolling/helper,ch.qos.logback.core.rolling.helper,Class FileNamePattern,public String toRegexForFixedDate(Date date),"Given date, convert this instance to a regular expression. Used to compute sub-regex when the pattern has both %d and %i, and the date is known."
7357,core/util,ch.qos.logback.core.util,Class FileSize,public static final long KB_COEFFICIENT,
7358,core/util,ch.qos.logback.core.util,Class FileSize,public static final long MB_COEFFICIENT,
7359,core/util,ch.qos.logback.core.util,Class FileSize,public long getSize(),
7360,core/util,ch.qos.logback.core.util,Class FileSize,public static FileSize valueOf(String fileSizeStr),
7361,core/util,ch.qos.logback.core.util,Class FileUtil,public static URL fileToURL(File file),
7362,core/util,ch.qos.logback.core.util,Class FileUtil,public static boolean createMissingParentDirectories(File file),"Creates the parent directories of a file. If parent directories not specified in file's path, then nothing is done and this returns gracefully."
7363,core/util,ch.qos.logback.core.util,Class FileUtil,"public String resourceAsString(ClassLoader classLoader, String resourceName)",
7364,core/filter,ch.qos.logback.core.filter,Class Filter<E>,public void start(),
7365,core/filter,ch.qos.logback.core.filter,Class Filter<E>,public boolean isStarted(),
7366,core/filter,ch.qos.logback.core.filter,Class Filter<E>,public void stop(),
7367,core/filter,ch.qos.logback.core.filter,Class Filter<E>,public abstract FilterReply decide(E event),"If the decision is FilterReply.DENY, then the event will be dropped. If the decision is FilterReply.NEUTRAL, then the next filter, if any, will be invoked. If the decision is FilterReply.ACCEPT then the event will be logged without consulting with other filters in the chain."
7368,core/filter,ch.qos.logback.core.filter,Class Filter<E>,public String getName(),
7369,core/spi,ch.qos.logback.core.spi,Interface FilterAttachable<E>,void addFilter(Filter<E> newFilter),Add a filter.
7370,core/spi,ch.qos.logback.core.spi,Interface FilterAttachable<E>,void clearAllFilters(),
7371,core/spi,ch.qos.logback.core.spi,Interface FilterAttachable<E>,List<Filter<E>> getCopyOfAttachedFiltersList(),Get a copy of all the filters contained within this FilterAttachable object.
7372,core/spi,ch.qos.logback.core.spi,Class FilterAttachableImpl<E>,public void addFilter(Filter<E> newFilter),Add a filter to end of the filter list.
7373,core/spi,ch.qos.logback.core.spi,Class FilterAttachableImpl<E>,public void clearAllFilters(),Clear the filter chain
7374,core/spi,ch.qos.logback.core.spi,Class FilterAttachableImpl<E>,public FilterReply getFilterChainDecision(E event),"Loop through the filters in the list. As soon as a filter decides on ACCEPT or DENY, then that value is returned. If all of the filters return NEUTRAL, then NEUTRAL is returned."
7375,core/spi,ch.qos.logback.core.spi,Enum FilterReply,public static final FilterReply DENY,
7376,core/spi,ch.qos.logback.core.spi,Enum FilterReply,public static final FilterReply NEUTRAL,
7377,core/spi,ch.qos.logback.core.spi,Enum FilterReply,public static FilterReply[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (FilterReply c : FilterReply.values())  System.out.println(c);"
7378,core/util,ch.qos.logback.core.util,Class FixedDelay,"public FixedDelay(long initialDelay, long subsequentDelay)",Initialize a new FixedDelay with a given initialDelay and subsequentDelay.
7379,core/rolling,ch.qos.logback.core.rolling,Class FixedWindowRollingPolicy,public void start(),
7380,core/rolling,ch.qos.logback.core.rolling,Class FixedWindowRollingPolicy,protected int getMaxWindowSize(),"Subclasses can override this method to increase the max window size, if required. This is to address LOGBACK-266."
7381,core/rolling,ch.qos.logback.core.rolling,Class FixedWindowRollingPolicy,public void rollover() throws RolloverFailure,Description copied from interface: RollingPolicy
7382,core/rolling,ch.qos.logback.core.rolling,Class FixedWindowRollingPolicy,public String getActiveFileName(),Return the value of the parent's RawFile property.
7383,core/rolling,ch.qos.logback.core.rolling,Class FixedWindowRollingPolicy,public int getMaxIndex(),
7384,core/rolling,ch.qos.logback.core.rolling,Class FixedWindowRollingPolicy,public int getMinIndex(),
7385,core/rolling,ch.qos.logback.core.rolling,Class FixedWindowRollingPolicy,public void setMaxIndex(int maxIndex),
7386,pattern/color,ch.qos.logback.core.pattern.color,Class ForegroundCompositeConverterBase<E>,"protected String transform(E event, String in)",
7387,core/pattern,ch.qos.logback.core.pattern,Class FormatInfo,public FormatInfo(),
7388,core/pattern,ch.qos.logback.core.pattern,Class FormatInfo,"public FormatInfo(int min, int max)",
7389,core/pattern,ch.qos.logback.core.pattern,Class FormatInfo,public static FormatInfo valueOf(String str) throws IllegalArgumentException,"This method is used to parse a string such as 5, .7, 5.7 or -5.7 into a FormatInfo."
7390,core/pattern,ch.qos.logback.core.pattern,Class FormatInfo,public boolean isLeftPad(),
7391,core/pattern,ch.qos.logback.core.pattern,Class FormatInfo,public void setLeftPad(boolean leftAlign),
7392,core/pattern,ch.qos.logback.core.pattern,Class FormatInfo,public int getMax(),
7393,core/pattern,ch.qos.logback.core.pattern,Class FormatInfo,public void setMax(int max),
7394,core/pattern,ch.qos.logback.core.pattern,Class FormatInfo,public int getMin(),
7395,core/pattern,ch.qos.logback.core.pattern,Class FormatInfo,public void setMin(int min),
7396,core/pattern,ch.qos.logback.core.pattern,Class FormatInfo,public boolean isLeftTruncate(),
7397,core/pattern,ch.qos.logback.core.pattern,Class FormatInfo,public void setLeftTruncate(boolean leftTruncate),
7398,core/pattern,ch.qos.logback.core.pattern,Class FormatInfo,public boolean equals(Object o),
7399,core/pattern,ch.qos.logback.core.pattern,Class FormatInfo,public int hashCode(),
7400,core/pattern,ch.qos.logback.core.pattern,Class FormattingConverter<E>,public final FormatInfo getFormattingInfo(),
7401,core/pattern,ch.qos.logback.core.pattern,Class FormattingConverter<E>,public final void setFormattingInfo(FormatInfo formattingInfo),
7402,pattern/parser,ch.qos.logback.core.pattern.parser,Class FormattingNode,public FormatInfo getFormatInfo(),
7403,pattern/parser,ch.qos.logback.core.pattern.parser,Class FormattingNode,public void setFormatInfo(FormatInfo formatInfo),
7404,pattern/parser,ch.qos.logback.core.pattern.parser,Class FormattingNode,public boolean equals(Object o),
7405,core/joran,ch.qos.logback.core.joran,Class GenericConfigurator,public final void doConfigure(URL url) throws JoranException,
7406,core/joran,ch.qos.logback.core.joran,Class GenericConfigurator,public final void doConfigure(String filename) throws JoranException,
7407,core/joran,ch.qos.logback.core.joran,Class GenericConfigurator,public final void doConfigure(File file) throws JoranException,
7408,core/joran,ch.qos.logback.core.joran,Class GenericConfigurator,"public static void informContextOfURLUsedForConfiguration(Context context, URL url)",
7409,core/joran,ch.qos.logback.core.joran,Class GenericConfigurator,public final void doConfigure(InputStream inputStream) throws JoranException,
7410,core/joran,ch.qos.logback.core.joran,Class GenericConfigurator,"public final void doConfigure(InputStream inputStream, String systemId) throws JoranException",
7411,core/joran,ch.qos.logback.core.joran,Class GenericConfigurator,protected BeanDescriptionCache getBeanDescriptionCache(),
7412,core/joran,ch.qos.logback.core.joran,Class GenericConfigurator,protected abstract void addInstanceRules(RuleStore rs),
7413,core/joran,ch.qos.logback.core.joran,Class GenericConfigurator,protected abstract void addImplicitRules(Interpreter interpreter),
7414,core/joran,ch.qos.logback.core.joran,Class GenericConfigurator,protected void addDefaultNestedComponentRegistryRules(DefaultNestedComponentRegistry registry),
7415,core/joran,ch.qos.logback.core.joran,Class GenericConfigurator,protected ElementPath initialElementPath(),
7416,core/joran,ch.qos.logback.core.joran,Class GenericConfigurator,protected void buildInterpreter(),
7417,core/joran,ch.qos.logback.core.joran,Class GenericConfigurator,public final void doConfigure(InputSource inputSource) throws JoranException,
7418,core/joran,ch.qos.logback.core.joran,Class GenericConfigurator,public void doConfigure(List<SaxEvent> eventList) throws JoranException,
7419,core/joran,ch.qos.logback.core.joran,Class GenericConfigurator,public void registerSafeConfiguration(List<SaxEvent> eventList),Register the current event list in currently in the interpreter as a safe configuration point.
7420,net/server,ch.qos.logback.classic.net.server,Class HardenedLoggingEventInputStream,public HardenedLoggingEventInputStream(InputStream is) throws IOException,
7421,core/net,ch.qos.logback.core.net,Class HardenedObjectInputStream,"public HardenedObjectInputStream(InputStream in, String[] whilelist) throws IOException",
7422,core/net,ch.qos.logback.core.net,Class HardenedObjectInputStream,"protected Class<?> resolveClass(ObjectStreamClass anObjectStreamClass) throws IOException, ClassNotFoundException",
7423,onJoran/helloWorld,chapters.onJoran.helloWorld,Class HelloWorldAction,"public void begin(InterpretationContext ec, String name, Attributes attributes)",Description copied from class: Action
7424,joran/spi,ch.qos.logback.core.joran.spi,Class HostClassAndPropertyDouble,public Class<?> getHostClass(),
7425,joran/spi,ch.qos.logback.core.joran.spi,Class HostClassAndPropertyDouble,public String getPropertyName(),
7426,joran/spi,ch.qos.logback.core.joran.spi,Class HostClassAndPropertyDouble,public int hashCode(),
7427,access/html,ch.qos.logback.access.html,Class HTMLLayout,"protected Map<String,String> getDefaultConverterMap()",
7428,classic/html,ch.qos.logback.classic.html,Class HTMLLayout,public void start(),Description copied from class: HTMLLayoutBase
7429,classic/html,ch.qos.logback.classic.html,Class HTMLLayout,"protected Map<String,String> getDefaultConverterMap()",
7430,classic/html,ch.qos.logback.classic.html,Class HTMLLayout,public String doLayout(ILoggingEvent event),Description copied from interface: Layout
7431,classic/html,ch.qos.logback.classic.html,Class HTMLLayout,public IThrowableRenderer<ILoggingEvent> getThrowableRenderer(),
7432,classic/html,ch.qos.logback.classic.html,Class HTMLLayout,public void setThrowableRenderer(IThrowableRenderer<ILoggingEvent> throwableRenderer),
7433,core/html,ch.qos.logback.core.html,Class HTMLLayoutBase<E>,protected String pattern,
7434,core/html,ch.qos.logback.core.html,Class HTMLLayoutBase<E>,protected Converter<E> head,
7435,core/html,ch.qos.logback.core.html,Class HTMLLayoutBase<E>,protected String title,
7436,core/html,ch.qos.logback.core.html,Class HTMLLayoutBase<E>,protected CssBuilder cssBuilder,
7437,core/html,ch.qos.logback.core.html,Class HTMLLayoutBase<E>,public void setPattern(String conversionPattern),Set the ConversionPattern option. This is the string which controls formatting and consists of a mix of literal content and conversion specifiers.
7438,core/html,ch.qos.logback.core.html,Class HTMLLayoutBase<E>,public String getPattern(),Returns the value of the ConversionPattern option.
7439,core/html,ch.qos.logback.core.html,Class HTMLLayoutBase<E>,public CssBuilder getCssBuilder(),
7440,core/html,ch.qos.logback.core.html,Class HTMLLayoutBase<E>,public void setCssBuilder(CssBuilder cssBuilder),
7441,core/html,ch.qos.logback.core.html,Class HTMLLayoutBase<E>,public void start(),Parses the pattern and creates the Converter linked list.
7442,core/html,ch.qos.logback.core.html,Class HTMLLayoutBase<E>,"protected abstract Map<String,String> getDefaultConverterMap()",
7443,core/html,ch.qos.logback.core.html,Class HTMLLayoutBase<E>,"public Map<String,String> getEffectiveConverterMap()",Returns a map where the default converter map is merged with the map contained in the context.
7444,core/html,ch.qos.logback.core.html,Class HTMLLayoutBase<E>,public void setTitle(String title),The Title option takes a String value. This option sets the document title of the generated HTML document. Defaults to 'Logback Log Messages'.
7445,core/html,ch.qos.logback.core.html,Class HTMLLayoutBase<E>,public String getTitle(),Returns the current value of the Title option.
7446,core/html,ch.qos.logback.core.html,Class HTMLLayoutBase<E>,public String getContentType(),"Returns the content type output by this layout, i.e text/html."
7447,core/html,ch.qos.logback.core.html,Class HTMLLayoutBase<E>,public String getFileHeader(),Returns appropriate HTML headers.
7448,core/html,ch.qos.logback.core.html,Class HTMLLayoutBase<E>,public String getPresentationHeader(),Description copied from interface: Layout
7449,core/html,ch.qos.logback.core.html,Class HTMLLayoutBase<E>,public String getPresentationFooter(),Description copied from interface: Layout
7450,core/html,ch.qos.logback.core.html,Class HTMLLayoutBase<E>,public String getFileFooter(),Returns the appropriate HTML footers.
7451,core/html,ch.qos.logback.core.html,Class HTMLLayoutBase<E>,protected void startNewTableIfLimitReached(StringBuilder sbuf),
7452,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,static final String NA,
7453,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,javax.servlet.http.HttpServletRequest getRequest(),Returns the underlying HttpServletRequest. After serialization the returned value will be null.
7454,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,javax.servlet.http.HttpServletResponse getResponse(),Returns the underlying HttpServletResponse. After serialization the returned value will be null.
7455,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,long getTimeStamp(),The number of milliseconds elapsed from 1/1/1970 until logging event was created.
7456,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,long getElapsedTime(),The time elapsed between receiving the request and logging it in milliseconds.
7457,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,long getElapsedSeconds(),The number of seconds elapsed between receiving the request and logging it.
7458,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,String getRequestURI(),
7459,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,String getRequestURL(),The first line of the request.
7460,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,String getRemoteHost(),
7461,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,String getRemoteUser(),
7462,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,String getProtocol(),
7463,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,String getMethod(),
7464,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,String getServerName(),
7465,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,String getSessionID(),
7466,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,void setThreadName(String threadName),
7467,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,String getThreadName(),
7468,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,String getQueryString(),
7469,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,String getRemoteAddr(),
7470,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,String getRequestHeader(String key),
7471,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,Enumeration<String> getRequestHeaderNames(),
7472,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,"Map<String,String> getRequestHeaderMap()",
7473,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,"Map<String,String[]> getRequestParameterMap()",
7474,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,String getAttribute(String key),
7475,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,String[] getRequestParameter(String key),
7476,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,String getCookie(String key),
7477,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,long getContentLength(),
7478,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,int getStatusCode(),
7479,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,String getRequestContent(),
7480,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,String getResponseContent(),
7481,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,int getLocalPort(),
7482,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,ServerAdapter getServerAdapter(),
7483,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,String getResponseHeader(String key),
7484,access/spi,ch.qos.logback.access.spi,Interface IAccessEvent,"Map<String,String> getResponseHeaderMap()",
7485,joran/action,ch.qos.logback.core.joran.action,Class IADataForComplexProperty,public AggregationType getAggregationType(),
7486,joran/action,ch.qos.logback.core.joran.action,Class IADataForComplexProperty,public Object getNestedComplexProperty(),
7487,joran/action,ch.qos.logback.core.joran.action,Class IADataForComplexProperty,public String getComplexPropertyName(),
7488,joran/conditional,ch.qos.logback.core.joran.conditional,Class IfAction,public static final String MISSING_JANINO_MSG,
7489,joran/conditional,ch.qos.logback.core.joran.conditional,Class IfAction,"public void begin(InterpretationContext ic, String name, Attributes attributes) throws ActionException",Description copied from class: Action
7490,joran/conditional,ch.qos.logback.core.joran.conditional,Class IfAction,"public void end(InterpretationContext ic, String name) throws ActionException",
7491,joran/conditional,ch.qos.logback.core.joran.conditional,Class IfAction,public void setThenSaxEventList(List<SaxEvent> thenSaxEventList),
7492,joran/conditional,ch.qos.logback.core.joran.conditional,Class IfAction,public void setElseSaxEventList(List<SaxEvent> elseSaxEventList),
7493,classic/spi,ch.qos.logback.classic.spi,Interface ILoggingEvent,String getThreadName(),
7494,classic/spi,ch.qos.logback.classic.spi,Interface ILoggingEvent,Level getLevel(),
7495,classic/spi,ch.qos.logback.classic.spi,Interface ILoggingEvent,String getMessage(),
7496,classic/spi,ch.qos.logback.classic.spi,Interface ILoggingEvent,Object[] getArgumentArray(),
7497,classic/spi,ch.qos.logback.classic.spi,Interface ILoggingEvent,String getFormattedMessage(),
7498,classic/spi,ch.qos.logback.classic.spi,Interface ILoggingEvent,String getLoggerName(),
7499,classic/spi,ch.qos.logback.classic.spi,Interface ILoggingEvent,LoggerContextVO getLoggerContextVO(),
7500,classic/spi,ch.qos.logback.classic.spi,Interface ILoggingEvent,IThrowableProxy getThrowableProxy(),
7501,classic/spi,ch.qos.logback.classic.spi,Interface ILoggingEvent,StackTraceElement[] getCallerData(),Return caller data associated with this event. Note that calling this event may trigger the computation of caller data.
7502,classic/spi,ch.qos.logback.classic.spi,Interface ILoggingEvent,boolean hasCallerData(),"If this event has caller data, then true is returned. Otherwise the returned value is null. Logback components wishing to use caller data if available without causing it to be computed can invoke this method before invoking getCallerData()."
7503,classic/spi,ch.qos.logback.classic.spi,Interface ILoggingEvent,org.slf4j.Marker getMarker(),
7504,classic/spi,ch.qos.logback.classic.spi,Interface ILoggingEvent,"Map<String,String> getMDCPropertyMap()",Returns the MDC map. The returned value can be an empty map but not null.
7505,classic/spi,ch.qos.logback.classic.spi,Interface ILoggingEvent,"Map<String,String> getMdc()",Deprecated. Replaced by [@link #getMDCPropertyMap}
7506,classic/spi,ch.qos.logback.classic.spi,Interface ILoggingEvent,long getTimeStamp(),
7507,classic/spi,ch.qos.logback.classic.spi,Interface ILoggingEvent,long getSequenceNumber(),"The sequence number associated with this event. Sequence numbers, if present, should be increasing monotonically."
7508,joran/action,ch.qos.logback.core.joran.action,Class IncludeAction,"public void begin(InterpretationContext ec, String name, Attributes attributes) throws ActionException",Description copied from class: Action
7509,core/status,ch.qos.logback.core.status,Class InfoStatus,"public InfoStatus(String msg, Object origin)",
7510,joran/action,ch.qos.logback.classic.joran.action,Class InsertFromJNDIAction,public static final String ENV_ENTRY_NAME_ATTR,
7511,joran/action,ch.qos.logback.classic.joran.action,Class InsertFromJNDIAction,"public void begin(InterpretationContext ec, String name, Attributes attributes)",Description copied from class: Action
7512,rolling/helper,ch.qos.logback.core.rolling.helper,Class IntegerTokenConverter,public String convert(int i),
7513,rolling/helper,ch.qos.logback.core.rolling.helper,Class IntegerTokenConverter,public String convert(Object o),Description copied from class: Converter
7514,joran/spi,ch.qos.logback.core.joran.spi,Class InterpretationContext,public DefaultNestedComponentRegistry getDefaultNestedComponentRegistry(),
7515,joran/spi,ch.qos.logback.core.joran.spi,Class InterpretationContext,"public Map<String,String> getCopyOfPropertyMap()",
7516,joran/spi,ch.qos.logback.core.joran.spi,Class InterpretationContext,public Locator getLocator(),
7517,joran/spi,ch.qos.logback.core.joran.spi,Class InterpretationContext,public Interpreter getJoranInterpreter(),
7518,joran/spi,ch.qos.logback.core.joran.spi,Class InterpretationContext,public Stack<Object> getObjectStack(),
7519,joran/spi,ch.qos.logback.core.joran.spi,Class InterpretationContext,public boolean isEmpty(),
7520,joran/spi,ch.qos.logback.core.joran.spi,Class InterpretationContext,public Object peekObject(),
7521,joran/spi,ch.qos.logback.core.joran.spi,Class InterpretationContext,public void pushObject(Object o),
7522,joran/spi,ch.qos.logback.core.joran.spi,Class InterpretationContext,public Object popObject(),
7523,joran/spi,ch.qos.logback.core.joran.spi,Class InterpretationContext,public Object getObject(int i),
7524,joran/spi,ch.qos.logback.core.joran.spi,Class InterpretationContext,"public Map<String,Object> getObjectMap()",
7525,joran/spi,ch.qos.logback.core.joran.spi,Class InterpretationContext,"public void addSubstitutionProperty(String key, String value)","Add a property to the properties of this execution context. If the property exists already, it is overwritten."
7526,joran/spi,ch.qos.logback.core.joran.spi,Class InterpretationContext,public void addSubstitutionProperties(Properties props),
7527,joran/spi,ch.qos.logback.core.joran.spi,Class InterpretationContext,public String getProperty(String key),"If a key is found in propertiesMap then return it. Otherwise, delegate to the context."
7528,joran/spi,ch.qos.logback.core.joran.spi,Class InterpretationContext,public String subst(String value),
7529,joran/spi,ch.qos.logback.core.joran.spi,Class InterpretationContext,public boolean isListenerListEmpty(),
7530,joran/spi,ch.qos.logback.core.joran.spi,Class InterpretationContext,public void addInPlayListener(InPlayListener ipl),
7531,joran/spi,ch.qos.logback.core.joran.spi,Class Interpreter,public EventPlayer getEventPlayer(),
7532,joran/spi,ch.qos.logback.core.joran.spi,Class Interpreter,"public void setInterpretationContextPropertiesMap(Map<String,String> propertiesMap)",
7533,joran/spi,ch.qos.logback.core.joran.spi,Class Interpreter,public InterpretationContext getExecutionContext(),Deprecated. replaced by getInterpretationContext()
7534,joran/spi,ch.qos.logback.core.joran.spi,Class Interpreter,public InterpretationContext getInterpretationContext(),
7535,joran/spi,ch.qos.logback.core.joran.spi,Class Interpreter,public void startDocument(),
7536,joran/spi,ch.qos.logback.core.joran.spi,Class Interpreter,public void startElement(StartEvent se),
7537,joran/spi,ch.qos.logback.core.joran.spi,Class Interpreter,public void characters(BodyEvent be),
7538,joran/spi,ch.qos.logback.core.joran.spi,Class Interpreter,public void endElement(EndEvent endEvent),
7539,joran/spi,ch.qos.logback.core.joran.spi,Class Interpreter,public Locator getLocator(),
7540,joran/spi,ch.qos.logback.core.joran.spi,Class Interpreter,public void setDocumentLocator(Locator l),
7541,joran/spi,ch.qos.logback.core.joran.spi,Class Interpreter,public void addImplicitAction(ImplicitAction ia),
7542,core/util,ch.qos.logback.core.util,Class InterruptUtil,public void maskInterruptFlag(),
7543,chapters/appenders,chapters.appenders,Class IO,public static void main(String[] argv) throws Exception,
7544,chapters/appenders,chapters.appenders,Class IOPerformance,public static void main(String[] argv) throws Exception,
7545,classic/spi,ch.qos.logback.classic.spi,Interface IThrowableProxy,String getMessage(),
7546,classic/spi,ch.qos.logback.classic.spi,Interface IThrowableProxy,String getClassName(),
7547,classic/spi,ch.qos.logback.classic.spi,Interface IThrowableProxy,StackTraceElementProxy[] getStackTraceElementProxyArray(),
7548,classic/spi,ch.qos.logback.classic.spi,Interface IThrowableProxy,int getCommonFrames(),
7549,classic/spi,ch.qos.logback.classic.spi,Interface IThrowableProxy,IThrowableProxy getCause(),
7550,access/boolex,ch.qos.logback.access.boolex,Class JaninoEventEvaluator,public static final List<String> DEFAULT_PARAM_NAME_LIST,
7551,access/boolex,ch.qos.logback.access.boolex,Class JaninoEventEvaluator,protected String getDecoratedExpression(),
7552,access/boolex,ch.qos.logback.access.boolex,Class JaninoEventEvaluator,protected String[] getParameterNames(),
7553,access/boolex,ch.qos.logback.access.boolex,Class JaninoEventEvaluator,protected Class<?>[] getParameterTypes(),
7554,classic/boolex,ch.qos.logback.classic.boolex,Class JaninoEventEvaluator,public static final String IMPORT_LEVEL,
7555,classic/boolex,ch.qos.logback.classic.boolex,Class JaninoEventEvaluator,public static final List<String> DEFAULT_PARAM_NAME_LIST,
7556,classic/boolex,ch.qos.logback.classic.boolex,Class JaninoEventEvaluator,protected String getDecoratedExpression(),
7557,classic/boolex,ch.qos.logback.classic.boolex,Class JaninoEventEvaluator,protected String[] getParameterNames(),
7558,classic/boolex,ch.qos.logback.classic.boolex,Class JaninoEventEvaluator,protected Class<?>[] getParameterTypes(),
7559,core/boolex,ch.qos.logback.core.boolex,Class JaninoEventEvaluatorBase<E>,public static final int ERROR_THRESHOLD,
7560,core/boolex,ch.qos.logback.core.boolex,Class JaninoEventEvaluatorBase<E>,protected abstract String getDecoratedExpression(),
7561,core/boolex,ch.qos.logback.core.boolex,Class JaninoEventEvaluatorBase<E>,protected abstract String[] getParameterNames(),
7562,core/boolex,ch.qos.logback.core.boolex,Class JaninoEventEvaluatorBase<E>,protected abstract Class<?>[] getParameterTypes(),
7563,core/boolex,ch.qos.logback.core.boolex,Class JaninoEventEvaluatorBase<E>,protected abstract Object[] getParameterValues(E event),
7564,core/boolex,ch.qos.logback.core.boolex,Class JaninoEventEvaluatorBase<E>,public void start(),
7565,core/boolex,ch.qos.logback.core.boolex,Class JaninoEventEvaluatorBase<E>,public boolean evaluate(E event) throws EvaluationException,Description copied from interface: EventEvaluator
7566,core/boolex,ch.qos.logback.core.boolex,Class JaninoEventEvaluatorBase<E>,public String getExpression(),
7567,core/boolex,ch.qos.logback.core.boolex,Class JaninoEventEvaluatorBase<E>,public void setExpression(String expression),
7568,core/boolex,ch.qos.logback.core.boolex,Class JaninoEventEvaluatorBase<E>,public void addMatcher(Matcher matcher),
7569,access/jetty,ch.qos.logback.access.jetty,Class JettyServerAdapter,public long getContentLength(),
7570,access/jetty,ch.qos.logback.access.jetty,Class JettyServerAdapter,public int getStatusCode(),
7571,access/jetty,ch.qos.logback.access.jetty,Class JettyServerAdapter,public long getRequestTimestamp(),
7572,classic/jmx,ch.qos.logback.classic.jmx,Class JMXConfigurator,public void reloadDefaultConfiguration() throws JoranException,
7573,classic/jmx,ch.qos.logback.classic.jmx,Class JMXConfigurator,"public void reloadByFileName(String fileName) throws JoranException, FileNotFoundException",
7574,classic/jmx,ch.qos.logback.classic.jmx,Class JMXConfigurator,public void reloadByURL(URL url) throws JoranException,
7575,classic/jmx,ch.qos.logback.classic.jmx,Class JMXConfigurator,"public void setLoggerLevel(String loggerName, String levelStr)",
7576,classic/jmx,ch.qos.logback.classic.jmx,Class JMXConfigurator,public String getLoggerLevel(String loggerName),
7577,classic/jmx,ch.qos.logback.classic.jmx,Class JMXConfigurator,public String getLoggerEffectiveLevel(String loggerName),
7578,classic/jmx,ch.qos.logback.classic.jmx,Class JMXConfigurator,public List<String> getLoggerList(),
7579,classic/jmx,ch.qos.logback.classic.jmx,Class JMXConfigurator,public List<String> getStatuses(),
7580,classic/jmx,ch.qos.logback.classic.jmx,Class JMXConfigurator,public void onStop(LoggerContext context),"When the associated LoggerContext is stopped, this configurator must be unregistered"
7581,classic/jmx,ch.qos.logback.classic.jmx,Class JMXConfigurator,"public void onLevelChange(Logger logger, Level level)",
7582,classic/jmx,ch.qos.logback.classic.jmx,Class JMXConfigurator,public void onReset(LoggerContext context),
7583,classic/jmx,ch.qos.logback.classic.jmx,Class JMXConfigurator,public boolean isResetResistant(),JMXConfigurator should not be removed subsequent to a LoggerContext reset.
7584,classic/jmx,ch.qos.logback.classic.jmx,Class JMXConfigurator,public void onStart(LoggerContext context),
7585,joran/action,ch.qos.logback.classic.joran.action,Class JMXConfiguratorAction,"public void begin(InterpretationContext ec, String name, Attributes attributes) throws ActionException",Description copied from class: Action
7586,classic/jmx,ch.qos.logback.classic.jmx,Interface JMXConfiguratorMBean,void reloadDefaultConfiguration() throws JoranException,
7587,classic/jmx,ch.qos.logback.classic.jmx,Interface JMXConfiguratorMBean,"void reloadByFileName(String fileName) throws JoranException, FileNotFoundException",
7588,classic/jmx,ch.qos.logback.classic.jmx,Interface JMXConfiguratorMBean,void reloadByURL(URL url) throws JoranException,
7589,classic/jmx,ch.qos.logback.classic.jmx,Interface JMXConfiguratorMBean,"void setLoggerLevel(String loggerName, String levelStr)",
7590,classic/jmx,ch.qos.logback.classic.jmx,Interface JMXConfiguratorMBean,String getLoggerLevel(String loggerName),
7591,classic/jmx,ch.qos.logback.classic.jmx,Interface JMXConfiguratorMBean,String getLoggerEffectiveLevel(String loggerName),
7592,classic/jmx,ch.qos.logback.classic.jmx,Interface JMXConfiguratorMBean,List<String> getLoggerList(),
7593,classic/sift,ch.qos.logback.classic.sift,Class JNDIBasedContextDiscriminator,public String getDiscriminatingValue(ILoggingEvent event),Return the name of the current context name as found in the logging event.
7594,classic/sift,ch.qos.logback.classic.sift,Class JNDIBasedContextDiscriminator,public String getKey(),Description copied from interface: Discriminator
7595,classic/sift,ch.qos.logback.classic.sift,Class JNDIBasedContextDiscriminator,public void setKey(String key),
7596,classic/sift,ch.qos.logback.classic.sift,Class JNDIBasedContextDiscriminator,public String getDefaultValue(),
7597,core/db,ch.qos.logback.core.db,Class JNDIConnectionSource,public void start(),
7598,core/db,ch.qos.logback.core.db,Class JNDIConnectionSource,public Connection getConnection() throws SQLException,Description copied from interface: ConnectionSource
7599,core/db,ch.qos.logback.core.db,Class JNDIConnectionSource,public String getJndiLocation(),Returns the jndiLocation.
7600,classic/util,ch.qos.logback.classic.util,Class JNDIUtil,public static Context getInitialContext() throws NamingException,
7601,access/joran,ch.qos.logback.access.joran,Class JoranConfigurator,public void addInstanceRules(RuleStore rs),
7602,classic/joran,ch.qos.logback.classic.joran,Class JoranConfigurator,public void addInstanceRules(RuleStore rs),
7603,core/joran,ch.qos.logback.core.joran,Class JoranConfiguratorBase<E>,protected void addInstanceRules(RuleStore rs),
7604,core/joran,ch.qos.logback.core.joran,Class JoranConfiguratorBase<E>,protected void addImplicitRules(Interpreter interpreter),
7605,core/joran,ch.qos.logback.core.joran,Class JoranConfiguratorBase<E>,protected void buildInterpreter(),
7606,joran/spi,ch.qos.logback.core.joran.spi,Class JoranException,public JoranException(String msg),
7607,classic/jul,ch.qos.logback.classic.jul,Class JULHelper,public static final boolean isRegularNonRootLogger(Logger julLogger),
7608,classic/jul,ch.qos.logback.classic.jul,Class JULHelper,public static final boolean isRoot(Logger julLogger),
7609,classic/jul,ch.qos.logback.classic.jul,Class JULHelper,public static Level asJULLevel(Level lbLevel),
7610,classic/jul,ch.qos.logback.classic.jul,Class JULHelper,public static String asJULLoggerName(String loggerName),
7611,classic/jul,ch.qos.logback.classic.jul,Class JULHelper,public static Logger asJULLogger(String loggerName),
7612,net/ssl,ch.qos.logback.core.net.ssl,Class KeyManagerFactoryFactoryBean,"public KeyManagerFactory createKeyManagerFactory() throws NoSuchProviderException, NoSuchAlgorithmException",Creates a KeyManagerFactory using the receiver's configuration.
7613,net/ssl,ch.qos.logback.core.net.ssl,Class KeyManagerFactoryFactoryBean,public String getAlgorithm(),Gets the algorithm name for the key manager factory.
7614,net/ssl,ch.qos.logback.core.net.ssl,Class KeyManagerFactoryFactoryBean,public void setAlgorithm(String algorithm),Sets the algorithm name for the key manager factory.
7615,net/ssl,ch.qos.logback.core.net.ssl,Class KeyManagerFactoryFactoryBean,public String getProvider(),Gets the JSSE provider name for the key manager factory.
7616,net/ssl,ch.qos.logback.core.net.ssl,Class KeyStoreFactoryBean,"public KeyStore createKeyStore() throws NoSuchProviderException, NoSuchAlgorithmException, KeyStoreException",Creates a new KeyStore using the receiver's configuration.
7617,net/ssl,ch.qos.logback.core.net.ssl,Class KeyStoreFactoryBean,public String getLocation(),Gets the location of the key store resource.
7618,net/ssl,ch.qos.logback.core.net.ssl,Class KeyStoreFactoryBean,public void setLocation(String location),Sets the location of the key store resource.
7619,net/ssl,ch.qos.logback.core.net.ssl,Class KeyStoreFactoryBean,public String getType(),Gets the type of key store to load.
7620,net/ssl,ch.qos.logback.core.net.ssl,Class KeyStoreFactoryBean,public void setType(String type),Sets the type of key store to load.
7621,net/ssl,ch.qos.logback.core.net.ssl,Class KeyStoreFactoryBean,public String getProvider(),Gets the JCA key store provider name.
7622,net/ssl,ch.qos.logback.core.net.ssl,Class KeyStoreFactoryBean,public void setProvider(String provider),Sets the JCA key store provider name.
7623,net/ssl,ch.qos.logback.core.net.ssl,Class KeyStoreFactoryBean,public String getPassword(),Gets the password to use to access the key store.
7624,logback/core,ch.qos.logback.core,Interface Layout<E>,String doLayout(E event),"Transform an event (of type Object) and return it as a String after appropriate formatting. Taking in an object and returning a String is the least sophisticated way of formatting events. However, it is remarkably CPU-effective. "
7625,logback/core,ch.qos.logback.core,Interface Layout<E>,String getFileHeader(),Return the file header for this layout. The returned value may be null.
7626,logback/core,ch.qos.logback.core,Interface Layout<E>,String getPresentationHeader(),Return the header of the logging event formatting. The returned value may be null.
7627,logback/core,ch.qos.logback.core,Interface Layout<E>,String getPresentationFooter(),Return the footer of the logging event formatting. The returned value may be null.
7628,logback/core,ch.qos.logback.core,Interface Layout<E>,String getFileFooter(),Return the file footer for this layout. The returned value may be null.
7629,logback/core,ch.qos.logback.core,Class LayoutBase<E>,public void setContext(Context context),
7630,logback/core,ch.qos.logback.core,Class LayoutBase<E>,public Context getContext(),
7631,logback/core,ch.qos.logback.core,Class LayoutBase<E>,public void start(),
7632,logback/core,ch.qos.logback.core,Class LayoutBase<E>,public void stop(),
7633,logback/core,ch.qos.logback.core,Class LayoutBase<E>,public boolean isStarted(),
7634,logback/core,ch.qos.logback.core,Class LayoutBase<E>,public String getFileHeader(),Description copied from interface: Layout
7635,logback/core,ch.qos.logback.core,Class LayoutBase<E>,public String getPresentationHeader(),Description copied from interface: Layout
7636,logback/core,ch.qos.logback.core,Class LayoutBase<E>,public String getPresentationFooter(),Description copied from interface: Layout
7637,logback/core,ch.qos.logback.core,Class LayoutBase<E>,public String getFileFooter(),Description copied from interface: Layout
7638,logback/core,ch.qos.logback.core,Class LayoutBase<E>,public String getContentType(),Description copied from interface: Layout
7639,logback/core,ch.qos.logback.core,Class LayoutBase<E>,public void setFileHeader(String header),
7640,logback/core,ch.qos.logback.core,Class LayoutBase<E>,public void setFileFooter(String footer),
7641,logback/core,ch.qos.logback.core,Class LayoutBase<E>,public void setPresentationHeader(String header),
7642,core/encoder,ch.qos.logback.core.encoder,Class LayoutWrappingEncoder<E>,public Layout<E> getLayout(),
7643,core/encoder,ch.qos.logback.core.encoder,Class LayoutWrappingEncoder<E>,public void setLayout(Layout<E> layout),
7644,core/encoder,ch.qos.logback.core.encoder,Class LayoutWrappingEncoder<E>,public Charset getCharset(),
7645,core/encoder,ch.qos.logback.core.encoder,Class LayoutWrappingEncoder<E>,public void setCharset(Charset charset),Set the charset to use when converting the string returned by the layout into bytes. By default this property has the value null which corresponds to the system's default charset.
7646,core/encoder,ch.qos.logback.core.encoder,Class LayoutWrappingEncoder<E>,public void setImmediateFlush(boolean immediateFlush),"Sets the immediateFlush option. The default value for immediateFlush is 'true'. If set to true, the doEncode() method will immediately flush the underlying OutputStream. Although immediate flushing is safer, it also significantly degrades logging throughput."
7647,core/encoder,ch.qos.logback.core.encoder,Class LayoutWrappingEncoder<E>,public byte[] headerBytes(),Description copied from interface: Encoder
7648,core/encoder,ch.qos.logback.core.encoder,Class LayoutWrappingEncoder<E>,public byte[] footerBytes(),Description copied from interface: Encoder
7649,core/encoder,ch.qos.logback.core.encoder,Class LayoutWrappingEncoder<E>,public byte[] encode(E event),Description copied from interface: Encoder
7650,core/encoder,ch.qos.logback.core.encoder,Class LayoutWrappingEncoder<E>,public boolean isStarted(),
7651,core/encoder,ch.qos.logback.core.encoder,Class LayoutWrappingEncoder<E>,public void start(),
7652,core/encoder,ch.qos.logback.core.encoder,Class LayoutWrappingEncoder<E>,public void stop(),
7653,logback/classic,ch.qos.logback.classic,Class Level,public static final int OFF_INT,
7654,logback/classic,ch.qos.logback.classic,Class Level,public static final int ERROR_INT,
7655,logback/classic,ch.qos.logback.classic,Class Level,public static final int WARN_INT,
7656,logback/classic,ch.qos.logback.classic,Class Level,public static final int INFO_INT,
7657,logback/classic,ch.qos.logback.classic,Class Level,public static final int DEBUG_INT,
7658,logback/classic,ch.qos.logback.classic,Class Level,public static final int TRACE_INT,
7659,logback/classic,ch.qos.logback.classic,Class Level,public static final int ALL_INT,
7660,logback/classic,ch.qos.logback.classic,Class Level,public static final Integer OFF_INTEGER,
7661,logback/classic,ch.qos.logback.classic,Class Level,public static final Integer ERROR_INTEGER,
7662,logback/classic,ch.qos.logback.classic,Class Level,public static final Integer WARN_INTEGER,
7663,logback/classic,ch.qos.logback.classic,Class Level,public static final Integer INFO_INTEGER,
7664,logback/classic,ch.qos.logback.classic,Class Level,public static final Integer DEBUG_INTEGER,
7665,logback/classic,ch.qos.logback.classic,Class Level,public static final Integer TRACE_INTEGER,
7666,logback/classic,ch.qos.logback.classic,Class Level,public static final Integer ALL_INTEGER,
7667,logback/classic,ch.qos.logback.classic,Class Level,public static final Level OFF,The OFF is used to turn off logging.
7668,logback/classic,ch.qos.logback.classic,Class Level,public static final Level ERROR,The ERROR level designates error events which may or not be fatal to the application.
7669,logback/classic,ch.qos.logback.classic,Class Level,public static final Level WARN,The WARN level designates potentially harmful situations.
7670,logback/classic,ch.qos.logback.classic,Class Level,public static final Level INFO,The INFO level designates informational messages highlighting overall progress of the application.
7671,logback/classic,ch.qos.logback.classic,Class Level,public static final Level DEBUG,The DEBUG level designates informational events of lower importance.
7672,logback/classic,ch.qos.logback.classic,Class Level,public static final Level TRACE,The TRACE level designates informational events of very low importance.
7673,logback/classic,ch.qos.logback.classic,Class Level,public static final Level ALL,The ALL is used to turn on all logging.
7674,logback/classic,ch.qos.logback.classic,Class Level,public final int levelInt,
7675,logback/classic,ch.qos.logback.classic,Class Level,public String toString(),Returns the string representation of this Level.
7676,logback/classic,ch.qos.logback.classic,Class Level,public int toInt(),Returns the integer representation of this Level.
7677,logback/classic,ch.qos.logback.classic,Class Level,public Integer toInteger(),Convert a Level to an Integer object.
7678,logback/classic,ch.qos.logback.classic,Class Level,public boolean isGreaterOrEqual(Level r),"Returns true if this Level has a higher or equal Level than the Level passed as argument, false otherwise."
7679,logback/classic,ch.qos.logback.classic,Class Level,public static Level toLevel(String sArg),"Convert the string passed as argument to a Level. If the conversion fails, then this method returns DEBUG."
7680,logback/classic,ch.qos.logback.classic,Class Level,public static Level valueOf(String sArg),This method exists in order to comply with Joran's valueOf convention.
7681,logback/classic,ch.qos.logback.classic,Class Level,public static Level toLevel(int val),"Convert an integer passed as argument to a Level. If the conversion fails, then this method returns DEBUG."
7682,logback/classic,ch.qos.logback.classic,Class Level,"public static Level toLevel(int val, Level defaultLevel)","Convert an integer passed as argument to a Level. If the conversion fails, then this method returns the specified default."
7683,logback/classic,ch.qos.logback.classic,Class Level,"public static Level toLevel(String sArg, Level defaultLevel)","Convert the string passed as argument to a Level. If the conversion fails, then this method returns the value of defaultLevel."
7684,logback/classic,ch.qos.logback.classic,Class Level,public static Level fromLocationAwareLoggerInteger(int levelInt),"Convert one of the integer values defined in LocationAwareLogger interface to an instance of this class, i.e. a Level."
7685,joran/action,ch.qos.logback.classic.joran.action,Class LevelAction,"public void begin(InterpretationContext ec, String name, Attributes attributes)",Description copied from class: Action
7686,joran/action,ch.qos.logback.classic.joran.action,Class LevelAction,public void finish(InterpretationContext ec),
7687,classic/jul,ch.qos.logback.classic.jul,Class LevelChangePropagator,public void setResetJUL(boolean resetJUL),
7688,classic/jul,ch.qos.logback.classic.jul,Class LevelChangePropagator,public boolean isResetResistant(),Description copied from interface: LoggerContextListener
7689,classic/jul,ch.qos.logback.classic.jul,Class LevelChangePropagator,public void onStart(LoggerContext context),
7690,classic/jul,ch.qos.logback.classic.jul,Class LevelChangePropagator,public void onReset(LoggerContext context),
7691,classic/jul,ch.qos.logback.classic.jul,Class LevelChangePropagator,public void onStop(LoggerContext context),
7692,classic/jul,ch.qos.logback.classic.jul,Class LevelChangePropagator,"public void onLevelChange(Logger logger, Level level)",
7693,classic/jul,ch.qos.logback.classic.jul,Class LevelChangePropagator,public void resetJULLevels(),
7694,classic/jul,ch.qos.logback.classic.jul,Class LevelChangePropagator,public void start(),
7695,classic/jul,ch.qos.logback.classic.jul,Class LevelChangePropagator,public void stop(),
7696,classic/filter,ch.qos.logback.classic.filter,Class LevelFilter,public FilterReply decide(ILoggingEvent event),Description copied from class: Filter
7697,classic/filter,ch.qos.logback.classic.filter,Class LevelFilter,public void setLevel(Level level),
7698,core/spi,ch.qos.logback.core.spi,Interface LifeCycle,void start(),
7699,core/spi,ch.qos.logback.core.spi,Interface LifeCycle,void stop(),
7700,logback/core,ch.qos.logback.core,Class LifeCycleManager,public void register(LifeCycle component),Registers a component with this manager. 
7701,onJoran/calculator,chapters.onJoran.calculator,Class LiteralAction,"public void begin(InterpretationContext ic, String name, Attributes attributes)",Description copied from class: Action
7702,core/util,ch.qos.logback.core.util,Class Loader,"public static Set<URL> getResources(String resource, ClassLoader classLoader) throws IOException",Compute the number of occurrences a resource can be found by a class loader.
7703,core/util,ch.qos.logback.core.util,Class Loader,"public static URL getResource(String resource, ClassLoader classLoader)",Search for a resource using the classloader passed as parameter.
7704,core/util,ch.qos.logback.core.util,Class Loader,public static URL getResourceBySelfClassLoader(String resource),"Attempt to find a resource by using the classloader that loaded this class, namely Loader.class."
7705,core/util,ch.qos.logback.core.util,Class Loader,public static ClassLoader getTCL(),Get the Thread Context Loader which is a JDK 1.2 feature. If we are running under JDK 1.1 or anything else goes wrong the method returns null.
7706,core/util,ch.qos.logback.core.util,Class Loader,"public static Class<?> loadClass(String clazz, Context context) throws ClassNotFoundException",
7707,core/util,ch.qos.logback.core.util,Class Loader,public static ClassLoader getClassLoaderOfObject(Object o),Get the class loader of the object passed as argument. Return the system class loader if appropriate.
7708,core/util,ch.qos.logback.core.util,Class Loader,public static ClassLoader getClassLoaderAsPrivileged(Class<?> clazz),Returns the class loader of clazz in an access privileged section.
7709,core/util,ch.qos.logback.core.util,Class Loader,public static ClassLoader getClassLoaderOfClass(Class<?> clazz),Return the class loader which loaded the class passed as argument. Return the system class loader if appropriate.
7710,core/util,ch.qos.logback.core.util,Class LocationUtil,public static final String SCHEME_PATTERN,Regex pattern for a URL scheme (reference RFC 2396 section 3)
7711,logback/core,ch.qos.logback.core,Class LogbackException,public LogbackException(String msg),
7712,classic/util,ch.qos.logback.classic.util,Class LogbackMDCAdapter,"public void put(String key, String val) throws IllegalArgumentException","Put a context value (the val parameter) as identified with the key parameter into the current thread's context map. Note that contrary to log4j, the val parameter can be null. If the current thread does not have a context map it is created as a side effect of this call."
7713,classic/util,ch.qos.logback.classic.util,Class LogbackMDCAdapter,public void remove(String key),Remove the the context identified by the key parameter. 
7714,classic/util,ch.qos.logback.classic.util,Class LogbackMDCAdapter,public void clear(),Clear all entries in the MDC.
7715,classic/util,ch.qos.logback.classic.util,Class LogbackMDCAdapter,public String get(String key),Get the context identified by the key parameter. 
7716,classic/util,ch.qos.logback.classic.util,Class LogbackMDCAdapter,"public Map<String,String> getPropertyMap()",Get the current thread's MDC as a map. This method is intended to be used internally.
7717,classic/util,ch.qos.logback.classic.util,Class LogbackMDCAdapter,public Set<String> getKeys(),Returns the keys in the MDC as a Set. The returned value can be null.
7718,classic/util,ch.qos.logback.classic.util,Class LogbackMDCAdapter,"public Map<String,String> getCopyOfContextMap()",Return a copy of the current thread's context map. Returned value may be null.
7719,classic/spi,ch.qos.logback.classic.spi,Class LogbackServiceProvider,public void initialize(),
7720,classic/spi,ch.qos.logback.classic.spi,Class LogbackServiceProvider,public org.slf4j.ILoggerFactory getLoggerFactory(),
7721,classic/spi,ch.qos.logback.classic.spi,Class LogbackServiceProvider,public org.slf4j.IMarkerFactory getMarkerFactory(),
7722,classic/spi,ch.qos.logback.classic.spi,Class LogbackServiceProvider,public org.slf4j.spi.MDCAdapter getMDCAdapter(),
7723,classic/servlet,ch.qos.logback.classic.servlet,Class LogbackServletContextListener,public void contextInitialized(javax.servlet.ServletContextEvent sce),
7724,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public static final String DEFAULT_FILENAME,
7725,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public boolean isStarted(),
7726,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public void startInternal() throws org.apache.catalina.LifecycleException,
7727,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public void addStatus(Status status),
7728,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public void addInfo(String msg),
7729,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public void addWarn(String msg),
7730,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,"public void addError(String msg, Throwable t)",
7731,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public String getFilename(),
7732,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public void setFilename(String filename),
7733,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public boolean isQuiet(),
7734,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public void setQuiet(boolean quiet),
7735,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,"public void invoke(org.apache.catalina.connector.Request request, org.apache.catalina.connector.Response response) throws IOException, javax.servlet.ServletException",
7736,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,protected void stopInternal() throws org.apache.catalina.LifecycleException,
7737,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public void addAppender(Appender<IAccessEvent> newAppender),Description copied from interface: AppenderAttachable
7738,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public Iterator<Appender<IAccessEvent>> iteratorForAppenders(),Description copied from interface: AppenderAttachable
7739,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public Appender<IAccessEvent> getAppender(String name),Description copied from interface: AppenderAttachable
7740,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public boolean isAttached(Appender<IAccessEvent> appender),Description copied from interface: AppenderAttachable
7741,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public void detachAndStopAllAppenders(),Description copied from interface: AppenderAttachable
7742,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public boolean detachAppender(Appender<IAccessEvent> appender),Description copied from interface: AppenderAttachable
7743,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public boolean detachAppender(String name),Description copied from interface: AppenderAttachable
7744,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public String getInfo(),
7745,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public StatusManager getStatusManager(),Description copied from interface: Context
7746,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,"public Map<String,String> getPropertyMap()",
7747,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,"public void putProperty(String key, String val)",Description copied from interface: Context
7748,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public String getProperty(String key),Description copied from interface: Context
7749,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,"public Map<String,String> getCopyOfPropertyMap()",Description copied from interface: Context
7750,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public Object getObject(String key),Description copied from interface: Context
7751,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,"public void putObject(String key, Object value)",Description copied from interface: Context
7752,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public void addFilter(Filter<IAccessEvent> newFilter),Description copied from interface: FilterAttachable
7753,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public void clearAllFilters(),
7754,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public List<Filter<IAccessEvent>> getCopyOfAttachedFiltersList(),Description copied from interface: FilterAttachable
7755,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public FilterReply getFilterChainDecision(IAccessEvent event),Description copied from interface: FilterAttachable
7756,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public ExecutorService getExecutorService(),Description copied from interface: Context
7757,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public String getName(),Description copied from interface: Context
7758,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public void setName(String name),Description copied from interface: Context
7759,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public long getBirthTime(),Description copied from interface: Context
7760,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public Object getConfigurationLock(),Description copied from interface: Context
7761,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public void register(LifeCycle component),Description copied from interface: Context
7762,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public void addLifecycleListener(org.apache.catalina.LifecycleListener arg0),
7763,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public org.apache.catalina.LifecycleListener[] findLifecycleListeners(),
7764,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public void removeLifecycleListener(org.apache.catalina.LifecycleListener arg0),
7765,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public String toString(),
7766,access/tomcat,ch.qos.logback.access.tomcat,Class LogbackValve,public ScheduledExecutorService getScheduledExecutorService(),Description copied from interface: Context
7767,logback/classic,ch.qos.logback.classic,Class Logger,public Level getEffectiveLevel(),
7768,logback/classic,ch.qos.logback.classic,Class Logger,public Level getLevel(),
7769,logback/classic,ch.qos.logback.classic,Class Logger,public String getName(),
7770,logback/classic,ch.qos.logback.classic,Class Logger,public void setLevel(Level newLevel),
7771,logback/classic,ch.qos.logback.classic,Class Logger,public void detachAndStopAllAppenders(),Remove all previously added appenders from this logger instance. This is useful when re-reading configuration information.
7772,logback/classic,ch.qos.logback.classic,Class Logger,public boolean detachAppender(String name),Description copied from interface: AppenderAttachable
7773,logback/classic,ch.qos.logback.classic,Class Logger,public void addAppender(Appender<ILoggingEvent> newAppender),Description copied from interface: AppenderAttachable
7774,logback/classic,ch.qos.logback.classic,Class Logger,public boolean isAttached(Appender<ILoggingEvent> appender),Description copied from interface: AppenderAttachable
7775,logback/classic,ch.qos.logback.classic,Class Logger,public Iterator<Appender<ILoggingEvent>> iteratorForAppenders(),Description copied from interface: AppenderAttachable
7776,logback/classic,ch.qos.logback.classic,Class Logger,public Appender<ILoggingEvent> getAppender(String name),Description copied from interface: AppenderAttachable
7777,logback/classic,ch.qos.logback.classic,Class Logger,public void callAppenders(ILoggingEvent event),Invoke all the appenders of this logger.
7778,logback/classic,ch.qos.logback.classic,Class Logger,public boolean detachAppender(Appender<ILoggingEvent> appender),Remove the appender passed as parameter form the list of appenders.
7779,logback/classic,ch.qos.logback.classic,Class Logger,public void trace(String msg),
7780,logback/classic,ch.qos.logback.classic,Class Logger,"public void trace(String format, Object arg)",
7781,logback/classic,ch.qos.logback.classic,Class Logger,"public void trace(String format, Object arg1, Object arg2)",
7782,logback/classic,ch.qos.logback.classic,Class Logger,"public void trace(String format, Object... argArray)",
7783,logback/classic,ch.qos.logback.classic,Class Logger,"public void trace(String msg, Throwable t)",
7784,logback/classic,ch.qos.logback.classic,Class Logger,"public void trace(org.slf4j.Marker marker, String msg)",
7785,logback/classic,ch.qos.logback.classic,Class Logger,"public void trace(org.slf4j.Marker marker, String format, Object arg)",
7786,logback/classic,ch.qos.logback.classic,Class Logger,"public void trace(org.slf4j.Marker marker, String format, Object arg1, Object arg2)",
7787,logback/classic,ch.qos.logback.classic,Class Logger,"public void trace(org.slf4j.Marker marker, String format, Object... argArray)",
7788,logback/classic,ch.qos.logback.classic,Class Logger,"public void trace(org.slf4j.Marker marker, String msg, Throwable t)",
7789,logback/classic,ch.qos.logback.classic,Class Logger,public boolean isDebugEnabled(),
7790,logback/classic,ch.qos.logback.classic,Class Logger,public boolean isDebugEnabled(org.slf4j.Marker marker),
7791,logback/classic,ch.qos.logback.classic,Class Logger,public void debug(String msg),
7792,logback/classic,ch.qos.logback.classic,Class Logger,"public void debug(String format, Object arg)",
7793,logback/classic,ch.qos.logback.classic,Class Logger,"public void debug(String format, Object arg1, Object arg2)",
7794,logback/classic,ch.qos.logback.classic,Class Logger,"public void debug(String format, Object... argArray)",
7795,logback/classic,ch.qos.logback.classic,Class Logger,"public void debug(String msg, Throwable t)",
7796,logback/classic,ch.qos.logback.classic,Class Logger,"public void debug(org.slf4j.Marker marker, String msg)",
7797,logback/classic,ch.qos.logback.classic,Class Logger,"public void debug(org.slf4j.Marker marker, String format, Object arg)",
7798,logback/classic,ch.qos.logback.classic,Class Logger,"public void debug(org.slf4j.Marker marker, String format, Object arg1, Object arg2)",
7799,logback/classic,ch.qos.logback.classic,Class Logger,"public void debug(org.slf4j.Marker marker, String format, Object... argArray)",
7800,logback/classic,ch.qos.logback.classic,Class Logger,"public void debug(org.slf4j.Marker marker, String msg, Throwable t)",
7801,logback/classic,ch.qos.logback.classic,Class Logger,public void error(String msg),
7802,logback/classic,ch.qos.logback.classic,Class Logger,"public void error(String format, Object arg)",
7803,logback/classic,ch.qos.logback.classic,Class Logger,"public void error(String format, Object arg1, Object arg2)",
7804,logback/classic,ch.qos.logback.classic,Class Logger,"public void error(String format, Object... argArray)",
7805,logback/classic,ch.qos.logback.classic,Class Logger,"public void error(String msg, Throwable t)",
7806,logback/classic,ch.qos.logback.classic,Class Logger,"public void error(org.slf4j.Marker marker, String msg)",
7807,logback/classic,ch.qos.logback.classic,Class Logger,"public void error(org.slf4j.Marker marker, String format, Object arg)",
7808,logback/classic,ch.qos.logback.classic,Class Logger,"public void error(org.slf4j.Marker marker, String format, Object arg1, Object arg2)",
7809,logback/classic,ch.qos.logback.classic,Class Logger,"public void error(org.slf4j.Marker marker, String format, Object... argArray)",
7810,logback/classic,ch.qos.logback.classic,Class Logger,"public void error(org.slf4j.Marker marker, String msg, Throwable t)",
7811,logback/classic,ch.qos.logback.classic,Class Logger,public boolean isInfoEnabled(),
7812,logback/classic,ch.qos.logback.classic,Class Logger,public boolean isInfoEnabled(org.slf4j.Marker marker),
7813,logback/classic,ch.qos.logback.classic,Class Logger,public void info(String msg),
7814,logback/classic,ch.qos.logback.classic,Class Logger,"public void info(String format, Object arg)",
7815,logback/classic,ch.qos.logback.classic,Class Logger,"public void info(String format, Object arg1, Object arg2)",
7816,logback/classic,ch.qos.logback.classic,Class Logger,"public void info(String format, Object... argArray)",
7817,logback/classic,ch.qos.logback.classic,Class Logger,"public void info(String msg, Throwable t)",
7818,logback/classic,ch.qos.logback.classic,Class Logger,"public void info(org.slf4j.Marker marker, String msg)",
7819,logback/classic,ch.qos.logback.classic,Class Logger,"public void info(org.slf4j.Marker marker, String format, Object arg)",
7820,logback/classic,ch.qos.logback.classic,Class Logger,"public void info(org.slf4j.Marker marker, String format, Object arg1, Object arg2)",
7821,logback/classic,ch.qos.logback.classic,Class Logger,"public void info(org.slf4j.Marker marker, String format, Object... argArray)",
7822,logback/classic,ch.qos.logback.classic,Class Logger,"public void info(org.slf4j.Marker marker, String msg, Throwable t)",
7823,logback/classic,ch.qos.logback.classic,Class Logger,public boolean isTraceEnabled(),
7824,logback/classic,ch.qos.logback.classic,Class Logger,public boolean isTraceEnabled(org.slf4j.Marker marker),
7825,logback/classic,ch.qos.logback.classic,Class Logger,public boolean isErrorEnabled(),
7826,logback/classic,ch.qos.logback.classic,Class Logger,public boolean isErrorEnabled(org.slf4j.Marker marker),
7827,logback/classic,ch.qos.logback.classic,Class Logger,public boolean isWarnEnabled(),
7828,logback/classic,ch.qos.logback.classic,Class Logger,public boolean isWarnEnabled(org.slf4j.Marker marker),
7829,logback/classic,ch.qos.logback.classic,Class Logger,"public boolean isEnabledFor(org.slf4j.Marker marker, Level level)",
7830,logback/classic,ch.qos.logback.classic,Class Logger,public boolean isEnabledFor(Level level),
7831,logback/classic,ch.qos.logback.classic,Class Logger,public void warn(String msg),
7832,logback/classic,ch.qos.logback.classic,Class Logger,"public void warn(String msg, Throwable t)",
7833,logback/classic,ch.qos.logback.classic,Class Logger,"public void warn(String format, Object arg)",
7834,logback/classic,ch.qos.logback.classic,Class Logger,"public void warn(String format, Object arg1, Object arg2)",
7835,logback/classic,ch.qos.logback.classic,Class Logger,"public void warn(String format, Object... argArray)",
7836,logback/classic,ch.qos.logback.classic,Class Logger,"public void warn(org.slf4j.Marker marker, String msg)",
7837,logback/classic,ch.qos.logback.classic,Class Logger,"public void warn(org.slf4j.Marker marker, String format, Object arg)",
7838,logback/classic,ch.qos.logback.classic,Class Logger,"public void warn(org.slf4j.Marker marker, String format, Object... argArray)",
7839,logback/classic,ch.qos.logback.classic,Class Logger,"public void warn(org.slf4j.Marker marker, String format, Object arg1, Object arg2)",
7840,logback/classic,ch.qos.logback.classic,Class Logger,"public void warn(org.slf4j.Marker marker, String msg, Throwable t)",
7841,logback/classic,ch.qos.logback.classic,Class Logger,public boolean isAdditive(),
7842,logback/classic,ch.qos.logback.classic,Class Logger,public void setAdditive(boolean additive),
7843,logback/classic,ch.qos.logback.classic,Class Logger,public String toString(),
7844,logback/classic,ch.qos.logback.classic,Class Logger,public LoggerContext getLoggerContext(),Return the context for this logger.
7845,logback/classic,ch.qos.logback.classic,Class Logger,"public void log(org.slf4j.Marker marker, String fqcn, int levelInt, String message, Object[] argArray, Throwable t)",
7846,logback/classic,ch.qos.logback.classic,Class Logger,public void log(org.slf4j.event.LoggingEvent slf4jEvent),Support SLF4J interception during initialization as introduced in SLF4J version 1.7.15
7847,joran/action,ch.qos.logback.classic.joran.action,Class LoggerAction,"public void begin(InterpretationContext ec, String name, Attributes attributes)",Description copied from class: Action
7848,joran/action,ch.qos.logback.classic.joran.action,Class LoggerAction,"public void end(InterpretationContext ec, String e)",
7849,logback/classic,ch.qos.logback.classic,Class LoggerContext,"public void putProperty(String key, String val)",Description copied from interface: Context
7850,logback/classic,ch.qos.logback.classic,Class LoggerContext,public void setName(String name),Description copied from class: ContextBase
7851,logback/classic,ch.qos.logback.classic,Class LoggerContext,public final Logger getLogger(Class<?> clazz),
7852,logback/classic,ch.qos.logback.classic,Class LoggerContext,public Logger getLogger(String name),
7853,logback/classic,ch.qos.logback.classic,Class LoggerContext,public Logger exists(String name),"Check if the named logger exists in the hierarchy. If so return its reference, otherwise returns null."
7854,logback/classic,ch.qos.logback.classic,Class LoggerContext,public List<Logger> getLoggerList(),
7855,logback/classic,ch.qos.logback.classic,Class LoggerContext,public LoggerContextVO getLoggerContextRemoteView(),
7856,logback/classic,ch.qos.logback.classic,Class LoggerContext,public void setPackagingDataEnabled(boolean packagingDataEnabled),
7857,logback/classic,ch.qos.logback.classic,Class LoggerContext,public boolean isPackagingDataEnabled(),
7858,logback/classic,ch.qos.logback.classic,Class LoggerContext,public void reset(),"This method clears all internal properties, except internal status messages, closes all appenders, removes any turboFilters, fires an OnReset event, removes all status listeners, removes all context listeners (except those which are reset resistant). As mentioned above, internal status messages survive resets."
7859,logback/classic,ch.qos.logback.classic,Class LoggerContext,public TurboFilterList getTurboFilterList(),
7860,logback/classic,ch.qos.logback.classic,Class LoggerContext,public void addTurboFilter(TurboFilter newFilter),
7861,logback/classic,ch.qos.logback.classic,Class LoggerContext,public void resetTurboFilterList(),First processPriorToRemoval all registered turbo filters and then clear the registration list.
7862,logback/classic,ch.qos.logback.classic,Class LoggerContext,public void addListener(LoggerContextListener listener),
7863,logback/classic,ch.qos.logback.classic,Class LoggerContext,public void removeListener(LoggerContextListener listener),
7864,logback/classic,ch.qos.logback.classic,Class LoggerContext,public List<LoggerContextListener> getCopyOfListenerList(),
7865,logback/classic,ch.qos.logback.classic,Class LoggerContext,public void start(),
7866,logback/classic,ch.qos.logback.classic,Class LoggerContext,public void stop(),
7867,logback/classic,ch.qos.logback.classic,Class LoggerContext,public String toString(),
7868,logback/classic,ch.qos.logback.classic,Class LoggerContext,public int getMaxCallerDataDepth(),
7869,logback/classic,ch.qos.logback.classic,Class LoggerContext,public void setMaxCallerDataDepth(int maxCallerDataDepth),
7870,logback/classic,ch.qos.logback.classic,Class LoggerContext,public List<String> getFrameworkPackages(),"List of packages considered part of the logging framework such that they are never considered as callers of the logging framework. This list used to compute the caller for logging events. To designate package com.foo as well as all its subpackages as being part of the logging framework, simply add com.foo to this list."
7871,classic/spi,ch.qos.logback.classic.spi,Class LoggerContextAwareBase,public void setLoggerContext(LoggerContext context),Set the owning context. The owning context cannot be set more than once.
7872,classic/spi,ch.qos.logback.classic.spi,Class LoggerContextAwareBase,public void setContext(Context context),
7873,selector/servlet,ch.qos.logback.classic.selector.servlet,Class LoggerContextFilter,public void destroy(),
7874,selector/servlet,ch.qos.logback.classic.selector.servlet,Class LoggerContextFilter,"public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws IOException, javax.servlet.ServletException",
7875,classic/spi,ch.qos.logback.classic.spi,Interface LoggerContextListener,boolean isResetResistant(),Some listeners should not be removed when the LoggerContext is reset. Such listeners are said to be reset resistant.
7876,classic/spi,ch.qos.logback.classic.spi,Interface LoggerContextListener,void onStart(LoggerContext context),
7877,classic/spi,ch.qos.logback.classic.spi,Interface LoggerContextListener,void onReset(LoggerContext context),
7878,classic/spi,ch.qos.logback.classic.spi,Interface LoggerContextListener,void onStop(LoggerContext context),
7879,joran/action,ch.qos.logback.classic.joran.action,Class LoggerContextListenerAction,"public void begin(InterpretationContext ec, String name, Attributes attributes) throws ActionException",Description copied from class: Action
7880,classic/spi,ch.qos.logback.classic.spi,Class LoggerContextVO,public LoggerContextVO(LoggerContext lc),
7881,classic/spi,ch.qos.logback.classic.spi,Class LoggerContextVO,public String getName(),
7882,classic/spi,ch.qos.logback.classic.spi,Class LoggerContextVO,"public Map<String,String> getPropertyMap()",
7883,classic/spi,ch.qos.logback.classic.spi,Class LoggerContextVO,public long getBirthTime(),
7884,classic/spi,ch.qos.logback.classic.spi,Class LoggerContextVO,public String toString(),
7885,classic/spi,ch.qos.logback.classic.spi,Class LoggerContextVO,public boolean equals(Object o),
7886,classic/util,ch.qos.logback.classic.util,Class LoggerNameUtil,public static int getFirstSeparatorIndexOf(String name),
7887,classic/util,ch.qos.logback.classic.util,Class LoggerNameUtil,"public static int getSeparatorIndexOf(String name, int fromIndex)","Get the position of the separator character, if any, starting at position 'fromIndex'."
7888,classic/spi,ch.qos.logback.classic.spi,Class LoggerRemoteView,public LoggerContextVO getLoggerContextView(),
7889,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,public LoggingEvent(),
7890,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,public void setArgumentArray(Object[] argArray),
7891,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,public Object[] getArgumentArray(),
7892,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,public Level getLevel(),
7893,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,public String getLoggerName(),
7894,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,public void setLoggerName(String loggerName),
7895,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,public String getThreadName(),
7896,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,public void setThreadName(String threadName) throws IllegalStateException,
7897,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,public IThrowableProxy getThrowableProxy(),Returns the throwable information contained within this event. May be null if there is no such information.
7898,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,public void setThrowableProxy(ThrowableProxy tp),Set this event's throwable information.
7899,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,public void prepareForDeferredProcessing(),"This method should be called prior to serializing an event. It should also be called when using asynchronous or deferred logging. Note that due to performance concerns, this method does NOT extract caller data. It is the responsibility of the caller to extract caller information."
7900,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,public LoggerContextVO getLoggerContextVO(),
7901,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,public void setLoggerContextRemoteView(LoggerContextVO loggerContextVO),
7902,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,public String getMessage(),
7903,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,public void setMessage(String message),
7904,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,public long getTimeStamp(),
7905,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,public void setTimeStamp(long timeStamp),
7906,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,public long getSequenceNumber(),Description copied from interface: ILoggingEvent
7907,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,public void setSquenceNumber(long sn),
7908,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,public void setLevel(Level level),
7909,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,public StackTraceElement[] getCallerData(),"Get the caller information for this logging event. If caller information is null at the time of its invocation, this method extracts location information. The collected information is cached for future use. Note that after serialization it is impossible to correctly extract caller information. "
7910,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,public boolean hasCallerData(),Description copied from interface: ILoggingEvent
7911,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,public void setCallerData(StackTraceElement[] callerDataArray),
7912,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,public org.slf4j.Marker getMarker(),
7913,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,public void setMarker(org.slf4j.Marker marker),
7914,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,public long getContextBirthTime(),
7915,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,public String getFormattedMessage(),
7916,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,"public Map<String,String> getMDCPropertyMap()",Description copied from interface: ILoggingEvent
7917,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,"public void setMDCPropertyMap(Map<String,String> map)",Set the MDC map for this event.
7918,classic/spi,ch.qos.logback.classic.spi,Class LoggingEvent,"public Map<String,String> getMdc()",Deprecated. Replaced by [@link #getMDCPropertyMap}
7919,classic/spi,ch.qos.logback.classic.spi,Class LoggingEventVO,public static LoggingEventVO build(ILoggingEvent le),
7920,classic/spi,ch.qos.logback.classic.spi,Class LoggingEventVO,public String getThreadName(),
7921,classic/spi,ch.qos.logback.classic.spi,Class LoggingEventVO,public LoggerContextVO getLoggerContextVO(),
7922,classic/spi,ch.qos.logback.classic.spi,Class LoggingEventVO,public String getLoggerName(),
7923,classic/spi,ch.qos.logback.classic.spi,Class LoggingEventVO,public Level getLevel(),
7924,classic/spi,ch.qos.logback.classic.spi,Class LoggingEventVO,public String getMessage(),
7925,classic/spi,ch.qos.logback.classic.spi,Class LoggingEventVO,public String getFormattedMessage(),
7926,classic/spi,ch.qos.logback.classic.spi,Class LoggingEventVO,public Object[] getArgumentArray(),
7927,classic/spi,ch.qos.logback.classic.spi,Class LoggingEventVO,public IThrowableProxy getThrowableProxy(),
7928,classic/spi,ch.qos.logback.classic.spi,Class LoggingEventVO,public StackTraceElement[] getCallerData(),Description copied from interface: ILoggingEvent
7929,classic/spi,ch.qos.logback.classic.spi,Class LoggingEventVO,public boolean hasCallerData(),Description copied from interface: ILoggingEvent
7930,classic/spi,ch.qos.logback.classic.spi,Class LoggingEventVO,public org.slf4j.Marker getMarker(),
7931,classic/spi,ch.qos.logback.classic.spi,Class LoggingEventVO,public long getTimeStamp(),
7932,classic/spi,ch.qos.logback.classic.spi,Class LoggingEventVO,public long getSequenceNumber(),Description copied from interface: ILoggingEvent
7933,classic/spi,ch.qos.logback.classic.spi,Class LoggingEventVO,public long getContextBirthTime(),
7934,classic/spi,ch.qos.logback.classic.spi,Class LoggingEventVO,public LoggerContextVO getContextLoggerRemoteView(),
7935,classic/spi,ch.qos.logback.classic.spi,Class LoggingEventVO,"public Map<String,String> getMDCPropertyMap()",Description copied from interface: ILoggingEvent
7936,classic/spi,ch.qos.logback.classic.spi,Class LoggingEventVO,"public Map<String,String> getMdc()",Description copied from interface: ILoggingEvent
7937,classic/spi,ch.qos.logback.classic.spi,Class LoggingEventVO,public void prepareForDeferredProcessing(),
7938,classic/spi,ch.qos.logback.classic.spi,Class LoggingEventVO,public int hashCode(),
7939,classic/turbo,ch.qos.logback.classic.turbo,Class MarkerFilter,public void start(),
7940,classic/turbo,ch.qos.logback.classic.turbo,Class MarkerFilter,"public FilterReply decide(org.slf4j.Marker marker, Logger logger, Level level, String format, Object[] params, Throwable t)",Description copied from class: TurboFilter
7941,core/boolex,ch.qos.logback.core.boolex,Class Matcher,public String getRegex(),
7942,core/boolex,ch.qos.logback.core.boolex,Class Matcher,public void setRegex(String regex),
7943,core/boolex,ch.qos.logback.core.boolex,Class Matcher,public void start(),
7944,core/boolex,ch.qos.logback.core.boolex,Class Matcher,public void stop(),
7945,core/boolex,ch.qos.logback.core.boolex,Class Matcher,public boolean isStarted(),
7946,core/boolex,ch.qos.logback.core.boolex,Class Matcher,public boolean matches(String input) throws EvaluationException,Checks whether the input matches the regular expression.
7947,core/boolex,ch.qos.logback.core.boolex,Class Matcher,public boolean isCanonEq(),
7948,core/boolex,ch.qos.logback.core.boolex,Class Matcher,public void setCanonEq(boolean canonEq),
7949,core/boolex,ch.qos.logback.core.boolex,Class Matcher,public boolean isCaseSensitive(),
7950,core/boolex,ch.qos.logback.core.boolex,Class Matcher,public void setCaseSensitive(boolean caseSensitive),
7951,core/boolex,ch.qos.logback.core.boolex,Class Matcher,public boolean isUnicodeCase(),
7952,core/boolex,ch.qos.logback.core.boolex,Class Matcher,public void setUnicodeCase(boolean unicodeCase),
7953,core/boolex,ch.qos.logback.core.boolex,Class Matcher,public String getName(),
7954,classic/turbo,ch.qos.logback.classic.turbo,Class MatchingFilter,protected FilterReply onMatch,
7955,classic/turbo,ch.qos.logback.classic.turbo,Class MatchingFilter,public final void setOnMatch(String action),
7956,classic/jmx,ch.qos.logback.classic.jmx,Class MBeanUtil,"public static String getObjectNameFor(String contextName, Class<?> type)",
7957,classic/jmx,ch.qos.logback.classic.jmx,Class MBeanUtil,"public static ObjectName string2ObjectName(Context context, Object caller, String objectNameAsStr)",
7958,classic/jmx,ch.qos.logback.classic.jmx,Class MBeanUtil,"public static boolean isRegistered(MBeanServer mbs, ObjectName objectName)",
7959,classic/jmx,ch.qos.logback.classic.jmx,Class MBeanUtil,"public static void createAndRegisterJMXConfigurator(MBeanServer mbs, LoggerContext loggerContext, JMXConfigurator jmxConfigurator, ObjectName objectName, Object caller)",
7960,classic/sift,ch.qos.logback.classic.sift,Class MDCBasedDiscriminator,public String getDiscriminatingValue(ILoggingEvent event),"Return the value associated with an MDC entry designated by the Key property. If that value is null, then return the value assigned to the DefaultValue property."
7961,classic/sift,ch.qos.logback.classic.sift,Class MDCBasedDiscriminator,public void start(),
7962,classic/sift,ch.qos.logback.classic.sift,Class MDCBasedDiscriminator,public String getKey(),Description copied from interface: Discriminator
7963,classic/sift,ch.qos.logback.classic.sift,Class MDCBasedDiscriminator,public void setKey(String key),
7964,classic/sift,ch.qos.logback.classic.sift,Class MDCBasedDiscriminator,public String getDefaultValue(),
7965,classic/pattern,ch.qos.logback.classic.pattern,Class MDCConverter,public void start(),Description copied from class: DynamicConverter
7966,classic/pattern,ch.qos.logback.classic.pattern,Class MDCConverter,public void stop(),
7967,classic/turbo,ch.qos.logback.classic.turbo,Class MDCFilter,public void start(),
7968,classic/turbo,ch.qos.logback.classic.turbo,Class MDCFilter,"public FilterReply decide(org.slf4j.Marker marker, Logger logger, Level level, String format, Object[] params, Throwable t)",Description copied from class: TurboFilter
7969,classic/turbo,ch.qos.logback.classic.turbo,Class MDCFilter,public void setValue(String value),
7970,classic/helpers,ch.qos.logback.classic.helpers,Class MDCInsertingServletFilter,public void destroy(),
7971,classic/helpers,ch.qos.logback.classic.helpers,Class MDCInsertingServletFilter,"public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws IOException, javax.servlet.ServletException",
7972,classic/turbo,ch.qos.logback.classic.turbo,Class MDCValueLevelPair,public String getValue(),
7973,classic/turbo,ch.qos.logback.classic.turbo,Class MDCValueLevelPair,public void setValue(String name),
7974,classic/turbo,ch.qos.logback.classic.turbo,Class MDCValueLevelPair,public Level getLevel(),
7975,onJoran/calculator,chapters.onJoran.calculator,Class MultiplyAction,"public void begin(InterpretationContext ic, String name, Attributes attributes)",Description copied from class: Action
7976,chapters/layouts,chapters.layouts,Class MySampleLayout2,public void setPrefix(String prefix),
7977,chapters/layouts,chapters.layouts,Class MySampleLayout2,public void setPrintThreadName(boolean printThreadName),
7978,classic/pattern,ch.qos.logback.classic.pattern,Class NamedConverter,protected abstract String getFullyQualifiedName(ILoggingEvent event),Gets fully qualified name from event.
7979,classic/pattern,ch.qos.logback.classic.pattern,Class NamedConverter,public void start(),Description copied from class: DynamicConverter
7980,joran/action,ch.qos.logback.core.joran.action,Class NestedBasicPropertyIA,"public boolean isApplicable(ElementPath elementPath, Attributes attributes, InterpretationContext ec)",Description copied from class: ImplicitAction
7981,joran/action,ch.qos.logback.core.joran.action,Class NestedBasicPropertyIA,"public void begin(InterpretationContext ec, String localName, Attributes attributes)",Description copied from class: Action
7982,joran/action,ch.qos.logback.core.joran.action,Class NestedBasicPropertyIA,"public void body(InterpretationContext ec, String body)",Description copied from class: Action
7983,joran/action,ch.qos.logback.core.joran.action,Class NestedComplexPropertyIA,"public boolean isApplicable(ElementPath elementPath, Attributes attributes, InterpretationContext ic)",Description copied from class: ImplicitAction
7984,joran/action,ch.qos.logback.core.joran.action,Class NestedComplexPropertyIA,"public void begin(InterpretationContext ec, String localName, Attributes attributes)",Description copied from class: Action
7985,core/util,ch.qos.logback.core.util,Class NetworkAddressUtil,"public static String getLocalHostName() throws UnknownHostException, SocketException",
7986,core/util,ch.qos.logback.core.util,Class NetworkAddressUtil,"public static String getCanonicalLocalHostName() throws UnknownHostException, SocketException",
7987,core/util,ch.qos.logback.core.util,Class NetworkAddressUtil,public String safelyGetLocalHostName(),Add the local host's name as a property
7988,joran/action,ch.qos.logback.core.joran.action,Class NewRuleAction,"public void begin(InterpretationContext ec, String localName, Attributes attributes)",Instantiates an layout of the given class and sets its name.
7989,joran/action,ch.qos.logback.core.joran.action,Class NewRuleAction,"public void end(InterpretationContext ec, String n)","Once the children elements are also parsed, now is the time to activate the appender options."
7990,pattern/parser,ch.qos.logback.core.pattern.parser,Class Node,public int getType(),
7991,pattern/parser,ch.qos.logback.core.pattern.parser,Class Node,public Object getValue(),
7992,pattern/parser,ch.qos.logback.core.pattern.parser,Class Node,public Node getNext(),
7993,pattern/parser,ch.qos.logback.core.pattern.parser,Class Node,public void setNext(Node next),
7994,pattern/parser,ch.qos.logback.core.pattern.parser,Class Node,public boolean equals(Object o),
7995,pattern/parser,ch.qos.logback.core.pattern.parser,Class Node,public int hashCode(),
7996,core/subst,ch.qos.logback.core.subst,Class Node,"public Node(ch.qos.logback.core.subst.Node.Type type, Object payload)",
7997,core/subst,ch.qos.logback.core.subst,Class Node,public String toString(),
7998,core/subst,ch.qos.logback.core.subst,Class Node,public void dump(),
7999,core/subst,ch.qos.logback.core.subst,Class Node,public void setNext(Node n),
8000,core/subst,ch.qos.logback.core.subst,Class Node,public boolean equals(Object o),
8001,core/subst,ch.qos.logback.core.subst,Class NodeToStringTransformer,"public NodeToStringTransformer(Node node, PropertyContainer propertyContainer0, PropertyContainer propertyContainer1)",
8002,core/subst,ch.qos.logback.core.subst,Class NodeToStringTransformer,"public static String substituteVariable(String input, PropertyContainer pc0, PropertyContainer pc1) throws ScanException",
8003,core/encoder,ch.qos.logback.core.encoder,Class NonClosableInputStream,public void close(),The whole point of this input stream is to ignore invocations to close()
8004,joran/action,ch.qos.logback.core.joran.action,Class NOPAction,"public void begin(InterpretationContext ec, String name, Attributes attributes)",Description copied from class: Action
8005,onJoran/implicit,chapters.onJoran.implicit,Class NOPAction,"public void begin(InterpretationContext ec, String name, Attributes attributes)",Description copied from class: Action
8006,chapters/mdc,chapters.mdc,Class NumberCruncherServer,public int[] factor(int number) throws RemoteException,Description copied from interface: NumberCruncher
8007,chapters/mdc,chapters.mdc,Class NumberCruncherServer,public static void delay(int millis),
8008,classic/boolex,ch.qos.logback.classic.boolex,Class OnMarkerEvaluator,public void addMarker(String markerStr),
8009,core/status,ch.qos.logback.core.status,Class OnPrintStreamStatusListenerBase,protected abstract PrintStream getPrintStream(),The PrintStream used by derived classes
8010,core/status,ch.qos.logback.core.status,Class OnPrintStreamStatusListenerBase,public void addStatusEvent(Status status),
8011,core/status,ch.qos.logback.core.status,Class OnPrintStreamStatusListenerBase,public void start(),Invoking the start method can cause the instance to print status messages created less than value of retrospectiveThresold.
8012,core/status,ch.qos.logback.core.status,Class OnPrintStreamStatusListenerBase,public String getPrefix(),
8013,core/status,ch.qos.logback.core.status,Class OnPrintStreamStatusListenerBase,public void setPrefix(String prefix),
8014,core/status,ch.qos.logback.core.status,Class OnPrintStreamStatusListenerBase,public void setRetrospective(long retrospective),
8015,core/status,ch.qos.logback.core.status,Class OnPrintStreamStatusListenerBase,public long getRetrospective(),
8016,core/status,ch.qos.logback.core.status,Class OnPrintStreamStatusListenerBase,public void stop(),
8017,core/util,ch.qos.logback.core.util,Class OptionHelper,"public static Object instantiateByClassName(String className, Class<?> superClass, Context context) throws IncompatibleClassException, DynamicClassLoadingException",
8018,core/util,ch.qos.logback.core.util,Class OptionHelper,"public static Object instantiateByClassNameAndParameter(String className, Class<?> superClass, Context context, Class<?> type, Object param) throws IncompatibleClassException, DynamicClassLoadingException",
8019,core/util,ch.qos.logback.core.util,Class OptionHelper,"public static Object instantiateByClassName(String className, Class<?> superClass, ClassLoader classLoader) throws IncompatibleClassException, DynamicClassLoadingException",
8020,core/util,ch.qos.logback.core.util,Class OptionHelper,"public static Object instantiateByClassNameAndParameter(String className, Class<?> superClass, ClassLoader classLoader, Class<?> type, Object parameter) throws IncompatibleClassException, DynamicClassLoadingException",
8021,core/util,ch.qos.logback.core.util,Class OptionHelper,"public static String substVars(String val, PropertyContainer pc1)",
8022,core/util,ch.qos.logback.core.util,Class OptionHelper,"public static String substVars(String input, PropertyContainer pc0, PropertyContainer pc1)",See http://logback.qos.ch/manual/configuration.html#variableSubstitution
8023,core/util,ch.qos.logback.core.util,Class OptionHelper,"public static String propertyLookup(String key, PropertyContainer pc1, PropertyContainer pc2)",
8024,core/util,ch.qos.logback.core.util,Class OptionHelper,"public static String getSystemProperty(String key, String def)",Very similar to System.getProperty except that the SecurityException is absorbed.
8025,core/util,ch.qos.logback.core.util,Class OptionHelper,public static String getEnv(String key),Lookup a key from the environment.
8026,core/util,ch.qos.logback.core.util,Class OptionHelper,public static String getSystemProperty(String key),Very similar to System.getProperty except that the SecurityException is absorbed.
8027,core/util,ch.qos.logback.core.util,Class OptionHelper,"public static void setSystemProperties(ContextAware contextAware, Properties props)",
8028,core/util,ch.qos.logback.core.util,Class OptionHelper,"public static void setSystemProperty(ContextAware contextAware, String key, String value)",
8029,core/util,ch.qos.logback.core.util,Class OptionHelper,public static Properties getSystemProperties(),Very similar to System.getProperties() except that the SecurityException is absorbed.
8030,core/util,ch.qos.logback.core.util,Class OptionHelper,public static String[] extractDefaultReplacement(String key),Return a String[] of size two. The first item containing the key part and the second item containing a default value specified by the user. The second item will be null if no default value is specified.
8031,core/util,ch.qos.logback.core.util,Class OptionHelper,"public static boolean toBoolean(String value, boolean dEfault)","If value is true, then true is returned. If value is false, then true is returned. Otherwise, default is returned. Case of value is unimportant."
8032,logback/core,ch.qos.logback.core,Class OutputStreamAppender<E>,protected Encoder<E> encoder,It is the encoder which is ultimately responsible for writing the event to an OutputStream.
8033,logback/core,ch.qos.logback.core,Class OutputStreamAppender<E>,public OutputStream getOutputStream(),The underlying output stream used by this appender.
8034,logback/core,ch.qos.logback.core,Class OutputStreamAppender<E>,public void start(),"Checks that requires parameters are set and if everything is in order, activates this appender."
8035,logback/core,ch.qos.logback.core,Class OutputStreamAppender<E>,public void setLayout(Layout<E> layout),
8036,logback/core,ch.qos.logback.core,Class OutputStreamAppender<E>,protected void append(E eventObject),
8037,logback/core,ch.qos.logback.core,Class OutputStreamAppender<E>,public void stop(),Stop this appender instance. The underlying stream or writer is also closed. Stopped appenders cannot be reused.
8038,logback/core,ch.qos.logback.core,Class OutputStreamAppender<E>,protected void closeOutputStream(),Close the underlying OutputStream.
8039,logback/core,ch.qos.logback.core,Class OutputStreamAppender<E>,public void setOutputStream(OutputStream outputStream), Sets the @link OutputStream} where the log output will go. The specified OutputStream must be opened by the user and be writable. The OutputStream will be closed when the appender instance is closed.
8040,logback/core,ch.qos.logback.core,Class OutputStreamAppender<E>,protected void writeOut(E event) throws IOException,
8041,logback/core,ch.qos.logback.core,Class OutputStreamAppender<E>,protected void subAppend(E event),Actual writing occurs here. Most subclasses of WriterAppender will need to override this method.
8042,logback/core,ch.qos.logback.core,Class OutputStreamAppender<E>,public Encoder<E> getEncoder(),
8043,logback/core,ch.qos.logback.core,Class OutputStreamAppender<E>,public void setEncoder(Encoder<E> encoder),
8044,logback/core,ch.qos.logback.core,Class OutputStreamAppender<E>,public boolean isImmediateFlush(),
8045,joran/action,ch.qos.logback.core.joran.action,Class ParamAction,"public void begin(InterpretationContext ec, String localName, Attributes attributes)",Description copied from class: Action
8046,joran/action,ch.qos.logback.core.joran.action,Class ParamAction,"public void end(InterpretationContext ec, String localName)",
8047,pattern/parser,ch.qos.logback.core.pattern.parser,Class Parser<E>,public static final String MISSING_RIGHT_PARENTHESIS,
8048,pattern/parser,ch.qos.logback.core.pattern.parser,Class Parser<E>,"public static final Map<String,String> DEFAULT_COMPOSITE_CONVERTER_MAP",
8049,pattern/parser,ch.qos.logback.core.pattern.parser,Class Parser<E>,public Parser(String pattern) throws ScanException,
8050,pattern/parser,ch.qos.logback.core.pattern.parser,Class Parser<E>,"public Converter<E> compile(Node top, Map<String,String> converterMap)","When the parsing step is done, the Node list can be transformed into a converter chain."
8051,logback/access,ch.qos.logback.access,Class PatternLayout,"public static final Map<String,String> defaultConverterMap",
8052,logback/access,ch.qos.logback.access,Class PatternLayout,public static final String HEADER_PREFIX,
8053,logback/access,ch.qos.logback.access,Class PatternLayout,public static final String CLF_PATTERN,
8054,logback/access,ch.qos.logback.access,Class PatternLayout,public static final String CLF_PATTERN_NAME,
8055,logback/access,ch.qos.logback.access,Class PatternLayout,public static final String CLF_PATTERN_NAME_2,
8056,logback/access,ch.qos.logback.access,Class PatternLayout,public static final String COMBINED_PATTERN,
8057,logback/access,ch.qos.logback.access,Class PatternLayout,"public Map<String,String> getDefaultConverterMap()",Returns the default converter map for this instance.
8058,logback/access,ch.qos.logback.access,Class PatternLayout,public String doLayout(IAccessEvent event),Description copied from interface: Layout
8059,logback/access,ch.qos.logback.access,Class PatternLayout,public void start(),
8060,logback/classic,ch.qos.logback.classic,Class PatternLayout,"public static final Map<String,String> defaultConverterMap",
8061,logback/classic,ch.qos.logback.classic,Class PatternLayout,"public Map<String,String> getDefaultConverterMap()",Description copied from class: PatternLayoutBase
8062,logback/classic,ch.qos.logback.classic,Class PatternLayout,public String doLayout(ILoggingEvent event),Description copied from interface: Layout
8063,core/pattern,ch.qos.logback.core.pattern,Class PatternLayoutBase<E>,protected PostCompileProcessor<E> postCompileProcessor,
8064,core/pattern,ch.qos.logback.core.pattern,Class PatternLayoutBase<E>,"public abstract Map<String,String> getDefaultConverterMap()",Concrete implementations of this class are responsible for elaborating the mapping between pattern words and converters.
8065,core/pattern,ch.qos.logback.core.pattern,Class PatternLayoutBase<E>,"public Map<String,String> getEffectiveConverterMap()",Returns a map where the default converter map is merged with the map contained in the context.
8066,core/pattern,ch.qos.logback.core.pattern,Class PatternLayoutBase<E>,public void start(),
8067,core/pattern,ch.qos.logback.core.pattern,Class PatternLayoutBase<E>,public void setPostCompileProcessor(PostCompileProcessor<E> postCompileProcessor),
8068,core/pattern,ch.qos.logback.core.pattern,Class PatternLayoutBase<E>,protected void setContextForConverters(Converter<E> head),"Deprecated. Use ConverterUtil.setContextForConverters(ch.qos.logback.core.Context, ch.qos.logback.core.pattern.Converter<E>) instead. This method will be removed in future releases."
8069,core/pattern,ch.qos.logback.core.pattern,Class PatternLayoutBase<E>,protected String writeLoopOnConverters(E event),
8070,core/pattern,ch.qos.logback.core.pattern,Class PatternLayoutBase<E>,public String getPattern(),
8071,core/pattern,ch.qos.logback.core.pattern,Class PatternLayoutBase<E>,public void setPattern(String pattern),
8072,core/pattern,ch.qos.logback.core.pattern,Class PatternLayoutBase<E>,public String toString(),
8073,core/pattern,ch.qos.logback.core.pattern,Class PatternLayoutBase<E>,"public Map<String,String> getInstanceConverterMap()",
8074,core/pattern,ch.qos.logback.core.pattern,Class PatternLayoutBase<E>,protected String getPresentationHeaderPrefix(),
8075,core/pattern,ch.qos.logback.core.pattern,Class PatternLayoutBase<E>,public boolean isOutputPatternAsHeader(),
8076,core/pattern,ch.qos.logback.core.pattern,Class PatternLayoutBase<E>,public void setOutputPatternAsHeader(boolean outputPatternAsHeader),
8077,core/pattern,ch.qos.logback.core.pattern,Class PatternLayoutEncoderBase<E>,public String getPattern(),
8078,core/pattern,ch.qos.logback.core.pattern,Class PatternLayoutEncoderBase<E>,public void setPattern(String pattern),
8079,core/pattern,ch.qos.logback.core.pattern,Class PatternLayoutEncoderBase<E>,public boolean isOutputPatternAsHeader(),
8080,core/pattern,ch.qos.logback.core.pattern,Class PatternLayoutEncoderBase<E>,public void setOutputPatternAsHeader(boolean outputPatternAsHeader),Print the pattern string as a header in log files
8081,core/pattern,ch.qos.logback.core.pattern,Class PatternLayoutEncoderBase<E>,public boolean isOutputPatternAsPresentationHeader(),
8082,core/pattern,ch.qos.logback.core.pattern,Class PatternLayoutEncoderBase<E>,public void setOutputPatternAsPresentationHeader(boolean outputPatternAsHeader),Deprecated. replaced by setOutputPatternAsHeader(boolean)
8083,rolling/helper,ch.qos.logback.core.rolling.helper,Enum PeriodicityType,public static final PeriodicityType ERRONEOUS,
8084,rolling/helper,ch.qos.logback.core.rolling.helper,Enum PeriodicityType,public static final PeriodicityType TOP_OF_MILLISECOND,
8085,rolling/helper,ch.qos.logback.core.rolling.helper,Enum PeriodicityType,public static final PeriodicityType TOP_OF_SECOND,
8086,rolling/helper,ch.qos.logback.core.rolling.helper,Enum PeriodicityType,public static final PeriodicityType TOP_OF_MINUTE,
8087,rolling/helper,ch.qos.logback.core.rolling.helper,Enum PeriodicityType,public static final PeriodicityType TOP_OF_HOUR,
8088,rolling/helper,ch.qos.logback.core.rolling.helper,Enum PeriodicityType,public static final PeriodicityType HALF_DAY,
8089,rolling/helper,ch.qos.logback.core.rolling.helper,Enum PeriodicityType,public static final PeriodicityType TOP_OF_DAY,
8090,rolling/helper,ch.qos.logback.core.rolling.helper,Enum PeriodicityType,public static final PeriodicityType TOP_OF_WEEK,
8091,rolling/helper,ch.qos.logback.core.rolling.helper,Enum PeriodicityType,public static PeriodicityType[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (PeriodicityType c : PeriodicityType.values())  System.out.println(c);"
8092,access/filter,ch.qos.logback.access.filter,Class PeriodicStats,public double getAverage(),
8093,onJoran/implicit,chapters.onJoran.implicit,Class PrintMeImplicitAction,"public boolean isApplicable(ElementPath elementPath, Attributes attributes, InterpretationContext ec)",Description copied from class: ImplicitAction
8094,onJoran/implicit,chapters.onJoran.implicit,Class PrintMeImplicitAction,"public void begin(InterpretationContext ec, String name, Attributes attributes)",Description copied from class: Action
8095,joran/action,ch.qos.logback.core.joran.action,Class PropertyAction,"public void begin(InterpretationContext ec, String localName, Attributes attributes)","Set a new property for the execution context by name, value pair, or adds all the properties found in the given file."
8096,joran/action,ch.qos.logback.core.joran.action,Class PropertyAction,"public void end(InterpretationContext ec, String name)",
8097,core/spi,ch.qos.logback.core.spi,Interface PropertyContainer,String getProperty(String key),
8098,classic/pattern,ch.qos.logback.classic.pattern,Class PropertyConverter,public void start(),Description copied from class: DynamicConverter
8099,joran/util,ch.qos.logback.core.joran.util,Class PropertySetter,protected final Object obj,
8100,joran/util,ch.qos.logback.core.joran.util,Class PropertySetter,protected final Class<?> objClass,
8101,joran/util,ch.qos.logback.core.joran.util,Class PropertySetter,"public void setProperty(String name, String value)","Set a property on this PropertySetter's Object. If successful, this method will invoke a setter method on the underlying Object. The setter is the one for the specified property name and the value is determined partly from the setter argument type and partly from the value specified in the call to this method. If the setter expects a String no conversion is necessary. If it expects an int, then an attempt is made to convert 'value' to an int using new Integer(value). If the setter expects a boolean, the conversion is by new Boolean(value)."
8102,joran/util,ch.qos.logback.core.joran.util,Class PropertySetter,public AggregationType computeAggregationType(String name),
8103,joran/util,ch.qos.logback.core.joran.util,Class PropertySetter,public Class<?> getObjClass(),
8104,joran/util,ch.qos.logback.core.joran.util,Class PropertySetter,"public void addComplexProperty(String name, Object complexProperty)",
8105,joran/util,ch.qos.logback.core.joran.util,Class PropertySetter,"public void addBasicProperty(String name, String strValue)",
8106,joran/util,ch.qos.logback.core.joran.util,Class PropertySetter,"public void setComplexProperty(String name, Object complexProperty)",
8107,joran/util,ch.qos.logback.core.joran.util,Class PropertySetter,public Object getObj(),
8108,core/util,ch.qos.logback.core.util,Class PropertySetterException,public PropertySetterException(String msg),
8109,core/util,ch.qos.logback.core.util,Class PropertySetterException,public PropertySetterException(Throwable rootCause),
8110,joran/conditional,ch.qos.logback.core.joran.conditional,Class PropertyWrapperForScripts,"public void setPropertyContainers(PropertyContainer local, PropertyContainer context)",
8111,joran/conditional,ch.qos.logback.core.joran.conditional,Class PropertyWrapperForScripts,public boolean isNull(String k),
8112,joran/conditional,ch.qos.logback.core.joran.conditional,Class PropertyWrapperForScripts,public boolean isDefined(String k),
8113,joran/conditional,ch.qos.logback.core.joran.conditional,Class PropertyWrapperForScripts,public String p(String k),
8114,joran/action,ch.qos.logback.classic.joran.action,Class ReceiverAction,"public void begin(InterpretationContext ic, String name, Attributes attributes) throws ActionException",Description copied from class: Action
8115,classic/net,ch.qos.logback.classic.net,Class ReceiverBase,public final void start(),
8116,classic/net,ch.qos.logback.classic.net,Class ReceiverBase,public final void stop(),
8117,classic/net,ch.qos.logback.classic.net,Class ReceiverBase,public final boolean isStarted(),
8118,classic/net,ch.qos.logback.classic.net,Class ReceiverBase,protected abstract boolean shouldStart(),Determines whether this receiver should start. Subclasses will implement this method to do any subclass-specific validation. The subclass's getRunnableTask() method will be invoked (and the task returned will be submitted to the executor) if and only if this method returns true
8119,classic/net,ch.qos.logback.classic.net,Class ReceiverBase,protected abstract void onStop(),Allows a subclass to participate in receiver shutdown.
8120,classic/turbo,ch.qos.logback.classic.turbo,Class ReconfigureOnChangeFilter,public static final long DEFAULT_REFRESH_PERIOD,Scan for changes in configuration file once every minute.
8121,classic/turbo,ch.qos.logback.classic.turbo,Class ReconfigureOnChangeFilter,public void start(),
8122,classic/turbo,ch.qos.logback.classic.turbo,Class ReconfigureOnChangeFilter,public String toString(),
8123,classic/turbo,ch.qos.logback.classic.turbo,Class ReconfigureOnChangeFilter,"public FilterReply decide(org.slf4j.Marker marker, Logger logger, Level level, String format, Object[] params, Throwable t)",Description copied from class: TurboFilter
8124,classic/turbo,ch.qos.logback.classic.turbo,Class ReconfigureOnChangeFilter,protected boolean changeDetected(long now),
8125,classic/turbo,ch.qos.logback.classic.turbo,Class ReconfigureOnChangeFilter,public long getRefreshPeriod(),
8126,classic/joran,ch.qos.logback.classic.joran,Class ReconfigureOnChangeTask,public void run(),
8127,core/recovery,ch.qos.logback.core.recovery,Class RecoveryCoordinator,public static final long BACKOFF_COEFFICIENT_MIN,
8128,core/recovery,ch.qos.logback.core.recovery,Class RecoveryCoordinator,public RecoveryCoordinator(),
8129,pattern/util,ch.qos.logback.core.pattern.util,Class RegularEscapeUtil,"public void escape(String escapeChars, StringBuffer buf, char next, int pointer)",
8130,rolling/helper,ch.qos.logback.core.rolling.helper,Class RenameUtil,"public void rename(String src, String target) throws RolloverFailure","A relatively robust file renaming method which in case of failure due to src and target being on different volumes, falls back onto renaming by copying."
8131,rolling/helper,ch.qos.logback.core.rolling.helper,Class RenameUtil,"public void renameByCopying(String src, String target) throws RolloverFailure",
8132,core/pattern,ch.qos.logback.core.pattern,Class ReplacingCompositeConverter<E>,public void start(),Description copied from class: DynamicConverter
8133,access/pattern,ch.qos.logback.access.pattern,Class RequestAttributeConverter,public void start(),Description copied from class: DynamicConverter
8134,access/pattern,ch.qos.logback.access.pattern,Class RequestCookieConverter,public void start(),Description copied from class: DynamicConverter
8135,access/pattern,ch.qos.logback.access.pattern,Class RequestHeaderConverter,public void start(),Description copied from class: DynamicConverter
8136,access/jetty,ch.qos.logback.access.jetty,Class RequestLogImpl,"public void log(org.eclipse.jetty.server.Request jettyRequest, org.eclipse.jetty.server.Response jettyResponse)",
8137,access/jetty,ch.qos.logback.access.jetty,Class RequestLogImpl,public void start(),
8138,access/jetty,ch.qos.logback.access.jetty,Class RequestLogImpl,protected void configure(),
8139,access/jetty,ch.qos.logback.access.jetty,Class RequestLogImpl,protected URL getConfigurationFileURL(),
8140,access/jetty,ch.qos.logback.access.jetty,Class RequestLogImpl,public void stop(),
8141,access/jetty,ch.qos.logback.access.jetty,Class RequestLogImpl,public boolean isRunning(),
8142,access/jetty,ch.qos.logback.access.jetty,Class RequestLogImpl,public void setFileName(String fileName),
8143,access/jetty,ch.qos.logback.access.jetty,Class RequestLogImpl,public void setResource(String resource),
8144,access/jetty,ch.qos.logback.access.jetty,Class RequestLogImpl,public boolean isStarted(),
8145,access/jetty,ch.qos.logback.access.jetty,Class RequestLogImpl,public boolean isStarting(),
8146,access/jetty,ch.qos.logback.access.jetty,Class RequestLogImpl,public boolean isStopping(),
8147,access/jetty,ch.qos.logback.access.jetty,Class RequestLogImpl,public boolean isStopped(),
8148,access/jetty,ch.qos.logback.access.jetty,Class RequestLogImpl,public boolean isFailed(),
8149,access/jetty,ch.qos.logback.access.jetty,Class RequestLogImpl,public boolean isQuiet(),
8150,access/jetty,ch.qos.logback.access.jetty,Class RequestLogImpl,public void setQuiet(boolean quiet),
8151,access/jetty,ch.qos.logback.access.jetty,Class RequestLogImpl,public void addAppender(Appender<IAccessEvent> newAppender),Description copied from interface: AppenderAttachable
8152,access/jetty,ch.qos.logback.access.jetty,Class RequestLogImpl,public Iterator<Appender<IAccessEvent>> iteratorForAppenders(),Description copied from interface: AppenderAttachable
8153,access/jetty,ch.qos.logback.access.jetty,Class RequestLogImpl,public Appender<IAccessEvent> getAppender(String name),Description copied from interface: AppenderAttachable
8154,access/jetty,ch.qos.logback.access.jetty,Class RequestLogImpl,public boolean isAttached(Appender<IAccessEvent> appender),Description copied from interface: AppenderAttachable
8155,access/jetty,ch.qos.logback.access.jetty,Class RequestLogImpl,public void detachAndStopAllAppenders(),Description copied from interface: AppenderAttachable
8156,access/jetty,ch.qos.logback.access.jetty,Class RequestLogImpl,public boolean detachAppender(Appender<IAccessEvent> appender),Description copied from interface: AppenderAttachable
8157,access/jetty,ch.qos.logback.access.jetty,Class RequestLogImpl,public boolean detachAppender(String name),Description copied from interface: AppenderAttachable
8158,access/jetty,ch.qos.logback.access.jetty,Class RequestLogImpl,public void addFilter(Filter<IAccessEvent> newFilter),Description copied from interface: FilterAttachable
8159,access/jetty,ch.qos.logback.access.jetty,Class RequestLogImpl,public void clearAllFilters(),
8160,access/jetty,ch.qos.logback.access.jetty,Class RequestLogImpl,public List<Filter<IAccessEvent>> getCopyOfAttachedFiltersList(),Description copied from interface: FilterAttachable
8161,access/jetty,ch.qos.logback.access.jetty,Class RequestLogImpl,public FilterReply getFilterChainDecision(IAccessEvent event),Description copied from interface: FilterAttachable
8162,access/jetty,ch.qos.logback.access.jetty,Class RequestLogImpl,public void addLifeCycleListener(org.eclipse.jetty.util.component.LifeCycle.Listener listener),
8163,access/jetty,ch.qos.logback.access.jetty,Class RequestLogRegistry,public static void register(RequestLogImpl requestLogImpl),
8164,access/pattern,ch.qos.logback.access.pattern,Class RequestParameterConverter,public void start(),Description copied from class: DynamicConverter
8165,core/recovery,ch.qos.logback.core.recovery,Class ResilientFileOutputStream,public FileChannel getChannel(),
8166,core/recovery,ch.qos.logback.core.recovery,Class ResilientFileOutputStream,public File getFile(),
8167,core/recovery,ch.qos.logback.core.recovery,Class ResilientOutputStreamBase,protected OutputStream os,
8168,core/recovery,ch.qos.logback.core.recovery,Class ResilientOutputStreamBase,"public void write(byte[] b, int off, int len)",
8169,core/recovery,ch.qos.logback.core.recovery,Class ResilientOutputStreamBase,public void write(int b),
8170,core/recovery,ch.qos.logback.core.recovery,Class ResilientOutputStreamBase,public void flush(),
8171,core/recovery,ch.qos.logback.core.recovery,Class ResilientOutputStreamBase,public void postIOFailure(IOException e),
8172,core/recovery,ch.qos.logback.core.recovery,Class ResilientOutputStreamBase,public void close() throws IOException,
8173,core/recovery,ch.qos.logback.core.recovery,Class ResilientOutputStreamBase,public void addStatus(Status status),
8174,core/recovery,ch.qos.logback.core.recovery,Class ResilientOutputStreamBase,public Context getContext(),
8175,core/property,ch.qos.logback.core.property,Class ResourceExistsPropertyDefiner,public String getResource(),
8176,core/property,ch.qos.logback.core.property,Class ResourceExistsPropertyDefiner,public void setResource(String resource),The resource to search for on the class path.
8177,access/pattern,ch.qos.logback.access.pattern,Class ResponseHeaderConverter,public void start(),Description copied from class: DynamicConverter
8178,rolling/helper,ch.qos.logback.core.rolling.helper,Class RollingCalendar,public RollingCalendar(String datePattern),
8179,rolling/helper,ch.qos.logback.core.rolling.helper,Class RollingCalendar,public PeriodicityType getPeriodicityType(),
8180,rolling/helper,ch.qos.logback.core.rolling.helper,Class RollingCalendar,public PeriodicityType computePeriodicityType(),
8181,rolling/helper,ch.qos.logback.core.rolling.helper,Class RollingCalendar,public boolean isCollisionFree(),
8182,rolling/helper,ch.qos.logback.core.rolling.helper,Class RollingCalendar,public void printPeriodicity(ContextAwareBase cab),
8183,rolling/helper,ch.qos.logback.core.rolling.helper,Class RollingCalendar,"public long periodBarriersCrossed(long start, long end)",
8184,rolling/helper,ch.qos.logback.core.rolling.helper,Class RollingCalendar,"public static int diffInMonths(long startTime, long endTime)",
8185,rolling/helper,ch.qos.logback.core.rolling.helper,Class RollingCalendar,"public Date getEndOfNextNthPeriod(Date now, int periods)",
8186,rolling/helper,ch.qos.logback.core.rolling.helper,Class RollingCalendar,public Date getNextTriggeringDate(Date now),
8187,core/rolling,ch.qos.logback.core.rolling,Class RollingFileAppender<E>,public void start(),Description copied from class: FileAppender
8188,core/rolling,ch.qos.logback.core.rolling,Class RollingFileAppender<E>,public void stop(),Description copied from class: OutputStreamAppender
8189,core/rolling,ch.qos.logback.core.rolling,Class RollingFileAppender<E>,public void setFile(String file),Description copied from class: FileAppender
8190,core/rolling,ch.qos.logback.core.rolling,Class RollingFileAppender<E>,public String getFile(),Description copied from class: FileAppender
8191,core/rolling,ch.qos.logback.core.rolling,Class RollingFileAppender<E>,public void rollover(),Implemented by delegating most of the rollover work to a rolling policy.
8192,core/rolling,ch.qos.logback.core.rolling,Class RollingFileAppender<E>,protected void subAppend(E event),This method differentiates RollingFileAppender from its super class.
8193,core/rolling,ch.qos.logback.core.rolling,Class RollingFileAppender<E>,public RollingPolicy getRollingPolicy(),
8194,core/rolling,ch.qos.logback.core.rolling,Class RollingFileAppender<E>,public TriggeringPolicy<E> getTriggeringPolicy(),
8195,core/rolling,ch.qos.logback.core.rolling,Class RollingFileAppender<E>,public void setRollingPolicy(RollingPolicy policy),"Sets the rolling policy. In case the 'policy' argument also implements TriggeringPolicy, then the triggering policy for this appender is automatically set to be the policy argument."
8196,core/rolling,ch.qos.logback.core.rolling,Interface RollingPolicy,void rollover() throws RolloverFailure,"Rolls over log files according to implementation policy. This method is invoked by RollingFileAppender, usually at the behest of its TriggeringPolicy."
8197,core/rolling,ch.qos.logback.core.rolling,Interface RollingPolicy,String getActiveFileName(),"Get the name of the active log file. With implementations such as TimeBasedRollingPolicy, this method returns a new file name, where the actual output will be sent. On other implementations, this method might return the FileAppender's file property."
8198,core/rolling,ch.qos.logback.core.rolling,Interface RollingPolicy,CompressionMode getCompressionMode(),The compression mode for this policy.
8199,core/rolling,ch.qos.logback.core.rolling,Class RollingPolicyBase,protected CompressionMode compressionMode,
8200,core/rolling,ch.qos.logback.core.rolling,Class RollingPolicyBase,protected void determineCompressionMode(),"Given the FileNamePattern string, this method determines the compression mode depending on last letters of the fileNamePatternStr. Patterns ending with .gz imply GZIP compression, endings with '.zip' imply ZIP compression. Otherwise and by default, there is no compression."
8201,core/rolling,ch.qos.logback.core.rolling,Class RollingPolicyBase,public void setFileNamePattern(String fnp),
8202,core/rolling,ch.qos.logback.core.rolling,Class RollingPolicyBase,public String getFileNamePattern(),
8203,core/rolling,ch.qos.logback.core.rolling,Class RollingPolicyBase,public CompressionMode getCompressionMode(),Description copied from interface: RollingPolicy
8204,core/rolling,ch.qos.logback.core.rolling,Class RollingPolicyBase,public boolean isStarted(),
8205,core/rolling,ch.qos.logback.core.rolling,Class RollingPolicyBase,public void start(),
8206,core/rolling,ch.qos.logback.core.rolling,Class RollingPolicyBase,public void stop(),
8207,core/rolling,ch.qos.logback.core.rolling,Class RollingPolicyBase,public void setParent(FileAppender<?> appender),Description copied from interface: RollingPolicy
8208,core/rolling,ch.qos.logback.core.rolling,Class RollingPolicyBase,public boolean isParentPrudent(),
8209,core/rolling,ch.qos.logback.core.rolling,Class RolloverFailure,public RolloverFailure(String msg),
8210,classic/pattern,ch.qos.logback.classic.pattern,Class RootCauseFirstThrowableProxyConverter,protected String throwableProxyToString(IThrowableProxy tp),
8211,joran/action,ch.qos.logback.classic.joran.action,Class RootLoggerAction,"public void begin(InterpretationContext ec, String name, Attributes attributes)",Description copied from class: Action
8212,joran/action,ch.qos.logback.classic.joran.action,Class RootLoggerAction,"public void end(InterpretationContext ec, String name)",
8213,joran/spi,ch.qos.logback.core.joran.spi,Interface RuleStore,"void addRule(ElementSelector elementSelector, String actionClassStr) throws ClassNotFoundException","Add a new rule, given by a pattern and a action class (String)."
8214,joran/spi,ch.qos.logback.core.joran.spi,Interface RuleStore,"void addRule(ElementSelector elementSelector, Action action)","Add a new rule, given by a pattern and an action instance."
8215,chapters/filters,chapters.filters,Class SampleTurboFilter,"public FilterReply decide(org.slf4j.Marker marker, Logger logger, Level level, String format, Object[] params, Throwable t)",Description copied from class: TurboFilter
8216,chapters/filters,chapters.filters,Class SampleTurboFilter,public String getMarker(),
8217,chapters/filters,chapters.filters,Class SampleTurboFilter,public void setMarker(String markerStr),
8218,joran/event,ch.qos.logback.core.joran.event,Class SaxEvent,public final String namespaceURI,
8219,joran/event,ch.qos.logback.core.joran.event,Class SaxEvent,public final String localName,
8220,joran/event,ch.qos.logback.core.joran.event,Class SaxEvent,public final String qName,
8221,joran/event,ch.qos.logback.core.joran.event,Class SaxEvent,public String getLocalName(),
8222,joran/event,ch.qos.logback.core.joran.event,Class SaxEvent,public Locator getLocator(),
8223,joran/event,ch.qos.logback.core.joran.event,Class SaxEvent,public String getNamespaceURI(),
8224,joran/event,ch.qos.logback.core.joran.event,Class SaxEventRecorder,public final void recordEvents(InputStream inputStream) throws JoranException,
8225,joran/event,ch.qos.logback.core.joran.event,Class SaxEventRecorder,public List<SaxEvent> recordEvents(InputSource inputSource) throws JoranException,
8226,joran/event,ch.qos.logback.core.joran.event,Class SaxEventRecorder,public void startDocument(),
8227,joran/event,ch.qos.logback.core.joran.event,Class SaxEventRecorder,public Locator getLocator(),
8228,joran/event,ch.qos.logback.core.joran.event,Class SaxEventRecorder,public void setDocumentLocator(Locator l),
8229,joran/event,ch.qos.logback.core.joran.event,Class SaxEventRecorder,"public void startElement(String namespaceURI, String localName, String qName, Attributes atts)",
8230,joran/event,ch.qos.logback.core.joran.event,Class SaxEventRecorder,"public void characters(char[] ch, int start, int length)",
8231,joran/event,ch.qos.logback.core.joran.event,Class SaxEventRecorder,"public void endElement(String namespaceURI, String localName, String qName)",
8232,joran/event,ch.qos.logback.core.joran.event,Class SaxEventRecorder,public void error(SAXParseException spe) throws SAXException,
8233,joran/event,ch.qos.logback.core.joran.event,Class SaxEventRecorder,public void fatalError(SAXParseException spe) throws SAXException,
8234,joran/event,ch.qos.logback.core.joran.event,Class SaxEventRecorder,public void warning(SAXParseException spe) throws SAXException,
8235,joran/event,ch.qos.logback.core.joran.event,Class SaxEventRecorder,public void addError(String msg),
8236,joran/event,ch.qos.logback.core.joran.event,Class SaxEventRecorder,"public void addError(String msg, Throwable ex)",
8237,joran/event,ch.qos.logback.core.joran.event,Class SaxEventRecorder,public void addInfo(String msg),
8238,joran/event,ch.qos.logback.core.joran.event,Class SaxEventRecorder,"public void addInfo(String msg, Throwable ex)",
8239,joran/event,ch.qos.logback.core.joran.event,Class SaxEventRecorder,public void addStatus(Status status),
8240,joran/event,ch.qos.logback.core.joran.event,Class SaxEventRecorder,public void addWarn(String msg),
8241,joran/event,ch.qos.logback.core.joran.event,Class SaxEventRecorder,"public void addWarn(String msg, Throwable ex)",
8242,joran/event,ch.qos.logback.core.joran.event,Class SaxEventRecorder,public Context getContext(),
8243,joran/event,ch.qos.logback.core.joran.event,Class SaxEventRecorder,public void setContext(Context context),
8244,core/spi,ch.qos.logback.core.spi,Class ScanException,public ScanException(String msg),
8245,net/ssl,ch.qos.logback.core.net.ssl,Class SecureRandomFactoryBean,"public SecureRandom createSecureRandom() throws NoSuchProviderException, NoSuchAlgorithmException",Creates a new SecureRandom generator using the receiver's configuration.
8246,net/ssl,ch.qos.logback.core.net.ssl,Class SecureRandomFactoryBean,public String getAlgorithm(),Gets the secure random generator algorithm name.
8247,net/ssl,ch.qos.logback.core.net.ssl,Class SecureRandomFactoryBean,public void setAlgorithm(String algorithm),Sets the secure random generator algorithm name.
8248,net/ssl,ch.qos.logback.core.net.ssl,Class SecureRandomFactoryBean,public String getProvider(),Gets the JCA provider name for the secure random generator.
8249,access/spi,ch.qos.logback.access.spi,Interface ServerAdapter,long getRequestTimestamp(),
8250,access/spi,ch.qos.logback.access.spi,Interface ServerAdapter,long getContentLength(),
8251,access/spi,ch.qos.logback.access.spi,Interface ServerAdapter,int getStatusCode(),
8252,net/server,ch.qos.logback.core.net.server,Interface ServerListener<T extends Client>,"T acceptClient() throws IOException, InterruptedException",Accepts the next client that appears on this listener. An implementation of this method is expected to block the calling thread and not return until either a client appears or an exception occurs.
8253,net/server,ch.qos.logback.core.net.server,Interface ServerRunner<T extends Client>,boolean isRunning(),Gets a flag indicating whether the server is currently running.
8254,net/server,ch.qos.logback.core.net.server,Interface ServerRunner<T extends Client>,void stop() throws IOException,"Stops execution of the runner. This method must cause all I/O and thread resources associated with the runner to be released. If the receiver has not been started, this method must have no effect."
8255,net/server,ch.qos.logback.access.net.server,Class ServerSocketAppender,protected void postProcessEvent(IAccessEvent event),Description copied from class: AbstractServerSocketAppender
8256,net/server,ch.qos.logback.classic.net.server,Class ServerSocketAppender,protected void postProcessEvent(ILoggingEvent event),Description copied from class: AbstractServerSocketAppender
8257,net/server,ch.qos.logback.classic.net.server,Class ServerSocketAppender,protected PreSerializationTransformer<ILoggingEvent> getPST(),Description copied from class: AbstractServerSocketAppender
8258,net/server,ch.qos.logback.classic.net.server,Class ServerSocketAppender,public boolean isIncludeCallerData(),
8259,net/server,ch.qos.logback.core.net.server,Class ServerSocketListener<T extends Client>,public T acceptClient() throws IOException,Accepts the next client that appears on this listener. An implementation of this method is expected to block the calling thread and not return until either a client appears or an exception occurs.
8260,net/server,ch.qos.logback.core.net.server,Class ServerSocketListener<T extends Client>,"protected abstract T createClient(String id, Socket socket) throws IOException",Creates the client object for a new socket connection
8261,net/server,ch.qos.logback.core.net.server,Class ServerSocketListener<T extends Client>,public void close(),"Closes any underlying Closeable resources associated with this listener. Note that (as described in Doug Lea's discussion about interrupting I/O operations in Concurrent Programming in Java (Addison-Wesley Professional, 2nd edition, 1999) this method is used to interrupt any blocked I/O operation in the client when the server is shutting down. The client implementation must anticipate this potential, and gracefully exit when the blocked I/O operation throws the relevant IOException subclass. Note also, that unlike Closeable.close() this method is not permitted to propagate any IOException that occurs when closing the underlying resource(s)."
8262,net/server,ch.qos.logback.classic.net.server,Class ServerSocketReceiver,protected boolean shouldStart(),Starts the server.
8263,net/server,ch.qos.logback.classic.net.server,Class ServerSocketReceiver,protected ServerListener<ch.qos.logback.classic.net.server.RemoteAppenderClient> createServerListener(ServerSocket socket),
8264,net/server,ch.qos.logback.classic.net.server,Class ServerSocketReceiver,"protected ServerRunner createServerRunner(ServerListener<ch.qos.logback.classic.net.server.RemoteAppenderClient> listener, Executor executor)",
8265,net/server,ch.qos.logback.classic.net.server,Class ServerSocketReceiver,protected Runnable getRunnableTask(),Description copied from class: ReceiverBase
8266,net/server,ch.qos.logback.classic.net.server,Class ServerSocketReceiver,protected void onStop(),Allows a subclass to participate in receiver shutdown.
8267,net/server,ch.qos.logback.classic.net.server,Class ServerSocketReceiver,protected ServerSocketFactory getServerSocketFactory() throws Exception,Gets the server socket factory. Subclasses may override to provide a custom factory.
8268,net/server,ch.qos.logback.classic.net.server,Class ServerSocketReceiver,protected InetAddress getInetAddress() throws UnknownHostException,Gets the local address for the listener.
8269,net/server,ch.qos.logback.classic.net.server,Class ServerSocketReceiver,public int getPort(),Gets the local port for the listener.
8270,net/server,ch.qos.logback.classic.net.server,Class ServerSocketReceiver,public void setPort(int port),Sets the local port for the listener.
8271,net/server,ch.qos.logback.classic.net.server,Class ServerSocketReceiver,public int getBacklog(),Gets the listener queue depth. This represents the number of connected clients whose connections have not yet been accepted.
8272,net/server,ch.qos.logback.classic.net.server,Class ServerSocketReceiver,public void setBacklog(int backlog),Sets the listener queue depth. This represents the number of connected clients whose connections have not yet been accepted.
8273,net/server,ch.qos.logback.classic.net.server,Class ServerSocketReceiver,public String getAddress(),Gets the local address for the listener.
8274,joran/action,ch.qos.logback.core.joran.action,Class ShutdownHookAction,"public void begin(InterpretationContext ic, String name, Attributes attributes) throws ActionException",Instantiates a shutdown hook of the given class and sets its name. The hook thus generated is placed in the InterpretationContext's shutdown hook bag.
8275,access/sift,ch.qos.logback.access.sift,Class SiftAction,"public void begin(InterpretationContext ic, String name, Attributes attributes) throws ActionException",Description copied from class: Action
8276,access/sift,ch.qos.logback.access.sift,Class SiftAction,"public void end(InterpretationContext ic, String name) throws ActionException",
8277,access/sift,ch.qos.logback.access.sift,Class SiftAction,public void inPlay(SaxEvent event),
8278,classic/sift,ch.qos.logback.classic.sift,Class SiftAction,"public void begin(InterpretationContext ic, String name, Attributes attributes) throws ActionException",Description copied from class: Action
8279,classic/sift,ch.qos.logback.classic.sift,Class SiftAction,"public void end(InterpretationContext ic, String name) throws ActionException",
8280,classic/sift,ch.qos.logback.classic.sift,Class SiftAction,public void inPlay(SaxEvent event),
8281,access/sift,ch.qos.logback.access.sift,Class SiftingAppender,public void start(),
8282,access/sift,ch.qos.logback.access.sift,Class SiftingAppender,protected long getTimestamp(IAccessEvent event),
8283,access/sift,ch.qos.logback.access.sift,Class SiftingAppender,protected boolean eventMarksEndOfLife(IAccessEvent event),
8284,classic/sift,ch.qos.logback.classic.sift,Class SiftingAppender,protected long getTimestamp(ILoggingEvent event),
8285,classic/sift,ch.qos.logback.classic.sift,Class SiftingAppender,public void setDiscriminator(Discriminator<ILoggingEvent> discriminator),
8286,core/sift,ch.qos.logback.core.sift,Class SiftingAppenderBase<E>,public Duration getTimeout(),
8287,core/sift,ch.qos.logback.core.sift,Class SiftingAppenderBase<E>,public void setTimeout(Duration timeout),
8288,core/sift,ch.qos.logback.core.sift,Class SiftingAppenderBase<E>,public int getMaxAppenderCount(),
8289,core/sift,ch.qos.logback.core.sift,Class SiftingAppenderBase<E>,public void setMaxAppenderCount(int maxAppenderCount),
8290,core/sift,ch.qos.logback.core.sift,Class SiftingAppenderBase<E>,public void setAppenderFactory(AppenderFactory<E> appenderFactory),This setter is intended to be invoked by SiftAction. Customers have no reason to invoke this method directly.
8291,core/sift,ch.qos.logback.core.sift,Class SiftingAppenderBase<E>,public void start(),
8292,core/sift,ch.qos.logback.core.sift,Class SiftingAppenderBase<E>,public void stop(),
8293,core/sift,ch.qos.logback.core.sift,Class SiftingAppenderBase<E>,protected abstract long getTimestamp(E event),
8294,core/sift,ch.qos.logback.core.sift,Class SiftingAppenderBase<E>,protected void append(E event),
8295,core/sift,ch.qos.logback.core.sift,Class SiftingAppenderBase<E>,protected abstract boolean eventMarksEndOfLife(E event),
8296,core/sift,ch.qos.logback.core.sift,Class SiftingAppenderBase<E>,public Discriminator<E> getDiscriminator(),
8297,core/sift,ch.qos.logback.core.sift,Class SiftingAppenderBase<E>,public void setDiscriminator(Discriminator<E> discriminator),
8298,core/sift,ch.qos.logback.core.sift,Class SiftingAppenderBase<E>,public AppenderTracker<E> getAppenderTracker(),
8299,access/sift,ch.qos.logback.access.sift,Class SiftingJoranConfigurator,protected ElementPath initialElementPath(),
8300,access/sift,ch.qos.logback.access.sift,Class SiftingJoranConfigurator,protected void addInstanceRules(RuleStore rs),
8301,access/sift,ch.qos.logback.access.sift,Class SiftingJoranConfigurator,protected void buildInterpreter(),
8302,classic/sift,ch.qos.logback.classic.sift,Class SiftingJoranConfigurator,protected ElementPath initialElementPath(),
8303,classic/sift,ch.qos.logback.classic.sift,Class SiftingJoranConfigurator,protected void addInstanceRules(RuleStore rs),
8304,classic/sift,ch.qos.logback.classic.sift,Class SiftingJoranConfigurator,protected void addDefaultNestedComponentRegistryRules(DefaultNestedComponentRegistry registry),
8305,classic/sift,ch.qos.logback.classic.sift,Class SiftingJoranConfigurator,protected void buildInterpreter(),
8306,core/sift,ch.qos.logback.core.sift,Class SiftingJoranConfiguratorBase<E>,protected final String key,
8307,core/sift,ch.qos.logback.core.sift,Class SiftingJoranConfiguratorBase<E>,protected final String value,
8308,core/sift,ch.qos.logback.core.sift,Class SiftingJoranConfiguratorBase<E>,protected void addImplicitRules(Interpreter interpreter),
8309,core/sift,ch.qos.logback.core.sift,Class SiftingJoranConfiguratorBase<E>,protected void addInstanceRules(RuleStore rs),
8310,core/sift,ch.qos.logback.core.sift,Class SiftingJoranConfiguratorBase<E>,public abstract Appender<E> getAppender(),
8311,core/sift,ch.qos.logback.core.sift,Class SiftingJoranConfiguratorBase<E>,"protected void oneAndOnlyOneCheck(Map<?,?> appenderMap)",
8312,core/sift,ch.qos.logback.core.sift,Class SiftingJoranConfiguratorBase<E>,public void doConfigure(List<SaxEvent> eventList) throws JoranException,
8313,chapters/onJoran,chapters.onJoran,Class SimpleConfigurator,"public SimpleConfigurator(Map<ElementSelector,Action> ruleMap)",
8314,chapters/onJoran,chapters.onJoran,Class SimpleConfigurator,protected void addInstanceRules(RuleStore rs),
8315,db/names,ch.qos.logback.classic.db.names,Class SimpleDBNameResolver,public <N extends Enum<?>> String getTableName(N tableName),
8316,db/names,ch.qos.logback.classic.db.names,Class SimpleDBNameResolver,public <N extends Enum<?>> String getColumnName(N columnName),
8317,db/names,ch.qos.logback.classic.db.names,Class SimpleDBNameResolver,public void setTableNamePrefix(String tableNamePrefix),
8318,db/names,ch.qos.logback.classic.db.names,Class SimpleDBNameResolver,public void setTableNameSuffix(String tableNameSuffix),
8319,db/names,ch.qos.logback.classic.db.names,Class SimpleDBNameResolver,public void setColumnNamePrefix(String columnNamePrefix),
8320,pattern/parser,ch.qos.logback.core.pattern.parser,Class SimpleKeywordNode,public List<String> getOptions(),
8321,pattern/parser,ch.qos.logback.core.pattern.parser,Class SimpleKeywordNode,public void setOptions(List<String> optionList),
8322,pattern/parser,ch.qos.logback.core.pattern.parser,Class SimpleKeywordNode,public boolean equals(Object o),
8323,pattern/parser,ch.qos.logback.core.pattern.parser,Class SimpleKeywordNode,public int hashCode(),
8324,joran/spi,ch.qos.logback.core.joran.spi,Class SimpleRuleStore,"public void addRule(ElementSelector elementSelector, Action action)","Add a new rule, i.e. a pattern, action pair to the rule store. Note that the added action's LoggerRepository will be set in the process."
8325,joran/spi,ch.qos.logback.core.joran.spi,Class SimpleRuleStore,"public void addRule(ElementSelector elementSelector, String actionClassName)",Description copied from interface: RuleStore
8326,joran/spi,ch.qos.logback.core.joran.spi,Class SimpleRuleStore,public List<Action> matchActions(ElementPath elementPath),Description copied from interface: RuleStore
8327,classic/net,ch.qos.logback.classic.net,Class SimpleSocketServer,public static void main(String[] argv) throws Exception,
8328,classic/net,ch.qos.logback.classic.net,Class SimpleSocketServer,"protected static void doMain(Class<? extends SimpleSocketServer> serverClass, String[] argv) throws Exception",
8329,classic/net,ch.qos.logback.classic.net,Class SimpleSocketServer,public void run(),
8330,classic/net,ch.qos.logback.classic.net,Class SimpleSocketServer,protected String getServerThreadName(),Returns the name given to the server thread.
8331,classic/net,ch.qos.logback.classic.net,Class SimpleSocketServer,protected String getClientThreadName(Socket socket),Returns a name to identify each client thread.
8332,classic/net,ch.qos.logback.classic.net,Class SimpleSocketServer,protected ServerSocketFactory getServerSocketFactory(),Gets the platform default ServerSocketFactory. Subclasses may override to provide a custom server socket factory.
8333,classic/net,ch.qos.logback.classic.net,Class SimpleSocketServer,public CountDownLatch getLatch(),Used for testing purposes
8334,classic/net,ch.qos.logback.classic.net,Class SimpleSocketServer,public boolean isClosed(),
8335,classic/net,ch.qos.logback.classic.net,Class SimpleSocketServer,public void close(),
8336,classic/net,ch.qos.logback.classic.net,Class SimpleSocketServer,public void socketNodeClosing(SocketNode sn),
8337,classic/net,ch.qos.logback.classic.net,Class SimpleSSLSocketServer,"public SimpleSSLSocketServer(LoggerContext lc, int port) throws NoSuchAlgorithmException",Creates a new server using the default SSL context.
8338,classic/net,ch.qos.logback.classic.net,Class SimpleSSLSocketServer,public static void main(String[] argv) throws Exception,
8339,rolling/helper,ch.qos.logback.core.rolling.helper,Class SizeAndTimeBasedArchiveRemover,protected File[] getFilesInPeriod(Date dateOfPeriodToClean),
8340,core/rolling,ch.qos.logback.core.rolling,Class SizeAndTimeBasedFNATP<E>,public SizeAndTimeBasedFNATP(),
8341,core/rolling,ch.qos.logback.core.rolling,Class SizeAndTimeBasedFNATP<E>,public void start(),
8342,core/rolling,ch.qos.logback.core.rolling,Class SizeAndTimeBasedFNATP<E>,protected ArchiveRemover createArchiveRemover(),
8343,core/rolling,ch.qos.logback.core.rolling,Class SizeAndTimeBasedFNATP<E>,"public boolean isTriggeringEvent(File activeFile, E event)",Description copied from interface: TriggeringPolicy
8344,core/rolling,ch.qos.logback.core.rolling,Class SizeAndTimeBasedFNATP<E>,public String getCurrentPeriodsFileNameWithoutCompressionSuffix(),Description copied from interface: TimeBasedFileNamingAndTriggeringPolicy
8345,core/rolling,ch.qos.logback.core.rolling,Class SizeAndTimeBasedRollingPolicy<E>,public void start(),
8346,core/rolling,ch.qos.logback.core.rolling,Class SizeAndTimeBasedRollingPolicy<E>,public void setMaxFileSize(FileSize aMaxFileSize),
8347,core/rolling,ch.qos.logback.core.rolling,Class SizeBasedTriggeringPolicy<E>,public static final String SEE_SIZE_FORMAT,
8348,core/rolling,ch.qos.logback.core.rolling,Class SizeBasedTriggeringPolicy<E>,"public boolean isTriggeringEvent(File activeFile, E event)",Description copied from interface: TriggeringPolicy
8349,core/rolling,ch.qos.logback.core.rolling,Class SizeBasedTriggeringPolicy<E>,public FileSize getMaxFileSize(),
8350,access/net,ch.qos.logback.access.net,Class SMTPAppender,public SMTPAppender(),The default constructor will instantiate the appender with a EventEvaluator that will trigger on events with level ERROR or higher.
8351,access/net,ch.qos.logback.access.net,Class SMTPAppender,"protected void subAppend(CyclicBuffer<IAccessEvent> cb, IAccessEvent event)","Perform SMTPAppender specific appending actions, mainly adding the event to the appropriate cyclic buffer."
8352,access/net,ch.qos.logback.access.net,Class SMTPAppender,"protected void fillBuffer(CyclicBuffer<IAccessEvent> cb, StringBuffer sbuf)",
8353,access/net,ch.qos.logback.access.net,Class SMTPAppender,protected Layout<IAccessEvent> makeSubjectLayout(String subjectStr),Description copied from class: SMTPAppenderBase
8354,access/net,ch.qos.logback.access.net,Class SMTPAppender,protected PatternLayout makeNewToPatternLayout(String toPattern),
8355,classic/net,ch.qos.logback.classic.net,Class SMTPAppender,public SMTPAppender(),The default constructor will instantiate the appender with a EventEvaluator that will trigger on events with level ERROR or higher.
8356,classic/net,ch.qos.logback.classic.net,Class SMTPAppender,public void start(),Description copied from class: SMTPAppenderBase
8357,classic/net,ch.qos.logback.classic.net,Class SMTPAppender,"protected void subAppend(CyclicBuffer<ILoggingEvent> cb, ILoggingEvent event)","Perform SMTPAppender specific appending actions, mainly adding the event to a cyclic buffer."
8358,classic/net,ch.qos.logback.classic.net,Class SMTPAppender,"protected void fillBuffer(CyclicBuffer<ILoggingEvent> cb, StringBuffer sbuf)",
8359,classic/net,ch.qos.logback.classic.net,Class SMTPAppender,protected boolean eventMarksEndOfLife(ILoggingEvent eventObject),
8360,classic/net,ch.qos.logback.classic.net,Class SMTPAppender,protected Layout<ILoggingEvent> makeSubjectLayout(String subjectStr),Description copied from class: SMTPAppenderBase
8361,classic/net,ch.qos.logback.classic.net,Class SMTPAppender,protected PatternLayout makeNewToPatternLayout(String toPattern),
8362,classic/net,ch.qos.logback.classic.net,Class SMTPAppender,public boolean isIncludeCallerData(),
8363,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,protected Layout<E> subjectLayout,
8364,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,protected Layout<E> layout,
8365,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,protected javax.mail.Session session,
8366,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,protected EventEvaluator<E> eventEvaluator,
8367,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,protected Discriminator<E> discriminator,
8368,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,protected abstract Layout<E> makeSubjectLayout(String subjectStr),"return a layout for the subject string as appropriate for the module. If the subjectStr parameter is null, then a default value for subjectStr should be used."
8369,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public void start(),Start the appender
8370,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,protected void append(E eventObject),"Perform SMTPAppender specific appending actions, delegating some of them to a subclass and checking if the event triggers an e-mail to be sent."
8371,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,protected abstract boolean eventMarksEndOfLife(E eventObject),
8372,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,"protected abstract void subAppend(CyclicBuffer<E> cb, E eventObject)",
8373,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public boolean checkEntryConditions(),"This method determines if there is a sense in attempting to append. It checks whether there is a set output target and also if there is a set layout. If these checks fail, then the boolean value false is returned."
8374,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public void stop(),
8375,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public List<PatternLayoutBase<E>> getToList(),Returns value of the toList option.
8376,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,"protected void updateMimeMsg(javax.mail.internet.MimeMessage mimeMsg, CyclicBuffer<E> cb, E lastEventObject)",Allows extend classes to update mime message (e.g.: Add headers)
8377,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,"protected void sendBuffer(CyclicBuffer<E> cb, E lastEventObject)",Send the contents of the cyclic buffer as an e-mail message.
8378,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,"protected abstract void fillBuffer(CyclicBuffer<E> cb, StringBuffer sbuf)",
8379,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public String getFrom(),Returns value of the From option.
8380,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public String getSubject(),Returns value of the Subject option.
8381,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public void setFrom(String from),The From option takes a string value which should be a e-mail address of the sender.
8382,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public void setSubject(String subject),The Subject option takes a string value which should be a the subject of the e-mail message.
8383,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public void setSMTPHost(String smtpHost),Alias for smtpHost
8384,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public void setSmtpHost(String smtpHost),The smtpHost option takes a string value which should be a the host name of the SMTP server that will send the e-mail message.
8385,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public String getSMTPHost(),Alias for getSmtpHost().
8386,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public String getSmtpHost(),Returns value of the SMTPHost option.
8387,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public void setSMTPPort(int port),Alias for setSmtpPort(int).
8388,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public void setSmtpPort(int port),The port where the SMTP server is running. Default value is 25.
8389,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public int getSMTPPort(),Alias for getSmtpPort()
8390,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public int getSmtpPort(),See setSmtpPort(int)
8391,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public String getLocalhost(),
8392,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public void setLocalhost(String localhost),Set the mail.smtp.localhost property to the value passed as parameter to this method. Useful in case the hostname for the client host is not fully qualified and as a consequence the SMTP server rejects the clients HELO/EHLO command. 
8393,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public CyclicBufferTracker<E> getCyclicBufferTracker(),
8394,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public void setCyclicBufferTracker(CyclicBufferTracker<E> cbTracker),
8395,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public Discriminator<E> getDiscriminator(),
8396,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public void setDiscriminator(Discriminator<E> discriminator),
8397,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public boolean isAsynchronousSending(),
8398,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public void setAsynchronousSending(boolean asynchronousSending),"By default, SMTAppender transmits emails asynchronously. For synchronous email transmission set asynchronousSending to 'false'."
8399,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public void addTo(String to),
8400,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,protected abstract PatternLayoutBase<E> makeNewToPatternLayout(String toPattern),
8401,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public List<String> getToAsListOfString(),
8402,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public boolean isSTARTTLS(),
8403,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public void setSTARTTLS(boolean startTLS),
8404,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public boolean isSSL(),
8405,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public void setSSL(boolean ssl),
8406,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public void setEvaluator(EventEvaluator<E> eventEvaluator),The EventEvaluator option takes a string value representing the name of the class implementing the EventEvaluator interface. A corresponding object will be instantiated and assigned as the event evaluator for the SMTPAppender.
8407,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public String getUsername(),
8408,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public void setUsername(String username),
8409,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public String getPassword(),
8410,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public void setPassword(String password),
8411,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public String getCharsetEncoding(),
8412,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public String getJndiLocation(),
8413,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public void setJndiLocation(String jndiLocation),Set the location where a Session resource is located in JNDI. Default value is java:comp/env/mail/Session.
8414,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public boolean isSessionViaJNDI(),
8415,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public void setSessionViaJNDI(boolean sessionViaJNDI),"If set to true, a Session resource will be retrieved from JNDI. Default is false."
8416,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public void setCharsetEncoding(String charsetEncoding),Set the character set encoding of the outgoing email messages. The default encoding is UTF-8 which usually works well for most purposes.
8417,core/net,ch.qos.logback.core.net,Class SMTPAppenderBase<E>,public Layout<E> getLayout(),
8418,access/net,ch.qos.logback.access.net,Class SocketAppender,protected void postProcessEvent(IAccessEvent event),Description copied from class: AbstractSocketAppender
8419,classic/net,ch.qos.logback.classic.net,Class SocketAppender,protected void postProcessEvent(ILoggingEvent event),Description copied from class: AbstractSocketAppender
8420,classic/net,ch.qos.logback.classic.net,Class SocketAppender,public void setIncludeCallerData(boolean includeCallerData),
8421,core/net,ch.qos.logback.core.net,Interface SocketConnector,Socket call() throws InterruptedException,Blocks the calling thread until a connection is successfully established.
8422,core/net,ch.qos.logback.core.net,Interface SocketConnector,void setExceptionHandler(SocketConnector.ExceptionHandler exceptionHandler),Sets the connector's exception handler. The handler must be set before the call() method is invoked.
8423,classic/net,ch.qos.logback.classic.net,Class SocketNode,public void run(),
8424,classic/net,ch.qos.logback.classic.net,Class SocketReceiver,protected boolean shouldStart(),Determines whether this receiver should start. Subclasses will implement this method to do any subclass-specific validation. The subclass's ReceiverBase.getRunnableTask() method will be invoked (and the task returned will be submitted to the executor) if and only if this method returns true
8425,classic/net,ch.qos.logback.classic.net,Class SocketReceiver,protected void onStop(),Allows a subclass to participate in receiver shutdown.
8426,classic/net,ch.qos.logback.classic.net,Class SocketReceiver,protected Runnable getRunnableTask(),Description copied from class: ReceiverBase
8427,classic/net,ch.qos.logback.classic.net,Class SocketReceiver,public void run(),
8428,classic/net,ch.qos.logback.classic.net,Class SocketReceiver,"public void connectionFailed(SocketConnector connector, Exception ex)",
8429,classic/net,ch.qos.logback.classic.net,Class SocketReceiver,"protected SocketConnector newConnector(InetAddress address, int port, int initialDelay, int retryDelay)",
8430,classic/net,ch.qos.logback.classic.net,Class SocketReceiver,protected SocketFactory getSocketFactory(),
8431,classic/net,ch.qos.logback.classic.net,Class SocketReceiver,public void setRemoteHost(String remoteHost),
8432,classic/net,ch.qos.logback.classic.net,Class SocketReceiver,public void setPort(int port),
8433,classic/net,ch.qos.logback.classic.net,Class SocketReceiver,public void setReconnectionDelay(int reconnectionDelay),
8434,core/pattern,ch.qos.logback.core.pattern,Class SpacePadder,"public static final void leftPad(StringBuilder buf, String s, int desiredLength)",
8435,core/pattern,ch.qos.logback.core.pattern,Class SpacePadder,"public static final void rightPad(StringBuilder buf, String s, int desiredLength)",
8436,db/dialect,ch.qos.logback.core.db.dialect,Enum SQLDialectCode,public static final SQLDialectCode UNKNOWN_DIALECT,
8437,db/dialect,ch.qos.logback.core.db.dialect,Enum SQLDialectCode,public static final SQLDialectCode POSTGRES_DIALECT,
8438,db/dialect,ch.qos.logback.core.db.dialect,Enum SQLDialectCode,public static final SQLDialectCode MYSQL_DIALECT,
8439,db/dialect,ch.qos.logback.core.db.dialect,Enum SQLDialectCode,public static final SQLDialectCode ORACLE_DIALECT,
8440,db/dialect,ch.qos.logback.core.db.dialect,Enum SQLDialectCode,public static final SQLDialectCode MSSQL_DIALECT,
8441,db/dialect,ch.qos.logback.core.db.dialect,Enum SQLDialectCode,public static final SQLDialectCode HSQL_DIALECT,
8442,db/dialect,ch.qos.logback.core.db.dialect,Enum SQLDialectCode,public static final SQLDialectCode H2_DIALECT,
8443,db/dialect,ch.qos.logback.core.db.dialect,Enum SQLDialectCode,public static final SQLDialectCode SYBASE_SQLANYWHERE_DIALECT,
8444,db/dialect,ch.qos.logback.core.db.dialect,Enum SQLDialectCode,public static SQLDialectCode[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (SQLDialectCode c : SQLDialectCode.values())  System.out.println(c);"
8445,net/ssl,ch.qos.logback.core.net.ssl,Interface SSL,static final String DEFAULT_PROTOCOL,Default secure transport protocol
8446,net/ssl,ch.qos.logback.core.net.ssl,Interface SSL,static final String DEFAULT_KEYSTORE_TYPE,Default key store type
8447,net/ssl,ch.qos.logback.core.net.ssl,Interface SSL,static final String DEFAULT_KEYSTORE_PASSWORD,Default key store passphrase
8448,net/ssl,ch.qos.logback.core.net.ssl,Interface SSLComponent,SSLConfiguration getSsl(),
8449,net/ssl,ch.qos.logback.core.net.ssl,Interface SSLConfigurable,String[] getDefaultProtocols(),Gets the set of protocols that the SSL component enables by default.
8450,net/ssl,ch.qos.logback.core.net.ssl,Interface SSLConfigurable,String[] getSupportedProtocols(),Gets the set of protocols that the SSL component supports.
8451,net/ssl,ch.qos.logback.core.net.ssl,Interface SSLConfigurable,void setEnabledProtocols(String[] protocols),Sets the enabled protocols on the SSL component.
8452,net/ssl,ch.qos.logback.core.net.ssl,Interface SSLConfigurable,String[] getDefaultCipherSuites(),Gets the set of cipher suites that the SSL component enables by default.
8453,net/ssl,ch.qos.logback.core.net.ssl,Interface SSLConfigurable,String[] getSupportedCipherSuites(),Gets the set of cipher suites that the SSL component supports.
8454,net/ssl,ch.qos.logback.core.net.ssl,Interface SSLConfigurable,void setEnabledCipherSuites(String[] cipherSuites),Sets the enabled cipher suites on the SSL component.
8455,net/ssl,ch.qos.logback.core.net.ssl,Interface SSLConfigurable,void setNeedClientAuth(boolean state),Sets a flag indicating whether the SSL component should require client authentication.
8456,net/ssl,ch.qos.logback.core.net.ssl,Class SSLConfigurableServerSocket,public String[] getDefaultProtocols(),Description copied from interface: SSLConfigurable
8457,net/ssl,ch.qos.logback.core.net.ssl,Class SSLConfigurableServerSocket,public String[] getSupportedProtocols(),Description copied from interface: SSLConfigurable
8458,net/ssl,ch.qos.logback.core.net.ssl,Class SSLConfigurableServerSocket,public void setEnabledProtocols(String[] protocols),Description copied from interface: SSLConfigurable
8459,net/ssl,ch.qos.logback.core.net.ssl,Class SSLConfigurableServerSocket,public String[] getDefaultCipherSuites(),Description copied from interface: SSLConfigurable
8460,net/ssl,ch.qos.logback.core.net.ssl,Class SSLConfigurableServerSocket,public String[] getSupportedCipherSuites(),Description copied from interface: SSLConfigurable
8461,net/ssl,ch.qos.logback.core.net.ssl,Class SSLConfigurableServerSocket,public void setEnabledCipherSuites(String[] suites),Description copied from interface: SSLConfigurable
8462,net/ssl,ch.qos.logback.core.net.ssl,Class SSLConfigurableServerSocket,public void setNeedClientAuth(boolean state),Description copied from interface: SSLConfigurable
8463,net/ssl,ch.qos.logback.core.net.ssl,Class SSLConfigurableSocket,public String[] getDefaultProtocols(),Description copied from interface: SSLConfigurable
8464,net/ssl,ch.qos.logback.core.net.ssl,Class SSLConfigurableSocket,public String[] getSupportedProtocols(),Description copied from interface: SSLConfigurable
8465,net/ssl,ch.qos.logback.core.net.ssl,Class SSLConfigurableSocket,public void setEnabledProtocols(String[] protocols),Description copied from interface: SSLConfigurable
8466,net/ssl,ch.qos.logback.core.net.ssl,Class SSLConfigurableSocket,public String[] getDefaultCipherSuites(),Description copied from interface: SSLConfigurable
8467,net/ssl,ch.qos.logback.core.net.ssl,Class SSLConfigurableSocket,public String[] getSupportedCipherSuites(),Description copied from interface: SSLConfigurable
8468,net/ssl,ch.qos.logback.core.net.ssl,Class SSLConfigurableSocket,public void setEnabledCipherSuites(String[] suites),Description copied from interface: SSLConfigurable
8469,net/ssl,ch.qos.logback.core.net.ssl,Class SSLConfigurableSocket,public void setNeedClientAuth(boolean state),Description copied from interface: SSLConfigurable
8470,net/ssl,ch.qos.logback.core.net.ssl,Class SSLConfiguration,public SSLParametersConfiguration getParameters(),Gets the SSL parameters configuration.
8471,net/ssl,ch.qos.logback.core.net.ssl,Class SSLContextFactoryBean,"public SSLContext createContext(ContextAware context) throws NoSuchProviderException, NoSuchAlgorithmException, KeyManagementException, UnrecoverableKeyException, KeyStoreException, CertificateException",Creates a new SSLContext using the receiver's configuration.
8472,net/ssl,ch.qos.logback.core.net.ssl,Class SSLContextFactoryBean,public KeyStoreFactoryBean getKeyStore(),Gets the key store configuration.
8473,net/ssl,ch.qos.logback.core.net.ssl,Class SSLContextFactoryBean,public void setKeyStore(KeyStoreFactoryBean keyStore),Sets the key store configuration.
8474,net/ssl,ch.qos.logback.core.net.ssl,Class SSLContextFactoryBean,public KeyStoreFactoryBean getTrustStore(),Gets the trust store configuration.
8475,net/ssl,ch.qos.logback.core.net.ssl,Class SSLContextFactoryBean,public void setTrustStore(KeyStoreFactoryBean trustStore),Sets the trust store configuration.
8476,net/ssl,ch.qos.logback.core.net.ssl,Class SSLContextFactoryBean,public SecureRandomFactoryBean getSecureRandom(),Gets the secure random generator configuration.
8477,net/ssl,ch.qos.logback.core.net.ssl,Class SSLContextFactoryBean,public void setSecureRandom(SecureRandomFactoryBean secureRandom),Sets the secure random generator configuration.
8478,net/ssl,ch.qos.logback.core.net.ssl,Class SSLContextFactoryBean,public KeyManagerFactoryFactoryBean getKeyManagerFactory(),Gets the key manager factory configuration.
8479,net/ssl,ch.qos.logback.core.net.ssl,Class SSLContextFactoryBean,public void setKeyManagerFactory(KeyManagerFactoryFactoryBean keyManagerFactory),Sets the key manager factory configuration.
8480,net/ssl,ch.qos.logback.core.net.ssl,Class SSLContextFactoryBean,public TrustManagerFactoryFactoryBean getTrustManagerFactory(),Gets the trust manager factory configuration.
8481,net/ssl,ch.qos.logback.core.net.ssl,Class SSLContextFactoryBean,public void setTrustManagerFactory(TrustManagerFactoryFactoryBean trustManagerFactory),Sets the trust manager factory configuration.
8482,net/ssl,ch.qos.logback.core.net.ssl,Class SSLContextFactoryBean,public String getProtocol(),Gets the secure transport protocol name.
8483,net/ssl,ch.qos.logback.core.net.ssl,Class SSLContextFactoryBean,public void setProtocol(String protocol),Sets the secure transport protocol name.
8484,net/ssl,ch.qos.logback.core.net.ssl,Class SSLContextFactoryBean,public String getProvider(),Gets the JSSE provider name for the SSL context.
8485,net/ssl,ch.qos.logback.core.net.ssl,Class SSLParametersConfiguration,public void configure(SSLConfigurable socket),Configures SSL parameters on an SSLConfigurable.
8486,net/ssl,ch.qos.logback.core.net.ssl,Class SSLParametersConfiguration,public String getIncludedProtocols(),Gets the JSSE secure transport protocols to include.
8487,net/ssl,ch.qos.logback.core.net.ssl,Class SSLParametersConfiguration,public void setIncludedProtocols(String protocols),Sets the JSSE secure transport protocols to include.
8488,net/ssl,ch.qos.logback.core.net.ssl,Class SSLParametersConfiguration,public String getExcludedProtocols(),Gets the JSSE secure transport protocols to exclude.
8489,net/ssl,ch.qos.logback.core.net.ssl,Class SSLParametersConfiguration,public void setExcludedProtocols(String protocols),Sets the JSSE secure transport protocols to exclude.
8490,net/ssl,ch.qos.logback.core.net.ssl,Class SSLParametersConfiguration,public String getIncludedCipherSuites(),Gets the JSSE cipher suite names to include.
8491,net/ssl,ch.qos.logback.core.net.ssl,Class SSLParametersConfiguration,public void setIncludedCipherSuites(String cipherSuites),Sets the JSSE cipher suite names to include.
8492,net/ssl,ch.qos.logback.core.net.ssl,Class SSLParametersConfiguration,public String getExcludedCipherSuites(),Gets the JSSE cipher suite names to exclude.
8493,net/ssl,ch.qos.logback.core.net.ssl,Class SSLParametersConfiguration,public void setExcludedCipherSuites(String cipherSuites),Sets the JSSE cipher suite names to exclude.
8494,net/ssl,ch.qos.logback.core.net.ssl,Class SSLParametersConfiguration,public Boolean isNeedClientAuth(),Gets a flag indicating whether client authentication is required.
8495,net/ssl,ch.qos.logback.core.net.ssl,Class SSLParametersConfiguration,public void setNeedClientAuth(Boolean needClientAuth),Sets a flag indicating whether client authentication is required.
8496,net/ssl,ch.qos.logback.core.net.ssl,Class SSLParametersConfiguration,public Boolean isWantClientAuth(),Gets a flag indicating whether client authentication is desired.
8497,net/server,ch.qos.logback.access.net.server,Class SSLServerSocketAppender,protected void postProcessEvent(IAccessEvent event),Description copied from class: AbstractServerSocketAppender
8498,net/server,ch.qos.logback.classic.net.server,Class SSLServerSocketAppender,protected void postProcessEvent(ILoggingEvent event),Description copied from class: AbstractServerSocketAppender
8499,net/server,ch.qos.logback.classic.net.server,Class SSLServerSocketAppender,protected PreSerializationTransformer<ILoggingEvent> getPST(),Description copied from class: AbstractServerSocketAppender
8500,net/server,ch.qos.logback.classic.net.server,Class SSLServerSocketAppender,public boolean isIncludeCallerData(),
8501,net/server,ch.qos.logback.core.net.server,Class SSLServerSocketAppenderBase<E>,protected ServerSocketFactory getServerSocketFactory(),Description copied from class: AbstractServerSocketAppender
8502,net/server,ch.qos.logback.core.net.server,Class SSLServerSocketAppenderBase<E>,public void start(),
8503,net/server,ch.qos.logback.core.net.server,Class SSLServerSocketAppenderBase<E>,public SSLConfiguration getSsl(),Gets the SSL configuration.
8504,net/server,ch.qos.logback.classic.net.server,Class SSLServerSocketReceiver,protected ServerSocketFactory getServerSocketFactory() throws Exception,Gets the server socket factory. Subclasses may override to provide a custom factory.
8505,net/server,ch.qos.logback.classic.net.server,Class SSLServerSocketReceiver,public SSLConfiguration getSsl(),Gets the server's SSL configuration.
8506,access/net,ch.qos.logback.access.net,Class SSLSocketAppender,protected void postProcessEvent(IAccessEvent event),Description copied from class: AbstractSocketAppender
8507,classic/net,ch.qos.logback.classic.net,Class SSLSocketAppender,protected void postProcessEvent(ILoggingEvent event),Description copied from class: AbstractSocketAppender
8508,classic/net,ch.qos.logback.classic.net,Class SSLSocketAppender,public void setIncludeCallerData(boolean includeCallerData),
8509,classic/net,ch.qos.logback.classic.net,Class SSLSocketReceiver,protected SocketFactory getSocketFactory(),Gets an SocketFactory that produces SSL sockets using an SSLContext that is derived from the receiver's configuration.
8510,classic/net,ch.qos.logback.classic.net,Class SSLSocketReceiver,protected boolean shouldStart(),Determines whether this receiver should start. Subclasses will implement this method to do any subclass-specific validation. The subclass's ReceiverBase.getRunnableTask() method will be invoked (and the task returned will be submitted to the executor) if and only if this method returns true
8511,classic/net,ch.qos.logback.classic.net,Class SSLSocketReceiver,public SSLConfiguration getSsl(),Gets the SSL configuration.
8512,classic/spi,ch.qos.logback.classic.spi,Class StackTraceElementProxy,public String getSTEAsString(),
8513,classic/spi,ch.qos.logback.classic.spi,Class StackTraceElementProxy,public StackTraceElement getStackTraceElement(),
8514,classic/spi,ch.qos.logback.classic.spi,Class StackTraceElementProxy,public void setClassPackagingData(ClassPackagingData cpd),
8515,classic/spi,ch.qos.logback.classic.spi,Class StackTraceElementProxy,public ClassPackagingData getClassPackagingData(),
8516,classic/spi,ch.qos.logback.classic.spi,Class StackTraceElementProxy,public int hashCode(),
8517,classic/spi,ch.qos.logback.classic.spi,Class StackTraceElementProxy,public boolean equals(Object obj),
8518,joran/event,ch.qos.logback.core.joran.event,Class StartEvent,public final Attributes attributes,
8519,joran/event,ch.qos.logback.core.joran.event,Class StartEvent,public Attributes getAttributes(),
8520,event/stax,ch.qos.logback.core.joran.event.stax,Class StartEvent,public ElementPath getElementPath(),
8521,event/stax,ch.qos.logback.core.joran.event.stax,Class StartEvent,public List<Attribute> getAttributeList(),
8522,access/filter,ch.qos.logback.access.filter,Interface StatisticalView,long getTotal(),
8523,access/filter,ch.qos.logback.access.filter,Interface StatisticalView,long getLastMinuteCount(),
8524,access/filter,ch.qos.logback.access.filter,Interface StatisticalView,double getMinuteAverage(),
8525,access/filter,ch.qos.logback.access.filter,Interface StatisticalView,long getLastHoursCount(),
8526,access/filter,ch.qos.logback.access.filter,Interface StatisticalView,double getHourlyAverage(),
8527,access/filter,ch.qos.logback.access.filter,Interface StatisticalView,long getLastDaysCount(),
8528,access/filter,ch.qos.logback.access.filter,Interface StatisticalView,double getDailyAverage(),
8529,access/filter,ch.qos.logback.access.filter,Interface StatisticalView,long getLastWeeksCount(),
8530,access/filter,ch.qos.logback.access.filter,Interface StatisticalView,double getWeeklyAverage(),
8531,access/filter,ch.qos.logback.access.filter,Interface StatisticalView,long getLastMonthsCount(),
8532,access/filter,ch.qos.logback.access.filter,Class StatisticalViewImpl,public double getDailyAverage(),
8533,access/filter,ch.qos.logback.access.filter,Class StatisticalViewImpl,public long getLastDaysCount(),
8534,access/filter,ch.qos.logback.access.filter,Class StatisticalViewImpl,public double getMonthlyAverage(),
8535,access/filter,ch.qos.logback.access.filter,Class StatisticalViewImpl,public long getLastMonthsCount(),
8536,access/filter,ch.qos.logback.access.filter,Class StatisticalViewImpl,public long getTotal(),
8537,access/filter,ch.qos.logback.access.filter,Class StatisticalViewImpl,public double getWeeklyAverage(),
8538,access/filter,ch.qos.logback.access.filter,Class StatisticalViewImpl,public long getLastWeeksCount(),
8539,access/filter,ch.qos.logback.access.filter,Class StatisticalViewImpl,public void start(),
8540,access/filter,ch.qos.logback.access.filter,Class StatisticalViewImpl,public boolean isStarted(),
8541,access/filter,ch.qos.logback.access.filter,Class StatisticalViewImpl,public void stop(),
8542,access/filter,ch.qos.logback.access.filter,Class StatisticalViewImpl,public long getLastMinuteCount(),
8543,access/filter,ch.qos.logback.access.filter,Class StatisticalViewImpl,public double getMinuteAverage(),
8544,access/filter,ch.qos.logback.access.filter,Class StatisticalViewImpl,public double getHourlyAverage(),
8545,core/status,ch.qos.logback.core.status,Interface Status,static final int INFO,
8546,core/status,ch.qos.logback.core.status,Interface Status,static final int WARN,
8547,core/status,ch.qos.logback.core.status,Interface Status,int getLevel(),
8548,core/status,ch.qos.logback.core.status,Interface Status,int getEffectiveLevel(),
8549,core/status,ch.qos.logback.core.status,Interface Status,Object getOrigin(),
8550,core/status,ch.qos.logback.core.status,Interface Status,String getMessage(),
8551,core/status,ch.qos.logback.core.status,Interface Status,Throwable getThrowable(),
8552,core/status,ch.qos.logback.core.status,Interface Status,Long getDate(),
8553,core/status,ch.qos.logback.core.status,Interface Status,boolean hasChildren(),
8554,core/status,ch.qos.logback.core.status,Interface Status,void add(Status child),
8555,core/status,ch.qos.logback.core.status,Interface Status,boolean remove(Status child),
8556,core/status,ch.qos.logback.core.status,Class StatusBase,public void add(Status child),
8557,core/status,ch.qos.logback.core.status,Class StatusBase,public boolean hasChildren(),
8558,core/status,ch.qos.logback.core.status,Class StatusBase,public Iterator<Status> iterator(),
8559,core/status,ch.qos.logback.core.status,Class StatusBase,public boolean remove(Status statusToRemove),
8560,core/status,ch.qos.logback.core.status,Class StatusBase,public int getLevel(),
8561,core/status,ch.qos.logback.core.status,Class StatusBase,public int getEffectiveLevel(),
8562,core/status,ch.qos.logback.core.status,Class StatusBase,public String getMessage(),
8563,core/status,ch.qos.logback.core.status,Class StatusBase,public Object getOrigin(),
8564,core/status,ch.qos.logback.core.status,Class StatusBase,public Throwable getThrowable(),
8565,core/status,ch.qos.logback.core.status,Class StatusBase,public Long getDate(),
8566,core/status,ch.qos.logback.core.status,Class StatusBase,public String toString(),
8567,core/status,ch.qos.logback.core.status,Class StatusBase,public int hashCode(),
8568,joran/action,ch.qos.logback.core.joran.action,Class StatusListenerAction,"public void begin(InterpretationContext ec, String name, Attributes attributes) throws ActionException",Description copied from class: Action
8569,joran/action,ch.qos.logback.core.joran.action,Class StatusListenerAction,public void finish(InterpretationContext ec),
8570,core/status,ch.qos.logback.core.status,Class StatusListenerAsList,public void addStatusEvent(Status status),
8571,core/util,ch.qos.logback.core.util,Class StatusListenerConfigHelper,public static void installIfAsked(Context context),
8572,core/status,ch.qos.logback.core.status,Interface StatusManager,void add(Status status),Add a new status message.
8573,core/status,ch.qos.logback.core.status,Interface StatusManager,List<Status> getCopyOfStatusList(),Obtain a copy of the status list maintained by this StatusManager.
8574,core/status,ch.qos.logback.core.status,Interface StatusManager,int getCount(),Return the number of status entries.
8575,core/status,ch.qos.logback.core.status,Interface StatusManager,boolean add(StatusListener listener),Add a status listener. The StatusManager may decide to skip installation if an earlier instance was already installed.
8576,core/status,ch.qos.logback.core.status,Interface StatusManager,void remove(StatusListener listener),); Remove a status listener.
8577,core/status,ch.qos.logback.core.status,Interface StatusManager,void clear(),Clear the list of status messages.
8578,core/util,ch.qos.logback.core.util,Class StatusPrinter,public static void setPrintStream(PrintStream printStream),
8579,core/util,ch.qos.logback.core.util,Class StatusPrinter,public static void printInCaseOfErrorsOrWarnings(Context context),"Print the contents of the context statuses, but only if they contain warnings or errors."
8580,core/util,ch.qos.logback.core.util,Class StatusPrinter,"public static void printInCaseOfErrorsOrWarnings(Context context, long threshold)","Print the contents of the context status, but only if they contain warnings or errors occurring later then the threshold."
8581,core/util,ch.qos.logback.core.util,Class StatusPrinter,public static void printIfErrorsOccured(Context context),"Print the contents of the context statuses, but only if they contain errors."
8582,core/util,ch.qos.logback.core.util,Class StatusPrinter,public static void print(Context context),Print the contents of the context's status data.
8583,core/util,ch.qos.logback.core.util,Class StatusPrinter,"public static void print(Context context, long threshold)",Print context's status data with a timestamp higher than the threshold.
8584,core/util,ch.qos.logback.core.util,Class StatusPrinter,public static void print(StatusManager sm),
8585,core/util,ch.qos.logback.core.util,Class StatusPrinter,"public static void print(StatusManager sm, long threshold)",
8586,core/util,ch.qos.logback.core.util,Class StatusPrinter,public static void print(List<Status> statusList),
8587,core/status,ch.qos.logback.core.status,Class StatusUtil,public StatusUtil(StatusManager sm),
8588,core/status,ch.qos.logback.core.status,Class StatusUtil,public static boolean contextHasStatusListener(Context context),Returns true if the StatusManager associated with the context passed as parameter has one or more StatusListener instances registered. Returns false otherwise.
8589,core/status,ch.qos.logback.core.status,Class StatusUtil,"public static List<Status> filterStatusListByTimeThreshold(List<Status> rawList, long threshold)",
8590,core/status,ch.qos.logback.core.status,Class StatusUtil,public void addStatus(Status status),
8591,core/status,ch.qos.logback.core.status,Class StatusUtil,"public void addInfo(Object caller, String msg)",
8592,core/status,ch.qos.logback.core.status,Class StatusUtil,"public void addWarn(Object caller, String msg)",
8593,core/status,ch.qos.logback.core.status,Class StatusUtil,"public void addError(Object caller, String msg, Throwable t)",
8594,core/status,ch.qos.logback.core.status,Class StatusUtil,public boolean hasXMLParsingErrors(long threshold),
8595,core/status,ch.qos.logback.core.status,Class StatusUtil,public boolean noXMLParsingErrorsOccurred(long threshold),
8596,core/status,ch.qos.logback.core.status,Class StatusUtil,public int getHighestLevel(long threshold),
8597,core/status,ch.qos.logback.core.status,Class StatusUtil,public boolean isErrorFree(long threshold),
8598,core/status,ch.qos.logback.core.status,Class StatusUtil,public boolean isWarningOrErrorFree(long threshold),
8599,core/status,ch.qos.logback.core.status,Class StatusUtil,"public boolean containsMatch(long threshold, int level, String regex)",
8600,core/status,ch.qos.logback.core.status,Class StatusUtil,"public boolean containsMatch(int level, String regex)",
8601,core/status,ch.qos.logback.core.status,Class StatusUtil,public boolean containsMatch(String regex),
8602,core/status,ch.qos.logback.core.status,Class StatusUtil,public int matchCount(String regex),
8603,core/status,ch.qos.logback.core.status,Class StatusUtil,public boolean containsException(Class<?> exceptionType),
8604,classic/util,ch.qos.logback.classic.util,Class StatusViaSLF4JLoggerFactory,"public static void addInfo(String msg, Object o)",
8605,classic/util,ch.qos.logback.classic.util,Class StatusViaSLF4JLoggerFactory,"public static void addError(String msg, Object o)",
8606,classic/util,ch.qos.logback.classic.util,Class StatusViaSLF4JLoggerFactory,"public static void addError(String msg, Object o, Throwable t)",
8607,event/stax,ch.qos.logback.core.joran.event.stax,Class StaxEvent,public String getName(),
8608,event/stax,ch.qos.logback.core.joran.event.stax,Class StaxEventRecorder,public void recordEvents(InputStream inputStream) throws JoranException,
8609,core/util,ch.qos.logback.core.util,Class StringCollectionUtil,"public static void retainMatching(Collection<String> values, String... patterns)","Retains all values in the subject collection that are matched by at least one of a collection of regular expressions. This method is a convenience overload for retainMatching(Collection, Collection)."
8610,core/util,ch.qos.logback.core.util,Class StringCollectionUtil,"public static void retainMatching(Collection<String> values, Collection<String> patterns)","Retains all values in the subject collection that are matched by at least one of a collection of regular expressions. The semantics of this method are conceptually similar to Collection.retainAll(Collection), but uses pattern matching instead of exact matching."
8611,core/util,ch.qos.logback.core.util,Class StringCollectionUtil,"public static void removeMatching(Collection<String> values, String... patterns)","Removes all values in the subject collection that are matched by at least one of a collection of regular expressions. This method is a convenience overload for removeMatching(Collection, Collection)."
8612,joran/util,ch.qos.logback.core.joran.util,Class StringToObjectConverter,public static boolean canBeBuiltFromSimpleString(Class<?> parameterClass),
8613,joran/util,ch.qos.logback.core.joran.util,Class StringToObjectConverter,"public static Object convertArg(ContextAware ca, String val, Class<?> type)",Convert val a String parameter to an object of a given type.
8614,classic/net,ch.qos.logback.classic.net,Class SyslogAppender,public static final String DEFAULT_SUFFIX_PATTERN,
8615,classic/net,ch.qos.logback.classic.net,Class SyslogAppender,public void start(),
8616,classic/net,ch.qos.logback.classic.net,Class SyslogAppender,"public SyslogOutputStream createOutputStream() throws SocketException, UnknownHostException",
8617,classic/net,ch.qos.logback.classic.net,Class SyslogAppender,public int getSeverityForEvent(Object eventObject),"Convert a level to equivalent syslog severity. Only levels for printing methods i.e DEBUG, WARN, INFO and ERROR are converted."
8618,classic/net,ch.qos.logback.classic.net,Class SyslogAppender,"protected void postProcess(Object eventObject, OutputStream sw)",
8619,classic/net,ch.qos.logback.classic.net,Class SyslogAppender,public Layout<ILoggingEvent> buildLayout(),
8620,classic/net,ch.qos.logback.classic.net,Class SyslogAppender,public boolean isThrowableExcluded(),
8621,classic/net,ch.qos.logback.classic.net,Class SyslogAppender,public void setThrowableExcluded(boolean throwableExcluded),"Setting throwableExcluded to true causes no Throwable's stack trace data to be sent to the syslog daemon. By default, stack trace data is sent to syslog daemon."
8622,classic/net,ch.qos.logback.classic.net,Class SyslogAppender,public String getStackTracePattern(),See {@link #setStackTracePattern(String).
8623,core/net,ch.qos.logback.core.net,Class SyslogAppenderBase<E>,public void start(),
8624,core/net,ch.qos.logback.core.net,Class SyslogAppenderBase<E>,"public abstract SyslogOutputStream createOutputStream() throws UnknownHostException, SocketException",
8625,core/net,ch.qos.logback.core.net,Class SyslogAppenderBase<E>,public abstract Layout<E> buildLayout(),
8626,core/net,ch.qos.logback.core.net,Class SyslogAppenderBase<E>,public abstract int getSeverityForEvent(Object eventObject),
8627,core/net,ch.qos.logback.core.net,Class SyslogAppenderBase<E>,protected void append(E eventObject),
8628,core/net,ch.qos.logback.core.net,Class SyslogAppenderBase<E>,"protected void postProcess(Object event, OutputStream sw)",
8629,core/net,ch.qos.logback.core.net,Class SyslogAppenderBase<E>,public static int facilityStringToint(String facilityStr),Returns the integer value corresponding to the named syslog facility.
8630,core/net,ch.qos.logback.core.net,Class SyslogAppenderBase<E>,public String getSyslogHost(),Returns the value of the SyslogHost option.
8631,core/net,ch.qos.logback.core.net,Class SyslogAppenderBase<E>,public void setSyslogHost(String syslogHost),"The SyslogHost option is the name of the the syslog host where log output should go. WARNING If the SyslogHost is not set, then this appender will fail."
8632,core/net,ch.qos.logback.core.net,Class SyslogAppenderBase<E>,public String getFacility(),Returns the string value of the Facility option. See setFacility(java.lang.String) for the set of allowed values.
8633,core/net,ch.qos.logback.core.net,Class SyslogAppenderBase<E>,public void setFacility(String facilityStr),"The Facility option must be set one of the strings KERN, USER, MAIL, DAEMON, AUTH, SYSLOG, LPR, NEWS, UUCP, CRON, AUTHPRIV, FTP, NTP, AUDIT, ALERT, CLOCK, LOCAL0, LOCAL1, LOCAL2, LOCAL3, LOCAL4, LOCAL5, LOCAL6, LOCAL7. Case is not important. See SyslogConstants and RFC 3164 for more information about the Facility option."
8634,core/net,ch.qos.logback.core.net,Class SyslogAppenderBase<E>,public int getPort(),
8635,core/net,ch.qos.logback.core.net,Class SyslogAppenderBase<E>,public void setPort(int port),"The port number on the syslog server to connect to. Normally, you would not want to change the default value, that is 514."
8636,core/net,ch.qos.logback.core.net,Class SyslogAppenderBase<E>,public int getMaxMessageSize(),
8637,core/net,ch.qos.logback.core.net,Class SyslogAppenderBase<E>,public void setMaxMessageSize(int maxMessageSize),Maximum size for the syslog message (in characters); messages longer than this are truncated. The default value is 65400 (which is near the maximum for syslog-over-UDP). Note that the value is characters; the number of bytes may vary if non-ASCII characters are present.
8638,core/net,ch.qos.logback.core.net,Class SyslogAppenderBase<E>,public Layout<E> getLayout(),
8639,core/net,ch.qos.logback.core.net,Class SyslogAppenderBase<E>,public void setLayout(Layout<E> layout),
8640,core/net,ch.qos.logback.core.net,Class SyslogAppenderBase<E>,public void stop(),
8641,core/net,ch.qos.logback.core.net,Class SyslogAppenderBase<E>,public String getSuffixPattern(),See #setSuffixPattern(String).
8642,core/net,ch.qos.logback.core.net,Class SyslogAppenderBase<E>,public void setSuffixPattern(String suffixPattern),The suffixPattern option specifies the format of the non-standardized part of the message sent to the syslog server.
8643,core/net,ch.qos.logback.core.net,Class SyslogAppenderBase<E>,public Charset getCharset(),Returns the Charset used to encode String messages into byte sequences when writing to syslog.
8644,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int SYSLOG_PORT,
8645,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int EMERGENCY_SEVERITY,Emergency: system is unusable
8646,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int ALERT_SEVERITY,Alert: action must be taken immediately
8647,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int CRITICAL_SEVERITY,Critical: critical conditions
8648,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int ERROR_SEVERITY,Error: error conditions
8649,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int WARNING_SEVERITY,Warning: warning conditions
8650,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int NOTICE_SEVERITY,Notice: normal but significant condition
8651,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int INFO_SEVERITY,Informational: informational messages
8652,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int DEBUG_SEVERITY,Debug: debug-level messages
8653,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int LOG_KERN,"kernel messages, numerical code 0."
8654,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int LOG_USER,"user-level messages, numerical code 1."
8655,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int LOG_MAIL,"mail system, numerical code 2."
8656,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int LOG_DAEMON,"system daemons, numerical code 3."
8657,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int LOG_AUTH,"security/authorization messages, numerical code 4."
8658,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int LOG_SYSLOG,"messages generated internally by syslogd, numerical code 5."
8659,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int LOG_LPR,"line printer subsystem, numerical code 6."
8660,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int LOG_NEWS,"network news subsystem, numerical code 7."
8661,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int LOG_UUCP,"UUCP subsystem, numerical code 8"
8662,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int LOG_CRON,"clock daemon, numerical code 9."
8663,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int LOG_AUTHPRIV,"security/authorization messages, numerical code 10."
8664,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int LOG_FTP,"ftp daemon, numerical code 11."
8665,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int LOG_NTP,"NTP subsystem, numerical code 12."
8666,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int LOG_AUDIT,"log audit, numerical code 13."
8667,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int LOG_ALERT,"log alert, numerical code 14."
8668,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int LOG_CLOCK,"clock daemon, numerical code 15."
8669,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int LOG_LOCAL0,"reserved for local use, numerical code 16."
8670,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int LOG_LOCAL1,"reserved for local use, numerical code 17."
8671,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int LOG_LOCAL2,"reserved for local use, numerical code 18."
8672,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int LOG_LOCAL3,"reserved for local use, numerical code 19."
8673,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int LOG_LOCAL4,"reserved for local use, numerical code 20."
8674,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int LOG_LOCAL5,"reserved for local use, numerical code 21."
8675,core/net,ch.qos.logback.core.net,Class SyslogConstants,public static final int LOG_LOCAL6,"reserved for local use, numerical code 22."
8676,core/net,ch.qos.logback.core.net,Class SyslogOutputStream,"public void write(byte[] byteArray, int offset, int len) throws IOException",
8677,core/net,ch.qos.logback.core.net,Class SyslogOutputStream,public void flush() throws IOException,
8678,core/net,ch.qos.logback.core.net,Class SyslogOutputStream,public void close(),
8679,core/net,ch.qos.logback.core.net,Class SyslogOutputStream,public int getPort(),
8680,classic/pattern,ch.qos.logback.classic.pattern,Class SyslogStartConverter,public void start(),Description copied from class: DynamicConverter
8681,classic/pattern,ch.qos.logback.classic.pattern,Class SyslogStartConverter,public String convert(ILoggingEvent event),Description copied from class: Converter
8682,db/names,ch.qos.logback.classic.db.names,Enum TableName,public static final TableName LOGGING_EVENT,
8683,db/names,ch.qos.logback.classic.db.names,Enum TableName,public static final TableName LOGGING_EVENT_PROPERTY,
8684,db/names,ch.qos.logback.classic.db.names,Enum TableName,public static TableName[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (TableName c : TableName.values())  System.out.println(c);"
8685,access/servlet,ch.qos.logback.access.servlet,Class TeeFilter,public void destroy(),
8686,access/servlet,ch.qos.logback.access.servlet,Class TeeFilter,"public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain filterChain) throws IOException, javax.servlet.ServletException",
8687,access/servlet,ch.qos.logback.access.servlet,Class TeeHttpServletResponse,public javax.servlet.ServletOutputStream getOutputStream() throws IOException,
8688,access/servlet,ch.qos.logback.access.servlet,Class TeeHttpServletResponse,public PrintWriter getWriter() throws IOException,
8689,access/servlet,ch.qos.logback.access.servlet,Class TeeServletOutputStream,public void write(int val) throws IOException,
8690,access/servlet,ch.qos.logback.access.servlet,Class TeeServletOutputStream,public void write(byte[] byteArray) throws IOException,
8691,access/servlet,ch.qos.logback.access.servlet,Class TeeServletOutputStream,"public void write(byte[] byteArray, int offset, int length) throws IOException",
8692,access/servlet,ch.qos.logback.access.servlet,Class TeeServletOutputStream,public void close() throws IOException,
8693,access/servlet,ch.qos.logback.access.servlet,Class TeeServletOutputStream,public void flush() throws IOException,
8694,access/servlet,ch.qos.logback.access.servlet,Class TeeServletOutputStream,public boolean isReady(),
8695,joran/conditional,ch.qos.logback.core.joran.conditional,Class ThenOrElseActionBase,"public void begin(InterpretationContext ic, String name, Attributes attributes) throws ActionException",Description copied from class: Action
8696,classic/filter,ch.qos.logback.classic.filter,Class ThresholdFilter,public FilterReply decide(ILoggingEvent event),Description copied from class: Filter
8697,classic/filter,ch.qos.logback.classic.filter,Class ThresholdFilter,public void setLevel(String level),
8698,classic/spi,ch.qos.logback.classic.spi,Class ThrowableProxy,public Throwable getThrowable(),
8699,classic/spi,ch.qos.logback.classic.spi,Class ThrowableProxy,public String getMessage(),
8700,classic/spi,ch.qos.logback.classic.spi,Class ThrowableProxy,public String getClassName(),
8701,classic/spi,ch.qos.logback.classic.spi,Class ThrowableProxy,public StackTraceElementProxy[] getStackTraceElementProxyArray(),
8702,classic/spi,ch.qos.logback.classic.spi,Class ThrowableProxy,public int getCommonFrames(),
8703,classic/spi,ch.qos.logback.classic.spi,Class ThrowableProxy,public IThrowableProxy getCause(),
8704,classic/spi,ch.qos.logback.classic.spi,Class ThrowableProxy,public IThrowableProxy[] getSuppressed(),
8705,classic/spi,ch.qos.logback.classic.spi,Class ThrowableProxy,public PackagingDataCalculator getPackagingDataCalculator(),
8706,classic/spi,ch.qos.logback.classic.spi,Class ThrowableProxy,public void calculatePackagingData(),
8707,classic/pattern,ch.qos.logback.classic.pattern,Class ThrowableProxyConverter,public void start(),Description copied from class: DynamicConverter
8708,classic/pattern,ch.qos.logback.classic.pattern,Class ThrowableProxyConverter,public void stop(),
8709,classic/pattern,ch.qos.logback.classic.pattern,Class ThrowableProxyConverter,"protected void extraData(StringBuilder builder, StackTraceElementProxy step)",
8710,classic/pattern,ch.qos.logback.classic.pattern,Class ThrowableProxyConverter,public String convert(ILoggingEvent event),Description copied from class: Converter
8711,classic/pattern,ch.qos.logback.classic.pattern,Class ThrowableProxyConverter,protected String throwableProxyToString(IThrowableProxy tp),
8712,classic/spi,ch.qos.logback.classic.spi,Class ThrowableProxyUtil,public static final int REGULAR_EXCEPTION_INDENT,
8713,classic/spi,ch.qos.logback.classic.spi,Class ThrowableProxyUtil,"public static void build(ThrowableProxy nestedTP, Throwable nestedThrowable, ThrowableProxy parentTP)",
8714,classic/spi,ch.qos.logback.classic.spi,Class ThrowableProxyUtil,public static String asString(IThrowableProxy tp),
8715,classic/spi,ch.qos.logback.classic.spi,Class ThrowableProxyUtil,"public static void indent(StringBuilder buf, int indent)",
8716,classic/spi,ch.qos.logback.classic.spi,Class ThrowableProxyUtil,"public static void subjoinPackagingData(StringBuilder builder, StackTraceElementProxy step)",
8717,classic/spi,ch.qos.logback.classic.spi,Class ThrowableProxyUtil,"public static void subjoinSTEP(StringBuilder sb, StackTraceElementProxy step)",
8718,classic/spi,ch.qos.logback.classic.spi,Class ThrowableProxyUtil,"public static void subjoinSTEPArray(StringBuilder sb, IThrowableProxy tp)","Deprecated. Use subjoinSTEPArray(StringBuilder sb, int indentLevel, IThrowableProxy tp) instead."
8719,classic/spi,ch.qos.logback.classic.spi,Class ThrowableProxyUtil,"public static void subjoinSTEPArray(StringBuilder sb, int indentLevel, IThrowableProxy tp)",
8720,classic/spi,ch.qos.logback.classic.spi,Class ThrowableProxyUtil,"public static void subjoinFirstLine(StringBuilder buf, IThrowableProxy tp)",
8721,classic/spi,ch.qos.logback.classic.spi,Class ThrowableProxyVO,public String getMessage(),
8722,classic/spi,ch.qos.logback.classic.spi,Class ThrowableProxyVO,public String getClassName(),
8723,classic/spi,ch.qos.logback.classic.spi,Class ThrowableProxyVO,public int getCommonFrames(),
8724,classic/spi,ch.qos.logback.classic.spi,Class ThrowableProxyVO,public IThrowableProxy getCause(),
8725,classic/spi,ch.qos.logback.classic.spi,Class ThrowableProxyVO,public StackTraceElementProxy[] getStackTraceElementProxyArray(),
8726,classic/spi,ch.qos.logback.classic.spi,Class ThrowableProxyVO,public IThrowableProxy[] getSuppressed(),
8727,classic/spi,ch.qos.logback.classic.spi,Class ThrowableProxyVO,public int hashCode(),
8728,classic/spi,ch.qos.logback.classic.spi,Class ThrowableProxyVO,public boolean equals(Object obj),
8729,rolling/helper,ch.qos.logback.core.rolling.helper,Class TimeBasedArchiveRemover,protected static final long UNINITIALIZED,
8730,rolling/helper,ch.qos.logback.core.rolling.helper,Class TimeBasedArchiveRemover,public void clean(Date now),
8731,rolling/helper,ch.qos.logback.core.rolling.helper,Class TimeBasedArchiveRemover,protected File[] getFilesInPeriod(Date dateOfPeriodToClean),
8732,rolling/helper,ch.qos.logback.core.rolling.helper,Class TimeBasedArchiveRemover,public void cleanPeriod(Date dateOfPeriodToClean),
8733,rolling/helper,ch.qos.logback.core.rolling.helper,Class TimeBasedArchiveRemover,"protected void descendingSort(File[] matchingFileArray, Date date)",
8734,rolling/helper,ch.qos.logback.core.rolling.helper,Class TimeBasedArchiveRemover,public void setMaxHistory(int maxHistory),
8735,rolling/helper,ch.qos.logback.core.rolling.helper,Class TimeBasedArchiveRemover,protected int getPeriodOffsetForDeletionTarget(),
8736,rolling/helper,ch.qos.logback.core.rolling.helper,Class TimeBasedArchiveRemover,public void setTotalSizeCap(long totalSizeCap),
8737,rolling/helper,ch.qos.logback.core.rolling.helper,Class TimeBasedArchiveRemover,public String toString(),
8738,core/rolling,ch.qos.logback.core.rolling,Interface TimeBasedFileNamingAndTriggeringPolicy<E>,void setTimeBasedRollingPolicy(TimeBasedRollingPolicy<E> tbrp),Set the host/parent TimeBasedRollingPolicy.
8739,core/rolling,ch.qos.logback.core.rolling,Interface TimeBasedFileNamingAndTriggeringPolicy<E>,String getElapsedPeriodsFileName(),Return the file name for the elapsed periods file name.
8740,core/rolling,ch.qos.logback.core.rolling,Interface TimeBasedFileNamingAndTriggeringPolicy<E>,String getCurrentPeriodsFileNameWithoutCompressionSuffix(),Return the current periods file name without the compression suffix. This value is equivalent to the active file name.
8741,core/rolling,ch.qos.logback.core.rolling,Interface TimeBasedFileNamingAndTriggeringPolicy<E>,ArchiveRemover getArchiveRemover(),Return the archive remover appropriate for this instance.
8742,core/rolling,ch.qos.logback.core.rolling,Interface TimeBasedFileNamingAndTriggeringPolicy<E>,long getCurrentTime(),"Return the current time which is usually the value returned by System.currentMillis(). However, for testing purposed this value may be different than the real time."
8743,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedFileNamingAndTriggeringPolicyBase<E>,protected TimeBasedRollingPolicy<E> tbrp,
8744,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedFileNamingAndTriggeringPolicyBase<E>,protected ArchiveRemover archiveRemover,
8745,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedFileNamingAndTriggeringPolicyBase<E>,protected String elapsedPeriodsFileName,
8746,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedFileNamingAndTriggeringPolicyBase<E>,protected RollingCalendar rc,
8747,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedFileNamingAndTriggeringPolicyBase<E>,protected long artificialCurrentTime,
8748,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedFileNamingAndTriggeringPolicyBase<E>,protected Date dateInCurrentPeriod,
8749,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedFileNamingAndTriggeringPolicyBase<E>,protected long nextCheck,
8750,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedFileNamingAndTriggeringPolicyBase<E>,protected boolean started,
8751,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedFileNamingAndTriggeringPolicyBase<E>,public boolean isStarted(),
8752,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedFileNamingAndTriggeringPolicyBase<E>,public void start(),
8753,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedFileNamingAndTriggeringPolicyBase<E>,public void stop(),
8754,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedFileNamingAndTriggeringPolicyBase<E>,protected void computeNextCheck(),
8755,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedFileNamingAndTriggeringPolicyBase<E>,protected void setDateInCurrentPeriod(long now),
8756,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedFileNamingAndTriggeringPolicyBase<E>,public void setDateInCurrentPeriod(Date _dateInCurrentPeriod),
8757,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedFileNamingAndTriggeringPolicyBase<E>,public String getElapsedPeriodsFileName(),Description copied from interface: TimeBasedFileNamingAndTriggeringPolicy
8758,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedFileNamingAndTriggeringPolicyBase<E>,public String getCurrentPeriodsFileNameWithoutCompressionSuffix(),Description copied from interface: TimeBasedFileNamingAndTriggeringPolicy
8759,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedFileNamingAndTriggeringPolicyBase<E>,public void setCurrentTime(long timeInMillis),Description copied from interface: TimeBasedFileNamingAndTriggeringPolicy
8760,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedFileNamingAndTriggeringPolicyBase<E>,public long getCurrentTime(),Description copied from interface: TimeBasedFileNamingAndTriggeringPolicy
8761,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedFileNamingAndTriggeringPolicyBase<E>,public void setTimeBasedRollingPolicy(TimeBasedRollingPolicy<E> _tbrp),Description copied from interface: TimeBasedFileNamingAndTriggeringPolicy
8762,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedFileNamingAndTriggeringPolicyBase<E>,public ArchiveRemover getArchiveRemover(),Description copied from interface: TimeBasedFileNamingAndTriggeringPolicy
8763,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedFileNamingAndTriggeringPolicyBase<E>,protected void withErrors(),
8764,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedRollingPolicy<E>,public void start(),
8765,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedRollingPolicy<E>,protected boolean isUnboundedTotalSizeCap(),
8766,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedRollingPolicy<E>,public void stop(),
8767,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedRollingPolicy<E>,public void setTimeBasedFileNamingAndTriggeringPolicy(TimeBasedFileNamingAndTriggeringPolicy<E> timeBasedTriggering),
8768,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedRollingPolicy<E>,public TimeBasedFileNamingAndTriggeringPolicy<E> getTimeBasedFileNamingAndTriggeringPolicy(),
8769,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedRollingPolicy<E>,public void rollover() throws RolloverFailure,Description copied from interface: RollingPolicy
8770,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedRollingPolicy<E>,public String getActiveFileName(),"The active log file is determined by the value of the parent's filename option. However, in case the file name is left blank, then, the active log file equals the file name for the current period as computed by the FileNamePattern option. The RollingPolicy must know whether it is responsible for changing the name of the active file or not. If the active file name is set by the user via the configuration file, then the RollingPolicy must let it like it is. If the user does not specify an active file name, then the RollingPolicy generates one. To be sure that the file name used by the parent class has been generated by the RollingPolicy and not specified by the user, we keep track of the last generated name object and compare its reference to the parent file name. If they match, then the RollingPolicy knows it's responsible for the change of the file name."
8771,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedRollingPolicy<E>,"public boolean isTriggeringEvent(File activeFile, E event)",Description copied from interface: TriggeringPolicy
8772,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedRollingPolicy<E>,public int getMaxHistory(),Get the number of archive files to keep.
8773,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedRollingPolicy<E>,public void setMaxHistory(int maxHistory),Set the maximum number of archive files to keep.
8774,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedRollingPolicy<E>,public boolean isCleanHistoryOnStart(),
8775,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedRollingPolicy<E>,public void setCleanHistoryOnStart(boolean cleanHistoryOnStart),Should archive removal be attempted on application start up? Default is false.
8776,core/rolling,ch.qos.logback.core.rolling,Class TimeBasedRollingPolicy<E>,public String toString(),
8777,joran/action,ch.qos.logback.core.joran.action,Class TimestampAction,"public void begin(InterpretationContext ec, String name, Attributes attributes) throws ActionException",Description copied from class: Action
8778,core/util,ch.qos.logback.core.util,Class TimeUtil,public static long computeStartOfNextSecond(long now),
8779,core/util,ch.qos.logback.core.util,Class TimeUtil,public static long computeStartOfNextMinute(long now),
8780,core/util,ch.qos.logback.core.util,Class TimeUtil,public static long computeStartOfNextHour(long now),
8781,core/util,ch.qos.logback.core.util,Class TimeUtil,public static long computeStartOfNextDay(long now),
8782,core/util,ch.qos.logback.core.util,Class TimeUtil,public static long computeStartOfNextWeek(long now),
8783,core/subst,ch.qos.logback.core.subst,Class Token,public static final Token START_TOKEN,
8784,core/subst,ch.qos.logback.core.subst,Class Token,public static final Token CURLY_LEFT_TOKEN,
8785,core/subst,ch.qos.logback.core.subst,Class Token,public static final Token CURLY_RIGHT_TOKEN,
8786,core/subst,ch.qos.logback.core.subst,Class Token,public boolean equals(Object o),
8787,core/subst,ch.qos.logback.core.subst,Class Token,public int hashCode(),
8788,core/subst,ch.qos.logback.core.subst,Enum Token.Type,public static final Token.Type LITERAL,
8789,core/subst,ch.qos.logback.core.subst,Enum Token.Type,public static final Token.Type START,
8790,core/subst,ch.qos.logback.core.subst,Enum Token.Type,public static final Token.Type CURLY_LEFT,
8791,core/subst,ch.qos.logback.core.subst,Enum Token.Type,public static final Token.Type CURLY_RIGHT,
8792,core/subst,ch.qos.logback.core.subst,Enum Token.Type,public static Token.Type[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (Token.Type c : Token.Type.values())  System.out.println(c);"
8793,rolling/helper,ch.qos.logback.core.rolling.helper,Class TokenConverter,public TokenConverter getNext(),
8794,rolling/helper,ch.qos.logback.core.rolling.helper,Class TokenConverter,public void setNext(TokenConverter next),
8795,rolling/helper,ch.qos.logback.core.rolling.helper,Class TokenConverter,public int getType(),
8796,access/tomcat,ch.qos.logback.access.tomcat,Class TomcatServerAdapter,public long getContentLength(),
8797,access/tomcat,ch.qos.logback.access.tomcat,Class TomcatServerAdapter,public int getStatusCode(),
8798,access/tomcat,ch.qos.logback.access.tomcat,Class TomcatServerAdapter,public long getRequestTimestamp(),
8799,core/helpers,ch.qos.logback.core.helpers,Class Transform,public static String escapeTags(String input),"This method takes a string which may contain HTML tags (ie, <b>, <table>, etc) and replaces any '<','>' ... characters with respective predefined entity references."
8800,core/helpers,ch.qos.logback.core.helpers,Class Transform,public static String escapeTags(StringBuffer buf),"This method takes a StringBuilder which may contain HTML tags (ie, <b>, <table>, etc) and replaces any '<' and '>' characters with respective predefined entity references."
8801,core/rolling,ch.qos.logback.core.rolling,Class TriggeringPolicyBase<E>,public void start(),
8802,core/rolling,ch.qos.logback.core.rolling,Class TriggeringPolicyBase<E>,public void stop(),
8803,chapters/migrationFromLog4j,chapters.migrationFromLog4j,Class TrivialLog4jAppender,protected void append(org.apache.log4j.spi.LoggingEvent loggingevent),
8804,chapters/migrationFromLog4j,chapters.migrationFromLog4j,Class TrivialLog4jAppender,public void close(),
8805,chapters/migrationFromLog4j,chapters.migrationFromLog4j,Class TrivialLog4jLayout,public void activateOptions(),
8806,chapters/migrationFromLog4j,chapters.migrationFromLog4j,Class TrivialLog4jLayout,public String format(org.apache.log4j.spi.LoggingEvent loggingEvent),
8807,chapters/migrationFromLog4j,chapters.migrationFromLog4j,Class TrivialLogbackAppender,public void start(),
8808,chapters/migrationFromLog4j,chapters.migrationFromLog4j,Class TrivialLogbackAppender,protected void append(ILoggingEvent loggingEvent),
8809,chapters/migrationFromLog4j,chapters.migrationFromLog4j,Class TrivialLogbackAppender,public Layout<ILoggingEvent> getLayout(),
8810,net/ssl,ch.qos.logback.core.net.ssl,Class TrustManagerFactoryFactoryBean,"public TrustManagerFactory createTrustManagerFactory() throws NoSuchProviderException, NoSuchAlgorithmException",Creates a TrustManagerFactory using the receiver's configuration.
8811,net/ssl,ch.qos.logback.core.net.ssl,Class TrustManagerFactoryFactoryBean,public String getAlgorithm(),Gets the algorithm name for the trust manager factory.
8812,net/ssl,ch.qos.logback.core.net.ssl,Class TrustManagerFactoryFactoryBean,public void setAlgorithm(String algorithm),Sets the algorithm name for the trust manager factory.
8813,net/ssl,ch.qos.logback.core.net.ssl,Class TrustManagerFactoryFactoryBean,public String getProvider(),Gets the JSSE provider name for the trust manager factory.
8814,classic/layout,ch.qos.logback.classic.layout,Class TTLLLayout,public void start(),
8815,classic/turbo,ch.qos.logback.classic.turbo,Class TurboFilter,"public abstract FilterReply decide(org.slf4j.Marker marker, Logger logger, Level level, String format, Object[] params, Throwable t)","Make a decision based on the multiple parameters passed as arguments. The returned value should be one of FilterReply.DENY, FilterReply.NEUTRAL, or FilterReply.ACCEPT."
8816,classic/turbo,ch.qos.logback.classic.turbo,Class TurboFilter,public void start(),
8817,classic/turbo,ch.qos.logback.classic.turbo,Class TurboFilter,public boolean isStarted(),
8818,classic/turbo,ch.qos.logback.classic.turbo,Class TurboFilter,public void stop(),
8819,classic/turbo,ch.qos.logback.classic.turbo,Class TurboFilter,public String getName(),
8820,logback/core,ch.qos.logback.core,Class UnsynchronizedAppenderBase<E>,protected boolean started,
8821,logback/core,ch.qos.logback.core,Class UnsynchronizedAppenderBase<E>,public String getName(),Description copied from interface: Appender
8822,logback/core,ch.qos.logback.core,Class UnsynchronizedAppenderBase<E>,public void doAppend(E eventObject),Description copied from interface: Appender
8823,logback/core,ch.qos.logback.core,Class UnsynchronizedAppenderBase<E>,protected abstract void append(E eventObject),
8824,logback/core,ch.qos.logback.core,Class UnsynchronizedAppenderBase<E>,public void setName(String name),Set the name of this appender.
8825,logback/core,ch.qos.logback.core,Class UnsynchronizedAppenderBase<E>,public void start(),
8826,logback/core,ch.qos.logback.core,Class UnsynchronizedAppenderBase<E>,public void stop(),
8827,logback/core,ch.qos.logback.core,Class UnsynchronizedAppenderBase<E>,public boolean isStarted(),
8828,logback/core,ch.qos.logback.core,Class UnsynchronizedAppenderBase<E>,public String toString(),
8829,logback/core,ch.qos.logback.core,Class UnsynchronizedAppenderBase<E>,public void addFilter(Filter<E> newFilter),Description copied from interface: FilterAttachable
8830,logback/core,ch.qos.logback.core,Class UnsynchronizedAppenderBase<E>,public void clearAllFilters(),
8831,logback/core,ch.qos.logback.core,Class UnsynchronizedAppenderBase<E>,public List<Filter<E>> getCopyOfAttachedFiltersList(),Description copied from interface: FilterAttachable
8832,access/html,ch.qos.logback.access.html,Class UrlCssBuilder,public String getUrl(),
8833,access/html,ch.qos.logback.access.html,Class UrlCssBuilder,public void setUrl(String url),
8834,classic/html,ch.qos.logback.classic.html,Class UrlCssBuilder,public String getUrl(),
8835,classic/html,ch.qos.logback.classic.html,Class UrlCssBuilder,public void setUrl(String url),
8836,access/net,ch.qos.logback.access.net,Class URLEvaluator,public void addURL(String url),
8837,access/net,ch.qos.logback.access.net,Class URLEvaluator,public void start(),
8838,access/net,ch.qos.logback.access.net,Class URLEvaluator,"public boolean evaluate(IAccessEvent event) throws NullPointerException, EvaluationException",Description copied from interface: EventEvaluator
8839,access/net,ch.qos.logback.access.net,Class URLEvaluator,public String getName(),Description copied from interface: EventEvaluator
8840,access/net,ch.qos.logback.access.net,Class URLEvaluator,public void setName(String name),Description copied from interface: EventEvaluator
8841,access/net,ch.qos.logback.access.net,Class URLEvaluator,public boolean isStarted(),
8842,chapters/mdc,chapters.mdc,Class UserServletFilter,public void destroy(),
8843,chapters/mdc,chapters.mdc,Class UserServletFilter,"public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws IOException, javax.servlet.ServletException",
8844,access/servlet,ch.qos.logback.access.servlet,Class Util,public static boolean isFormUrlEncoded(javax.servlet.http.HttpServletRequest request),
8845,logback/access,ch.qos.logback.access,Class ViewStatusMessagesServlet,"protected StatusManager getStatusManager(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse resp)",
8846,logback/classic,ch.qos.logback.classic,Class ViewStatusMessagesServlet,"protected StatusManager getStatusManager(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse resp)",
8847,core/status,ch.qos.logback.core.status,Class ViewStatusMessagesServletBase,"protected abstract StatusManager getStatusManager(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse resp)",
8848,core/status,ch.qos.logback.core.status,Class ViewStatusMessagesServletBase,"protected abstract String getPageTitle(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse resp)",
8849,core/status,ch.qos.logback.core.status,Class ViewStatusMessagesServletBase,"protected void service(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse resp) throws javax.servlet.ServletException, IOException",
8850,core/status,ch.qos.logback.core.status,Class ViewStatusMessagesServletBase,"public void printCSS(String localRef, PrintWriter output)",
8851,core/status,ch.qos.logback.core.status,Class ViewStatusMessagesServletBase,"public void printList(StringBuilder buf, StatusManager sm)",
8852,core/status,ch.qos.logback.core.status,Class WarnStatus,"public WarnStatus(String msg, Object origin)",
8853,classic/log4j,ch.qos.logback.classic.log4j,Class XMLLayout,public void start(),
8854,classic/log4j,ch.qos.logback.classic.log4j,Class XMLLayout,public void setLocationInfo(boolean flag),"The LocationInfo option takes a boolean value. By default, it is set to false which means there will be no location information output by this layout. If the the option is set to true, then the file name and line number of the statement at the origin of the log statement will be output. If you are embedding this layout within an org.apache.log4j.net.SMTPAppender then make sure to set the LocationInfo option of that appender as well."
8855,classic/log4j,ch.qos.logback.classic.log4j,Class XMLLayout,public boolean getLocationInfo(),Returns the current value of the LocationInfo option.
8856,classic/log4j,ch.qos.logback.classic.log4j,Class XMLLayout,public void setProperties(boolean flag),"Sets whether MDC key-value pairs should be output, default false."
8857,classic/log4j,ch.qos.logback.classic.log4j,Class XMLLayout,public boolean getProperties(),Gets whether MDC key-value pairs should be output.
8858,classic/log4j,ch.qos.logback.classic.log4j,Class XMLLayout,public String doLayout(ILoggingEvent event),Formats a ILoggingEvent in conformity with the log4j.dtd.
8859,joran/spi,ch.qos.logback.core.joran.spi,Class XMLUtil,public static final int ILL_FORMED,
8860,batch/android,com.batch.android,Interface AdsIdentifierProvider,void checkAvailability() throws AdsIdentifierProviderAvailabilityException,"Is this provider available to use? This is the place to check if the libraries are here at runtime and if the user enabled/disabled your provider. If not available, you should throw a AdsIdentifierProviderAvailabilityException with the human-readable error message."
8861,batch/android,com.batch.android,Interface AdsIdentifierProvider.AdsIdentifierListener,"void onSuccess(java.lang.String id, boolean limited)",Called on success with the id & if the user selected to opt-out from ads
8862,batch/android,com.batch.android,Class Batch,public static final java.lang.String ACTION_REGISTRATION_IDENTIFIER_OBTAINED,Intent broadcasted locally by the SDK when a push registration identifier has been retrieved (also called Push Token). Registration information is defined by the EXTRA_REGISTRATION_PROVIDER_NAME and EXTRA_REGISTRATION_IDENTIFIER string extras.
8863,batch/android,com.batch.android,Class Batch,public static final java.lang.String BROADCAST_PERMISSION_SUFFIX,Permission suffix for broadcasts triggered by Batch. The actual permission is your package name + BROADCAST_PERMISSION_SUFFIX You can call getBroadcastPermissionName(Context) to get the full permission name.
8864,batch/android,com.batch.android,Class Batch,public static final java.lang.String DEFAULT_PLACEMENT,Default placement
8865,batch/android,com.batch.android,Class Batch,public static final java.lang.String EXTRA_REGISTRATION_IDENTIFIER,Extra containing the Registration Identifier for a ACTION_REGISTRATION_IDENTIFIER_OBTAINED broadcast
8866,batch/android,com.batch.android,Class Batch,public static final java.lang.String EXTRA_REGISTRATION_PROVIDER_NAME,Extra containing the Registration Provider name for a ACTION_REGISTRATION_IDENTIFIER_OBTAINED broadcast
8867,batch/android,com.batch.android,Class Batch,public static final java.lang.String EXTRA_REGISTRATION_SENDER_ID,Extra containing the Sender ID (if any) for a ACTION_REGISTRATION_IDENTIFIER_OBTAINED broadcast
8868,batch/android,com.batch.android,Class Batch,public static java.lang.String getAPIKey(),"Return the api key If you call this method before calling setConfig, it will return null"
8869,batch/android,com.batch.android,Class Batch,@Deprecatedpublic static BatchUserProfile getUserProfile(),Deprecated. Please use Batch.User methods instead
8870,batch/android,com.batch.android,Class Batch,public static void setConfig(Config config),"Set the configuration of Batch. You should call this method before any other, only one time. Typically on the onCreate of your MainActivity."
8871,batch/android,com.batch.android,Class Batch,public static boolean shouldUseAdvertisingID(),Can Batch use Advertising ID
8872,batch/android,com.batch.android,Class Batch,public static boolean shouldUseAdvancedDeviceInformation(),Can Batch use advanced device information
8873,batch/android,com.batch.android,Class Batch,@Deprecatedpublic static boolean shouldUseGoogleInstanceID(),Deprecated. Please migrate to FCM
8874,batch/android,com.batch.android,Class Batch,@Deprecatedpublic static boolean shouldAutoRegisterForPush(),"Deprecated. Please remove this call, as it doesn't do anything anymore"
8875,batch/android,com.batch.android,Class Batch,public static LoggerLevel getLoggerLevel(),Get the current logger level
8876,batch/android,com.batch.android,Class Batch,public static java.lang.String getSessionID(),"Get the id of the current session, random uuid used internaly by Batch to identify the app session."
8877,batch/android,com.batch.android,Class Batch,@Deprecatedpublic static boolean isRunningInDevMode(),"Deprecated. This method is not needed, since all DEV API Keys start with DEV."
8878,batch/android,com.batch.android,Class Batch,"public static void copyBatchExtras(Intent from, Intent to)","Copy Batch's internal data from an intent to another. This is useful if you've got an activity that will not get a chance to start Batch before closing itself, but don't want to break features relying on data put in the intent extras, such as direct open tracking or mobile landings."
8879,batch/android,com.batch.android,Class Batch,"public static void copyBatchExtras(Bundle from, Bundle to)","Copy Batch's internal data from intent extras to another bundle. This is useful if you've got an activity that will not get a chance to start Batch before closing itself, but don't want to break features relying on data put in the intent extras, such as direct open tracking or mobile landings."
8880,batch/android,com.batch.android,Class Batch,public static java.lang.String getBroadcastPermissionName(Context context),Get the broadcast permission name. Useful if you want to register your broadcast receiver at runtime
8881,batch/android,com.batch.android,Class Batch,public static void optOut(Context context),"Opt Out from Batch SDK Usage. Requires Batch to be started. Note that calling the SDK when opted out is discouraged: Some modules might behave unexpectedly when the SDK is opted-out from. Opting out will: - Prevent Batch#onStart(Activity) or Batch#onServiceCreate(Context, boolean) from doing anything at all - Disable any network capability from the SDK - Disable all In-App campaigns - Make the Inbox module return an error immediatly when used - Make the SDK reject any BatchUserProfile or BatchUserDataEditor#save() calls - Make the SDK reject calls to Batch.User#trackEvent(String), Batch.User#trackTransaction(double), Batch.User#trackLocation(Location) and any related methods Even if you opt in afterwards, data that has been generated while opted out WILL be lost. If you're also looking at deleting user data, please use Batch#optOutAndWipeData(Context) Note that calling this method will stop Batch, effectively simulating calls to Batch#onStop(Activity), Batch#onDestroy(Activity) and Batch#onServiceDestroy(Context). Your app should be prepared to handle these cases. Some features might not be disabled until the next app start."
8882,batch/android,com.batch.android,Class Batch,"public static void optOut(Context context, BatchOptOutResultListener listener)","Opt Out from Batch SDK Usage. Requires Batch to be started. Same as Batch#optOut(Context), with a completion listener. Use the listener to be informed about whether the opt-out request has been successfully sent to the server or not. You'll also be able to control what to do in case of failure. Note: if the SDK has already been opted-out from, this method will instantly call the listener with a *failure* state."
8883,batch/android,com.batch.android,Class Batch,public static void optOutAndWipeData(Context context),"Opt Out from Batch SDK Usage. Requires Batch to be started. Same as Batch#optOut(Context) but also wipes data. Note that calling this method will stop Batch, effectively simulating calls to Batch#onStop(Activity), Batch#onDestroy(Activity) and Batch#onServiceDestroy(Context). Your app should be prepared to handle these cases."
8884,batch/android,com.batch.android,Class Batch,"public static void optOutAndWipeData(Context context, BatchOptOutResultListener listener)","Opt Out from Batch SDK Usage. Requires Batch to be started. Same as Batch#optOut(Context) but also wipes data. Note that calling this method will stop Batch, effectively simulating calls to Batch#onStop(Activity), Batch#onDestroy(Activity) and Batch#onServiceDestroy(Context). Your app should be prepared to handle these cases. Use the listener to be informed about whether the opt-out request has been successfully sent to the server or not. You'll also be able to control what to do in case of failure. Note: if the SDK has already been opted-out from, this method will instantly call the listener with a *failure* state."
8885,batch/android,com.batch.android,Class Batch,public static void optIn(Context context),Opt In to Batch SDK Usage. This method will be taken into account on next full application start (full process restart) Only useful if you called Batch#optOut(Context) or Batch#optOutAndWipeData(Context) or opted out by default in the manifest Some features might not be disabled until the next app start if you call this late into the application's life. It is strongly advised to restart the application (or at least the current activity) after opting in.
8886,batch/android,com.batch.android,Class Batch,public static boolean isOptedOut(Context context),Returns whether Batch has been opted out from or not Warning: This method might perform some quick I/O in the caller thread.
8887,batch/android,com.batch.android,Class Batch,public static void onStart(Activity activity),Method to call on your main activity Activity#onStart() to start Batch and support URL scheme events. You must call this method before any other on Batch. Will fail and log an Error if Given activity is nullYou call it before calling Batch#setConfig(Config)Your app doesn't have android.permission.INTERNET permission
8888,batch/android,com.batch.android,Class Batch,"public static void onServiceCreate(Context context, boolean userActivity)","Method to call on your service Service#onCreate() to start Batch. You must call this method before any other on Batch. Note that all Batch functionality is not available in this mode. See the documentation for more info. Using this method, you'll also be able to control whether this start should count as user activity or not. This might impact Analytics. Will fail and log an Error if Given context is nullYou call it before calling Batch#setConfig(Config)Your app doesn't have android.permission.INTERNET permission"
8889,batch/android,com.batch.android,Class Batch,public static void onServiceDestroy(Context context),Method to call on your service Service#onDestroy() to stop Batch. Calling this method if Batch is already stopped or not started will do nothing
8890,batch/android,com.batch.android,Class Batch,"public static void onNewIntent(Activity activity, Intent intent)",Method to call on your main activity Activity#onNewIntent(Intent) Calling this method if Batch is already stopped or not started will do nothing
8891,batch/android,com.batch.android,Class Batch,public static void onStop(Activity activity),Method to call on your main activity Activity#onStop() Calling this method if Batch is already stopped or not started will do nothing
8892,batch/android,com.batch.android,Class Batch.Actions,public static void register(UserAction userAction),"Register an action with Batch. If an action already exists for that identifier, it will be replaced. Identifiers are not case-sensitive. Note that the action identifier cannot start with batch., as they are reserved by the SDK. Trying to register such an action will throw an exception."
8893,batch/android,com.batch.android,Class Batch.Actions,public static void unregister(java.lang.String identifier),Unregister an action from Batch. Trying to unregister an action that has not be unregistered will silently fail. Note that trying to unregister an action that starts with batch. will throw an exception.
8894,batch/android,com.batch.android,Class Batch.Actions,"public static void addDrawableAlias(java.lang.String alias, int drawableID)","Add an alias to a drawable that can be referenced remotely. This is used for CTAs (buttons) showing in the push notifications themselves. While you can directly set a drawable resource when making your notification, it is recommended that you add a set of aliases. That way, you can change the drawable file name between versions without having to think about that when pushing different versions of your applications. You can also use aliases to make the icon names more readable or useful to anybody sending notifications to your app. Note that since Android N, notifications with button will not display icons anymore."
8895,batch/android,com.batch.android,Class Batch.Actions,"public static boolean performAction(Context context, java.lang.String actionIdentifier, JSONObject arguments)",Perform an action by its identifier. Note: The action will have a null source.
8896,batch/android,com.batch.android,Class Batch.EventDispatcher,public static void addDispatcher(BatchEventDispatcher dispatcher),Add an event dispatcher. The Batch SDK must be opt-in for the dispatcher to receive events.
8897,batch/android,com.batch.android,Interface Batch.EventDispatcher.Payload,java.lang.String getTrackingId(),"Get the tracking ID associated with the event. Only set for in-app, see Type#isNotificationEvent()."
8898,batch/android,com.batch.android,Interface Batch.EventDispatcher.Payload,java.lang.String getDeeplink(),"Get the deeplink url associated with the event. Only set for Type#MESSAGING_CLICK, Type#NOTIFICATION_OPEN and Type#NOTIFICATION_DISPLAY"
8899,batch/android,com.batch.android,Interface Batch.EventDispatcher.Payload,boolean isPositiveAction(),Indicate if the action associated with the event is positive. A positive action is : - An Open for a push campaign - A CTA click or Global tap containing a deeplink or a custom action for a messaging campaign
8900,batch/android,com.batch.android,Interface Batch.EventDispatcher.Payload,java.lang.String getCustomValue(java.lang.String key),Get a value from a key within the custom payload associated with the event.
8901,batch/android,com.batch.android,Interface Batch.EventDispatcher.Payload,BatchMessage getMessagingPayload(),Get the raw payload associated with the event
8902,batch/android,com.batch.android,Enum Batch.EventDispatcher.Type,public static final Batch.EventDispatcher.Type NOTIFICATION_DISPLAY,
8903,batch/android,com.batch.android,Enum Batch.EventDispatcher.Type,public static final Batch.EventDispatcher.Type NOTIFICATION_DISMISS,
8904,batch/android,com.batch.android,Enum Batch.EventDispatcher.Type,public static final Batch.EventDispatcher.Type NOTIFICATION_OPEN,
8905,batch/android,com.batch.android,Enum Batch.EventDispatcher.Type,public static final Batch.EventDispatcher.Type MESSAGING_SHOW,
8906,batch/android,com.batch.android,Enum Batch.EventDispatcher.Type,public static final Batch.EventDispatcher.Type MESSAGING_CLOSE,
8907,batch/android,com.batch.android,Enum Batch.EventDispatcher.Type,public static final Batch.EventDispatcher.Type MESSAGING_AUTO_CLOSE,
8908,batch/android,com.batch.android,Enum Batch.EventDispatcher.Type,public static Batch.EventDispatcher.Type[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (Batch.EventDispatcher.Type c : Batch.EventDispatcher.Type.values())  System.out.println(c);"
8909,batch/android,com.batch.android,Enum Batch.EventDispatcher.Type,public static Batch.EventDispatcher.Type valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.The string must match exactly an identifier used to declare anenum constant in this type. (Extraneous whitespace characters are not permitted.)
8910,batch/android,com.batch.android,Enum Batch.EventDispatcher.Type,public boolean isNotificationEvent(),
8911,batch/android,com.batch.android,Class Batch.Inbox,public static BatchInboxFetcher getFetcher(Context context),"Get an inbox fetcher based on the current installation ID. Batch must be started for all of the fetcher's features to work, but you can call this method before starting Batch (such as in your activity's onCreate)"
8912,batch/android,com.batch.android,Class Batch.Inbox,"public static BatchInboxFetcher getFetcher(Context context, java.lang.String userIdentifier, java.lang.String authenticationKey)","Get an inbox fetcher for the specified user identifier. Batch must be started for all of the fetcher's features to work, but you can call this method before starting Batch (such as in your activity's onCreate)"
8913,batch/android,com.batch.android,Class Batch.Messaging,public static void setShowForegroundLandings(boolean showForegroundLandings),Toggle whether mobile landings should be shown directly rather than displaying a notification when the app is in foreground. Default is true.
8914,batch/android,com.batch.android,Class Batch.Messaging,public static void setAutomaticMode(boolean automatic),"Toggle this module's automatic mode. By default, this value is true. If you disable automatic mode, you will have to implement loadFragment(Context,com.batch.android.BatchMessage)"
8915,batch/android,com.batch.android,Class Batch.Messaging,"public static void setTypefaceOverride(Typeface normalTypeface, Typeface boldTypeface)","Override the Typeface (aka font) used by Batch's messaging views. You'll need to provide both the normal and bold typefaces. If you only provide one, the result might be inconsistent. In order to revert to the system font, set the typefaces to null."
8916,batch/android,com.batch.android,Class Batch.Messaging,public static void setLifecycleListener(Batch.Messaging.LifecycleListener listener),"Set a lifecycle listener. For more information about what a lifecycle listener is useful for, look at LifecycleListener's documentation."
8917,batch/android,com.batch.android,Class Batch.Messaging,"public static DialogFragment loadFragment(Context context, BatchMessage message) throws BatchMessagingException","Load the Fragment corresponding to the message payload. This method should be called from your UI thread. If the specified message contains a banner, this method will throw a BatchMessagingException. You should then fallback on loadBanner(Context,com.batch.android.BatchMessage), or attempt it before, as there is currently no way of checking whether a BatchMessage contains a banner, an interstitial, or any potential future format."
8918,batch/android,com.batch.android,Class Batch.Messaging,"public static BatchBannerView loadBanner(Context context, BatchMessage message) throws BatchMessagingException","Load the BatchBannerView corresponding to the message payload. This method should be called from your UI thread. If the message does not contain a banner, a BatchMessagingException will be thrown."
8919,batch/android,com.batch.android,Class Batch.Messaging,"public static void show(Context context, BatchMessage message)","Asynchronously show the BatchMessage. It will be displayed in a dedicated activity (MessagingActivity). Note that if this method will work even if Batch is in do not disturb mode. The given context should be an Activity instance to enable support for the banner format, as it has to be attached to an activity. If you want to tweak how the SDK displays a banner, you can implement Batch.Messaging.DisplayHintProvider in your activity."
8920,batch/android,com.batch.android,Class Batch.Messaging,public static void setDoNotDisturbEnabled(boolean enableDnd),"Toggles whether Batch.Messaging should entier its do not disturb (DnD) mode, or exit it. While in DnD, Batch will not display landings, not matter if they've been triggered by notifications or an In-App Campaign, even in automatic mode. This mode is useful for times where you don't want Batch to interrupt your user, such as during a splashscreen, a video or an interstitial ad. If a message should have been displayed during DnD, Batch will enqueue it, overwriting any previously enqueued message. When exiting DnD, Batch will not display the message automatically: you'll have to call the queue management methods to display the message, if you want to. See hasPendingMessage(), popPendingMessage() to manage the enqueued message, if any. Note: This is only supported if automatic mode is disabled. Messages will not be enqueued, as they will be delivered to your LifecycleListener2 implementation. "
8921,batch/android,com.batch.android,Class Batch.Messaging,public static boolean isDoNotDisturbEnabled(),Check if Batch Messaging is currently in Do Not Disturb mode
8922,batch/android,com.batch.android,Class Batch.Messaging,public static boolean hasPendingMessage(),"Check if Batch currently has a pending message, without forgetting it."
8923,batch/android,com.batch.android,Class Batch.Messaging.DisplayHint,public static Batch.Messaging.DisplayHint findUsingView(View view),"Automatically find an appropriate container: Batch will use the given view as a base to walk up the view tree until it reaches the window's content view, or a CoordinatorLayout."
8924,batch/android,com.batch.android,Interface Batch.Messaging.LifecycleListener,void onBatchMessageShown(java.lang.String messageIdentifier),Called when the message view appeared on screen.
8925,batch/android,com.batch.android,Interface Batch.Messaging.LifecycleListener,void onBatchMessageClosed(java.lang.String messageIdentifier),Called when the message view disappeared from the screen.
8926,batch/android,com.batch.android,Interface Batch.Messaging.LifecycleListener,"default void onBatchMessageActionTriggered(java.lang.String messageIdentifier, int index, BatchMessageAction action)",Called when the message view will be dismissed due to the user pressing a CTA or the global tap action.
8927,batch/android,com.batch.android,Interface Batch.Messaging.LifecycleListener,default void onBatchMessageCancelledByUser(java.lang.String messageIdentifier),"Called when the message view will be dismissed due to the user pressing the close button, or the system's Back button."
8928,batch/android,com.batch.android,Class Batch.Push,public static final java.lang.String ALERT_KEY,Key to retrieve the Alert message
8929,batch/android,com.batch.android,Class Batch.Push,public static final java.lang.String BODY_KEY,Key to retrieve the body of a push message
8930,batch/android,com.batch.android,Class Batch.Push,public static final java.lang.String PAYLOAD_KEY,Key to retrieve the GCM payload from the activity launch intent
8931,batch/android,com.batch.android,Class Batch.Push,@Deprecatedpublic static void setGCMSenderId(java.lang.String gcmSenderId),Deprecated. Please migrate to FCM: https://batch.com/doc/android/advanced/fcm-migration.html
8932,batch/android,com.batch.android,Class Batch.Push,public static void setSmallIconResourceId(int resourceId),Set a custom small icon resource that push notifications will use.
8933,batch/android,com.batch.android,Class Batch.Push,public static void setSound(Uri uri),"Set a custom sound uri that push notifications will use. On Android 8.0, this setting will be applied to the default android.app.NotificationChannel that Batch registers, meaning that you won't be able to change it after the first notification. If you use your own channel, this method will have no effect."
8934,batch/android,com.batch.android,Class Batch.Push,public static void setLargeIcon(Bitmap largeIcon),Set a custom large icon that push notifications will use.
8935,batch/android,com.batch.android,Class Batch.Push,public static BatchNotificationChannelsManager getChannelsManager(),"Get the channels manager, allowing you to tweak how notifications will behave regarding the channels feature introduced in Android 8.0 (API 26)"
8936,batch/android,com.batch.android,Class Batch.Push,public static void dismissNotifications(),Dismiss all notifications shown by the application. You should call this method after Batch#onStart(Activity)
8937,batch/android,com.batch.android,Class Batch.Push,public static <any> getNotificationsType(Context context),Get the enabled notification types Matches what you've set in setNotificationsType.
8938,batch/android,com.batch.android,Class Batch.Push,public static void setNotificationsType(<any> types),"Adjust the way Batch will display notifications. You should use this method if you want to remove vibration, light, sound or avoid notifications for this user. Note: On Android 8.0 and higher, this method ignores PushNotificationType#LIGHTS, PushNotificationType#VIBRATE and PushNotificationType#SOUND. Only PushNotificationType#ALERT will be honored, toggling whether notifications should be displayed or not. This is because Android 8 manages notifications using channels, meaning that these settings cannot be in your app anymore, and must redirect to the system's UI. Use Push#getChannelsManager() to manage your channels."
8939,batch/android,com.batch.android,Class Batch.Push,public static boolean isBatchPush(Intent intent),"Check if the received push is a Batch one. If you have a custom push implementation into your app you should call this method before doing anything else into the BroadcastReceiver#onReceive(Context, Intent) method. If it returns true, you should not handle the push."
8940,batch/android,com.batch.android,Class Batch.Push,public static boolean isBatchPush(RemoteMessage message),"Check if the received push is a Batch one. If you have a custom push implementation into your app you should call this method before doing anything else. If it returns true, you should not handle the push."
8941,batch/android,com.batch.android,Class Batch.Push,public static void setNotificationsColor(int argbColor),Set the notification accent color for Lollipop or later. See Notification.color for more details
8942,batch/android,com.batch.android,Class Batch.Push,public static boolean isManualDisplayModeActivated(),Get manual display mode for push notifications. 
8943,batch/android,com.batch.android,Class Batch.Push,public static void setManualDisplay(boolean manualDisplay),"Set manual display mode for push notifications. If you set manual display mode to true, no notifications will be shown automatically and you'll have to display it by yourself."
8944,batch/android,com.batch.android,Class Batch.Push,"public static void appendBatchData(Intent pushIntent, Intent openIntent)","Append Batch data to your open intent so that opens from this push will be tracked by Batch and displayed into your dashboard. It also powers other features, such as but not limited to mobile landings."
8945,batch/android,com.batch.android,Class Batch.Push,"public static void appendBatchData(Bundle pushIntentExtras, Intent openIntent)","Append Batch data to your open intent so that opens from this push will be tracked by Batch and displayed into your dashboard. It also powers other features, such as but not limited to mobile landings."
8946,batch/android,com.batch.android,Class Batch.Push,"public static void appendBatchData(RemoteMessage remoteMessage, Intent openIntent)","Append Batch data to your open intent so that opens from this push will be tracked by Batch and displayed into your dashboard. It also powers other features, such as but not limited to mobile landings."
8947,batch/android,com.batch.android,Class Batch.Push,"public static PendingIntent makePendingIntent(Context context, Intent intent, Bundle pushIntentExtras)","Make a PendingIntent suitable for notifications from a given Intent. This is useful for custom receivers, or BatchNotificationInterceptor implementations. Warning: it will override the intent's action with a unique name, to ensure that existing notifications are not updated with this PendingIntent's content. If you rely on a custom action, you will have to make your own PendingIntent."
8948,batch/android,com.batch.android,Class Batch.Push,"public static PendingIntent makePendingIntent(Context context, Intent intent, RemoteMessage remoteMessage)","Make a PendingIntent suitable for notifications from a given Intent. This is useful for custom receivers, or BatchNotificationInterceptor implementations. Warning: it will override the intent's action with a unique name, to ensure that existing notifications are not updated with this PendingIntent's content. If you rely on a custom action, you will have to make your own PendingIntent."
8949,batch/android,com.batch.android,Class Batch.Push,"public static PendingIntent makePendingIntentForDeeplink(Context context, java.lang.String deeplink, Bundle pushIntentExtras)","Make a PendingIntent suitable for notifications from a given deeplink. It will use Batch's builtin action activity. This is useful for custom receivers, or BatchNotificationInterceptor implementations."
8950,batch/android,com.batch.android,Class Batch.Push,"public static PendingIntent makePendingIntentForDeeplink(Context context, java.lang.String deeplink, RemoteMessage remoteMessage)","Make a PendingIntent suitable for notifications from a given deeplink. It will use Batch's builtin action activity. This is useful for custom receivers, or BatchNotificationInterceptor implementations."
8951,batch/android,com.batch.android,Class Batch.Push,"public static boolean shouldDisplayPush(Context context, Intent intent)","Should the developer handle and display this push, or will Batch display it? Use this method to know if Batch will ignore this push, and that displaying it is your responsibility"
8952,batch/android,com.batch.android,Class Batch.Push,"public static boolean shouldDisplayPush(Context context, RemoteMessage remoteMessage)","Should the developer handle and display this push, or will Batch display it? Use this method to know if Batch will ignore this push, and that displaying it is your responsibility"
8953,batch/android,com.batch.android,Class Batch.Push,"public static void displayNotification(Context context, Intent intent)",Call this method to display the notification for this intent.
8954,batch/android,com.batch.android,Class Batch.Push,"public static void displayNotification(Context context, Intent intent, boolean bypassManualMode)",Call this method to display the notification for this intent.
8955,batch/android,com.batch.android,Class Batch.Push,"public static void displayNotification(Context context, Intent intent, BatchNotificationInterceptor interceptor)","Call this method to display the notification for this intent. Allows an interceptor to be set for this call, overriding the global one set using Batch.Push#setNotificationInterceptor(BatchNotificationInterceptor)"
8956,batch/android,com.batch.android,Class Batch.Push,"public static void displayNotification(Context context, Intent intent, BatchNotificationInterceptor interceptor, boolean bypassManualMode)","Call this method to display the notification for this intent. Allows an interceptor to be set for this call, overriding the global one set using Batch.Push#setNotificationInterceptor(BatchNotificationInterceptor)"
8957,batch/android,com.batch.android,Class Batch.Push,"public static void displayNotification(Context context, RemoteMessage remoteMessage)",Call this method to display the notification for this message.
8958,batch/android,com.batch.android,Class Batch.Push,"public static void displayNotification(Context context, RemoteMessage remoteMessage, BatchNotificationInterceptor interceptor)","Call this method to display the notification for this message. Allows an interceptor to be set for this call, overriding the global one set using Batch.Push#setNotificationInterceptor(BatchNotificationInterceptor)"
8959,batch/android,com.batch.android,Class Batch.Push,public static void setAdditionalIntentFlags(java.lang.Integer flags),Sets additional intent flags for notifications. Doesn't work for external deeplinks.
8960,batch/android,com.batch.android,Class Batch.Push,"public static void onNotificationDisplayed(Context context, Intent intent)",Call this method when you just displayed a Batch push notification by yourself.
8961,batch/android,com.batch.android,Class Batch.Push,"public static void onNotificationDisplayed(Context context, RemoteMessage remoteMessage)",Call this method when you just displayed a Batch push notification by yourself.
8962,batch/android,com.batch.android,Class Batch.Push,public static java.lang.String getLastKnownPushToken(),Get the last known push token. The returned token might be outdated and invalid if this method is called too early in your application lifecycle. Batch MUST be started in order to use this method.
8963,batch/android,com.batch.android,Class Batch.Push,public static void setNotificationInterceptor(BatchNotificationInterceptor interceptor),Set a notification interceptor. It allows you to tweak various parts of a notification that Batch generates before displaying it.
8964,batch/android,com.batch.android,Class Batch.User,public static java.lang.String getInstallationID(),"Get the unique installation ID, generated by Batch. Batch must be started to read it."
8965,batch/android,com.batch.android,Class Batch.User,public static java.lang.String getLanguage(Context context),Read the language.
8966,batch/android,com.batch.android,Class Batch.User,public static java.lang.String getRegion(Context context),Read the region.
8967,batch/android,com.batch.android,Class Batch.User,public static java.lang.String getIdentifier(Context context),Read the custom identifier.
8968,batch/android,com.batch.android,Class Batch.User,@Deprecatedpublic static BatchUserDataEditor getEditor(),Deprecated. Use editor()
8969,batch/android,com.batch.android,Class Batch.User,public static BatchUserDataEditor editor(),"Get the user data editor. Batch must be started to save it. Note that you should chain calls to the returned editor. If you call this method again, you will get another editor that's not aware of changes made elsewhere that have not been saved."
8970,batch/android,com.batch.android,Class Batch.User,"public static void fetchAttributes(Context context, BatchAttributesFetchListener listener)",Read the saved attributes. Reading is asynchronous so as not to interfere with saving operations.
8971,batch/android,com.batch.android,Class Batch.User,"public static void fetchTagCollections(Context context, BatchTagCollectionsFetchListener listener)",Read the saved tag collections. Reading is asynchronous so as not to interfere with saving operations.
8972,batch/android,com.batch.android,Class Batch.User,public static void trackEvent(java.lang.String event),"Track an event. You can call this method from any thread. Batch must be started at some point, or events won't be sent to the server."
8973,batch/android,com.batch.android,Class Batch.User,"public static void trackEvent(java.lang.String event, java.lang.String label)","Track an event. You can call this method from any thread. Batch must be started at some point, or events won't be sent to the server."
8974,batch/android,com.batch.android,Class Batch.User,"@Deprecatedpublic static void trackEvent(java.lang.String event, java.lang.String label, JSONObject data)","Deprecated. See Batch.User#trackEvent(String, String, BatchEventData). Data sent using this method might be truncated if it can't be converted to a BatchEventData instance."
8975,batch/android,com.batch.android,Class Batch.User,"public static void trackEvent(java.lang.String event, java.lang.String label, BatchEventData data)","Track an event. You can call this method from any thread. Batch must be started at some point, or events won't be sent to the server."
8976,batch/android,com.batch.android,Class Batch.User,public static void trackLocation(Location location),"Track a location update. You can call this method from any thread. Batch must be started at some point, or location updates won't be sent to the server. The location object usually comes from the location system service, or the Fused Location API, but can also manually create it. If you manually create it, please make sure to fill the accuracy and date if you have that data: both of these values are used to improve the targeting."
8977,batch/android,com.batch.android,Class Batch.User,public static void trackTransaction(double amount),"Track a transaction. You can call this method from any thread. Batch must be started at some point, or events won't be sent to the server."
8978,batch/android,com.batch.android,Class Batch.User,"public static void trackTransaction(double amount, JSONObject data)","Track a transaction. You can call this method from any thread. Batch must be started at some point, or events won't be sent to the server."
8979,batch/android,com.batch.android,Class BatchActionActivity,protected void onStart(),
8980,batch/android,com.batch.android,Class BatchActionActivity,protected void onStop(),
8981,batch/android,com.batch.android,Class BatchActivityLifecycleHelper,"public void onActivityCreated(Activity activity, Bundle savedInstanceState)",
8982,batch/android,com.batch.android,Class BatchActivityLifecycleHelper,public void onActivityStarted(Activity activity),
8983,batch/android,com.batch.android,Class BatchActivityLifecycleHelper,public void onActivityResumed(Activity activity),
8984,batch/android,com.batch.android,Class BatchActivityLifecycleHelper,public void onActivityPaused(Activity activity),
8985,batch/android,com.batch.android,Class BatchActivityLifecycleHelper,public void onActivityStopped(Activity activity),
8986,batch/android,com.batch.android,Class BatchActivityLifecycleHelper,"public void onActivitySaveInstanceState(Activity activity, Bundle outState)",
8987,batch/android,com.batch.android,Class BatchAlertContent,public java.lang.String getTrackingIdentifier(),
8988,batch/android,com.batch.android,Class BatchAlertContent,public java.lang.String getTitle(),
8989,batch/android,com.batch.android,Class BatchAlertContent,public java.lang.String getBody(),
8990,batch/android,com.batch.android,Class BatchAlertContent,public java.lang.String getCancelLabel(),
8991,batch/android,com.batch.android,Class BatchAlertContent.CTA,public java.lang.String getLabel(),
8992,batch/android,com.batch.android,Class BatchAlertContent.CTA,public java.lang.String getAction(),
8993,batch/android,com.batch.android,Interface BatchAttributesFetchListener,void onSuccess(<any> attributes),
8994,batch/android,com.batch.android,Class BatchBannerContent,public java.lang.String getTrackingIdentifier(),
8995,batch/android,com.batch.android,Class BatchBannerContent,public java.lang.String getTitle(),
8996,batch/android,com.batch.android,Class BatchBannerContent,public java.lang.String getBody(),
8997,batch/android,com.batch.android,Class BatchBannerContent,public <any> getCtas(),
8998,batch/android,com.batch.android,Class BatchBannerContent,public BatchBannerContent.Action getGlobalTapAction(),
8999,batch/android,com.batch.android,Class BatchBannerContent,public java.lang.String getMediaURL(),
9000,batch/android,com.batch.android,Class BatchBannerContent,public java.lang.String getMediaAccessibilityDescription(),
9001,batch/android,com.batch.android,Class BatchBannerContent,public boolean isShowCloseButton(),
9002,batch/android,com.batch.android,Class BatchBannerContent.Action,public java.lang.String getAction(),
9003,batch/android,com.batch.android,Class BatchBannerView,public void show(Activity activity),"Shows the banner for the specified activity. This is equivalent to calling show(findViewById(android.R.id.content)). If you'd like to attach the banner on a CoordinatorLayout, you should use show(View), or have your activity implement Batch.Messaging.DisplayHintProvider. This can only be called once per instance of BatchBannerView, even if dismiss(boolean) has been called. You can run this method on any thread."
9004,batch/android,com.batch.android,Class BatchBannerView,public void show(View anchorView),"Shows the banner for the specified anchor view. Just like a Snackbar, the anchor view can be any view from your hierarchy. BatchBannerView will automatically explore your view hierarchy to find the most appropriate view to display itself onto. Usually, this should be a CoordinatorLayout, or your root view. This can only be called once per instance of BatchBannerView, even if dismiss(boolean) has been called. You can run this method on any thread."
9005,batch/android,com.batch.android,Class BatchBannerView,public void embed(FrameLayout embedLayout),"Shows the banner in the given layout. Should only be used in very specific cases where none of the automatic display methods are appropriate. Do not make any assumption about the views that Batch will add, as it is merely an implementation detail and subject to change."
9006,batch/android,com.batch.android,Interface BatchDeeplinkInterceptor,default Intent getFallbackIntent(Context context),"Called as a fallback when a previous task stack builder or intent could not be launched. By default, use the android.content.pm.PackageManager#getLaunchIntentForPackage(String) method to get an intent. If null is returned, the action is ignored. Recommended: use this method when you want to customise the default intent for your app. (not launching the LAUNCHER activity of your manifest for example)"
9007,batch/android,com.batch.android,Interface BatchDeeplinkInterceptor,"TaskStackBuilder getTaskStackBuilder(Context context, java.lang.String deeplink)","Called when a deeplink is triggered by Batch (only called from a push notification). If null is returned BatchDeeplinkInterceptor#getIntent(Context, String) will be used. Recommended: use this method when you want to add activities to the back stack when a push notification is clicked."
9008,batch/android,com.batch.android,Class BatchDisplayReceiptJobService,public boolean onStartJob(JobParameters jobParameters),
9009,batch/android,com.batch.android,Class BatchEventData,public BatchEventData addTag(java.lang.String tag),Add a tag
9010,batch/android,com.batch.android,Class BatchEventData,"public BatchEventData put(java.lang.String key, java.lang.String value)",Add a string attribute for the specified key
9011,batch/android,com.batch.android,Class BatchEventData,"public BatchEventData put(java.lang.String key, float value)",Add a float attribute for the specified key
9012,batch/android,com.batch.android,Class BatchEventData,"public BatchEventData put(java.lang.String key, double value)",Add a double attribute for the specified key
9013,batch/android,com.batch.android,Class BatchEventData,"public BatchEventData put(java.lang.String key, int value)",Add a integer attribute for the specified key
9014,batch/android,com.batch.android,Class BatchEventData,"public BatchEventData put(java.lang.String key, long value)",Add a long attribute for the specified key
9015,batch/android,com.batch.android,Class BatchEventData,"public BatchEventData put(java.lang.String key, boolean value)",Add a boolean attribute for the specified key
9016,batch/android,com.batch.android,Class BatchImageContent,public boolean isFullscreen(),
9017,batch/android,com.batch.android,Class BatchImageContent,public int getAutoCloseDelay(),
9018,batch/android,com.batch.android,Class BatchImageContent,public Point getImageSize(),
9019,batch/android,com.batch.android,Class BatchImageContent,public java.lang.String getImageDescription(),
9020,batch/android,com.batch.android,Class BatchImageContent,public java.lang.String getImageURL(),
9021,batch/android,com.batch.android,Class BatchImageContent,public boolean isAllowSwipeToDismiss(),
9022,batch/android,com.batch.android,Class BatchImageContent,public long getGlobalTapDelay(),
9023,batch/android,com.batch.android,Class BatchImageContent.Action,public java.lang.String getAction(),
9024,batch/android,com.batch.android,Class BatchInAppMessage,protected JSONObject getJSON(),
9025,batch/android,com.batch.android,Class BatchInAppMessage,protected JSONObject getCustomPayloadJSON(),
9026,batch/android,com.batch.android,Class BatchInAppMessage,protected java.lang.String getKind(),
9027,batch/android,com.batch.android,Class BatchInAppMessage,protected Bundle getBundleRepresentation(),
9028,batch/android,com.batch.android,Class BatchInAppMessage,public JSONObject getCustomPayload(),
9029,batch/android,com.batch.android,Class BatchInAppMessage,public BatchInAppMessage.Content getContent(),"Get an In-App Message's visual contents. Since an In-App message's contents can change a lot between formats, you will need to cast this to one of the classes implementing BatchInAppMessage.Content, such as BatchAlertContent, BatchInterstitialContent or BatchBannerContent More types might be added in the future, so don't make any assumptions on the instance returned."
9030,batch/android,com.batch.android,Class BatchInboxFetcher,public void setMaxPageSize(int maxPageSize),"Number of notifications to fetch on each call, up to 100 messages per page. Note that the actual count of fetched messages might differ from the value you've set here."
9031,batch/android,com.batch.android,Class BatchInboxFetcher,public void setFetchLimit(int fetchLimit),"Maximum number of notifications to fetch. This allows you to let Batch manage the upper limit itself, so you can be sure not to use a crazy amount of memory. If you want to fetch unlimited messages, set this property to 0."
9032,batch/android,com.batch.android,Class BatchInboxFetcher,public boolean hasMore(),"Returns whether all of the user or installation's notifications have been fetched. If this method returns true, calling fetchNextPage will always return an error, as there is nothing left to fetch. Also artificially returns true if the maximum number of fetched messages has been reached."
9033,batch/android,com.batch.android,Class BatchInboxFetcher,public void markAsRead(BatchInboxNotificationContent notification),Mark a specific notification as read.
9034,batch/android,com.batch.android,Class BatchInboxFetcher,public void markAllAsRead(),Marks all notifications as read.
9035,batch/android,com.batch.android,Class BatchInboxFetcher,public void markAsDeleted(BatchInboxNotificationContent notification),Mark a specific notification as deleted.
9036,batch/android,com.batch.android,Class BatchInboxFetcher,public <any> getFetchedNotifications(),"Returns a copy of all notifications that have been fetched until now, ordered by reverse chronological order (meaning that the first message is the newest one, and the last one the oldest). Note that this array will be empty until you call fetchNewNotifications(com.batch.android.BatchInboxFetcher.OnNewNotificationsFetchedListener), and will only grow on subsequent fetches. On this beta, this operation is quite extensive: you should cache this result until you call fetch*."
9037,batch/android,com.batch.android,Class BatchInboxFetcher,public void fetchNewNotifications(BatchInboxFetcher.OnNewNotificationsFetchedListener listener),"Fetch new notifications. While fetchNextPage(com.batch.android.BatchInboxFetcher.OnNextPageFetchedListener) is used to fetch older notifications than the ones currently loaded, this method checks for new notifications. For example, this is the method you would call on initial load, or on a pull to refresh. If new notifications are found, the previously loaded ones will be kept if possible, but might be cleared to ensure consistency. For example, if a gap were to happen because of a refresh, old notifications would be removed from the cache."
9038,batch/android,com.batch.android,Class BatchInboxFetcher,public void fetchNextPage(BatchInboxFetcher.OnNextPageFetchedListener listener),Fetch a page of notifications. Calling this method when no messages have been loaded will be equivalent to calling fetchNewNotifications(com.batch.android.BatchInboxFetcher.OnNewNotificationsFetchedListener)Warning: callbacks might not be called on the thread you're expecting. See setHandlerOverride(Handler)
9039,batch/android,com.batch.android,Interface BatchInboxFetcher.OnNewNotificationsFetchedListener,"void onFetchSuccess(<any> notifications, boolean foundNewNotifications, boolean endReached)",
9040,batch/android,com.batch.android,Interface BatchInboxFetcher.OnNextPageFetchedListener,"void onFetchSuccess(<any> notifications, boolean endReached)",
9041,batch/android,com.batch.android,Class BatchInboxNotificationContent,public java.lang.String getNotificationIdentifier(),Unique identifier for this notification.
9042,batch/android,com.batch.android,Class BatchInboxNotificationContent,public java.lang.String getTitle(),
9043,batch/android,com.batch.android,Class BatchInboxNotificationContent,public java.lang.String getBody(),
9044,batch/android,com.batch.android,Class BatchInboxNotificationContent,public BatchNotificationSource getSource(),
9045,batch/android,com.batch.android,Class BatchInboxNotificationContent,public boolean isUnread(),
9046,batch/android,com.batch.android,Class BatchInboxNotificationContent,public boolean isDeleted(),
9047,batch/android,com.batch.android,Class BatchInboxNotificationContent,public Date getDate(),
9048,batch/android,com.batch.android,Class BatchInboxNotificationContent,public <any> getRawPayload(),"Get the payload in its raw JSON form. This might differ from what you're used to in other classes handling push payloads. If you want to simulate the push behaviour, call BatchPushPayload#getPushBundle() on the instance given by getPushPayload() ."
9049,batch/android,com.batch.android,Class BatchInterstitialContent,public java.lang.String getTrackingIdentifier(),
9050,batch/android,com.batch.android,Class BatchInterstitialContent,public java.lang.String getHeader(),
9051,batch/android,com.batch.android,Class BatchInterstitialContent,public java.lang.String getTitle(),
9052,batch/android,com.batch.android,Class BatchInterstitialContent,public java.lang.String getBody(),
9053,batch/android,com.batch.android,Class BatchInterstitialContent,public <any> getCtas(),
9054,batch/android,com.batch.android,Class BatchInterstitialContent,public java.lang.String getMediaURL(),
9055,batch/android,com.batch.android,Class BatchInterstitialContent,public java.lang.String getMediaAccessibilityDescription(),
9056,batch/android,com.batch.android,Class BatchInterstitialContent.CTA,public java.lang.String getLabel(),
9057,batch/android,com.batch.android,Class BatchInterstitialContent.CTA,public java.lang.String getAction(),
9058,batch/android,com.batch.android,Class BatchLandingMessage,protected JSONObject getJSON(),
9059,batch/android,com.batch.android,Class BatchLandingMessage,protected JSONObject getCustomPayloadJSON(),
9060,batch/android,com.batch.android,Class BatchLandingMessage,protected java.lang.String getKind(),
9061,batch/android,com.batch.android,Class BatchLandingMessage,protected Bundle getBundleRepresentation(),
9062,batch/android,com.batch.android,Class BatchMessage,protected abstract JSONObject getJSON(),
9063,batch/android,com.batch.android,Class BatchMessage,protected abstract JSONObject getCustomPayloadJSON(),
9064,batch/android,com.batch.android,Class BatchMessage,public void writeToBundle(Bundle bundle),
9065,batch/android,com.batch.android,Class BatchMessage,public void writeToIntent(Intent intent),
9066,batch/android,com.batch.android,Class BatchMessage,public static BatchMessage getMessageForBundle(Bundle bundle) throws BatchPushPayload.ParsingException,
9067,batch/android,com.batch.android,Class BatchMessage,public BatchMessage.Format getFormat(),"Returns the format of the displayable message, if any. You should cache this result rather than access the getter multiple times, as it involves some computation. Note: This getter bypasses most of the checks of the message's internal representation. Having a valid format returned here does not mean that other operations (such as Batch.Messaging#loadFragment(Context, BatchMessage)) will succeed."
9068,batch/android,com.batch.android,Class BatchMessage,protected abstract java.lang.String getKind(),
9069,batch/android,com.batch.android,Enum BatchMessage.Format,public static final BatchMessage.Format UNKNOWN,"UNKNOWN means that the message is invalid and does not contain any displayable message, or that the format is unknown to this version of the SDK, and might be available in a newer one."
9070,batch/android,com.batch.android,Enum BatchMessage.Format,public static final BatchMessage.Format ALERT,ALERT is simple a system alert
9071,batch/android,com.batch.android,Enum BatchMessage.Format,public static final BatchMessage.Format FULLSCREEN,FULLSCREEN is the fullscreen format
9072,batch/android,com.batch.android,Enum BatchMessage.Format,public static final BatchMessage.Format BANNER,BANNER is a banner that can be attached on top or bottom of your screen
9073,batch/android,com.batch.android,Enum BatchMessage.Format,public static final BatchMessage.Format MODAL,"BANNER is a popup that takes over the screen modally, like a system alert but with a custom style"
9074,batch/android,com.batch.android,Enum BatchMessage.Format,public static BatchMessage.Format[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (BatchMessage.Format c : BatchMessage.Format.values())  System.out.println(c);"
9075,batch/android,com.batch.android,Class BatchMessageAction,public java.lang.String getAction(),
9076,batch/android,com.batch.android,Class BatchMessageAction,public JSONObject getArgs(),
9077,batch/android,com.batch.android,Class BatchMessagingException,public BatchMessagingException(),
9078,batch/android,com.batch.android,Class BatchMessagingException,public BatchMessagingException(java.lang.String message),
9079,batch/android,com.batch.android,Class BatchMessagingException,"public BatchMessagingException(java.lang.String message, java.lang.Throwable cause)",
9080,batch/android,com.batch.android,Class BatchModalContent,public java.lang.String getTrackingIdentifier(),
9081,batch/android,com.batch.android,Class BatchModalContent,public java.lang.String getTitle(),
9082,batch/android,com.batch.android,Class BatchModalContent,public java.lang.String getBody(),
9083,batch/android,com.batch.android,Class BatchModalContent,public <any> getCtas(),
9084,batch/android,com.batch.android,Class BatchModalContent,public BatchModalContent.Action getGlobalTapAction(),
9085,batch/android,com.batch.android,Class BatchModalContent,public java.lang.String getMediaURL(),
9086,batch/android,com.batch.android,Class BatchModalContent,public java.lang.String getMediaAccessibilityDescription(),
9087,batch/android,com.batch.android,Class BatchModalContent,public boolean isShowCloseButton(),
9088,batch/android,com.batch.android,Class BatchModalContent.Action,public java.lang.String getAction(),
9089,batch/android,com.batch.android,Class BatchNotificationAction,public JSONObject actionArguments,Action
9090,batch/android,com.batch.android,Class BatchNotificationAction,public java.lang.String actionIdentifier,Action identifier. Made to work with Batch.Actions
9091,batch/android,com.batch.android,Class BatchNotificationAction,public java.lang.String drawableName,"CTA Drawable name. Use this to find your drawable into your resources, or use an alias system. If using #getSupportActions(Context,List,com.batch.android.BatchPushPayload,Integer), this value can be one of the alias registered using Batch.Actions#addDrawableAlias(String, int)"
9092,batch/android,com.batch.android,Class BatchNotificationAction,public boolean hasUserInterface,"Does this action imply showing any UI or will it act in the background? An action that has no UI should not close the notification drawer, but should still dismiss the notification itself (if asked to)."
9093,batch/android,com.batch.android,Class BatchNotificationAction,public java.lang.String label,CTA label text
9094,batch/android,com.batch.android,Class BatchNotificationChannelsManager,public static BatchNotificationChannelsManager provide(),
9095,batch/android,com.batch.android,Class BatchNotificationChannelsManager,public void setChannelIdOverride(java.lang.String channelId),"Overrides the default notification channel that Batch will use for notifications. By default, Batch will manage its own channel, identified by DEFAULT_CHANNEL_ID. After calling this method with a non-null channelId, Batch will stop trying to register its default channel Note: Please make sure that you've registered this channel using android.app.NotificationManager#createNotificationChannel(NotificationChannel) or android.app.NotificationManager#createNotificationChannelGroup(NotificationChannelGroup) Set to 'null' to revert to the default channel."
9096,batch/android,com.batch.android,Class BatchNotificationChannelsManager,public void setChannelNameProvider(BatchNotificationChannelsManager.ChannelNameProvider provider),"Used to set a channel name provider, allowing you to change Batch's default channel name. This is the string that the user will see in their device settings, so you should translate it. Batch will call you back on your provider at least once, to get the channel name, and then will call you on every locale change, to make sure that the Android OS has the right translation. If your provider throws an exception, Batch will use its default name. If you simply want to use a string resource, use setChannelName(Context,int). Set to 'null' to remove the provider and use Batch's default one."
9097,batch/android,com.batch.android,Class BatchNotificationChannelsManager,"public void setChannelName(Context context, int channelNameResourceId)","Used to set a channel name provider, allowing you to change Batch's default channel name. This is the string that the user will see in their device settings, so you should translate it properly. Calling this is the equivalent of calling setChannelNameProvider(com.batch.android.BatchNotificationChannelsManager.ChannelNameProvider) with a StringResChannelNameProvider instance. Calling this method will remove any provider set with setChannelNameProvider(com.batch.android.BatchNotificationChannelsManager.ChannelNameProvider)"
9098,batch/android,com.batch.android,Class BatchNotificationChannelsManager,public void setChannelIdInterceptor(BatchNotificationChannelsManager.NotificationChannelIdInterceptor interceptor),"Used to set a channel id interceptor, allowing you to override the Channel ID of a notification, per notification. You will be called on this interceptor before displaying notifications, unless you're in manual mode and don't use Batch to display the notification. The provider might be called on ANY API Level If your provider throws an exception, Batch will use its default name."
9099,batch/android,com.batch.android,Class BatchNotificationChannelsManager,public static boolean openSystemChannelSettings(Context context),Opens the notification channel settings system UI for Batch's default channel. Will do nothing on API < 26
9100,batch/android,com.batch.android,Class BatchNotificationInterceptor,"public NotificationCompat.Builder getPushNotificationCompatBuilder(Context context, NotificationCompat.Builder defaultBuilder, Bundle pushIntentExtras, int notificationId)","Get the builder instance used to generate the notification. If you're basing your builder on defaultBuilder, some methods might have undefined behaviour as Batch already calls many of them. Likewise, returning another instance of the builder than defaultBuilder's might result in loss of functionality if not reimplemented. "
9101,batch/android,com.batch.android,Enum BatchNotificationSource,public static final BatchNotificationSource UNKNOWN,
9102,batch/android,com.batch.android,Enum BatchNotificationSource,public static final BatchNotificationSource CAMPAIGN,
9103,batch/android,com.batch.android,Enum BatchNotificationSource,public static final BatchNotificationSource TRANSACTIONAL,
9104,batch/android,com.batch.android,Enum BatchNotificationSource,public static BatchNotificationSource[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (BatchNotificationSource c : BatchNotificationSource.values())  System.out.println(c);"
9105,batch/android,com.batch.android,Interface BatchOptOutResultListener,void onSuccess(),
9106,batch/android,com.batch.android,Enum BatchOptOutResultListener.ErrorPolicy,public static final BatchOptOutResultListener.ErrorPolicy IGNORE,Ignore the error and proceed with the opt-out.
9107,batch/android,com.batch.android,Enum BatchOptOutResultListener.ErrorPolicy,public static BatchOptOutResultListener.ErrorPolicy[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (BatchOptOutResultListener.ErrorPolicy c : BatchOptOutResultListener.ErrorPolicy.values())  System.out.println(c);"
9108,batch/android,com.batch.android,Class BatchPushData,@Deprecatedpublic boolean hasDeeplink(),Deprecated. 
9109,batch/android,com.batch.android,Class BatchPushData,@Deprecatedpublic java.lang.String getDeeplink(),Deprecated. 
9110,batch/android,com.batch.android,Class BatchPushData,@Deprecatedpublic boolean hasCustomLargeIcon(),Deprecated. 
9111,batch/android,com.batch.android,Class BatchPushData,@Deprecatedpublic java.lang.String getCustomLargeIconURL(),Deprecated. 
9112,batch/android,com.batch.android,Class BatchPushData,@Deprecatedpublic boolean hasBigPicture(),Deprecated. 
9113,batch/android,com.batch.android,Class BatchPushJobService,public boolean onStartJob(JobParameters jobParameters),
9114,batch/android,com.batch.android,Class BatchPushMessageDismissReceiver,"public void onReceive(Context context, Intent intent)",
9115,batch/android,com.batch.android,Class BatchPushMessageDismissReceiver,"public static ComponentName startWakefulService(Context context, Intent intent)","Do a Context.startService, but holding a wake lock while the service starts. This will modify the Intent to hold an extra identifying the wake lock; when the service receives it in Service.onStartCommand, it should pass back the Intent it receives there to #completeWakefulIntent(android.content.Intent) in order to release the wake lock."
9116,batch/android,com.batch.android,Class BatchPushMessageReceiver,"public void onReceive(Context context, Intent intent)",
9117,batch/android,com.batch.android,Class BatchPushMessageReceiver,"public static ComponentName startWakefulService(Context context, Intent intent)","Do a Context.startService, but holding a wake lock while the service starts. This will modify the Intent to hold an extra identifying the wake lock; when the service receives it in Service.onStartCommand, it should pass back the Intent it receives there to #completeWakefulIntent(android.content.Intent) in order to release the wake lock."
9118,batch/android,com.batch.android,Class BatchPushPayload,public static BatchPushPayload payloadFromBundle(Bundle bundle) throws BatchPushPayload.ParsingException,"Attempt to extract the Batch Push data contained within the specified Bundle. This is usually the method you want to use when reading this payload from an activity opened by Batch, or when you wrote an existing BatchPushPayload to a Bundle/Intent extras using writeToBundle(Bundle) / writeToIntentExtras(Intent)."
9119,batch/android,com.batch.android,Class BatchPushPayload,public static BatchPushPayload payloadFromReceiverIntent(Intent intent) throws BatchPushPayload.ParsingException,"Attempt to extract the Batch Push data contained within the specified Intent. This is usually the method you want to use when reading this payload from a push broadcast receiver/service, NOT from an activity intent. If you wrote an existing BatchPushPayload to a Bundle/Intent extras using writeToBundle(Bundle) / writeToIntentExtras(Intent), you should rather use payloadFromBundle(Bundle)"
9120,batch/android,com.batch.android,Class BatchPushPayload,public static BatchPushPayload payloadFromReceiverExtras(Bundle extras) throws BatchPushPayload.ParsingException,"Attempt to extract the Batch Push data contained within the specified Intent extras. This is usually the method you want to use when reading this payload from a push broadcast receiver/service, NOT from an activity intent. If you wrote an existing BatchPushPayload to a Bundle/Intent extras using writeToBundle(Bundle) / writeToIntentExtras(Intent), you should rather use payloadFromBundle(Bundle)"
9121,batch/android,com.batch.android,Class BatchPushPayload,public static BatchPushPayload payloadFromFirebaseMessage(RemoteMessage remoteMessage) throws BatchPushPayload.ParsingException,"Attempt to extract the Batch Push data contained within the specified Firebase RemoteMessage. This is usually the method you want to use when reading this payload from a FirebaseMessagingService implementation, NOT from an activity intent. If you wrote an existing BatchPushPayload to a Bundle/Intent extras using writeToBundle(Bundle) / writeToIntentExtras(Intent), you should rather use payloadFromBundle(Bundle)"
9122,batch/android,com.batch.android,Class BatchPushPayload,public void writeToBundle(Bundle bundle),Serialize this instance into a Bundle. Note that you'll need to use payloadFromBundle(Bundle) with the intent's extras to read it back.
9123,batch/android,com.batch.android,Class BatchPushPayload,public void writeToIntentExtras(Intent intent),Serialize this instance into an Intent. Note that you'll need to use payloadFromBundle(Bundle) with the intent's extras to read it back. This method WILL NOT fill the intent in a format that payloadFromReceiverIntent(Intent) understands.
9124,batch/android,com.batch.android,Class BatchPushPayload,public boolean hasDeeplink(),Does this push contains a deeplink
9125,batch/android,com.batch.android,Class BatchPushPayload,public java.lang.String getDeeplink(),Get the deeplink url contained in this push. You should always check if the push contains a deeplink using hasDeeplink()
9126,batch/android,com.batch.android,Class BatchPushPayload,public boolean hasCustomLargeIcon(),Does this push contains a custom large icon
9127,batch/android,com.batch.android,Class BatchPushPayload,public java.lang.String getCustomLargeIconURL(Context context),"Get the custom large icon url contained in this push. You should always check if the push contains a custom large icon using hasCustomLargeIcon(). The url returned by this method is already optimized for the device, you have to download the image and use it in the notification"
9128,batch/android,com.batch.android,Class BatchPushPayload,public boolean hasBigPicture(),Does this push contains a big picture
9129,batch/android,com.batch.android,Class BatchPushPayload,public java.lang.String getBigPictureURL(Context context),"Get the big picture url contained in this push. You should always check if the push contains a big picture using hasBigPicture(). The url returned by this method is already optimized for the device, you have to download the image and use it in the notification"
9130,batch/android,com.batch.android,Class BatchPushPayload,public boolean hasLandingMessage(),Whether the payload contains a landing message or not
9131,batch/android,com.batch.android,Class BatchPushPayload,public BatchMessage getLandingMessage(),Returns the landing message that's in this payload if there is one.
9132,batch/android,com.batch.android,Class BatchPushPayload,public <any> getActions(),"Get the actions associated with this push, if any."
9133,batch/android,com.batch.android,Class BatchPushPayload,@Deprecatedpublic int getPriority(),"Deprecated. Since Android 8.0, priority became importance, and is now set on the channel itself. You should infer the priority from the channel, using getChannel()"
9134,batch/android,com.batch.android,Class BatchPushPayload,public java.lang.String getGroup(),Get the notification group name. Meant to be used with androidx.core.app.NotificationCompat.Builder#setGroup(String)
9135,batch/android,com.batch.android,Class BatchPushPayload,public boolean isGroupSummary(),Get the notification group name. Meant to be used with androidx.core.app.NotificationCompat.Builder#setGroupSummary(boolean)
9136,batch/android,com.batch.android,Class BatchPushPayload,public java.lang.String getChannel(),Get the desired notification channel. Meant to be used with androidx.core.app.NotificationCompat.Builder#setChannelId(String)
9137,batch/android,com.batch.android,Class BatchPushPayload.ParsingException,public ParsingException(),
9138,batch/android,com.batch.android,Class BatchPushPayload.ParsingException,public ParsingException(java.lang.String message),
9139,batch/android,com.batch.android,Class BatchPushReceiver,"public void onReceive(Context context, Intent intent)",
9140,batch/android,com.batch.android,Class BatchPushReceiver,"public static ComponentName startWakefulService(Context context, Intent intent)","Do a Context.startService, but holding a wake lock while the service starts. This will modify the Intent to hold an extra identifying the wake lock; when the service receives it in Service.onStartCommand, it should pass back the Intent it receives there to #completeWakefulIntent(android.content.Intent) in order to release the wake lock."
9141,batch/android,com.batch.android,Interface BatchTagCollectionsFetchListener,void onSuccess(<any> tagCollections),
9142,batch/android,com.batch.android,Class BatchUserAttribute,public BatchUserAttribute.Type type,
9143,batch/android,com.batch.android,Class BatchUserAttribute,public Date getDateValue(),
9144,batch/android,com.batch.android,Class BatchUserAttribute,public java.lang.String getStringValue(),
9145,batch/android,com.batch.android,Class BatchUserAttribute,public java.lang.Number getNumberValue(),
9146,batch/android,com.batch.android,Enum BatchUserAttribute.Type,public static final BatchUserAttribute.Type STRING,
9147,batch/android,com.batch.android,Enum BatchUserAttribute.Type,public static final BatchUserAttribute.Type LONGLONG,
9148,batch/android,com.batch.android,Enum BatchUserAttribute.Type,public static final BatchUserAttribute.Type DOUBLE,
9149,batch/android,com.batch.android,Enum BatchUserAttribute.Type,public static final BatchUserAttribute.Type BOOL,
9150,batch/android,com.batch.android,Enum BatchUserAttribute.Type,public static BatchUserAttribute.Type[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (BatchUserAttribute.Type c : BatchUserAttribute.Type.values())  System.out.println(c);"
9151,batch/android,com.batch.android,Class BatchUserDataEditor,public BatchUserDataEditor setLanguage(java.lang.String language),Set the language of this user. Overrides the detected user language.
9152,batch/android,com.batch.android,Class BatchUserDataEditor,public BatchUserDataEditor setRegion(java.lang.String region),Set the region of this user. Overrides the detected user region.
9153,batch/android,com.batch.android,Class BatchUserDataEditor,public BatchUserDataEditor setIdentifier(java.lang.String identifier),"Set the user identifier. Be careful: you should make sure the identifier uniquely identifies a user. When pushing an identifier, all installations with that identifier will get the Push, which can cause some privacy issues if done wrong. Also affects Unlock offer delivery and restore."
9154,batch/android,com.batch.android,Class BatchUserDataEditor,"public BatchUserDataEditor setAttribute(java.lang.String key, long value)",Set a custom user attribute for a key.
9155,batch/android,com.batch.android,Class BatchUserDataEditor,"public BatchUserDataEditor setAttribute(java.lang.String key, double value)",Set a custom user attribute for a key.
9156,batch/android,com.batch.android,Class BatchUserDataEditor,"public BatchUserDataEditor setAttribute(java.lang.String key, boolean value)",Set a custom user attribute for a key.
9157,batch/android,com.batch.android,Class BatchUserDataEditor,"public BatchUserDataEditor setAttribute(java.lang.String key, Date value)",Set a custom user attribute for a key.
9158,batch/android,com.batch.android,Class BatchUserDataEditor,public BatchUserDataEditor removeAttribute(java.lang.String key),Removes a custom attribute. Does nothing if it was not set.
9159,batch/android,com.batch.android,Class BatchUserDataEditor,public BatchUserDataEditor clearAttributes(),Removes all attributes.
9160,batch/android,com.batch.android,Class BatchUserDataEditor,"public BatchUserDataEditor addTag(java.lang.String collection, java.lang.String tag)","Add a tag in the specified collection. If empty, the collection will automatically be created."
9161,batch/android,com.batch.android,Class BatchUserDataEditor,"public BatchUserDataEditor removeTag(java.lang.String collection, java.lang.String tag)",Removes a tag from a collection. Does nothing if the tag does not exist.
9162,batch/android,com.batch.android,Class BatchUserDataEditor,public BatchUserDataEditor clearTags(),Removes all tags.
9163,batch/android,com.batch.android,Class BatchUserDataEditor,public BatchUserDataEditor clearTagCollection(java.lang.String collection),Removes all tags from a collection. Does nothing if the tag collection does not exist.
9164,batch/android,com.batch.android,Class BatchUserProfile,@Deprecatedpublic BatchUserProfile setLanguage(java.lang.String language),Deprecated. Please use Batch.User methods instead
9165,batch/android,com.batch.android,Class BatchUserProfile,@Deprecatedpublic java.lang.String getLanguage(),Deprecated. Please use Batch.User methods instead
9166,batch/android,com.batch.android,Class BatchUserProfile,@Deprecatedpublic BatchUserProfile setRegion(java.lang.String region),Deprecated. Please use Batch.User methods instead
9167,batch/android,com.batch.android,Class BatchUserProfile,@Deprecatedpublic java.lang.String getRegion(),Deprecated. Please use Batch.User methods instead
9168,batch/android,com.batch.android,Class BatchUserProfile,@Deprecatedpublic BatchUserProfile setCustomID(java.lang.String customID),Deprecated. Please use Batch.User methods instead
9169,batch/android,com.batch.android,Class Config,@Deprecatedpublic Config setCanUseAndroidID(boolean canUse),Deprecated. No replacement.
9170,batch/android,com.batch.android,Class Config,public Config setCanUseAdvertisingID(boolean canUse),Set if Batch can use AvertisingId (default = true) Setting this to false have a negative impact on offer delivery and restore You should only use it if you know what you are doing.
9171,batch/android,com.batch.android,Class Config,public Config setCanUseAdvancedDeviceInformation(boolean canUse),"Set if Batch can use advanced device identifiers (default = true) Advanced device identifiers include information about the device itself, but nothing that directly identify the user, such as but not limited to: - Device model - Device brand - Carrier name Setting this to false have a negative impact on core Batch features You should only use it if you know what you are doing. Note: Disabling this does not automatically disable Android ID/Advertising ID collection, use the appropriate methods to control these."
9172,batch/android,com.batch.android,Class Config,public Config setLoggerDelegate(LoggerDelegate delegate),Set if Batch should send its logs to an object of yours (default = null) Be careful with your implementation: setting this can impact stability and performance You should only use it if you know what you are doing.
9173,batch/android,com.batch.android,Class Config,public Config setLoggerLevel(LoggerLevel level),Set the log level Batch should use
9174,batch/android,com.batch.android,Class Config,@Deprecatedpublic Config setCanUseInstanceID(boolean canUse),Deprecated. Please switch to Firebase Cloud Messaging
9175,batch/android,com.batch.android,Enum FailReason,public static final FailReason NETWORK_ERROR,Network is not available or not responding
9176,batch/android,com.batch.android,Enum FailReason,public static final FailReason INVALID_API_KEY,Your API key is invalid
9177,batch/android,com.batch.android,Enum FailReason,public static final FailReason DEACTIVATED_API_KEY,Your API key has been deactivated
9178,batch/android,com.batch.android,Enum FailReason,public static final FailReason UNEXPECTED_ERROR,"An unexpected error occured, a future retry can succeed"
9179,batch/android,com.batch.android,Enum FailReason,public static FailReason[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (FailReason c : FailReason.values())  System.out.println(c);"
9180,android/json,com.batch.android.json,Class JSONArray,public JSONArray(),Creates a JSONArray with no values.
9181,android/json,com.batch.android.json,Class JSONArray,public int length(),Returns the number of values in this array.
9182,android/json,com.batch.android.json,Class JSONArray,public JSONArray put(boolean value),Appends value to the end of this array.
9183,android/json,com.batch.android.json,Class JSONArray,public JSONArray put(double value) throws JSONException,Appends value to the end of this array.
9184,android/json,com.batch.android.json,Class JSONArray,public JSONArray put(int value),Appends value to the end of this array.
9185,android/json,com.batch.android.json,Class JSONArray,public JSONArray put(long value),Appends value to the end of this array.
9186,android/json,com.batch.android.json,Class JSONArray,public JSONArray put(java.lang.Object value),Appends value to the end of this array.
9187,android/json,com.batch.android.json,Class JSONArray,"public JSONArray put(int index, boolean value) throws JSONException","Sets the value at index to value, null padding this array to the required length if necessary. If a value already exists at index, it will be replaced."
9188,android/json,com.batch.android.json,Class JSONArray,"public JSONArray put(int index, double value) throws JSONException","Sets the value at index to value, null padding this array to the required length if necessary. If a value already exists at index, it will be replaced."
9189,android/json,com.batch.android.json,Class JSONArray,"public JSONArray put(int index, int value) throws JSONException","Sets the value at index to value, null padding this array to the required length if necessary. If a value already exists at index, it will be replaced."
9190,android/json,com.batch.android.json,Class JSONArray,"public JSONArray put(int index, long value) throws JSONException","Sets the value at index to value, null padding this array to the required length if necessary. If a value already exists at index, it will be replaced."
9191,android/json,com.batch.android.json,Class JSONArray,"public JSONArray put(int index, java.lang.Object value) throws JSONException","Sets the value at index to value, null padding this array to the required length if necessary. If a value already exists at index, it will be replaced."
9192,android/json,com.batch.android.json,Class JSONArray,public boolean isNull(int index),"Returns true if this array has no value at index, or if its value is the null reference or JSONObject#NULL."
9193,android/json,com.batch.android.json,Class JSONArray,public java.lang.Object get(int index) throws JSONException,Returns the value at index.
9194,android/json,com.batch.android.json,Class JSONArray,public java.lang.Object opt(int index),"Returns the value at index, or null if the array has no value at index."
9195,android/json,com.batch.android.json,Class JSONArray,public java.lang.Object remove(int index),"Removes and returns the value at index, or null if the array has no value at index."
9196,android/json,com.batch.android.json,Class JSONArray,public boolean getBoolean(int index) throws JSONException,Returns the value at index if it exists and is a boolean or can be coerced to a boolean.
9197,android/json,com.batch.android.json,Class JSONArray,public boolean optBoolean(int index),Returns the value at index if it exists and is a boolean or can be coerced to a boolean. Returns false otherwise.
9198,android/json,com.batch.android.json,Class JSONArray,"public boolean optBoolean(int index, boolean fallback)",Returns the value at index if it exists and is a boolean or can be coerced to a boolean. Returns fallback otherwise.
9199,android/json,com.batch.android.json,Class JSONArray,public double getDouble(int index) throws JSONException,Returns the value at index if it exists and is a double or can be coerced to a double.
9200,android/json,com.batch.android.json,Class JSONArray,public double optDouble(int index),Returns the value at index if it exists and is a double or can be coerced to a double. Returns NaN otherwise.
9201,android/json,com.batch.android.json,Class JSONArray,"public double optDouble(int index, double fallback)",Returns the value at index if it exists and is a double or can be coerced to a double. Returns fallback otherwise.
9202,android/json,com.batch.android.json,Class JSONArray,public int getInt(int index) throws JSONException,Returns the value at index if it exists and is an int or can be coerced to an int.
9203,android/json,com.batch.android.json,Class JSONArray,public int optInt(int index),Returns the value at index if it exists and is an int or can be coerced to an int. Returns 0 otherwise.
9204,android/json,com.batch.android.json,Class JSONArray,"public int optInt(int index, int fallback)",Returns the value at index if it exists and is an int or can be coerced to an int. Returns fallback otherwise.
9205,android/json,com.batch.android.json,Class JSONArray,public long getLong(int index) throws JSONException,Returns the value at index if it exists and is a long or can be coerced to a long.
9206,android/json,com.batch.android.json,Class JSONArray,public long optLong(int index),Returns the value at index if it exists and is a long or can be coerced to a long. Returns 0 otherwise.
9207,android/json,com.batch.android.json,Class JSONArray,"public long optLong(int index, long fallback)",Returns the value at index if it exists and is a long or can be coerced to a long. Returns fallback otherwise.
9208,android/json,com.batch.android.json,Class JSONArray,public java.lang.String getString(int index) throws JSONException,"Returns the value at index if it exists, coercing it if necessary."
9209,android/json,com.batch.android.json,Class JSONArray,public java.lang.String optString(int index),"Returns the value at index if it exists, coercing it if necessary. Returns the empty string if no such value exists."
9210,android/json,com.batch.android.json,Class JSONArray,"public java.lang.String optString(int index, java.lang.String fallback)","Returns the value at index if it exists, coercing it if necessary. Returns fallback if no such value exists."
9211,android/json,com.batch.android.json,Class JSONArray,public JSONArray getJSONArray(int index) throws JSONException,Returns the value at index if it exists and is a JSONArray.
9212,android/json,com.batch.android.json,Class JSONArray,public JSONArray optJSONArray(int index),Returns the value at index if it exists and is a JSONArray. Returns null otherwise.
9213,android/json,com.batch.android.json,Class JSONArray,public JSONObject getJSONObject(int index) throws JSONException,Returns the value at index if it exists and is a JSONObject.
9214,android/json,com.batch.android.json,Class JSONArray,public JSONObject optJSONObject(int index),Returns the value at index if it exists and is a JSONObject. Returns null otherwise.
9215,android/json,com.batch.android.json,Class JSONArray,public JSONObject toJSONObject(JSONArray names) throws JSONException,"Returns a new object whose values are the values in this array, and whose names are the values in names. Names and values are paired up by index from 0 through to the shorter array's length. Names that are not strings will be coerced to strings. This method returns null if either array is empty."
9216,android/json,com.batch.android.json,Class JSONArray,public java.lang.String join(java.lang.String separator) throws JSONException,"Returns a new string by alternating this array's values with separator. This array's string values are quoted and have their special characters escaped. For example, the array containing the strings '12 pizza', 'taco' and 'soda' joined on '+' returns this: 12\ pizza+taco+soda"
9217,android/json,com.batch.android.json,Class JSONArray,public java.lang.String toString(),"Encodes this array as a compact JSON string, such as: [94043,90210]"
9218,android/json,com.batch.android.json,Class JSONArray,public java.lang.String toString(int indentSpaces) throws JSONException,"Encodes this array as a human readable JSON string for debugging, such as: [ 94043, 90210 ]"
9219,android/json,com.batch.android.json,Class JSONArray,public boolean equals(java.lang.Object o),
9220,android/json,com.batch.android.json,Class JSONHelper,public static java.lang.Object jsonObjectToObject(java.lang.Object object) throws JSONException,"Transforms org.json.JSONObject and org.json.JSONArray to Map and Iterable If transformation is not needed, returns the original object. Useful for JSON deserialization"
9221,android/json,com.batch.android.json,Class JSONHelper,public static <any> jsonObjectToMap(JSONObject object) throws JSONException,
9222,android/json,com.batch.android.json,Class JSONObject,public JSONObject(),Creates a JSONObject with no name/value mappings.
9223,android/json,com.batch.android.json,Class JSONObject,public JSONObject(Map copyFrom),Creates a new JSONObject by copying all name/value mappings from the given map.
9224,android/json,com.batch.android.json,Class JSONObject,public int length(),Returns the number of name/value mappings in this object.
9225,android/json,com.batch.android.json,Class JSONObject,"public JSONObject put(java.lang.String name, boolean value) throws JSONException","Maps name to value, clobbering any existing name/value mapping with the same name."
9226,android/json,com.batch.android.json,Class JSONObject,"public JSONObject put(java.lang.String name, double value) throws JSONException","Maps name to value, clobbering any existing name/value mapping with the same name."
9227,android/json,com.batch.android.json,Class JSONObject,"public JSONObject put(java.lang.String name, int value) throws JSONException","Maps name to value, clobbering any existing name/value mapping with the same name."
9228,android/json,com.batch.android.json,Class JSONObject,"public JSONObject put(java.lang.String name, long value) throws JSONException","Maps name to value, clobbering any existing name/value mapping with the same name."
9229,android/json,com.batch.android.json,Class JSONObject,"public JSONObject put(java.lang.String name, java.lang.Object value) throws JSONException","Maps name to value, clobbering any existing name/value mapping with the same name. If the value is null, any existing mapping for name is removed."
9230,android/json,com.batch.android.json,Class JSONObject,"public JSONObject putOpt(java.lang.String name, java.lang.Object value) throws JSONException","Equivalent to put(name, value) when both parameters are non-null; does nothing otherwise."
9231,android/json,com.batch.android.json,Class JSONObject,"public JSONObject accumulate(java.lang.String name, java.lang.Object value) throws JSONException","Appends value to the array already mapped to name. If this object has no mapping for name, this inserts a new mapping. If the mapping exists but its value is not an array, the existing and new values are inserted in order into a new array which is itself mapped to name. In aggregate, this allows values to be added to a mapping one at a time. Note that append(String, Object) provides better semantics. In particular, the mapping for name will always be a JSONArray. Using accumulate will result in either a JSONArray or a mapping whose type is the type of value depending on the number of calls to it."
9232,android/json,com.batch.android.json,Class JSONObject,public java.lang.Object remove(java.lang.String name),Removes the named mapping if it exists; does nothing otherwise.
9233,android/json,com.batch.android.json,Class JSONObject,public boolean isNull(java.lang.String name),Returns true if this object has no mapping for name or if it has a mapping whose value is NULL.
9234,android/json,com.batch.android.json,Class JSONObject,public boolean has(java.lang.String name),Returns true if this object has a mapping for name. The mapping may be NULL.
9235,android/json,com.batch.android.json,Class JSONObject,public java.lang.Object get(java.lang.String name) throws JSONException,"Returns the value mapped by name, or throws if no such mapping exists."
9236,android/json,com.batch.android.json,Class JSONObject,public java.lang.Object opt(java.lang.String name),"Returns the value mapped by name, or null if no such mapping exists."
9237,android/json,com.batch.android.json,Class JSONObject,public boolean getBoolean(java.lang.String name) throws JSONException,"Returns the value mapped by name if it exists and is a boolean or can be coerced to a boolean, or throws otherwise."
9238,android/json,com.batch.android.json,Class JSONObject,public boolean optBoolean(java.lang.String name),"Returns the value mapped by name if it exists and is a boolean or can be coerced to a boolean, or false otherwise."
9239,android/json,com.batch.android.json,Class JSONObject,"public boolean optBoolean(java.lang.String name, boolean fallback)","Returns the value mapped by name if it exists and is a boolean or can be coerced to a boolean, or fallback otherwise."
9240,android/json,com.batch.android.json,Class JSONObject,"public java.lang.Boolean reallyOptBoolean(java.lang.String name, java.lang.Boolean fallback)","Returns the value mapped by name if it exists and is not null, coercing it if necessary, or fallback if no such mapping exists or is null."
9241,android/json,com.batch.android.json,Class JSONObject,public double getDouble(java.lang.String name) throws JSONException,"Returns the value mapped by name if it exists and is a double or can be coerced to a double, or throws otherwise."
9242,android/json,com.batch.android.json,Class JSONObject,public double optDouble(java.lang.String name),"Returns the value mapped by name if it exists and is a double or can be coerced to a double, or NaN otherwise."
9243,android/json,com.batch.android.json,Class JSONObject,"public double optDouble(java.lang.String name, double fallback)","Returns the value mapped by name if it exists and is a double or can be coerced to a double, or fallback otherwise."
9244,android/json,com.batch.android.json,Class JSONObject,"public java.lang.Double reallyOptDouble(java.lang.String name, java.lang.Double fallback)","Returns the value mapped by name if it exists and is not null, coercing it if necessary, or fallback if no such mapping exists or is null."
9245,android/json,com.batch.android.json,Class JSONObject,public int getInt(java.lang.String name) throws JSONException,"Returns the value mapped by name if it exists and is an int or can be coerced to an int, or throws otherwise."
9246,android/json,com.batch.android.json,Class JSONObject,public int optInt(java.lang.String name),"Returns the value mapped by name if it exists and is an int or can be coerced to an int, or 0 otherwise."
9247,android/json,com.batch.android.json,Class JSONObject,"public int optInt(java.lang.String name, int fallback)","Returns the value mapped by name if it exists and is an int or can be coerced to an int, or fallback otherwise."
9248,android/json,com.batch.android.json,Class JSONObject,"public java.lang.Integer reallyOptInteger(java.lang.String name, java.lang.Integer fallback)","Returns the value mapped by name if it exists and is not null, coercing it if necessary, or fallback if no such mapping exists or is null."
9249,android/json,com.batch.android.json,Class JSONObject,public long getLong(java.lang.String name) throws JSONException,"Returns the value mapped by name if it exists and is a long or can be coerced to a long, or throws otherwise. Note that JSON represents numbers as doubles, so this is lossy; use strings to transfer numbers via JSON."
9250,android/json,com.batch.android.json,Class JSONObject,"public java.lang.Long reallyOptLong(java.lang.String name, java.lang.Long fallback)","Returns the value mapped by name if it exists and is not null, coercing it if necessary, or fallback if no such mapping exists or is null."
9251,android/json,com.batch.android.json,Class JSONObject,public long optLong(java.lang.String name),"Returns the value mapped by name if it exists and is a long or can be coerced to a long, or 0 otherwise. Note that JSON represents numbers as doubles, so this is lossy; use strings to transfer numbers via JSON."
9252,android/json,com.batch.android.json,Class JSONObject,"public long optLong(java.lang.String name, long fallback)","Returns the value mapped by name if it exists and is a long or can be coerced to a long, or fallback otherwise. Note that JSON represents numbers as doubles, so this is lossy; use strings to transfer numbers via JSON."
9253,android/json,com.batch.android.json,Class JSONObject,public java.lang.String getString(java.lang.String name) throws JSONException,"Returns the value mapped by name if it exists, coercing it if necessary, or throws if no such mapping exists."
9254,android/json,com.batch.android.json,Class JSONObject,public java.lang.String optString(java.lang.String name),"Returns the value mapped by name if it exists, coercing it if necessary, or the empty string if no such mapping exists."
9255,android/json,com.batch.android.json,Class JSONObject,"public java.lang.String optString(java.lang.String name, java.lang.String fallback)","Returns the value mapped by name if it exists, coercing it if necessary, or fallback if no such mapping exists."
9256,android/json,com.batch.android.json,Class JSONObject,"public java.lang.String reallyOptString(java.lang.String name, java.lang.String fallback)","Returns the value mapped by name if it exists and is not null, coercing it if necessary, or fallback if no such mapping exists or is null."
9257,android/json,com.batch.android.json,Class JSONObject,public JSONArray getJSONArray(java.lang.String name) throws JSONException,"Returns the value mapped by name if it exists and is a JSONArray, or throws otherwise."
9258,android/json,com.batch.android.json,Class JSONObject,public JSONArray optJSONArray(java.lang.String name),"Returns the value mapped by name if it exists and is a JSONArray, or null otherwise."
9259,android/json,com.batch.android.json,Class JSONObject,public JSONObject getJSONObject(java.lang.String name) throws JSONException,"Returns the value mapped by name if it exists and is a JSONObject, or throws otherwise."
9260,android/json,com.batch.android.json,Class JSONObject,public JSONObject optJSONObject(java.lang.String name),"Returns the value mapped by name if it exists and is a JSONObject, or null otherwise."
9261,android/json,com.batch.android.json,Class JSONObject,public JSONArray toJSONArray(JSONArray names) throws JSONException,Returns an array with the values corresponding to names. The array contains null for names that aren't mapped. This method returns null if names is either null or empty.
9262,android/json,com.batch.android.json,Class JSONObject,public <any> keys(),"Returns an iterator of the String names in this object. The returned iterator supports remove, which will remove the corresponding mapping from this object. If this object is modified after the iterator is returned, the iterator's behavior is undefined. The order of the keys is undefined."
9263,android/json,com.batch.android.json,Class JSONObject,public JSONArray names(),Returns an array containing the string names in this object. This method returns null if this object contains no mappings.
9264,android/json,com.batch.android.json,Class JSONObject,public java.lang.String toString(),"Encodes this object as a compact JSON string, such as: {query:Pizza,locations:[94043,90210]}"
9265,android/json,com.batch.android.json,Class JSONObject,public java.lang.String toString(int indentSpaces) throws JSONException,"Encodes this object as a human readable JSON string for debugging, such as: { query: Pizza, locations: [ 94043, 90210 ] }"
9266,android/json,com.batch.android.json,Class JSONObject,public static java.lang.String numberToString(java.lang.Number number) throws JSONException,Encodes the number as a JSON string.
9267,android/json,com.batch.android.json,Class JSONObject,public static java.lang.String quote(java.lang.String data),Encodes data as a JSON string. This applies quotes and any necessary character escaping.
9268,android/json,com.batch.android.json,Class JSONStringer,public JSONStringer array() throws JSONException,Begins encoding a new array. Each call to this method must be paired with a call to endArray().
9269,android/json,com.batch.android.json,Class JSONStringer,public JSONStringer endArray() throws JSONException,Ends encoding the current array.
9270,android/json,com.batch.android.json,Class JSONStringer,public JSONStringer object() throws JSONException,Begins encoding a new object. Each call to this method must be paired with a call to endObject().
9271,android/json,com.batch.android.json,Class JSONStringer,public JSONStringer endObject() throws JSONException,Ends encoding the current object.
9272,android/json,com.batch.android.json,Class JSONStringer,public JSONStringer value(java.lang.Object value) throws JSONException,Encodes value.
9273,android/json,com.batch.android.json,Class JSONStringer,public JSONStringer value(boolean value) throws JSONException,Encodes value to this stringer.
9274,android/json,com.batch.android.json,Class JSONStringer,public JSONStringer value(double value) throws JSONException,Encodes value to this stringer.
9275,android/json,com.batch.android.json,Class JSONStringer,public JSONStringer value(long value) throws JSONException,Encodes value to this stringer.
9276,android/json,com.batch.android.json,Class JSONStringer,public JSONStringer key(java.lang.String name) throws JSONException,Encodes the key (property name) to this stringer.
9277,android/json,com.batch.android.json,Class JSONTokener,public java.lang.Object nextValue() throws JSONException,Returns the next value from the input.
9278,android/json,com.batch.android.json,Class JSONTokener,public java.lang.String nextString(char quote) throws JSONException,"Returns the string up to but not including quote, unescaping any character escape sequences encountered along the way. The opening quote should have already been read. This consumes the closing quote, but does not include it in the returned string."
9279,android/json,com.batch.android.json,Class JSONTokener,public JSONException syntaxError(java.lang.String message),Returns an exception containing the given message plus the current position and the entire input string.
9280,android/json,com.batch.android.json,Class JSONTokener,public java.lang.String toString(),Returns the current position and the entire input string.
9281,android/json,com.batch.android.json,Class JSONTokener,public boolean more(),Returns true until the input has been exhausted.
9282,android/json,com.batch.android.json,Class JSONTokener,public char next(),"Returns the next available character, or the null character '\0' if all input has been exhausted. The return value of this method is ambiguous for JSON strings that contain the character '\0'."
9283,android/json,com.batch.android.json,Class JSONTokener,public char next(char c) throws JSONException,Returns the next available character if it equals c. Otherwise an exception is thrown.
9284,android/json,com.batch.android.json,Class JSONTokener,public char nextClean() throws JSONException,"Returns the next character that is not whitespace and does not belong to a comment. If the input is exhausted before such a character can be found, the null character '\0' is returned. The return value of this method is ambiguous for JSON strings that contain the character '\0'."
9285,android/json,com.batch.android.json,Class JSONTokener,public java.lang.String next(int length) throws JSONException,"Returns the next length characters of the input. The returned string shares its backing character array with this tokener's input string. If a reference to the returned string may be held indefinitely, you should use new String(result) to copy it first to avoid memory leaks."
9286,android/json,com.batch.android.json,Class JSONTokener,public java.lang.String nextTo(java.lang.String excluded),"Returns the trimmed string holding the characters up to but not including the first of: any character in excludeda newline character '\n' a carriage return '\r' The returned string shares its backing character array with this tokener's input string. If a reference to the returned string may be held indefinitely, you should use new String(result) to copy it first to avoid memory leaks."
9287,android/json,com.batch.android.json,Class JSONTokener,public java.lang.String nextTo(char excluded),Equivalent to nextTo(String.valueOf(excluded)).
9288,android/json,com.batch.android.json,Class JSONTokener,public void skipPast(java.lang.String thru),"Advances past all input up to and including the next occurrence of thru. If the remaining input doesn't contain thru, the input is exhausted."
9289,android/json,com.batch.android.json,Class JSONTokener,public char skipTo(char to),"Advances past all input up to but not including the next occurrence of to. If the remaining input doesn't contain to, the input is unchanged."
9290,android/json,com.batch.android.json,Class JSONTokener,public void back(),"Unreads the most recent character of input. If no input characters have been read, the input is unchanged."
9291,batch/android,com.batch.android,Interface LoggerDelegate,"void error(java.lang.String tag, java.lang.String msg, java.lang.Throwable t)",Send a android.util.Log#ERROR log message.
9292,batch/android,com.batch.android,Interface LoggerDelegate,"void warn(java.lang.String tag, java.lang.String msg, java.lang.Throwable t)",Send a android.util.Log#WARN log message.
9293,batch/android,com.batch.android,Interface LoggerDelegate,"void debug(java.lang.String tag, java.lang.String msg, java.lang.Throwable t)",Send a android.util.Log#DEBUG log message.
9294,batch/android,com.batch.android,Interface LoggerDelegate,"void info(java.lang.String tag, java.lang.String msg, java.lang.Throwable t)",Send a android.util.Log#INFO log message.
9295,batch/android,com.batch.android,Enum LoggerLevel,public static final LoggerLevel INTERNAL,
9296,batch/android,com.batch.android,Enum LoggerLevel,public static final LoggerLevel VERBOSE,
9297,batch/android,com.batch.android,Enum LoggerLevel,public static final LoggerLevel INFO,
9298,batch/android,com.batch.android,Enum LoggerLevel,public static final LoggerLevel WARNING,
9299,batch/android,com.batch.android,Enum LoggerLevel,public static LoggerLevel[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (LoggerLevel c : LoggerLevel.values())  System.out.println(c);"
9300,batch/android,com.batch.android,Enum LoggerLevel,public static LoggerLevel valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.The string must match exactly an identifier used to declare anenum constant in this type. (Extraneous whitespace characters are not permitted.)
9301,batch/android,com.batch.android,Class MessagingActivity,public void onCreate(Bundle savedInstanceState),
9302,batch/android,com.batch.android,Class MessagingActivity,protected void onSaveInstanceState(Bundle outState),
9303,batch/android,com.batch.android,Class MessagingActivity,protected void onStart(),
9304,batch/android,com.batch.android,Class MessagingActivity,protected void onStop(),
9305,batch/android,com.batch.android,Class MessagingActivity,protected void onDestroy(),
9306,batch/android,com.batch.android,Class MessagingActivity,public void finish(),
9307,batch/android,com.batch.android,Class MessagingActivity,public void onDialogDismiss(DialogFragment dialog),
9308,batch/android,com.batch.android,Enum PushNotificationType,public static final PushNotificationType NONE,Display no notification at all
9309,batch/android,com.batch.android,Enum PushNotificationType,public static final PushNotificationType SOUND,Add sound to the notification
9310,batch/android,com.batch.android,Enum PushNotificationType,public static final PushNotificationType VIBRATE,Add vibration to the notification
9311,batch/android,com.batch.android,Enum PushNotificationType,public static final PushNotificationType LIGHTS,Add lights to the notification (if available on the device)
9312,batch/android,com.batch.android,Enum PushNotificationType,public static PushNotificationType[] values(),"Returns an array containing the constants of this enum type, inthe order they are declared. This method may be used to iterateover the constants as follows:for (PushNotificationType c : PushNotificationType.values())  System.out.println(c);"
9313,batch/android,com.batch.android,Enum PushNotificationType,public static PushNotificationType valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.The string must match exactly an identifier used to declare anenum constant in this type. (Extraneous whitespace characters are not permitted.)
9314,batch/android,com.batch.android,Enum PushNotificationType,public static <any> fromValue(int value),
9315,batch/android,com.batch.android,Interface PushRegistrationProvider,java.lang.String getSenderID(),"Returns the Sender ID of the provider, or equivalent. For example: 8122930293"
9316,batch/android,com.batch.android,Interface PushRegistrationProvider,java.lang.String getShortname(),Returns the short name of the provider. For example: FCM.
9317,batch/android,com.batch.android,Interface PushRegistrationProvider,void checkServiceAvailability() throws PushRegistrationProviderAvailabilityException,"Is this provider installed on the device? This is the place to check if the service is installed on the device and if its version match the feature we need. This method will be called when electing the provider for the current start of the app. If not available, you should throw a PushRegistrationProviderAvailabilityException with the human-readable error message."
9318,batch/android,com.batch.android,Interface PushRegistrationProvider,void checkLibraryAvailability() throws PushRegistrationProviderAvailabilityException,"Is this provider implemented in the app? This is the place to check if the libraries are here at runtime and if the user enabled/disabled your provider. This method will be called right before requesting a push token. If not available, you should throw a PushRegistrationProviderAvailabilityException with the human-readable error message."
9319,batch/android,com.batch.android,Interface PushRegistrationProvider,java.lang.String getRegistration(),Returns the registration if possible. Some providers might not have it right away. Return null in these cases.
9320,batch/android,com.batch.android,Class UserAction,public java.lang.String getIdentifier(),
